// Open source, licenses etc.
//
// My intention for fourot is that the source code should be available to anyone for any purpose.
// According to the Open Source Initiative FAQ (https://opensource.org/faq)




// Fourot software is based in part on glpuzzle.cxx, trackball.c and trackball.h,
// all of which were downloaded from the FLTK website www.fltk.org.
// Almost none of the original code of glpuzzle.cxx, trackball.c and trackball.h remains.
//
// The Fourot GUI uses FLTK 1.3.2.
// Fourot is based in part on the work of the FLTK project (http://www.fltk.org).
//
// The 3D graphics of Fourot are created with OpenGL
// Fourot was developed on Windows Vista, using Visual Studio 2010 express

/* 
 * Fourot (c) Copyright 2016, Ray Matthews
 * ALL RIGHTS RESERVED
 * Permission to use, copy, modify, and distribute this software for
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation.
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL RAY
 * MATTHEWS BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT RAY MATTHEWS HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

// The copyright notice from glpuzzle is reproduced below:

//
// "$Id: glpuzzle.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $"
//
// OpenGL puzzle demo for the Fast Light Tool Kit (FLTK).
//
// This is a GLUT demo program to demonstrate fltk's GLUT emulation.
// Search for "fltk" to find all the changes
//
// Copyright 1998-2010 by Bill Spitzak and others.
//
// This library is free software. Distribution and use rights are outlined in
// the file "COPYING" which should have been included with this file.  If this
// file is missing or damaged, see the license at:
//
//     http://www.fltk.org/COPYING.php
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//




//#include "stdafx.h"

#include <FL/Fl.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Radio_Round_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Dial.H>

#include <FL/Fl_Output.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Window.H>

#include <FL/Fl_Sys_Menu_Bar.H>
#include <FL/Fl_Toggle_Button.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Pixmap.H>
#include <FL/Fl_Multiline_Output.H>
#include <FL/Fl_Text_Display.H>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <sys/types.h>
#include <time.h>
#include <sys/timeb.h>
#include <math.h>
#include <FL/glut.H>	// changed for fltk
#include <FL/glu.h>     // added for fltk
#include <assert.h>
#include "squarematrix.h"
#include "trackball.h"

///////////////////////////////////////+++++++++++++++ figdata

// 

float vertexTetrahedron[4][3] = { // Coordinates of vertices, in vertex order
  {    0.577350f,    0.577350f,    0.577350f }, //   0
  {    0.577350f,   -0.577350f,   -0.577350f }, //   1
  {   -0.577350f,    0.577350f,   -0.577350f }, //   2
  {   -0.577350f,   -0.577350f,    0.577350f }, //   3
};
int edgeTetrahedron[6][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    3 }, //   2
  {    1,    2 }, //   3
  {    1,    3 }, //   4
  {    2,    3 }, //   5
};
int vertToEdgeTetrahedron[4][3] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    3,    5 }, //   2
  {    2,    4,    5 }, //   3
};
int edgeToEdgeTetrahedron[6][4] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4 }, //   0
  {    0,    2,    3,    5 }, //   1
  {    0,    1,    4,    5 }, //   2
  {    0,    4,    1,    5 }, //   3
  {    0,    3,    2,    5 }, //   4
  {    1,    3,    2,    4 }, //   5
};
int faceTetrahedron[4][3] = { // Edges bordering each face, in face order
  {    0,    1,    3 }, //   0
  {    0,    2,    4 }, //   1
  {    1,    2,    5 }, //   2
  {    3,    4,    5 }, //   3
};
int edgeToFaceTetrahedron[6][2] = { // Faces on each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    2,    3 }, //   5
};
int faceToFaceTetrahedron[4][3] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3 }, //   0
  {    0,    2,    3 }, //   1
  {    0,    1,    3 }, //   2
  {    0,    1,    2 }, //   3
};
int faceToVertTetrahedron[4][3] = { // Vertices for each face, in face order
  {    0,    1,    2 }, //   0
  {    0,    3,    1 }, //   1
  {    0,    2,    3 }, //   2
  {    1,    3,    2 }, //   3
};
////////// The Edge Length of Tetrahedron is     1.632993
////////// The face Radius of Tetrahedron is     0.942809
////////// The cell Radius of Tetrahedron is     1.000000
int vertToFaceTetrahedron[4][3] = { // Faces at each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    0,    1,    3 }, //   1
  {    0,    2,    3 }, //   2
  {    1,    2,    3 }, //   3
};
float faceNormalTetrahedron[4][3] = { // Normals of faces, in face order
  {    0.577350f,    0.577350f,   -0.577350f }, //   0
  {    0.577350f,   -0.577350f,    0.577350f }, //   1
  {   -0.577350f,    0.577350f,    0.577350f }, //   2
  {   -0.577350f,   -0.577350f,   -0.577350f }, //   3
};
FigInfo infoTetrahedron = {
    3, // numDims;
    4, // numVerts;
    6, // numEdges;
    4, // numFaces;
    1, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    4, // numVertsPerCell;
    3, // numEdgesPerFace;
    6, // numEdgesPerCell;
    4, // numFacesPerCell;
    3, // numFacesPerVert;
    2, // numFacesPerEdge;
    0, // numCellsPerVert;
    1, // numCellsPerEdge;
    1, // numCellsPerFace;
    0.333333f, // dihedralCosine;
    1.000000f, // cellRadius;
    0.000000f, // cellCentreRadius;
    0.333333f, // faceCentreRadius;
(float *)vertexTetrahedron, // The vertex matrix
(int *)edgeTetrahedron, // The edge Matrix
(int *)vertToEdgeTetrahedron, // The Matrix of vertices for each edge
(int *)faceTetrahedron, // The face to edge matrix
(int *)edgeToFaceTetrahedron, // The edge to face matrix
(int *)faceToVertTetrahedron, // The face to vert matrix
(int *)vertToFaceTetrahedron, // Vertex to face matrix
(int *)0, // Face to cell matrix (used in 4D)
(float *)faceNormalTetrahedron, // The normal of a face (used in 3D)
(int *)0,  // The cell matrix
(float *)0, // The normal of a 4D cell
(int *)0 // Pointer to the edges per cell (number of cells X edges per cell)
};
float vertexCube[8][3] = { // Coordinates of vertices, in vertex order
  {    0.577350f,    0.577350f,    0.577350f }, //   0
  {    0.577350f,    0.577350f,   -0.577350f }, //   1
  {    0.577350f,   -0.577350f,    0.577350f }, //   2
  {    0.577350f,   -0.577350f,   -0.577350f }, //   3
  {   -0.577350f,    0.577350f,    0.577350f }, //   4
  {   -0.577350f,    0.577350f,   -0.577350f }, //   5
  {   -0.577350f,   -0.577350f,    0.577350f }, //   6
  {   -0.577350f,   -0.577350f,   -0.577350f }, //   7
};
int edgeCube[12][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    4 }, //   2
  {    1,    3 }, //   3
  {    1,    5 }, //   4
  {    2,    3 }, //   5
  {    2,    6 }, //   6
  {    3,    7 }, //   7
  {    4,    5 }, //   8
  {    4,    6 }, //   9
  {    5,    7 }, //  10
  {    6,    7 }, //  11
};
int vertToEdgeCube[8][3] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    5,    6 }, //   2
  {    3,    5,    7 }, //   3
  {    2,    8,    9 }, //   4
  {    4,    8,   10 }, //   5
  {    6,    9,   11 }, //   6
  {    7,   10,   11 }, //   7
};
int edgeToEdgeCube[12][4] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4 }, //   0
  {    0,    2,    5,    6 }, //   1
  {    0,    1,    8,    9 }, //   2
  {    0,    4,    5,    7 }, //   3
  {    0,    3,    8,   10 }, //   4
  {    1,    6,    3,    7 }, //   5
  {    1,    5,    9,   11 }, //   6
  {    3,    5,   10,   11 }, //   7
  {    2,    9,    4,   10 }, //   8
  {    2,    8,    6,   11 }, //   9
  {    4,    8,    7,   11 }, //  10
  {    6,    9,    7,   10 }, //  11
};
int faceCube[6][4] = { // Edges bordering each face, in face order
  {    0,    1,    5,    3 }, //   0
  {    0,    2,    8,    4 }, //   1
  {    1,    2,    9,    6 }, //   2
  {    3,    4,   10,    7 }, //   3
  {    5,    6,   11,    7 }, //   4
  {    8,    9,   11,   10 }, //   5
};
int edgeToFaceCube[12][2] = { // Faces on each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    0,    4 }, //   5
  {    2,    4 }, //   6
  {    3,    4 }, //   7
  {    1,    5 }, //   8
  {    2,    5 }, //   9
  {    3,    5 }, //  10
  {    4,    5 }, //  11
};
int faceToFaceCube[6][4] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    4,    3 }, //   0
  {    0,    2,    5,    3 }, //   1
  {    0,    1,    5,    4 }, //   2
  {    0,    1,    5,    4 }, //   3
  {    0,    2,    5,    3 }, //   4
  {    1,    2,    4,    3 }, //   5
};
int faceToVertCube[6][4] = { // Vertices for each face, in face order
  {    0,    2,    3,    1 }, //   0
  {    0,    1,    5,    4 }, //   1
  {    0,    4,    6,    2 }, //   2
  {    1,    3,    7,    5 }, //   3
  {    2,    6,    7,    3 }, //   4
  {    4,    5,    7,    6 }, //   5
};
////////// The Edge Length of Cube is     1.154701
////////// The face Radius of Cube is     0.816497
////////// The cell Radius of Cube is     1.000000
int vertToFaceCube[8][3] = { // Faces at each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    0,    1,    3 }, //   1
  {    0,    2,    4 }, //   2
  {    0,    3,    4 }, //   3
  {    1,    2,    5 }, //   4
  {    1,    3,    5 }, //   5
  {    2,    4,    5 }, //   6
  {    3,    4,    5 }, //   7
};
float faceNormalCube[6][3] = { // Normals of faces, in face order
  {    1.000000f,    0.000000f,    0.000000f }, //   0
  {    0.000000f,    1.000000f,    0.000000f }, //   1
  {    0.000000f,    0.000000f,    1.000000f }, //   2
  {    0.000000f,    0.000000f,   -1.000000f }, //   3
  {    0.000000f,   -1.000000f,    0.000000f }, //   4
  {   -1.000000f,    0.000000f,    0.000000f }, //   5
};
FigInfo infoCube = {
    3, // numDims;
    8, // numVerts;
   12, // numEdges;
    6, // numFaces;
    1, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    8, // numVertsPerCell;
    4, // numEdgesPerFace;
   12, // numEdgesPerCell;
    6, // numFacesPerCell;
    3, // numFacesPerVert;
    2, // numFacesPerEdge;
    0, // numCellsPerVert;
    1, // numCellsPerEdge;
    1, // numCellsPerFace;
    0.000000f, // dihedralCosine;
    1.000000f, // cellRadius;
    0.000000f, // cellCentreRadius;
    0.577350f, // faceCentreRadius;
(float *)vertexCube, // The vertex matrix
(int *)edgeCube, // The edge Matrix
(int *)vertToEdgeCube, // The Matrix of vertices for each edge
(int *)faceCube, // The face to edge matrix
(int *)edgeToFaceCube, // The edge to face matrix
(int *)faceToVertCube, // The face to vert matrix
(int *)vertToFaceCube, // Vertex to face matrix
(int *)0, // Face to cell matrix (used in 4D)
(float *)faceNormalCube, // The normal of a face (used in 3D)
(int *)0,  // The cell matrix
(float *)0, // The normal of a 4D cell
(int *)0 // Pointer to the edges per cell (number of cells X edges per cell)
};
float vertexOctahedron[6][3] = { // Coordinates of vertices, in vertex order
  {    0.000000f,    0.000000f,    1.000000f }, //   0
  {    0.000000f,    1.000000f,    0.000000f }, //   1
  {    1.000000f,    0.000000f,    0.000000f }, //   2
  {   -1.000000f,    0.000000f,    0.000000f }, //   3
  {    0.000000f,   -1.000000f,    0.000000f }, //   4
  {    0.000000f,    0.000000f,   -1.000000f }, //   5
};
int edgeOctahedron[12][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    3 }, //   2
  {    0,    4 }, //   3
  {    1,    2 }, //   4
  {    1,    3 }, //   5
  {    1,    5 }, //   6
  {    2,    4 }, //   7
  {    2,    5 }, //   8
  {    3,    4 }, //   9
  {    3,    5 }, //  10
  {    4,    5 }, //  11
};
int vertToEdgeOctahedron[6][4] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3 }, //   0
  {    0,    4,    5,    6 }, //   1
  {    1,    4,    7,    8 }, //   2
  {    2,    5,    9,   10 }, //   3
  {    3,    7,    9,   11 }, //   4
  {    6,    8,   10,   11 }, //   5
};
int edgeToEdgeOctahedron[12][6] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6 }, //   0
  {    0,    2,    3,    4,    7,    8 }, //   1
  {    0,    1,    3,    5,    9,   10 }, //   2
  {    0,    1,    2,    7,    9,   11 }, //   3
  {    0,    5,    6,    1,    7,    8 }, //   4
  {    0,    4,    6,    2,    9,   10 }, //   5
  {    0,    4,    5,    8,   10,   11 }, //   6
  {    1,    4,    8,    3,    9,   11 }, //   7
  {    1,    4,    7,    6,   10,   11 }, //   8
  {    2,    5,   10,    3,    7,   11 }, //   9
  {    2,    5,    9,    6,    8,   11 }, //  10
  {    3,    7,    9,    6,    8,   10 }, //  11
};
int faceOctahedron[8][3] = { // Edges bordering each face, in face order
  {    0,    1,    4 }, //   0
  {    0,    2,    5 }, //   1
  {    1,    3,    7 }, //   2
  {    2,    3,    9 }, //   3
  {    4,    6,    8 }, //   4
  {    5,    6,   10 }, //   5
  {    7,    8,   11 }, //   6
  {    9,   10,   11 }, //   7
};
int edgeToFaceOctahedron[12][2] = { // Faces on each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    3 }, //   2
  {    2,    3 }, //   3
  {    0,    4 }, //   4
  {    1,    5 }, //   5
  {    4,    5 }, //   6
  {    2,    6 }, //   7
  {    4,    6 }, //   8
  {    3,    7 }, //   9
  {    5,    7 }, //  10
  {    6,    7 }, //  11
};
int faceToFaceOctahedron[8][3] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    4 }, //   0
  {    0,    3,    5 }, //   1
  {    0,    3,    6 }, //   2
  {    1,    2,    7 }, //   3
  {    0,    5,    6 }, //   4
  {    1,    4,    7 }, //   5
  {    2,    4,    7 }, //   6
  {    3,    5,    6 }, //   7
};
int faceToVertOctahedron[8][3] = { // Vertices for each face, in face order
  {    0,    2,    1 }, //   0
  {    0,    1,    3 }, //   1
  {    0,    4,    2 }, //   2
  {    0,    3,    4 }, //   3
  {    1,    2,    5 }, //   4
  {    1,    5,    3 }, //   5
  {    2,    4,    5 }, //   6
  {    3,    5,    4 }, //   7
};
////////// The Edge Length of Octahedron is     1.414214
////////// The face Radius of Octahedron is     0.816497
////////// The cell Radius of Octahedron is     1.000000
int vertToFaceOctahedron[6][4] = { // Faces at each vertex, in vertex order
  {    0,    1,    2,    3 }, //   0
  {    0,    1,    4,    5 }, //   1
  {    0,    2,    4,    6 }, //   2
  {    1,    3,    5,    7 }, //   3
  {    2,    3,    6,    7 }, //   4
  {    4,    5,    6,    7 }, //   5
};
float faceNormalOctahedron[8][3] = { // Normals of faces, in face order
  {    0.577350f,    0.577350f,    0.577350f }, //   0
  {   -0.577350f,    0.577350f,    0.577350f }, //   1
  {    0.577350f,   -0.577350f,    0.577350f }, //   2
  {   -0.577350f,   -0.577350f,    0.577350f }, //   3
  {    0.577350f,    0.577350f,   -0.577350f }, //   4
  {   -0.577350f,    0.577350f,   -0.577350f }, //   5
  {    0.577350f,   -0.577350f,   -0.577350f }, //   6
  {   -0.577350f,   -0.577350f,   -0.577350f }, //   7
};
FigInfo infoOctahedron = {
    3, // numDims;
    6, // numVerts;
   12, // numEdges;
    8, // numFaces;
    1, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    6, // numVertsPerCell;
    3, // numEdgesPerFace;
   12, // numEdgesPerCell;
    8, // numFacesPerCell;
    4, // numFacesPerVert;
    2, // numFacesPerEdge;
    0, // numCellsPerVert;
    1, // numCellsPerEdge;
    1, // numCellsPerFace;
   -0.333333f, // dihedralCosine;
    1.000000f, // cellRadius;
    0.000000f, // cellCentreRadius;
    0.577350f, // faceCentreRadius;
(float *)vertexOctahedron, // The vertex matrix
(int *)edgeOctahedron, // The edge Matrix
(int *)vertToEdgeOctahedron, // The Matrix of vertices for each edge
(int *)faceOctahedron, // The face to edge matrix
(int *)edgeToFaceOctahedron, // The edge to face matrix
(int *)faceToVertOctahedron, // The face to vert matrix
(int *)vertToFaceOctahedron, // Vertex to face matrix
(int *)0, // Face to cell matrix (used in 4D)
(float *)faceNormalOctahedron, // The normal of a face (used in 3D)
(int *)0,  // The cell matrix
(float *)0, // The normal of a 4D cell
(int *)0 // Pointer to the edges per cell (number of cells X edges per cell)
};
float vertexDodecahedron[20][3] = { // Coordinates of vertices, in vertex order
  {    0.577350f,    0.577350f,    0.577350f }, //   0
  {    0.577350f,    0.577350f,   -0.577350f }, //   1
  {    0.577350f,   -0.577350f,    0.577350f }, //   2
  {    0.577350f,   -0.577350f,   -0.577350f }, //   3
  {   -0.577350f,    0.577350f,    0.577350f }, //   4
  {   -0.577350f,    0.577350f,   -0.577350f }, //   5
  {   -0.577350f,   -0.577350f,    0.577350f }, //   6
  {   -0.577350f,   -0.577350f,   -0.577350f }, //   7
  {    0.000000f,    0.356822f,    0.934172f }, //   8
  {    0.000000f,    0.356822f,   -0.934172f }, //   9
  {    0.000000f,   -0.356822f,    0.934172f }, //  10
  {    0.000000f,   -0.356822f,   -0.934172f }, //  11
  {    0.356822f,    0.934172f,    0.000000f }, //  12
  {    0.356822f,   -0.934172f,    0.000000f }, //  13
  {   -0.356822f,    0.934172f,    0.000000f }, //  14
  {   -0.356822f,   -0.934172f,    0.000000f }, //  15
  {    0.934172f,    0.000000f,    0.356822f }, //  16
  {    0.934172f,    0.000000f,   -0.356822f }, //  17
  {   -0.934172f,    0.000000f,    0.356822f }, //  18
  {   -0.934172f,    0.000000f,   -0.356822f }, //  19
};
int edgeDodecahedron[30][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    8 }, //   0
  {    0,   12 }, //   1
  {    0,   16 }, //   2
  {    1,    9 }, //   3
  {    1,   12 }, //   4
  {    1,   17 }, //   5
  {    2,   10 }, //   6
  {    2,   13 }, //   7
  {    2,   16 }, //   8
  {    3,   11 }, //   9
  {    3,   13 }, //  10
  {    3,   17 }, //  11
  {    4,    8 }, //  12
  {    4,   14 }, //  13
  {    4,   18 }, //  14
  {    5,    9 }, //  15
  {    5,   14 }, //  16
  {    5,   19 }, //  17
  {    6,   10 }, //  18
  {    6,   15 }, //  19
  {    6,   18 }, //  20
  {    7,   11 }, //  21
  {    7,   15 }, //  22
  {    7,   19 }, //  23
  {    8,   10 }, //  24
  {    9,   11 }, //  25
  {   12,   14 }, //  26
  {   13,   15 }, //  27
  {   16,   17 }, //  28
  {   18,   19 }, //  29
};
int vertToEdgeDodecahedron[20][3] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    3,    4,    5 }, //   1
  {    6,    7,    8 }, //   2
  {    9,   10,   11 }, //   3
  {   12,   13,   14 }, //   4
  {   15,   16,   17 }, //   5
  {   18,   19,   20 }, //   6
  {   21,   22,   23 }, //   7
  {    0,   12,   24 }, //   8
  {    3,   15,   25 }, //   9
  {    6,   18,   24 }, //  10
  {    9,   21,   25 }, //  11
  {    1,    4,   26 }, //  12
  {    7,   10,   27 }, //  13
  {   13,   16,   26 }, //  14
  {   19,   22,   27 }, //  15
  {    2,    8,   28 }, //  16
  {    5,   11,   28 }, //  17
  {   14,   20,   29 }, //  18
  {   17,   23,   29 }, //  19
};
int edgeToEdgeDodecahedron[30][4] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,   12,   24 }, //   0
  {    0,    2,    4,   26 }, //   1
  {    0,    1,    8,   28 }, //   2
  {    4,    5,   15,   25 }, //   3
  {    3,    5,    1,   26 }, //   4
  {    3,    4,   11,   28 }, //   5
  {    7,    8,   18,   24 }, //   6
  {    6,    8,   10,   27 }, //   7
  {    6,    7,    2,   28 }, //   8
  {   10,   11,   21,   25 }, //   9
  {    9,   11,    7,   27 }, //  10
  {    9,   10,    5,   28 }, //  11
  {   13,   14,    0,   24 }, //  12
  {   12,   14,   16,   26 }, //  13
  {   12,   13,   20,   29 }, //  14
  {   16,   17,    3,   25 }, //  15
  {   15,   17,   13,   26 }, //  16
  {   15,   16,   23,   29 }, //  17
  {   19,   20,    6,   24 }, //  18
  {   18,   20,   22,   27 }, //  19
  {   18,   19,   14,   29 }, //  20
  {   22,   23,    9,   25 }, //  21
  {   21,   23,   19,   27 }, //  22
  {   21,   22,   17,   29 }, //  23
  {    0,   12,    6,   18 }, //  24
  {    3,   15,    9,   21 }, //  25
  {    1,    4,   13,   16 }, //  26
  {    7,   10,   19,   22 }, //  27
  {    2,    8,    5,   11 }, //  28
  {   14,   20,   17,   23 }, //  29
};
int faceDodecahedron[12][5] = { // Edges bordering each face, in face order
  {    0,    1,   26,   13,   12 }, //   0
  {    0,    2,    8,    6,   24 }, //   1
  {    1,    2,   28,    5,    4 }, //   2
  {    3,    4,   26,   16,   15 }, //   3
  {    3,    5,   11,    9,   25 }, //   4
  {    6,    7,   27,   19,   18 }, //   5
  {    7,    8,   28,   11,   10 }, //   6
  {    9,   10,   27,   22,   21 }, //   7
  {   12,   14,   20,   18,   24 }, //   8
  {   13,   14,   29,   17,   16 }, //   9
  {   15,   17,   23,   21,   25 }, //  10
  {   19,   20,   29,   23,   22 }, //  11
};
int edgeToFaceDodecahedron[30][2] = { // Faces on each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    3,    4 }, //   3
  {    2,    3 }, //   4
  {    2,    4 }, //   5
  {    1,    5 }, //   6
  {    5,    6 }, //   7
  {    1,    6 }, //   8
  {    4,    7 }, //   9
  {    6,    7 }, //  10
  {    4,    6 }, //  11
  {    0,    8 }, //  12
  {    0,    9 }, //  13
  {    8,    9 }, //  14
  {    3,   10 }, //  15
  {    3,    9 }, //  16
  {    9,   10 }, //  17
  {    5,    8 }, //  18
  {    5,   11 }, //  19
  {    8,   11 }, //  20
  {    7,   10 }, //  21
  {    7,   11 }, //  22
  {   10,   11 }, //  23
  {    1,    8 }, //  24
  {    4,   10 }, //  25
  {    0,    3 }, //  26
  {    5,    7 }, //  27
  {    2,    6 }, //  28
  {    9,   11 }, //  29
};
int faceToFaceDodecahedron[12][5] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    9,    8 }, //   0
  {    0,    2,    6,    5,    8 }, //   1
  {    0,    1,    6,    4,    3 }, //   2
  {    4,    2,    0,    9,   10 }, //   3
  {    3,    2,    6,    7,   10 }, //   4
  {    1,    6,    7,   11,    8 }, //   5
  {    5,    1,    2,    4,    7 }, //   6
  {    4,    6,    5,   11,   10 }, //   7
  {    0,    9,   11,    5,    1 }, //   8
  {    0,    8,   11,   10,    3 }, //   9
  {    3,    9,   11,    7,    4 }, //  10
  {    5,    8,    9,   10,    7 }, //  11
};
int faceToVertDodecahedron[12][5] = { // Vertices for each face, in face order
  {    0,   12,   14,    4,    8 }, //   0
  {    0,    8,   10,    2,   16 }, //   1
  {    0,   16,   17,    1,   12 }, //   2
  {    1,    9,    5,   14,   12 }, //   3
  {    1,   17,    3,   11,    9 }, //   4
  {    2,   10,    6,   15,   13 }, //   5
  {    2,   13,    3,   17,   16 }, //   6
  {    3,   13,   15,    7,   11 }, //   7
  {    4,   18,    6,   10,    8 }, //   8
  {    4,   14,    5,   19,   18 }, //   9
  {    5,    9,   11,    7,   19 }, //  10
  {    6,   18,   19,    7,   15 }, //  11
};
////////// The Edge Length of Dodecahedron is     0.713644
////////// The face Radius of Dodecahedron is     0.607062
////////// The cell Radius of Dodecahedron is     1.000000
int vertToFaceDodecahedron[20][3] = { // Faces at each vertex, in vertex order
  {    0,    1,    2 }, //   0
  {    2,    3,    4 }, //   1
  {    1,    5,    6 }, //   2
  {    4,    6,    7 }, //   3
  {    0,    8,    9 }, //   4
  {    3,    9,   10 }, //   5
  {    5,    8,   11 }, //   6
  {    7,   10,   11 }, //   7
  {    0,    1,    8 }, //   8
  {    3,    4,   10 }, //   9
  {    1,    5,    8 }, //  10
  {    4,    7,   10 }, //  11
  {    0,    2,    3 }, //  12
  {    5,    6,    7 }, //  13
  {    0,    3,    9 }, //  14
  {    5,    7,   11 }, //  15
  {    1,    2,    6 }, //  16
  {    2,    4,    6 }, //  17
  {    8,    9,   11 }, //  18
  {    9,   10,   11 }, //  19
};
float faceNormalDodecahedron[12][3] = { // Normals of faces, in face order
  {    0.000000f,    0.850651f,    0.525731f }, //   0
  {    0.525731f,    0.000000f,    0.850651f }, //   1
  {    0.850651f,    0.525731f,    0.000000f }, //   2
  {    0.000000f,    0.850651f,   -0.525731f }, //   3
  {    0.525731f,    0.000000f,   -0.850651f }, //   4
  {    0.000000f,   -0.850651f,    0.525731f }, //   5
  {    0.850651f,   -0.525731f,    0.000000f }, //   6
  {    0.000000f,   -0.850651f,   -0.525731f }, //   7
  {   -0.525731f,    0.000000f,    0.850651f }, //   8
  {   -0.850651f,    0.525731f,    0.000000f }, //   9
  {   -0.525731f,    0.000000f,   -0.850651f }, //  10
  {   -0.850651f,   -0.525731f,    0.000000f }, //  11
};
FigInfo infoDodecahedron = {
    3, // numDims;
   20, // numVerts;
   30, // numEdges;
   12, // numFaces;
    1, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
   20, // numVertsPerCell;
    5, // numEdgesPerFace;
   30, // numEdgesPerCell;
   12, // numFacesPerCell;
    3, // numFacesPerVert;
    2, // numFacesPerEdge;
    0, // numCellsPerVert;
    1, // numCellsPerEdge;
    1, // numCellsPerFace;
   -0.447214f, // dihedralCosine;
    1.000000f, // cellRadius;
    0.000000f, // cellCentreRadius;
    0.794654f, // faceCentreRadius;
(float *)vertexDodecahedron, // The vertex matrix
(int *)edgeDodecahedron, // The edge Matrix
(int *)vertToEdgeDodecahedron, // The Matrix of vertices for each edge
(int *)faceDodecahedron, // The face to edge matrix
(int *)edgeToFaceDodecahedron, // The edge to face matrix
(int *)faceToVertDodecahedron, // The face to vert matrix
(int *)vertToFaceDodecahedron, // Vertex to face matrix
(int *)0, // Face to cell matrix (used in 4D)
(float *)faceNormalDodecahedron, // The normal of a face (used in 3D)
(int *)0,  // The cell matrix
(float *)0, // The normal of a 4D cell
(int *)0 // Pointer to the edges per cell (number of cells X edges per cell)
};
float vertexIcosahedron[12][3] = { // Coordinates of vertices, in vertex order
  {    0.000000f,    0.525731f,    0.850651f }, //   0
  {    0.000000f,    0.525731f,   -0.850651f }, //   1
  {    0.000000f,   -0.525731f,    0.850651f }, //   2
  {    0.000000f,   -0.525731f,   -0.850651f }, //   3
  {    0.525731f,    0.850651f,    0.000000f }, //   4
  {    0.525731f,   -0.850651f,    0.000000f }, //   5
  {   -0.525731f,    0.850651f,    0.000000f }, //   6
  {   -0.525731f,   -0.850651f,    0.000000f }, //   7
  {    0.850651f,    0.000000f,    0.525731f }, //   8
  {    0.850651f,    0.000000f,   -0.525731f }, //   9
  {   -0.850651f,    0.000000f,    0.525731f }, //  10
  {   -0.850651f,    0.000000f,   -0.525731f }, //  11
};
int edgeIcosahedron[30][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    2 }, //   0
  {    0,    4 }, //   1
  {    0,    6 }, //   2
  {    0,    8 }, //   3
  {    0,   10 }, //   4
  {    1,    3 }, //   5
  {    1,    4 }, //   6
  {    1,    6 }, //   7
  {    1,    9 }, //   8
  {    1,   11 }, //   9
  {    2,    5 }, //  10
  {    2,    7 }, //  11
  {    2,    8 }, //  12
  {    2,   10 }, //  13
  {    3,    5 }, //  14
  {    3,    7 }, //  15
  {    3,    9 }, //  16
  {    3,   11 }, //  17
  {    4,    6 }, //  18
  {    4,    8 }, //  19
  {    4,    9 }, //  20
  {    5,    7 }, //  21
  {    5,    8 }, //  22
  {    5,    9 }, //  23
  {    6,   10 }, //  24
  {    6,   11 }, //  25
  {    7,   10 }, //  26
  {    7,   11 }, //  27
  {    8,    9 }, //  28
  {   10,   11 }, //  29
};
int vertToEdgeIcosahedron[12][5] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3,    4 }, //   0
  {    5,    6,    7,    8,    9 }, //   1
  {    0,   10,   11,   12,   13 }, //   2
  {    5,   14,   15,   16,   17 }, //   3
  {    1,    6,   18,   19,   20 }, //   4
  {   10,   14,   21,   22,   23 }, //   5
  {    2,    7,   18,   24,   25 }, //   6
  {   11,   15,   21,   26,   27 }, //   7
  {    3,   12,   19,   22,   28 }, //   8
  {    8,   16,   20,   23,   28 }, //   9
  {    4,   13,   24,   26,   29 }, //  10
  {    9,   17,   25,   27,   29 }, //  11
};
int edgeToEdgeIcosahedron[30][8] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,   10,   11,   12,   13 }, //   0
  {    0,    2,    3,    4,    6,   18,   19,   20 }, //   1
  {    0,    1,    3,    4,    7,   18,   24,   25 }, //   2
  {    0,    1,    2,    4,   12,   19,   22,   28 }, //   3
  {    0,    1,    2,    3,   13,   24,   26,   29 }, //   4
  {    6,    7,    8,    9,   14,   15,   16,   17 }, //   5
  {    5,    7,    8,    9,    1,   18,   19,   20 }, //   6
  {    5,    6,    8,    9,    2,   18,   24,   25 }, //   7
  {    5,    6,    7,    9,   16,   20,   23,   28 }, //   8
  {    5,    6,    7,    8,   17,   25,   27,   29 }, //   9
  {    0,   11,   12,   13,   14,   21,   22,   23 }, //  10
  {    0,   10,   12,   13,   15,   21,   26,   27 }, //  11
  {    0,   10,   11,   13,    3,   19,   22,   28 }, //  12
  {    0,   10,   11,   12,    4,   24,   26,   29 }, //  13
  {    5,   15,   16,   17,   10,   21,   22,   23 }, //  14
  {    5,   14,   16,   17,   11,   21,   26,   27 }, //  15
  {    5,   14,   15,   17,    8,   20,   23,   28 }, //  16
  {    5,   14,   15,   16,    9,   25,   27,   29 }, //  17
  {    1,    6,   19,   20,    2,    7,   24,   25 }, //  18
  {    1,    6,   18,   20,    3,   12,   22,   28 }, //  19
  {    1,    6,   18,   19,    8,   16,   23,   28 }, //  20
  {   10,   14,   22,   23,   11,   15,   26,   27 }, //  21
  {   10,   14,   21,   23,    3,   12,   19,   28 }, //  22
  {   10,   14,   21,   22,    8,   16,   20,   28 }, //  23
  {    2,    7,   18,   25,    4,   13,   26,   29 }, //  24
  {    2,    7,   18,   24,    9,   17,   27,   29 }, //  25
  {   11,   15,   21,   27,    4,   13,   24,   29 }, //  26
  {   11,   15,   21,   26,    9,   17,   25,   29 }, //  27
  {    3,   12,   19,   22,    8,   16,   20,   23 }, //  28
  {    4,   13,   24,   26,    9,   17,   25,   27 }, //  29
};
int faceIcosahedron[20][3] = { // Edges bordering each face, in face order
  {    0,    3,   12 }, //   0
  {    0,    4,   13 }, //   1
  {    1,    2,   18 }, //   2
  {    1,    3,   19 }, //   3
  {    2,    4,   24 }, //   4
  {    5,    8,   16 }, //   5
  {    5,    9,   17 }, //   6
  {    6,    7,   18 }, //   7
  {    6,    8,   20 }, //   8
  {    7,    9,   25 }, //   9
  {   10,   11,   21 }, //  10
  {   10,   12,   22 }, //  11
  {   11,   13,   26 }, //  12
  {   14,   15,   21 }, //  13
  {   14,   16,   23 }, //  14
  {   15,   17,   27 }, //  15
  {   19,   20,   28 }, //  16
  {   22,   23,   28 }, //  17
  {   24,   25,   29 }, //  18
  {   26,   27,   29 }, //  19
};
int edgeToFaceIcosahedron[30][2] = { // Faces on each edge, in edge order
  {    0,    1 }, //   0
  {    2,    3 }, //   1
  {    2,    4 }, //   2
  {    0,    3 }, //   3
  {    1,    4 }, //   4
  {    5,    6 }, //   5
  {    7,    8 }, //   6
  {    7,    9 }, //   7
  {    5,    8 }, //   8
  {    6,    9 }, //   9
  {   10,   11 }, //  10
  {   10,   12 }, //  11
  {    0,   11 }, //  12
  {    1,   12 }, //  13
  {   13,   14 }, //  14
  {   13,   15 }, //  15
  {    5,   14 }, //  16
  {    6,   15 }, //  17
  {    2,    7 }, //  18
  {    3,   16 }, //  19
  {    8,   16 }, //  20
  {   10,   13 }, //  21
  {   11,   17 }, //  22
  {   14,   17 }, //  23
  {    4,   18 }, //  24
  {    9,   18 }, //  25
  {   12,   19 }, //  26
  {   15,   19 }, //  27
  {   16,   17 }, //  28
  {   18,   19 }, //  29
};
int faceToFaceIcosahedron[20][3] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    3,   11 }, //   0
  {    0,    4,   12 }, //   1
  {    3,    4,    7 }, //   2
  {    2,    0,   16 }, //   3
  {    2,    1,   18 }, //   4
  {    6,    8,   14 }, //   5
  {    5,    9,   15 }, //   6
  {    8,    9,    2 }, //   7
  {    7,    5,   16 }, //   8
  {    7,    6,   18 }, //   9
  {   11,   12,   13 }, //  10
  {   10,    0,   17 }, //  11
  {   10,    1,   19 }, //  12
  {   14,   15,   10 }, //  13
  {   13,    5,   17 }, //  14
  {   13,    6,   19 }, //  15
  {    3,    8,   17 }, //  16
  {   11,   14,   16 }, //  17
  {    4,    9,   19 }, //  18
  {   12,   15,   18 }, //  19
};
int faceToVertIcosahedron[20][3] = { // Vertices for each face, in face order
  {    0,    2,    8 }, //   0
  {    0,   10,    2 }, //   1
  {    0,    4,    6 }, //   2
  {    0,    8,    4 }, //   3
  {    0,    6,   10 }, //   4
  {    1,    9,    3 }, //   5
  {    1,    3,   11 }, //   6
  {    1,    6,    4 }, //   7
  {    1,    4,    9 }, //   8
  {    1,   11,    6 }, //   9
  {    2,    7,    5 }, //  10
  {    2,    5,    8 }, //  11
  {    2,   10,    7 }, //  12
  {    3,    5,    7 }, //  13
  {    3,    9,    5 }, //  14
  {    3,    7,   11 }, //  15
  {    4,    8,    9 }, //  16
  {    5,    9,    8 }, //  17
  {    6,   11,   10 }, //  18
  {    7,   10,   11 }, //  19
};
////////// The Edge Length of Icosahedron is     1.051462
////////// The face Radius of Icosahedron is     0.607062
////////// The cell Radius of Icosahedron is     1.000000
int vertToFaceIcosahedron[12][5] = { // Faces at each vertex, in vertex order
  {    0,    1,    2,    3,    4 }, //   0
  {    5,    6,    7,    8,    9 }, //   1
  {    0,    1,   10,   11,   12 }, //   2
  {    5,    6,   13,   14,   15 }, //   3
  {    2,    3,    7,    8,   16 }, //   4
  {   10,   11,   13,   14,   17 }, //   5
  {    2,    4,    7,    9,   18 }, //   6
  {   10,   12,   13,   15,   19 }, //   7
  {    0,    3,   11,   16,   17 }, //   8
  {    5,    8,   14,   16,   17 }, //   9
  {    1,    4,   12,   18,   19 }, //  10
  {    6,    9,   15,   18,   19 }, //  11
};
float faceNormalIcosahedron[20][3] = { // Normals of faces, in face order
  {    0.356822f,    0.000000f,    0.934172f }, //   0
  {   -0.356822f,    0.000000f,    0.934172f }, //   1
  {    0.000000f,    0.934172f,    0.356822f }, //   2
  {    0.577350f,    0.577350f,    0.577350f }, //   3
  {   -0.577350f,    0.577350f,    0.577350f }, //   4
  {    0.356822f,    0.000000f,   -0.934172f }, //   5
  {   -0.356822f,    0.000000f,   -0.934172f }, //   6
  {    0.000000f,    0.934172f,   -0.356822f }, //   7
  {    0.577350f,    0.577350f,   -0.577350f }, //   8
  {   -0.577350f,    0.577350f,   -0.577350f }, //   9
  {    0.000000f,   -0.934172f,    0.356822f }, //  10
  {    0.577350f,   -0.577350f,    0.577350f }, //  11
  {   -0.577350f,   -0.577350f,    0.577350f }, //  12
  {    0.000000f,   -0.934172f,   -0.356822f }, //  13
  {    0.577350f,   -0.577350f,   -0.577350f }, //  14
  {   -0.577350f,   -0.577350f,   -0.577350f }, //  15
  {    0.934172f,    0.356822f,    0.000000f }, //  16
  {    0.934172f,   -0.356822f,    0.000000f }, //  17
  {   -0.934172f,    0.356822f,    0.000000f }, //  18
  {   -0.934172f,   -0.356822f,    0.000000f }, //  19
};
FigInfo infoIcosahedron = {
    3, // numDims;
   12, // numVerts;
   30, // numEdges;
   20, // numFaces;
    1, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
   12, // numVertsPerCell;
    3, // numEdgesPerFace;
   30, // numEdgesPerCell;
   20, // numFacesPerCell;
    5, // numFacesPerVert;
    2, // numFacesPerEdge;
    0, // numCellsPerVert;
    1, // numCellsPerEdge;
    1, // numCellsPerFace;
   -0.745356f, // dihedralCosine;
    1.000000f, // cellRadius;
    0.000000f, // cellCentreRadius;
    0.794654f, // faceCentreRadius;
(float *)vertexIcosahedron, // The vertex matrix
(int *)edgeIcosahedron, // The edge Matrix
(int *)vertToEdgeIcosahedron, // The Matrix of vertices for each edge
(int *)faceIcosahedron, // The face to edge matrix
(int *)edgeToFaceIcosahedron, // The edge to face matrix
(int *)faceToVertIcosahedron, // The face to vert matrix
(int *)vertToFaceIcosahedron, // Vertex to face matrix
(int *)0, // Face to cell matrix (used in 4D)
(float *)faceNormalIcosahedron, // The normal of a face (used in 3D)
(int *)0,  // The cell matrix
(float *)0, // The normal of a 4D cell
(int *)0 // Pointer to the edges per cell (number of cells X edges per cell)
};
float vertexK005[5][4] = { // Coordinates of vertices, in vertex order
  {    0.250000f,    0.322749f,    0.456435f,    0.790569f }, //   0
  {    0.250000f,    0.322749f,    0.456435f,   -0.790569f }, //   1
  {    0.250000f,    0.322749f,   -0.912871f,    0.000000f }, //   2
  {    0.250000f,   -0.968246f,    0.000000f,    0.000000f }, //   3
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   4
};
int edgeK005[10][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    3 }, //   2
  {    0,    4 }, //   3
  {    1,    2 }, //   4
  {    1,    3 }, //   5
  {    1,    4 }, //   6
  {    2,    3 }, //   7
  {    2,    4 }, //   8
  {    3,    4 }, //   9
};
int vertToEdgeK005[5][4] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3 }, //   0
  {    0,    4,    5,    6 }, //   1
  {    1,    4,    7,    8 }, //   2
  {    2,    5,    7,    9 }, //   3
  {    3,    6,    8,    9 }, //   4
};
int edgeToEdgeK005[10][6] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6 }, //   0
  {    0,    2,    3,    4,    7,    8 }, //   1
  {    0,    1,    3,    5,    7,    9 }, //   2
  {    0,    1,    2,    6,    8,    9 }, //   3
  {    0,    5,    6,    1,    7,    8 }, //   4
  {    0,    4,    6,    2,    7,    9 }, //   5
  {    0,    4,    5,    3,    8,    9 }, //   6
  {    1,    4,    8,    2,    5,    9 }, //   7
  {    1,    4,    7,    3,    6,    9 }, //   8
  {    2,    5,    7,    3,    6,    8 }, //   9
};
int faceK005[10][3] = { // Edges bordering each face, in face order
  {    0,    1,    4 }, //   0
  {    0,    2,    5 }, //   1
  {    0,    3,    6 }, //   2
  {    1,    2,    7 }, //   3
  {    1,    3,    8 }, //   4
  {    2,    3,    9 }, //   5
  {    4,    5,    7 }, //   6
  {    4,    6,    8 }, //   7
  {    5,    6,    9 }, //   8
  {    7,    8,    9 }, //   9
};
int edgeToFaceK005[10][3] = { // Faces on each edge, in edge order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    3,    5 }, //   2
  {    2,    4,    5 }, //   3
  {    0,    6,    7 }, //   4
  {    1,    6,    8 }, //   5
  {    2,    7,    8 }, //   6
  {    3,    6,    9 }, //   7
  {    4,    7,    9 }, //   8
  {    5,    8,    9 }, //   9
};
int faceToFaceK005[10][6] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,    6,    7 }, //   0
  {    0,    2,    3,    5,    6,    8 }, //   1
  {    0,    1,    4,    5,    7,    8 }, //   2
  {    0,    4,    1,    5,    6,    9 }, //   3
  {    0,    3,    2,    5,    7,    9 }, //   4
  {    1,    3,    2,    4,    8,    9 }, //   5
  {    0,    7,    1,    8,    3,    9 }, //   6
  {    0,    6,    2,    8,    4,    9 }, //   7
  {    1,    6,    2,    7,    5,    9 }, //   8
  {    3,    6,    4,    7,    5,    8 }, //   9
};
int faceToVertK005[10][3] = { // Vertices for each face, in face order
  {    0,    2,    1 }, //   0
  {    0,    3,    1 }, //   1
  {    0,    4,    1 }, //   2
  {    0,    3,    2 }, //   3
  {    0,    4,    2 }, //   4
  {    0,    4,    3 }, //   5
  {    1,    3,    2 }, //   6
  {    1,    4,    2 }, //   7
  {    1,    4,    3 }, //   8
  {    2,    4,    3 }, //   9
};
////////// The Edge Length of K005 is     1.581139
////////// The face Radius of K005 is     0.912871
int cellK005[5][4] = { // Faces bordering each cell, in cell order
  {    0,    1,    3,    6 }, //   0
  {    0,    2,    4,    7 }, //   1
  {    1,    2,    5,    8 }, //   2
  {    3,    4,    5,    9 }, //   3
  {    6,    7,    8,    9 }, //   4
};
int faceToCellK005[10][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    2,    3 }, //   5
  {    0,    4 }, //   6
  {    1,    4 }, //   7
  {    2,    4 }, //   8
  {    3,    4 }, //   9
};
int cellToEdgeK005[5][6] = { // Edges on each cell, in cell order
  {    0,    1,    2,    4,    5,    7 }, //   0
  {    0,    1,    3,    4,    6,    8 }, //   1
  {    0,    2,    3,    5,    6,    9 }, //   2
  {    1,    2,    3,    7,    8,    9 }, //   3
  {    4,    5,    6,    7,    8,    9 }, //   4
};
int cellToVertK005[5][4] = { // Vertices on each cell, in cell order
  {    0,    1,    2,    3 }, //   0
  {    0,    1,    2,    4 }, //   1
  {    0,    1,    3,    4 }, //   2
  {    0,    2,    3,    4 }, //   3
  {    1,    2,    3,    4 }, //   4
};
float cellNormalK005[5][4] = { // Normals of cells, in cell order
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   0
  {   -0.250000f,    0.968246f,    0.000000f,    0.000000f }, //   1
  {   -0.250000f,   -0.322749f,    0.912871f,    0.000000f }, //   2
  {   -0.250000f,   -0.322749f,   -0.456435f,    0.790569f }, //   3
  {   -0.250000f,   -0.322749f,   -0.456435f,   -0.790569f }, //   4
};
int cellToOppositeK005[5][4] = { // The opposite cell, in cell order
  {    1,    2,    3,    4 }, //   0
  {    0,    2,    3,    4 }, //   1
  {    0,    1,    3,    4 }, //   2
  {    0,    1,    2,    4 }, //   3
  {    0,    1,    2,    3 }, //   4
};
////////// The Radius of the whole K005 is 1. The radius of each cell is     0.968246
////////// The Distance from the origin to the centre of each cell of K005 is     0.250000
////////// The Sphere circumscribing each cell of K005 overlaps the origin by     0.718246
FigInfo infoK005 = {
    4, // numDims;
    5, // numVerts;
   10, // numEdges;
   10, // numFaces;
    5, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    4, // numVertsPerCell;
    3, // numEdgesPerFace;
    6, // numEdgesPerCell;
    4, // numFacesPerCell;
    3, // numFacesPerVert;
    3, // numFacesPerEdge;
    0, // numCellsPerVert;
    3, // numCellsPerEdge;
    2, // numCellsPerFace;
    0.333333f, // dihedralCosine;
    0.968246f, // cellRadius;
    0.250000f, // cellCentreRadius;
    0.408248f, // faceCentreRadius;
(float *)vertexK005, // The vertex matrix
(int *)edgeK005, // The edge Matrix
(int *)vertToEdgeK005, // The Matrix of vertices for each edge
(int *)faceK005, // The face to edge matrix
(int *)edgeToFaceK005, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK005, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK005, // The cell matrix
(float *)cellNormalK005, // The normal of a 4D cell
(int *)cellToEdgeK005, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK005, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
float vertexK008[16][4] = { // Coordinates of vertices, in vertex order
  {    0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   0
  {    0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   1
  {    0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //   2
  {    0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //   3
  {    0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //   4
  {    0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //   5
  {    0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //   6
  {    0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //   7
  {   -0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   8
  {   -0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   9
  {   -0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //  10
  {   -0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  11
  {   -0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //  12
  {   -0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  13
  {   -0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //  14
  {   -0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  15
};
int edgeK008[32][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    4 }, //   2
  {    0,    8 }, //   3
  {    1,    3 }, //   4
  {    1,    5 }, //   5
  {    1,    9 }, //   6
  {    2,    3 }, //   7
  {    2,    6 }, //   8
  {    2,   10 }, //   9
  {    3,    7 }, //  10
  {    3,   11 }, //  11
  {    4,    5 }, //  12
  {    4,    6 }, //  13
  {    4,   12 }, //  14
  {    5,    7 }, //  15
  {    5,   13 }, //  16
  {    6,    7 }, //  17
  {    6,   14 }, //  18
  {    7,   15 }, //  19
  {    8,    9 }, //  20
  {    8,   10 }, //  21
  {    8,   12 }, //  22
  {    9,   11 }, //  23
  {    9,   13 }, //  24
  {   10,   11 }, //  25
  {   10,   14 }, //  26
  {   11,   15 }, //  27
  {   12,   13 }, //  28
  {   12,   14 }, //  29
  {   13,   15 }, //  30
  {   14,   15 }, //  31
};
int vertToEdgeK008[16][4] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3 }, //   0
  {    0,    4,    5,    6 }, //   1
  {    1,    7,    8,    9 }, //   2
  {    4,    7,   10,   11 }, //   3
  {    2,   12,   13,   14 }, //   4
  {    5,   12,   15,   16 }, //   5
  {    8,   13,   17,   18 }, //   6
  {   10,   15,   17,   19 }, //   7
  {    3,   20,   21,   22 }, //   8
  {    6,   20,   23,   24 }, //   9
  {    9,   21,   25,   26 }, //  10
  {   11,   23,   25,   27 }, //  11
  {   14,   22,   28,   29 }, //  12
  {   16,   24,   28,   30 }, //  13
  {   18,   26,   29,   31 }, //  14
  {   19,   27,   30,   31 }, //  15
};
int edgeToEdgeK008[32][6] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6 }, //   0
  {    0,    2,    3,    7,    8,    9 }, //   1
  {    0,    1,    3,   12,   13,   14 }, //   2
  {    0,    1,    2,   20,   21,   22 }, //   3
  {    0,    5,    6,    7,   10,   11 }, //   4
  {    0,    4,    6,   12,   15,   16 }, //   5
  {    0,    4,    5,   20,   23,   24 }, //   6
  {    1,    8,    9,    4,   10,   11 }, //   7
  {    1,    7,    9,   13,   17,   18 }, //   8
  {    1,    7,    8,   21,   25,   26 }, //   9
  {    4,    7,   11,   15,   17,   19 }, //  10
  {    4,    7,   10,   23,   25,   27 }, //  11
  {    2,   13,   14,    5,   15,   16 }, //  12
  {    2,   12,   14,    8,   17,   18 }, //  13
  {    2,   12,   13,   22,   28,   29 }, //  14
  {    5,   12,   16,   10,   17,   19 }, //  15
  {    5,   12,   15,   24,   28,   30 }, //  16
  {    8,   13,   18,   10,   15,   19 }, //  17
  {    8,   13,   17,   26,   29,   31 }, //  18
  {   10,   15,   17,   27,   30,   31 }, //  19
  {    3,   21,   22,    6,   23,   24 }, //  20
  {    3,   20,   22,    9,   25,   26 }, //  21
  {    3,   20,   21,   14,   28,   29 }, //  22
  {    6,   20,   24,   11,   25,   27 }, //  23
  {    6,   20,   23,   16,   28,   30 }, //  24
  {    9,   21,   26,   11,   23,   27 }, //  25
  {    9,   21,   25,   18,   29,   31 }, //  26
  {   11,   23,   25,   19,   30,   31 }, //  27
  {   14,   22,   29,   16,   24,   30 }, //  28
  {   14,   22,   28,   18,   26,   31 }, //  29
  {   16,   24,   28,   19,   27,   31 }, //  30
  {   18,   26,   29,   19,   27,   30 }, //  31
};
int faceK008[24][4] = { // Edges bordering each face, in face order
  {    0,    1,    7,    4 }, //   0
  {    0,    2,   12,    5 }, //   1
  {    0,    3,   20,    6 }, //   2
  {    1,    2,   13,    8 }, //   3
  {    1,    3,   21,    9 }, //   4
  {    2,    3,   22,   14 }, //   5
  {    4,    5,   15,   10 }, //   6
  {    4,    6,   23,   11 }, //   7
  {    5,    6,   24,   16 }, //   8
  {    7,    8,   17,   10 }, //   9
  {    7,    9,   25,   11 }, //  10
  {    8,    9,   26,   18 }, //  11
  {   10,   11,   27,   19 }, //  12
  {   12,   13,   17,   15 }, //  13
  {   12,   14,   28,   16 }, //  14
  {   13,   14,   29,   18 }, //  15
  {   15,   16,   30,   19 }, //  16
  {   17,   18,   31,   19 }, //  17
  {   20,   21,   25,   23 }, //  18
  {   20,   22,   28,   24 }, //  19
  {   21,   22,   29,   26 }, //  20
  {   23,   24,   30,   27 }, //  21
  {   25,   26,   31,   27 }, //  22
  {   28,   29,   31,   30 }, //  23
};
int edgeToFaceK008[32][3] = { // Faces on each edge, in edge order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    3,    5 }, //   2
  {    2,    4,    5 }, //   3
  {    0,    6,    7 }, //   4
  {    1,    6,    8 }, //   5
  {    2,    7,    8 }, //   6
  {    0,    9,   10 }, //   7
  {    3,    9,   11 }, //   8
  {    4,   10,   11 }, //   9
  {    6,    9,   12 }, //  10
  {    7,   10,   12 }, //  11
  {    1,   13,   14 }, //  12
  {    3,   13,   15 }, //  13
  {    5,   14,   15 }, //  14
  {    6,   13,   16 }, //  15
  {    8,   14,   16 }, //  16
  {    9,   13,   17 }, //  17
  {   11,   15,   17 }, //  18
  {   12,   16,   17 }, //  19
  {    2,   18,   19 }, //  20
  {    4,   18,   20 }, //  21
  {    5,   19,   20 }, //  22
  {    7,   18,   21 }, //  23
  {    8,   19,   21 }, //  24
  {   10,   18,   22 }, //  25
  {   11,   20,   22 }, //  26
  {   12,   21,   22 }, //  27
  {   14,   19,   23 }, //  28
  {   15,   20,   23 }, //  29
  {   16,   21,   23 }, //  30
  {   17,   22,   23 }, //  31
};
int faceToFaceK008[24][8] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,    9,   10,    6,    7 }, //   0
  {    0,    2,    3,    5,   13,   14,    6,    8 }, //   1
  {    0,    1,    4,    5,   18,   19,    7,    8 }, //   2
  {    0,    4,    1,    5,   13,   15,    9,   11 }, //   3
  {    0,    3,    2,    5,   18,   20,   10,   11 }, //   4
  {    1,    3,    2,    4,   19,   20,   14,   15 }, //   5
  {    0,    7,    1,    8,   13,   16,    9,   12 }, //   6
  {    0,    6,    2,    8,   18,   21,   10,   12 }, //   7
  {    1,    6,    2,    7,   19,   21,   14,   16 }, //   8
  {    0,   10,    3,   11,   13,   17,    6,   12 }, //   9
  {    0,    9,    4,   11,   18,   22,    7,   12 }, //  10
  {    3,    9,    4,   10,   20,   22,   15,   17 }, //  11
  {    6,    9,    7,   10,   21,   22,   16,   17 }, //  12
  {    1,   14,    3,   15,    9,   17,    6,   16 }, //  13
  {    1,   13,    5,   15,   19,   23,    8,   16 }, //  14
  {    3,   13,    5,   14,   20,   23,   11,   17 }, //  15
  {    6,   13,    8,   14,   21,   23,   12,   17 }, //  16
  {    9,   13,   11,   15,   22,   23,   12,   16 }, //  17
  {    2,   19,    4,   20,   10,   22,    7,   21 }, //  18
  {    2,   18,    5,   20,   14,   23,    8,   21 }, //  19
  {    4,   18,    5,   19,   15,   23,   11,   22 }, //  20
  {    7,   18,    8,   19,   16,   23,   12,   22 }, //  21
  {   10,   18,   11,   20,   17,   23,   12,   21 }, //  22
  {   14,   19,   15,   20,   17,   22,   16,   21 }, //  23
};
int faceToVertK008[24][4] = { // Vertices for each face, in face order
  {    0,    2,    3,    1 }, //   0
  {    0,    4,    5,    1 }, //   1
  {    0,    8,    9,    1 }, //   2
  {    0,    4,    6,    2 }, //   3
  {    0,    8,   10,    2 }, //   4
  {    0,    8,   12,    4 }, //   5
  {    1,    5,    7,    3 }, //   6
  {    1,    9,   11,    3 }, //   7
  {    1,    9,   13,    5 }, //   8
  {    2,    6,    7,    3 }, //   9
  {    2,   10,   11,    3 }, //  10
  {    2,   10,   14,    6 }, //  11
  {    3,   11,   15,    7 }, //  12
  {    4,    6,    7,    5 }, //  13
  {    4,   12,   13,    5 }, //  14
  {    4,   12,   14,    6 }, //  15
  {    5,   13,   15,    7 }, //  16
  {    6,   14,   15,    7 }, //  17
  {    8,   10,   11,    9 }, //  18
  {    8,   12,   13,    9 }, //  19
  {    8,   12,   14,   10 }, //  20
  {    9,   13,   15,   11 }, //  21
  {   10,   14,   15,   11 }, //  22
  {   12,   14,   15,   13 }, //  23
};
////////// The Edge Length of K008 is     1.000000
////////// The face Radius of K008 is     0.707107
int cellK008[8][6] = { // Faces bordering each cell, in cell order
  {    0,    1,    3,    9,    6,   13 }, //   0
  {    0,    2,    4,   10,    7,   18 }, //   1
  {    1,    2,    5,   14,    8,   19 }, //   2
  {    3,    4,    5,   15,   11,   20 }, //   3
  {    6,    7,    8,   16,   12,   21 }, //   4
  {    9,   10,   11,   17,   12,   22 }, //   5
  {   13,   14,   15,   17,   16,   23 }, //   6
  {   18,   19,   20,   22,   21,   23 }, //   7
};
int faceToCellK008[24][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    2,    3 }, //   5
  {    0,    4 }, //   6
  {    1,    4 }, //   7
  {    2,    4 }, //   8
  {    0,    5 }, //   9
  {    1,    5 }, //  10
  {    3,    5 }, //  11
  {    4,    5 }, //  12
  {    0,    6 }, //  13
  {    2,    6 }, //  14
  {    3,    6 }, //  15
  {    4,    6 }, //  16
  {    5,    6 }, //  17
  {    1,    7 }, //  18
  {    2,    7 }, //  19
  {    3,    7 }, //  20
  {    4,    7 }, //  21
  {    5,    7 }, //  22
  {    6,    7 }, //  23
};
int cellToEdgeK008[8][12] = { // Edges on each cell, in cell order
  {    0,    1,    2,    4,    5,    7,    8,   10,   12,   13,   15,   17 }, //   0
  {    0,    1,    3,    4,    6,    7,    9,   11,   20,   21,   23,   25 }, //   1
  {    0,    2,    3,    5,    6,   12,   14,   16,   20,   22,   24,   28 }, //   2
  {    1,    2,    3,    8,    9,   13,   14,   18,   21,   22,   26,   29 }, //   3
  {    4,    5,    6,   10,   11,   15,   16,   19,   23,   24,   27,   30 }, //   4
  {    7,    8,    9,   10,   11,   17,   18,   19,   25,   26,   27,   31 }, //   5
  {   12,   13,   14,   15,   16,   17,   18,   19,   28,   29,   30,   31 }, //   6
  {   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31 }, //   7
};
int cellToVertK008[8][8] = { // Vertices on each cell, in cell order
  {    0,    1,    2,    3,    4,    5,    6,    7 }, //   0
  {    0,    1,    2,    3,    8,    9,   10,   11 }, //   1
  {    0,    1,    4,    5,    8,    9,   12,   13 }, //   2
  {    0,    2,    4,    6,    8,   10,   12,   14 }, //   3
  {    1,    3,    5,    7,    9,   11,   13,   15 }, //   4
  {    2,    3,    6,    7,   10,   11,   14,   15 }, //   5
  {    4,    5,    6,    7,   12,   13,   14,   15 }, //   6
  {    8,    9,   10,   11,   12,   13,   14,   15 }, //   7
};
float cellNormalK008[8][4] = { // Normals of cells, in cell order
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   0
  {    0.000000f,    1.000000f,    0.000000f,    0.000000f }, //   1
  {    0.000000f,    0.000000f,    1.000000f,    0.000000f }, //   2
  {    0.000000f,    0.000000f,    0.000000f,    1.000000f }, //   3
  {    0.000000f,    0.000000f,    0.000000f,   -1.000000f }, //   4
  {    0.000000f,    0.000000f,   -1.000000f,    0.000000f }, //   5
  {    0.000000f,   -1.000000f,    0.000000f,    0.000000f }, //   6
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   7
};
int cellToOppositeK008[8] = { // The opposite cell, in cell order
      7, //   0
      6, //   1
      5, //   2
      4, //   3
      3, //   4
      2, //   5
      1, //   6
      0, //   7
};
////////// The Radius of the whole K008 is 1. The radius of each cell is     0.866025
////////// The Distance from the origin to the centre of each cell of K008 is     0.500000
////////// The Sphere circumscribing each cell of K008 overlaps the origin by     0.366025
FigInfo infoK008 = {
    4, // numDims;
   16, // numVerts;
   32, // numEdges;
   24, // numFaces;
    8, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    8, // numVertsPerCell;
    4, // numEdgesPerFace;
   12, // numEdgesPerCell;
    6, // numFacesPerCell;
    3, // numFacesPerVert;
    3, // numFacesPerEdge;
    0, // numCellsPerVert;
    3, // numCellsPerEdge;
    2, // numCellsPerFace;
    0.000000f, // dihedralCosine;
    0.866025f, // cellRadius;
    0.500000f, // cellCentreRadius;
    0.707107f, // faceCentreRadius;
(float *)vertexK008, // The vertex matrix
(int *)edgeK008, // The edge Matrix
(int *)vertToEdgeK008, // The Matrix of vertices for each edge
(int *)faceK008, // The face to edge matrix
(int *)edgeToFaceK008, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK008, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK008, // The cell matrix
(float *)cellNormalK008, // The normal of a 4D cell
(int *)cellToEdgeK008, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK008, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
float vertexK016[8][4] = { // Coordinates of vertices, in vertex order
  {    0.000000f,    0.000000f,    0.000000f,    1.000000f }, //   0
  {    0.000000f,    0.000000f,    1.000000f,    0.000000f }, //   1
  {    0.000000f,    1.000000f,    0.000000f,    0.000000f }, //   2
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   3
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   4
  {    0.000000f,   -1.000000f,    0.000000f,    0.000000f }, //   5
  {    0.000000f,    0.000000f,   -1.000000f,    0.000000f }, //   6
  {    0.000000f,    0.000000f,    0.000000f,   -1.000000f }, //   7
};
int edgeK016[24][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    0,    3 }, //   2
  {    0,    4 }, //   3
  {    0,    5 }, //   4
  {    0,    6 }, //   5
  {    1,    2 }, //   6
  {    1,    3 }, //   7
  {    1,    4 }, //   8
  {    1,    5 }, //   9
  {    1,    7 }, //  10
  {    2,    3 }, //  11
  {    2,    4 }, //  12
  {    2,    6 }, //  13
  {    2,    7 }, //  14
  {    3,    5 }, //  15
  {    3,    6 }, //  16
  {    3,    7 }, //  17
  {    4,    5 }, //  18
  {    4,    6 }, //  19
  {    4,    7 }, //  20
  {    5,    6 }, //  21
  {    5,    7 }, //  22
  {    6,    7 }, //  23
};
int vertToEdgeK016[8][6] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3,    4,    5 }, //   0
  {    0,    6,    7,    8,    9,   10 }, //   1
  {    1,    6,   11,   12,   13,   14 }, //   2
  {    2,    7,   11,   15,   16,   17 }, //   3
  {    3,    8,   12,   18,   19,   20 }, //   4
  {    4,    9,   15,   18,   21,   22 }, //   5
  {    5,   13,   16,   19,   21,   23 }, //   6
  {   10,   14,   17,   20,   22,   23 }, //   7
};
int edgeToEdgeK016[24][10] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6,    7,    8,    9,   10 }, //   0
  {    0,    2,    3,    4,    5,    6,   11,   12,   13,   14 }, //   1
  {    0,    1,    3,    4,    5,    7,   11,   15,   16,   17 }, //   2
  {    0,    1,    2,    4,    5,    8,   12,   18,   19,   20 }, //   3
  {    0,    1,    2,    3,    5,    9,   15,   18,   21,   22 }, //   4
  {    0,    1,    2,    3,    4,   13,   16,   19,   21,   23 }, //   5
  {    0,    7,    8,    9,   10,    1,   11,   12,   13,   14 }, //   6
  {    0,    6,    8,    9,   10,    2,   11,   15,   16,   17 }, //   7
  {    0,    6,    7,    9,   10,    3,   12,   18,   19,   20 }, //   8
  {    0,    6,    7,    8,   10,    4,   15,   18,   21,   22 }, //   9
  {    0,    6,    7,    8,    9,   14,   17,   20,   22,   23 }, //  10
  {    1,    6,   12,   13,   14,    2,    7,   15,   16,   17 }, //  11
  {    1,    6,   11,   13,   14,    3,    8,   18,   19,   20 }, //  12
  {    1,    6,   11,   12,   14,    5,   16,   19,   21,   23 }, //  13
  {    1,    6,   11,   12,   13,   10,   17,   20,   22,   23 }, //  14
  {    2,    7,   11,   16,   17,    4,    9,   18,   21,   22 }, //  15
  {    2,    7,   11,   15,   17,    5,   13,   19,   21,   23 }, //  16
  {    2,    7,   11,   15,   16,   10,   14,   20,   22,   23 }, //  17
  {    3,    8,   12,   19,   20,    4,    9,   15,   21,   22 }, //  18
  {    3,    8,   12,   18,   20,    5,   13,   16,   21,   23 }, //  19
  {    3,    8,   12,   18,   19,   10,   14,   17,   22,   23 }, //  20
  {    4,    9,   15,   18,   22,    5,   13,   16,   19,   23 }, //  21
  {    4,    9,   15,   18,   21,   10,   14,   17,   20,   23 }, //  22
  {    5,   13,   16,   19,   21,   10,   14,   17,   20,   22 }, //  23
};
int faceK016[32][3] = { // Edges bordering each face, in face order
  {    0,    1,    6 }, //   0
  {    0,    2,    7 }, //   1
  {    0,    3,    8 }, //   2
  {    0,    4,    9 }, //   3
  {    1,    2,   11 }, //   4
  {    1,    3,   12 }, //   5
  {    1,    5,   13 }, //   6
  {    2,    4,   15 }, //   7
  {    2,    5,   16 }, //   8
  {    3,    4,   18 }, //   9
  {    3,    5,   19 }, //  10
  {    4,    5,   21 }, //  11
  {    6,    7,   11 }, //  12
  {    6,    8,   12 }, //  13
  {    6,   10,   14 }, //  14
  {    7,    9,   15 }, //  15
  {    7,   10,   17 }, //  16
  {    8,    9,   18 }, //  17
  {    8,   10,   20 }, //  18
  {    9,   10,   22 }, //  19
  {   11,   13,   16 }, //  20
  {   11,   14,   17 }, //  21
  {   12,   13,   19 }, //  22
  {   12,   14,   20 }, //  23
  {   13,   14,   23 }, //  24
  {   15,   16,   21 }, //  25
  {   15,   17,   22 }, //  26
  {   16,   17,   23 }, //  27
  {   18,   19,   21 }, //  28
  {   18,   20,   22 }, //  29
  {   19,   20,   23 }, //  30
  {   21,   22,   23 }, //  31
};
int edgeToFaceK016[24][4] = { // Faces on each edge, in edge order
  {    0,    1,    2,    3 }, //   0
  {    0,    4,    5,    6 }, //   1
  {    1,    4,    7,    8 }, //   2
  {    2,    5,    9,   10 }, //   3
  {    3,    7,    9,   11 }, //   4
  {    6,    8,   10,   11 }, //   5
  {    0,   12,   13,   14 }, //   6
  {    1,   12,   15,   16 }, //   7
  {    2,   13,   17,   18 }, //   8
  {    3,   15,   17,   19 }, //   9
  {   14,   16,   18,   19 }, //  10
  {    4,   12,   20,   21 }, //  11
  {    5,   13,   22,   23 }, //  12
  {    6,   20,   22,   24 }, //  13
  {   14,   21,   23,   24 }, //  14
  {    7,   15,   25,   26 }, //  15
  {    8,   20,   25,   27 }, //  16
  {   16,   21,   26,   27 }, //  17
  {    9,   17,   28,   29 }, //  18
  {   10,   22,   28,   30 }, //  19
  {   18,   23,   29,   30 }, //  20
  {   11,   25,   28,   31 }, //  21
  {   19,   26,   29,   31 }, //  22
  {   24,   27,   30,   31 }, //  23
};
int faceToFaceK016[32][9] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,    5,    6,   12,   13,   14 }, //   0
  {    0,    2,    3,    4,    7,    8,   12,   15,   16 }, //   1
  {    0,    1,    3,    5,    9,   10,   13,   17,   18 }, //   2
  {    0,    1,    2,    7,    9,   11,   15,   17,   19 }, //   3
  {    0,    5,    6,    1,    7,    8,   12,   20,   21 }, //   4
  {    0,    4,    6,    2,    9,   10,   13,   22,   23 }, //   5
  {    0,    4,    5,    8,   10,   11,   20,   22,   24 }, //   6
  {    1,    4,    8,    3,    9,   11,   15,   25,   26 }, //   7
  {    1,    4,    7,    6,   10,   11,   20,   25,   27 }, //   8
  {    2,    5,   10,    3,    7,   11,   17,   28,   29 }, //   9
  {    2,    5,    9,    6,    8,   11,   22,   28,   30 }, //  10
  {    3,    7,    9,    6,    8,   10,   25,   28,   31 }, //  11
  {    0,   13,   14,    1,   15,   16,    4,   20,   21 }, //  12
  {    0,   12,   14,    2,   17,   18,    5,   22,   23 }, //  13
  {    0,   12,   13,   16,   18,   19,   21,   23,   24 }, //  14
  {    1,   12,   16,    3,   17,   19,    7,   25,   26 }, //  15
  {    1,   12,   15,   14,   18,   19,   21,   26,   27 }, //  16
  {    2,   13,   18,    3,   15,   19,    9,   28,   29 }, //  17
  {    2,   13,   17,   14,   16,   19,   23,   29,   30 }, //  18
  {    3,   15,   17,   14,   16,   18,   26,   29,   31 }, //  19
  {    4,   12,   21,    6,   22,   24,    8,   25,   27 }, //  20
  {    4,   12,   20,   14,   23,   24,   16,   26,   27 }, //  21
  {    5,   13,   23,    6,   20,   24,   10,   28,   30 }, //  22
  {    5,   13,   22,   14,   21,   24,   18,   29,   30 }, //  23
  {    6,   20,   22,   14,   21,   23,   27,   30,   31 }, //  24
  {    7,   15,   26,    8,   20,   27,   11,   28,   31 }, //  25
  {    7,   15,   25,   16,   21,   27,   19,   29,   31 }, //  26
  {    8,   20,   25,   16,   21,   26,   24,   30,   31 }, //  27
  {    9,   17,   29,   10,   22,   30,   11,   25,   31 }, //  28
  {    9,   17,   28,   18,   23,   30,   19,   26,   31 }, //  29
  {   10,   22,   28,   18,   23,   29,   24,   27,   31 }, //  30
  {   11,   25,   28,   19,   26,   29,   24,   27,   30 }, //  31
};
int faceToVertK016[32][3] = { // Vertices for each face, in face order
  {    0,    2,    1 }, //   0
  {    0,    3,    1 }, //   1
  {    0,    4,    1 }, //   2
  {    0,    5,    1 }, //   3
  {    0,    3,    2 }, //   4
  {    0,    4,    2 }, //   5
  {    0,    6,    2 }, //   6
  {    0,    5,    3 }, //   7
  {    0,    6,    3 }, //   8
  {    0,    5,    4 }, //   9
  {    0,    6,    4 }, //  10
  {    0,    6,    5 }, //  11
  {    1,    3,    2 }, //  12
  {    1,    4,    2 }, //  13
  {    1,    7,    2 }, //  14
  {    1,    5,    3 }, //  15
  {    1,    7,    3 }, //  16
  {    1,    5,    4 }, //  17
  {    1,    7,    4 }, //  18
  {    1,    7,    5 }, //  19
  {    2,    6,    3 }, //  20
  {    2,    7,    3 }, //  21
  {    2,    6,    4 }, //  22
  {    2,    7,    4 }, //  23
  {    2,    7,    6 }, //  24
  {    3,    6,    5 }, //  25
  {    3,    7,    5 }, //  26
  {    3,    7,    6 }, //  27
  {    4,    6,    5 }, //  28
  {    4,    7,    5 }, //  29
  {    4,    7,    6 }, //  30
  {    5,    7,    6 }, //  31
};
////////// The Edge Length of K016 is     1.414214
////////// The face Radius of K016 is     0.816497
int cellK016[16][4] = { // Faces bordering each cell, in cell order
  {    0,    1,    4,   12 }, //   0
  {    0,    2,    5,   13 }, //   1
  {    1,    3,    7,   15 }, //   2
  {    2,    3,    9,   17 }, //   3
  {    4,    6,    8,   20 }, //   4
  {    5,    6,   10,   22 }, //   5
  {    7,    8,   11,   25 }, //   6
  {    9,   10,   11,   28 }, //   7
  {   12,   14,   16,   21 }, //   8
  {   13,   14,   18,   23 }, //   9
  {   15,   16,   19,   26 }, //  10
  {   17,   18,   19,   29 }, //  11
  {   20,   21,   24,   27 }, //  12
  {   22,   23,   24,   30 }, //  13
  {   25,   26,   27,   31 }, //  14
  {   28,   29,   30,   31 }, //  15
};
int faceToCellK016[32][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    3 }, //   2
  {    2,    3 }, //   3
  {    0,    4 }, //   4
  {    1,    5 }, //   5
  {    4,    5 }, //   6
  {    2,    6 }, //   7
  {    4,    6 }, //   8
  {    3,    7 }, //   9
  {    5,    7 }, //  10
  {    6,    7 }, //  11
  {    0,    8 }, //  12
  {    1,    9 }, //  13
  {    8,    9 }, //  14
  {    2,   10 }, //  15
  {    8,   10 }, //  16
  {    3,   11 }, //  17
  {    9,   11 }, //  18
  {   10,   11 }, //  19
  {    4,   12 }, //  20
  {    8,   12 }, //  21
  {    5,   13 }, //  22
  {    9,   13 }, //  23
  {   12,   13 }, //  24
  {    6,   14 }, //  25
  {   10,   14 }, //  26
  {   12,   14 }, //  27
  {    7,   15 }, //  28
  {   11,   15 }, //  29
  {   13,   15 }, //  30
  {   14,   15 }, //  31
};
int cellToEdgeK016[16][6] = { // Edges on each cell, in cell order
  {    0,    1,    2,    6,    7,   11 }, //   0
  {    0,    1,    3,    6,    8,   12 }, //   1
  {    0,    2,    4,    7,    9,   15 }, //   2
  {    0,    3,    4,    8,    9,   18 }, //   3
  {    1,    2,    5,   11,   13,   16 }, //   4
  {    1,    3,    5,   12,   13,   19 }, //   5
  {    2,    4,    5,   15,   16,   21 }, //   6
  {    3,    4,    5,   18,   19,   21 }, //   7
  {    6,    7,   10,   11,   14,   17 }, //   8
  {    6,    8,   10,   12,   14,   20 }, //   9
  {    7,    9,   10,   15,   17,   22 }, //  10
  {    8,    9,   10,   18,   20,   22 }, //  11
  {   11,   13,   14,   16,   17,   23 }, //  12
  {   12,   13,   14,   19,   20,   23 }, //  13
  {   15,   16,   17,   21,   22,   23 }, //  14
  {   18,   19,   20,   21,   22,   23 }, //  15
};
int cellToVertK016[16][4] = { // Vertices on each cell, in cell order
  {    0,    1,    2,    3 }, //   0
  {    0,    1,    2,    4 }, //   1
  {    0,    1,    3,    5 }, //   2
  {    0,    1,    4,    5 }, //   3
  {    0,    2,    3,    6 }, //   4
  {    0,    2,    4,    6 }, //   5
  {    0,    3,    5,    6 }, //   6
  {    0,    4,    5,    6 }, //   7
  {    1,    2,    3,    7 }, //   8
  {    1,    2,    4,    7 }, //   9
  {    1,    3,    5,    7 }, //  10
  {    1,    4,    5,    7 }, //  11
  {    2,    3,    6,    7 }, //  12
  {    2,    4,    6,    7 }, //  13
  {    3,    5,    6,    7 }, //  14
  {    4,    5,    6,    7 }, //  15
};
float cellNormalK016[16][4] = { // Normals of cells, in cell order
  {    0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   0
  {   -0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   1
  {    0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //   2
  {   -0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //   3
  {    0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //   4
  {   -0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //   5
  {    0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //   6
  {   -0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //   7
  {    0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   8
  {   -0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   9
  {    0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  10
  {   -0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  11
  {    0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  12
  {   -0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  13
  {    0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  14
  {   -0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  15
};
int cellToOppositeK016[16] = { // The opposite cell, in cell order
     15, //   0
     14, //   1
     13, //   2
     12, //   3
     11, //   4
     10, //   5
      9, //   6
      8, //   7
      7, //   8
      6, //   9
      5, //  10
      4, //  11
      3, //  12
      2, //  13
      1, //  14
      0, //  15
};
////////// The Radius of the whole K016 is 1. The radius of each cell is     0.866025
////////// The Distance from the origin to the centre of each cell of K016 is     0.500000
////////// The Sphere circumscribing each cell of K016 overlaps the origin by     0.366025
FigInfo infoK016 = {
    4, // numDims;
    8, // numVerts;
   24, // numEdges;
   32, // numFaces;
   16, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    4, // numVertsPerCell;
    3, // numEdgesPerFace;
    6, // numEdgesPerCell;
    4, // numFacesPerCell;
    3, // numFacesPerVert;
    4, // numFacesPerEdge;
    0, // numCellsPerVert;
    4, // numCellsPerEdge;
    2, // numCellsPerFace;
    0.333333f, // dihedralCosine;
    0.866025f, // cellRadius;
    0.500000f, // cellCentreRadius;
    0.577350f, // faceCentreRadius;
(float *)vertexK016, // The vertex matrix
(int *)edgeK016, // The edge Matrix
(int *)vertToEdgeK016, // The Matrix of vertices for each edge
(int *)faceK016, // The face to edge matrix
(int *)edgeToFaceK016, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK016, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK016, // The cell matrix
(float *)cellNormalK016, // The normal of a 4D cell
(int *)cellToEdgeK016, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK016, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
float vertexK024[24][4] = { // Coordinates of vertices, in vertex order
  {    0.000000f,    0.000000f,    0.000000f,    1.000000f }, //   0
  {    0.000000f,    0.000000f,    1.000000f,    0.000000f }, //   1
  {    0.000000f,    1.000000f,    0.000000f,    0.000000f }, //   2
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   3
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, //   4
  {    0.000000f,   -1.000000f,    0.000000f,    0.000000f }, //   5
  {    0.000000f,    0.000000f,   -1.000000f,    0.000000f }, //   6
  {    0.000000f,    0.000000f,    0.000000f,   -1.000000f }, //   7
  {    0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   8
  {    0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   9
  {    0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //  10
  {    0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  11
  {    0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //  12
  {    0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  13
  {    0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //  14
  {    0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  15
  {   -0.500000f,    0.500000f,    0.500000f,    0.500000f }, //  16
  {   -0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //  17
  {   -0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //  18
  {   -0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  19
  {   -0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //  20
  {   -0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  21
  {   -0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //  22
  {   -0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  23
};
int edgeK024[96][2] = { // Vertex pairs defining each edge, in edge order
  {    0,    8 }, //   0
  {    0,   10 }, //   1
  {    0,   12 }, //   2
  {    0,   14 }, //   3
  {    0,   16 }, //   4
  {    0,   18 }, //   5
  {    0,   20 }, //   6
  {    0,   22 }, //   7
  {    1,    8 }, //   8
  {    1,    9 }, //   9
  {    1,   12 }, //  10
  {    1,   13 }, //  11
  {    1,   16 }, //  12
  {    1,   17 }, //  13
  {    1,   20 }, //  14
  {    1,   21 }, //  15
  {    2,    8 }, //  16
  {    2,    9 }, //  17
  {    2,   10 }, //  18
  {    2,   11 }, //  19
  {    2,   16 }, //  20
  {    2,   17 }, //  21
  {    2,   18 }, //  22
  {    2,   19 }, //  23
  {    3,    8 }, //  24
  {    3,    9 }, //  25
  {    3,   10 }, //  26
  {    3,   11 }, //  27
  {    3,   12 }, //  28
  {    3,   13 }, //  29
  {    3,   14 }, //  30
  {    3,   15 }, //  31
  {    4,   16 }, //  32
  {    4,   17 }, //  33
  {    4,   18 }, //  34
  {    4,   19 }, //  35
  {    4,   20 }, //  36
  {    4,   21 }, //  37
  {    4,   22 }, //  38
  {    4,   23 }, //  39
  {    5,   12 }, //  40
  {    5,   13 }, //  41
  {    5,   14 }, //  42
  {    5,   15 }, //  43
  {    5,   20 }, //  44
  {    5,   21 }, //  45
  {    5,   22 }, //  46
  {    5,   23 }, //  47
  {    6,   10 }, //  48
  {    6,   11 }, //  49
  {    6,   14 }, //  50
  {    6,   15 }, //  51
  {    6,   18 }, //  52
  {    6,   19 }, //  53
  {    6,   22 }, //  54
  {    6,   23 }, //  55
  {    7,    9 }, //  56
  {    7,   11 }, //  57
  {    7,   13 }, //  58
  {    7,   15 }, //  59
  {    7,   17 }, //  60
  {    7,   19 }, //  61
  {    7,   21 }, //  62
  {    7,   23 }, //  63
  {    8,    9 }, //  64
  {    8,   10 }, //  65
  {    8,   12 }, //  66
  {    8,   16 }, //  67
  {    9,   11 }, //  68
  {    9,   13 }, //  69
  {    9,   17 }, //  70
  {   10,   11 }, //  71
  {   10,   14 }, //  72
  {   10,   18 }, //  73
  {   11,   15 }, //  74
  {   11,   19 }, //  75
  {   12,   13 }, //  76
  {   12,   14 }, //  77
  {   12,   20 }, //  78
  {   13,   15 }, //  79
  {   13,   21 }, //  80
  {   14,   15 }, //  81
  {   14,   22 }, //  82
  {   15,   23 }, //  83
  {   16,   17 }, //  84
  {   16,   18 }, //  85
  {   16,   20 }, //  86
  {   17,   19 }, //  87
  {   17,   21 }, //  88
  {   18,   19 }, //  89
  {   18,   22 }, //  90
  {   19,   23 }, //  91
  {   20,   21 }, //  92
  {   20,   22 }, //  93
  {   21,   23 }, //  94
  {   22,   23 }, //  95
};
int vertToEdgeK024[24][8] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3,    4,    5,    6,    7 }, //   0
  {    8,    9,   10,   11,   12,   13,   14,   15 }, //   1
  {   16,   17,   18,   19,   20,   21,   22,   23 }, //   2
  {   24,   25,   26,   27,   28,   29,   30,   31 }, //   3
  {   32,   33,   34,   35,   36,   37,   38,   39 }, //   4
  {   40,   41,   42,   43,   44,   45,   46,   47 }, //   5
  {   48,   49,   50,   51,   52,   53,   54,   55 }, //   6
  {   56,   57,   58,   59,   60,   61,   62,   63 }, //   7
  {    0,    8,   16,   24,   64,   65,   66,   67 }, //   8
  {    9,   17,   25,   56,   64,   68,   69,   70 }, //   9
  {    1,   18,   26,   48,   65,   71,   72,   73 }, //  10
  {   19,   27,   49,   57,   68,   71,   74,   75 }, //  11
  {    2,   10,   28,   40,   66,   76,   77,   78 }, //  12
  {   11,   29,   41,   58,   69,   76,   79,   80 }, //  13
  {    3,   30,   42,   50,   72,   77,   81,   82 }, //  14
  {   31,   43,   51,   59,   74,   79,   81,   83 }, //  15
  {    4,   12,   20,   32,   67,   84,   85,   86 }, //  16
  {   13,   21,   33,   60,   70,   84,   87,   88 }, //  17
  {    5,   22,   34,   52,   73,   85,   89,   90 }, //  18
  {   23,   35,   53,   61,   75,   87,   89,   91 }, //  19
  {    6,   14,   36,   44,   78,   86,   92,   93 }, //  20
  {   15,   37,   45,   62,   80,   88,   92,   94 }, //  21
  {    7,   38,   46,   54,   82,   90,   93,   95 }, //  22
  {   39,   47,   55,   63,   83,   91,   94,   95 }, //  23
};
int edgeToEdgeK024[96][14] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6,    7,    8,   16,   24,   64,   65,   66,   67 }, //   0
  {    0,    2,    3,    4,    5,    6,    7,   18,   26,   48,   65,   71,   72,   73 }, //   1
  {    0,    1,    3,    4,    5,    6,    7,   10,   28,   40,   66,   76,   77,   78 }, //   2
  {    0,    1,    2,    4,    5,    6,    7,   30,   42,   50,   72,   77,   81,   82 }, //   3
  {    0,    1,    2,    3,    5,    6,    7,   12,   20,   32,   67,   84,   85,   86 }, //   4
  {    0,    1,    2,    3,    4,    6,    7,   22,   34,   52,   73,   85,   89,   90 }, //   5
  {    0,    1,    2,    3,    4,    5,    7,   14,   36,   44,   78,   86,   92,   93 }, //   6
  {    0,    1,    2,    3,    4,    5,    6,   38,   46,   54,   82,   90,   93,   95 }, //   7
  {    9,   10,   11,   12,   13,   14,   15,    0,   16,   24,   64,   65,   66,   67 }, //   8
  {    8,   10,   11,   12,   13,   14,   15,   17,   25,   56,   64,   68,   69,   70 }, //   9
  {    8,    9,   11,   12,   13,   14,   15,    2,   28,   40,   66,   76,   77,   78 }, //  10
  {    8,    9,   10,   12,   13,   14,   15,   29,   41,   58,   69,   76,   79,   80 }, //  11
  {    8,    9,   10,   11,   13,   14,   15,    4,   20,   32,   67,   84,   85,   86 }, //  12
  {    8,    9,   10,   11,   12,   14,   15,   21,   33,   60,   70,   84,   87,   88 }, //  13
  {    8,    9,   10,   11,   12,   13,   15,    6,   36,   44,   78,   86,   92,   93 }, //  14
  {    8,    9,   10,   11,   12,   13,   14,   37,   45,   62,   80,   88,   92,   94 }, //  15
  {   17,   18,   19,   20,   21,   22,   23,    0,    8,   24,   64,   65,   66,   67 }, //  16
  {   16,   18,   19,   20,   21,   22,   23,    9,   25,   56,   64,   68,   69,   70 }, //  17
  {   16,   17,   19,   20,   21,   22,   23,    1,   26,   48,   65,   71,   72,   73 }, //  18
  {   16,   17,   18,   20,   21,   22,   23,   27,   49,   57,   68,   71,   74,   75 }, //  19
  {   16,   17,   18,   19,   21,   22,   23,    4,   12,   32,   67,   84,   85,   86 }, //  20
  {   16,   17,   18,   19,   20,   22,   23,   13,   33,   60,   70,   84,   87,   88 }, //  21
  {   16,   17,   18,   19,   20,   21,   23,    5,   34,   52,   73,   85,   89,   90 }, //  22
  {   16,   17,   18,   19,   20,   21,   22,   35,   53,   61,   75,   87,   89,   91 }, //  23
  {   25,   26,   27,   28,   29,   30,   31,    0,    8,   16,   64,   65,   66,   67 }, //  24
  {   24,   26,   27,   28,   29,   30,   31,    9,   17,   56,   64,   68,   69,   70 }, //  25
  {   24,   25,   27,   28,   29,   30,   31,    1,   18,   48,   65,   71,   72,   73 }, //  26
  {   24,   25,   26,   28,   29,   30,   31,   19,   49,   57,   68,   71,   74,   75 }, //  27
  {   24,   25,   26,   27,   29,   30,   31,    2,   10,   40,   66,   76,   77,   78 }, //  28
  {   24,   25,   26,   27,   28,   30,   31,   11,   41,   58,   69,   76,   79,   80 }, //  29
  {   24,   25,   26,   27,   28,   29,   31,    3,   42,   50,   72,   77,   81,   82 }, //  30
  {   24,   25,   26,   27,   28,   29,   30,   43,   51,   59,   74,   79,   81,   83 }, //  31
  {   33,   34,   35,   36,   37,   38,   39,    4,   12,   20,   67,   84,   85,   86 }, //  32
  {   32,   34,   35,   36,   37,   38,   39,   13,   21,   60,   70,   84,   87,   88 }, //  33
  {   32,   33,   35,   36,   37,   38,   39,    5,   22,   52,   73,   85,   89,   90 }, //  34
  {   32,   33,   34,   36,   37,   38,   39,   23,   53,   61,   75,   87,   89,   91 }, //  35
  {   32,   33,   34,   35,   37,   38,   39,    6,   14,   44,   78,   86,   92,   93 }, //  36
  {   32,   33,   34,   35,   36,   38,   39,   15,   45,   62,   80,   88,   92,   94 }, //  37
  {   32,   33,   34,   35,   36,   37,   39,    7,   46,   54,   82,   90,   93,   95 }, //  38
  {   32,   33,   34,   35,   36,   37,   38,   47,   55,   63,   83,   91,   94,   95 }, //  39
  {   41,   42,   43,   44,   45,   46,   47,    2,   10,   28,   66,   76,   77,   78 }, //  40
  {   40,   42,   43,   44,   45,   46,   47,   11,   29,   58,   69,   76,   79,   80 }, //  41
  {   40,   41,   43,   44,   45,   46,   47,    3,   30,   50,   72,   77,   81,   82 }, //  42
  {   40,   41,   42,   44,   45,   46,   47,   31,   51,   59,   74,   79,   81,   83 }, //  43
  {   40,   41,   42,   43,   45,   46,   47,    6,   14,   36,   78,   86,   92,   93 }, //  44
  {   40,   41,   42,   43,   44,   46,   47,   15,   37,   62,   80,   88,   92,   94 }, //  45
  {   40,   41,   42,   43,   44,   45,   47,    7,   38,   54,   82,   90,   93,   95 }, //  46
  {   40,   41,   42,   43,   44,   45,   46,   39,   55,   63,   83,   91,   94,   95 }, //  47
  {   49,   50,   51,   52,   53,   54,   55,    1,   18,   26,   65,   71,   72,   73 }, //  48
  {   48,   50,   51,   52,   53,   54,   55,   19,   27,   57,   68,   71,   74,   75 }, //  49
  {   48,   49,   51,   52,   53,   54,   55,    3,   30,   42,   72,   77,   81,   82 }, //  50
  {   48,   49,   50,   52,   53,   54,   55,   31,   43,   59,   74,   79,   81,   83 }, //  51
  {   48,   49,   50,   51,   53,   54,   55,    5,   22,   34,   73,   85,   89,   90 }, //  52
  {   48,   49,   50,   51,   52,   54,   55,   23,   35,   61,   75,   87,   89,   91 }, //  53
  {   48,   49,   50,   51,   52,   53,   55,    7,   38,   46,   82,   90,   93,   95 }, //  54
  {   48,   49,   50,   51,   52,   53,   54,   39,   47,   63,   83,   91,   94,   95 }, //  55
  {   57,   58,   59,   60,   61,   62,   63,    9,   17,   25,   64,   68,   69,   70 }, //  56
  {   56,   58,   59,   60,   61,   62,   63,   19,   27,   49,   68,   71,   74,   75 }, //  57
  {   56,   57,   59,   60,   61,   62,   63,   11,   29,   41,   69,   76,   79,   80 }, //  58
  {   56,   57,   58,   60,   61,   62,   63,   31,   43,   51,   74,   79,   81,   83 }, //  59
  {   56,   57,   58,   59,   61,   62,   63,   13,   21,   33,   70,   84,   87,   88 }, //  60
  {   56,   57,   58,   59,   60,   62,   63,   23,   35,   53,   75,   87,   89,   91 }, //  61
  {   56,   57,   58,   59,   60,   61,   63,   15,   37,   45,   80,   88,   92,   94 }, //  62
  {   56,   57,   58,   59,   60,   61,   62,   39,   47,   55,   83,   91,   94,   95 }, //  63
  {    0,    8,   16,   24,   65,   66,   67,    9,   17,   25,   56,   68,   69,   70 }, //  64
  {    0,    8,   16,   24,   64,   66,   67,    1,   18,   26,   48,   71,   72,   73 }, //  65
  {    0,    8,   16,   24,   64,   65,   67,    2,   10,   28,   40,   76,   77,   78 }, //  66
  {    0,    8,   16,   24,   64,   65,   66,    4,   12,   20,   32,   84,   85,   86 }, //  67
  {    9,   17,   25,   56,   64,   69,   70,   19,   27,   49,   57,   71,   74,   75 }, //  68
  {    9,   17,   25,   56,   64,   68,   70,   11,   29,   41,   58,   76,   79,   80 }, //  69
  {    9,   17,   25,   56,   64,   68,   69,   13,   21,   33,   60,   84,   87,   88 }, //  70
  {    1,   18,   26,   48,   65,   72,   73,   19,   27,   49,   57,   68,   74,   75 }, //  71
  {    1,   18,   26,   48,   65,   71,   73,    3,   30,   42,   50,   77,   81,   82 }, //  72
  {    1,   18,   26,   48,   65,   71,   72,    5,   22,   34,   52,   85,   89,   90 }, //  73
  {   19,   27,   49,   57,   68,   71,   75,   31,   43,   51,   59,   79,   81,   83 }, //  74
  {   19,   27,   49,   57,   68,   71,   74,   23,   35,   53,   61,   87,   89,   91 }, //  75
  {    2,   10,   28,   40,   66,   77,   78,   11,   29,   41,   58,   69,   79,   80 }, //  76
  {    2,   10,   28,   40,   66,   76,   78,    3,   30,   42,   50,   72,   81,   82 }, //  77
  {    2,   10,   28,   40,   66,   76,   77,    6,   14,   36,   44,   86,   92,   93 }, //  78
  {   11,   29,   41,   58,   69,   76,   80,   31,   43,   51,   59,   74,   81,   83 }, //  79
  {   11,   29,   41,   58,   69,   76,   79,   15,   37,   45,   62,   88,   92,   94 }, //  80
  {    3,   30,   42,   50,   72,   77,   82,   31,   43,   51,   59,   74,   79,   83 }, //  81
  {    3,   30,   42,   50,   72,   77,   81,    7,   38,   46,   54,   90,   93,   95 }, //  82
  {   31,   43,   51,   59,   74,   79,   81,   39,   47,   55,   63,   91,   94,   95 }, //  83
  {    4,   12,   20,   32,   67,   85,   86,   13,   21,   33,   60,   70,   87,   88 }, //  84
  {    4,   12,   20,   32,   67,   84,   86,    5,   22,   34,   52,   73,   89,   90 }, //  85
  {    4,   12,   20,   32,   67,   84,   85,    6,   14,   36,   44,   78,   92,   93 }, //  86
  {   13,   21,   33,   60,   70,   84,   88,   23,   35,   53,   61,   75,   89,   91 }, //  87
  {   13,   21,   33,   60,   70,   84,   87,   15,   37,   45,   62,   80,   92,   94 }, //  88
  {    5,   22,   34,   52,   73,   85,   90,   23,   35,   53,   61,   75,   87,   91 }, //  89
  {    5,   22,   34,   52,   73,   85,   89,    7,   38,   46,   54,   82,   93,   95 }, //  90
  {   23,   35,   53,   61,   75,   87,   89,   39,   47,   55,   63,   83,   94,   95 }, //  91
  {    6,   14,   36,   44,   78,   86,   93,   15,   37,   45,   62,   80,   88,   94 }, //  92
  {    6,   14,   36,   44,   78,   86,   92,    7,   38,   46,   54,   82,   90,   95 }, //  93
  {   15,   37,   45,   62,   80,   88,   92,   39,   47,   55,   63,   83,   91,   95 }, //  94
  {    7,   38,   46,   54,   82,   90,   93,   39,   47,   55,   63,   83,   91,   94 }, //  95
};
int faceK024[96][3] = { // Edges bordering each face, in face order
  {    0,    1,   65 }, //   0
  {    0,    2,   66 }, //   1
  {    0,    4,   67 }, //   2
  {    1,    3,   72 }, //   3
  {    1,    5,   73 }, //   4
  {    2,    3,   77 }, //   5
  {    2,    6,   78 }, //   6
  {    3,    7,   82 }, //   7
  {    4,    5,   85 }, //   8
  {    4,    6,   86 }, //   9
  {    5,    7,   90 }, //  10
  {    6,    7,   93 }, //  11
  {    8,    9,   64 }, //  12
  {    8,   10,   66 }, //  13
  {    8,   12,   67 }, //  14
  {    9,   11,   69 }, //  15
  {    9,   13,   70 }, //  16
  {   10,   11,   76 }, //  17
  {   10,   14,   78 }, //  18
  {   11,   15,   80 }, //  19
  {   12,   13,   84 }, //  20
  {   12,   14,   86 }, //  21
  {   13,   15,   88 }, //  22
  {   14,   15,   92 }, //  23
  {   16,   17,   64 }, //  24
  {   16,   18,   65 }, //  25
  {   16,   20,   67 }, //  26
  {   17,   19,   68 }, //  27
  {   17,   21,   70 }, //  28
  {   18,   19,   71 }, //  29
  {   18,   22,   73 }, //  30
  {   19,   23,   75 }, //  31
  {   20,   21,   84 }, //  32
  {   20,   22,   85 }, //  33
  {   21,   23,   87 }, //  34
  {   22,   23,   89 }, //  35
  {   24,   25,   64 }, //  36
  {   24,   26,   65 }, //  37
  {   24,   28,   66 }, //  38
  {   25,   27,   68 }, //  39
  {   25,   29,   69 }, //  40
  {   26,   27,   71 }, //  41
  {   26,   30,   72 }, //  42
  {   27,   31,   74 }, //  43
  {   28,   29,   76 }, //  44
  {   28,   30,   77 }, //  45
  {   29,   31,   79 }, //  46
  {   30,   31,   81 }, //  47
  {   32,   33,   84 }, //  48
  {   32,   34,   85 }, //  49
  {   32,   36,   86 }, //  50
  {   33,   35,   87 }, //  51
  {   33,   37,   88 }, //  52
  {   34,   35,   89 }, //  53
  {   34,   38,   90 }, //  54
  {   35,   39,   91 }, //  55
  {   36,   37,   92 }, //  56
  {   36,   38,   93 }, //  57
  {   37,   39,   94 }, //  58
  {   38,   39,   95 }, //  59
  {   40,   41,   76 }, //  60
  {   40,   42,   77 }, //  61
  {   40,   44,   78 }, //  62
  {   41,   43,   79 }, //  63
  {   41,   45,   80 }, //  64
  {   42,   43,   81 }, //  65
  {   42,   46,   82 }, //  66
  {   43,   47,   83 }, //  67
  {   44,   45,   92 }, //  68
  {   44,   46,   93 }, //  69
  {   45,   47,   94 }, //  70
  {   46,   47,   95 }, //  71
  {   48,   49,   71 }, //  72
  {   48,   50,   72 }, //  73
  {   48,   52,   73 }, //  74
  {   49,   51,   74 }, //  75
  {   49,   53,   75 }, //  76
  {   50,   51,   81 }, //  77
  {   50,   54,   82 }, //  78
  {   51,   55,   83 }, //  79
  {   52,   53,   89 }, //  80
  {   52,   54,   90 }, //  81
  {   53,   55,   91 }, //  82
  {   54,   55,   95 }, //  83
  {   56,   57,   68 }, //  84
  {   56,   58,   69 }, //  85
  {   56,   60,   70 }, //  86
  {   57,   59,   74 }, //  87
  {   57,   61,   75 }, //  88
  {   58,   59,   79 }, //  89
  {   58,   62,   80 }, //  90
  {   59,   63,   83 }, //  91
  {   60,   61,   87 }, //  92
  {   60,   62,   88 }, //  93
  {   61,   63,   91 }, //  94
  {   62,   63,   94 }, //  95
};
int edgeToFaceK024[96][3] = { // Faces on each edge, in edge order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    5,    6 }, //   2
  {    3,    5,    7 }, //   3
  {    2,    8,    9 }, //   4
  {    4,    8,   10 }, //   5
  {    6,    9,   11 }, //   6
  {    7,   10,   11 }, //   7
  {   12,   13,   14 }, //   8
  {   12,   15,   16 }, //   9
  {   13,   17,   18 }, //  10
  {   15,   17,   19 }, //  11
  {   14,   20,   21 }, //  12
  {   16,   20,   22 }, //  13
  {   18,   21,   23 }, //  14
  {   19,   22,   23 }, //  15
  {   24,   25,   26 }, //  16
  {   24,   27,   28 }, //  17
  {   25,   29,   30 }, //  18
  {   27,   29,   31 }, //  19
  {   26,   32,   33 }, //  20
  {   28,   32,   34 }, //  21
  {   30,   33,   35 }, //  22
  {   31,   34,   35 }, //  23
  {   36,   37,   38 }, //  24
  {   36,   39,   40 }, //  25
  {   37,   41,   42 }, //  26
  {   39,   41,   43 }, //  27
  {   38,   44,   45 }, //  28
  {   40,   44,   46 }, //  29
  {   42,   45,   47 }, //  30
  {   43,   46,   47 }, //  31
  {   48,   49,   50 }, //  32
  {   48,   51,   52 }, //  33
  {   49,   53,   54 }, //  34
  {   51,   53,   55 }, //  35
  {   50,   56,   57 }, //  36
  {   52,   56,   58 }, //  37
  {   54,   57,   59 }, //  38
  {   55,   58,   59 }, //  39
  {   60,   61,   62 }, //  40
  {   60,   63,   64 }, //  41
  {   61,   65,   66 }, //  42
  {   63,   65,   67 }, //  43
  {   62,   68,   69 }, //  44
  {   64,   68,   70 }, //  45
  {   66,   69,   71 }, //  46
  {   67,   70,   71 }, //  47
  {   72,   73,   74 }, //  48
  {   72,   75,   76 }, //  49
  {   73,   77,   78 }, //  50
  {   75,   77,   79 }, //  51
  {   74,   80,   81 }, //  52
  {   76,   80,   82 }, //  53
  {   78,   81,   83 }, //  54
  {   79,   82,   83 }, //  55
  {   84,   85,   86 }, //  56
  {   84,   87,   88 }, //  57
  {   85,   89,   90 }, //  58
  {   87,   89,   91 }, //  59
  {   86,   92,   93 }, //  60
  {   88,   92,   94 }, //  61
  {   90,   93,   95 }, //  62
  {   91,   94,   95 }, //  63
  {   12,   24,   36 }, //  64
  {    0,   25,   37 }, //  65
  {    1,   13,   38 }, //  66
  {    2,   14,   26 }, //  67
  {   27,   39,   84 }, //  68
  {   15,   40,   85 }, //  69
  {   16,   28,   86 }, //  70
  {   29,   41,   72 }, //  71
  {    3,   42,   73 }, //  72
  {    4,   30,   74 }, //  73
  {   43,   75,   87 }, //  74
  {   31,   76,   88 }, //  75
  {   17,   44,   60 }, //  76
  {    5,   45,   61 }, //  77
  {    6,   18,   62 }, //  78
  {   46,   63,   89 }, //  79
  {   19,   64,   90 }, //  80
  {   47,   65,   77 }, //  81
  {    7,   66,   78 }, //  82
  {   67,   79,   91 }, //  83
  {   20,   32,   48 }, //  84
  {    8,   33,   49 }, //  85
  {    9,   21,   50 }, //  86
  {   34,   51,   92 }, //  87
  {   22,   52,   93 }, //  88
  {   35,   53,   80 }, //  89
  {   10,   54,   81 }, //  90
  {   55,   82,   94 }, //  91
  {   23,   56,   68 }, //  92
  {   11,   57,   69 }, //  93
  {   58,   70,   95 }, //  94
  {   59,   71,   83 }, //  95
};
int faceToFaceK024[96][6] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,   25,   37 }, //   0
  {    0,    2,    5,    6,   13,   38 }, //   1
  {    0,    1,    8,    9,   14,   26 }, //   2
  {    0,    4,    5,    7,   42,   73 }, //   3
  {    0,    3,    8,   10,   30,   74 }, //   4
  {    1,    6,    3,    7,   45,   61 }, //   5
  {    1,    5,    9,   11,   18,   62 }, //   6
  {    3,    5,   10,   11,   66,   78 }, //   7
  {    2,    9,    4,   10,   33,   49 }, //   8
  {    2,    8,    6,   11,   21,   50 }, //   9
  {    4,    8,    7,   11,   54,   81 }, //  10
  {    6,    9,    7,   10,   57,   69 }, //  11
  {   13,   14,   15,   16,   24,   36 }, //  12
  {   12,   14,   17,   18,    1,   38 }, //  13
  {   12,   13,   20,   21,    2,   26 }, //  14
  {   12,   16,   17,   19,   40,   85 }, //  15
  {   12,   15,   20,   22,   28,   86 }, //  16
  {   13,   18,   15,   19,   44,   60 }, //  17
  {   13,   17,   21,   23,    6,   62 }, //  18
  {   15,   17,   22,   23,   64,   90 }, //  19
  {   14,   21,   16,   22,   32,   48 }, //  20
  {   14,   20,   18,   23,    9,   50 }, //  21
  {   16,   20,   19,   23,   52,   93 }, //  22
  {   18,   21,   19,   22,   56,   68 }, //  23
  {   25,   26,   27,   28,   12,   36 }, //  24
  {   24,   26,   29,   30,    0,   37 }, //  25
  {   24,   25,   32,   33,    2,   14 }, //  26
  {   24,   28,   29,   31,   39,   84 }, //  27
  {   24,   27,   32,   34,   16,   86 }, //  28
  {   25,   30,   27,   31,   41,   72 }, //  29
  {   25,   29,   33,   35,    4,   74 }, //  30
  {   27,   29,   34,   35,   76,   88 }, //  31
  {   26,   33,   28,   34,   20,   48 }, //  32
  {   26,   32,   30,   35,    8,   49 }, //  33
  {   28,   32,   31,   35,   51,   92 }, //  34
  {   30,   33,   31,   34,   53,   80 }, //  35
  {   37,   38,   39,   40,   12,   24 }, //  36
  {   36,   38,   41,   42,    0,   25 }, //  37
  {   36,   37,   44,   45,    1,   13 }, //  38
  {   36,   40,   41,   43,   27,   84 }, //  39
  {   36,   39,   44,   46,   15,   85 }, //  40
  {   37,   42,   39,   43,   29,   72 }, //  41
  {   37,   41,   45,   47,    3,   73 }, //  42
  {   39,   41,   46,   47,   75,   87 }, //  43
  {   38,   45,   40,   46,   17,   60 }, //  44
  {   38,   44,   42,   47,    5,   61 }, //  45
  {   40,   44,   43,   47,   63,   89 }, //  46
  {   42,   45,   43,   46,   65,   77 }, //  47
  {   49,   50,   51,   52,   20,   32 }, //  48
  {   48,   50,   53,   54,    8,   33 }, //  49
  {   48,   49,   56,   57,    9,   21 }, //  50
  {   48,   52,   53,   55,   34,   92 }, //  51
  {   48,   51,   56,   58,   22,   93 }, //  52
  {   49,   54,   51,   55,   35,   80 }, //  53
  {   49,   53,   57,   59,   10,   81 }, //  54
  {   51,   53,   58,   59,   82,   94 }, //  55
  {   50,   57,   52,   58,   23,   68 }, //  56
  {   50,   56,   54,   59,   11,   69 }, //  57
  {   52,   56,   55,   59,   70,   95 }, //  58
  {   54,   57,   55,   58,   71,   83 }, //  59
  {   61,   62,   63,   64,   17,   44 }, //  60
  {   60,   62,   65,   66,    5,   45 }, //  61
  {   60,   61,   68,   69,    6,   18 }, //  62
  {   60,   64,   65,   67,   46,   89 }, //  63
  {   60,   63,   68,   70,   19,   90 }, //  64
  {   61,   66,   63,   67,   47,   77 }, //  65
  {   61,   65,   69,   71,    7,   78 }, //  66
  {   63,   65,   70,   71,   79,   91 }, //  67
  {   62,   69,   64,   70,   23,   56 }, //  68
  {   62,   68,   66,   71,   11,   57 }, //  69
  {   64,   68,   67,   71,   58,   95 }, //  70
  {   66,   69,   67,   70,   59,   83 }, //  71
  {   73,   74,   75,   76,   29,   41 }, //  72
  {   72,   74,   77,   78,    3,   42 }, //  73
  {   72,   73,   80,   81,    4,   30 }, //  74
  {   72,   76,   77,   79,   43,   87 }, //  75
  {   72,   75,   80,   82,   31,   88 }, //  76
  {   73,   78,   75,   79,   47,   65 }, //  77
  {   73,   77,   81,   83,    7,   66 }, //  78
  {   75,   77,   82,   83,   67,   91 }, //  79
  {   74,   81,   76,   82,   35,   53 }, //  80
  {   74,   80,   78,   83,   10,   54 }, //  81
  {   76,   80,   79,   83,   55,   94 }, //  82
  {   78,   81,   79,   82,   59,   71 }, //  83
  {   85,   86,   87,   88,   27,   39 }, //  84
  {   84,   86,   89,   90,   15,   40 }, //  85
  {   84,   85,   92,   93,   16,   28 }, //  86
  {   84,   88,   89,   91,   43,   75 }, //  87
  {   84,   87,   92,   94,   31,   76 }, //  88
  {   85,   90,   87,   91,   46,   63 }, //  89
  {   85,   89,   93,   95,   19,   64 }, //  90
  {   87,   89,   94,   95,   67,   79 }, //  91
  {   86,   93,   88,   94,   34,   51 }, //  92
  {   86,   92,   90,   95,   22,   52 }, //  93
  {   88,   92,   91,   95,   55,   82 }, //  94
  {   90,   93,   91,   94,   58,   70 }, //  95
};
int faceToVertK024[96][3] = { // Vertices for each face, in face order
  {    0,   10,    8 }, //   0
  {    0,   12,    8 }, //   1
  {    0,   16,    8 }, //   2
  {    0,   14,   10 }, //   3
  {    0,   18,   10 }, //   4
  {    0,   14,   12 }, //   5
  {    0,   20,   12 }, //   6
  {    0,   22,   14 }, //   7
  {    0,   18,   16 }, //   8
  {    0,   20,   16 }, //   9
  {    0,   22,   18 }, //  10
  {    0,   22,   20 }, //  11
  {    1,    9,    8 }, //  12
  {    1,   12,    8 }, //  13
  {    1,   16,    8 }, //  14
  {    1,   13,    9 }, //  15
  {    1,   17,    9 }, //  16
  {    1,   13,   12 }, //  17
  {    1,   20,   12 }, //  18
  {    1,   21,   13 }, //  19
  {    1,   17,   16 }, //  20
  {    1,   20,   16 }, //  21
  {    1,   21,   17 }, //  22
  {    1,   21,   20 }, //  23
  {    2,    9,    8 }, //  24
  {    2,   10,    8 }, //  25
  {    2,   16,    8 }, //  26
  {    2,   11,    9 }, //  27
  {    2,   17,    9 }, //  28
  {    2,   11,   10 }, //  29
  {    2,   18,   10 }, //  30
  {    2,   19,   11 }, //  31
  {    2,   17,   16 }, //  32
  {    2,   18,   16 }, //  33
  {    2,   19,   17 }, //  34
  {    2,   19,   18 }, //  35
  {    3,    9,    8 }, //  36
  {    3,   10,    8 }, //  37
  {    3,   12,    8 }, //  38
  {    3,   11,    9 }, //  39
  {    3,   13,    9 }, //  40
  {    3,   11,   10 }, //  41
  {    3,   14,   10 }, //  42
  {    3,   15,   11 }, //  43
  {    3,   13,   12 }, //  44
  {    3,   14,   12 }, //  45
  {    3,   15,   13 }, //  46
  {    3,   15,   14 }, //  47
  {    4,   17,   16 }, //  48
  {    4,   18,   16 }, //  49
  {    4,   20,   16 }, //  50
  {    4,   19,   17 }, //  51
  {    4,   21,   17 }, //  52
  {    4,   19,   18 }, //  53
  {    4,   22,   18 }, //  54
  {    4,   23,   19 }, //  55
  {    4,   21,   20 }, //  56
  {    4,   22,   20 }, //  57
  {    4,   23,   21 }, //  58
  {    4,   23,   22 }, //  59
  {    5,   13,   12 }, //  60
  {    5,   14,   12 }, //  61
  {    5,   20,   12 }, //  62
  {    5,   15,   13 }, //  63
  {    5,   21,   13 }, //  64
  {    5,   15,   14 }, //  65
  {    5,   22,   14 }, //  66
  {    5,   23,   15 }, //  67
  {    5,   21,   20 }, //  68
  {    5,   22,   20 }, //  69
  {    5,   23,   21 }, //  70
  {    5,   23,   22 }, //  71
  {    6,   11,   10 }, //  72
  {    6,   14,   10 }, //  73
  {    6,   18,   10 }, //  74
  {    6,   15,   11 }, //  75
  {    6,   19,   11 }, //  76
  {    6,   15,   14 }, //  77
  {    6,   22,   14 }, //  78
  {    6,   23,   15 }, //  79
  {    6,   19,   18 }, //  80
  {    6,   22,   18 }, //  81
  {    6,   23,   19 }, //  82
  {    6,   23,   22 }, //  83
  {    7,   11,    9 }, //  84
  {    7,   13,    9 }, //  85
  {    7,   17,    9 }, //  86
  {    7,   15,   11 }, //  87
  {    7,   19,   11 }, //  88
  {    7,   15,   13 }, //  89
  {    7,   21,   13 }, //  90
  {    7,   23,   15 }, //  91
  {    7,   19,   17 }, //  92
  {    7,   21,   17 }, //  93
  {    7,   23,   19 }, //  94
  {    7,   23,   21 }, //  95
};
////////// The Edge Length of K024 is     1.000000
////////// The face Radius of K024 is     0.577350
int cellK024[24][8] = { // Faces bordering each cell, in cell order
  {    0,    1,    3,   37,    5,   38,   42,   45 }, //   0
  {    0,    2,    4,   25,    8,   26,   30,   33 }, //   1
  {    1,    2,    6,   13,    9,   14,   18,   21 }, //   2
  {    3,    4,    7,   73,   10,   74,   78,   81 }, //   3
  {    5,    6,    7,   61,   11,   62,   66,   69 }, //   4
  {    8,    9,   10,   49,   11,   50,   54,   57 }, //   5
  {   12,   13,   15,   36,   17,   38,   40,   44 }, //   6
  {   12,   14,   16,   24,   20,   26,   28,   32 }, //   7
  {   15,   16,   19,   85,   22,   86,   90,   93 }, //   8
  {   17,   18,   19,   60,   23,   62,   64,   68 }, //   9
  {   20,   21,   22,   48,   23,   50,   52,   56 }, //  10
  {   24,   25,   27,   36,   29,   37,   39,   41 }, //  11
  {   27,   28,   31,   84,   34,   86,   88,   92 }, //  12
  {   29,   30,   31,   72,   35,   74,   76,   80 }, //  13
  {   32,   33,   34,   48,   35,   49,   51,   53 }, //  14
  {   39,   40,   43,   84,   46,   85,   87,   89 }, //  15
  {   41,   42,   43,   72,   47,   73,   75,   77 }, //  16
  {   44,   45,   46,   60,   47,   61,   63,   65 }, //  17
  {   51,   52,   55,   92,   58,   93,   94,   95 }, //  18
  {   53,   54,   55,   80,   59,   81,   82,   83 }, //  19
  {   56,   57,   58,   68,   59,   69,   70,   71 }, //  20
  {   63,   64,   67,   89,   70,   90,   91,   95 }, //  21
  {   65,   66,   67,   77,   71,   78,   79,   83 }, //  22
  {   75,   76,   79,   87,   82,   88,   91,   94 }, //  23
};
int faceToCellK024[96][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    0,    4 }, //   5
  {    2,    4 }, //   6
  {    3,    4 }, //   7
  {    1,    5 }, //   8
  {    2,    5 }, //   9
  {    3,    5 }, //  10
  {    4,    5 }, //  11
  {    6,    7 }, //  12
  {    2,    6 }, //  13
  {    2,    7 }, //  14
  {    6,    8 }, //  15
  {    7,    8 }, //  16
  {    6,    9 }, //  17
  {    2,    9 }, //  18
  {    8,    9 }, //  19
  {    7,   10 }, //  20
  {    2,   10 }, //  21
  {    8,   10 }, //  22
  {    9,   10 }, //  23
  {    7,   11 }, //  24
  {    1,   11 }, //  25
  {    1,    7 }, //  26
  {   11,   12 }, //  27
  {    7,   12 }, //  28
  {   11,   13 }, //  29
  {    1,   13 }, //  30
  {   12,   13 }, //  31
  {    7,   14 }, //  32
  {    1,   14 }, //  33
  {   12,   14 }, //  34
  {   13,   14 }, //  35
  {    6,   11 }, //  36
  {    0,   11 }, //  37
  {    0,    6 }, //  38
  {   11,   15 }, //  39
  {    6,   15 }, //  40
  {   11,   16 }, //  41
  {    0,   16 }, //  42
  {   15,   16 }, //  43
  {    6,   17 }, //  44
  {    0,   17 }, //  45
  {   15,   17 }, //  46
  {   16,   17 }, //  47
  {   10,   14 }, //  48
  {    5,   14 }, //  49
  {    5,   10 }, //  50
  {   14,   18 }, //  51
  {   10,   18 }, //  52
  {   14,   19 }, //  53
  {    5,   19 }, //  54
  {   18,   19 }, //  55
  {   10,   20 }, //  56
  {    5,   20 }, //  57
  {   18,   20 }, //  58
  {   19,   20 }, //  59
  {    9,   17 }, //  60
  {    4,   17 }, //  61
  {    4,    9 }, //  62
  {   17,   21 }, //  63
  {    9,   21 }, //  64
  {   17,   22 }, //  65
  {    4,   22 }, //  66
  {   21,   22 }, //  67
  {    9,   20 }, //  68
  {    4,   20 }, //  69
  {   20,   21 }, //  70
  {   20,   22 }, //  71
  {   13,   16 }, //  72
  {    3,   16 }, //  73
  {    3,   13 }, //  74
  {   16,   23 }, //  75
  {   13,   23 }, //  76
  {   16,   22 }, //  77
  {    3,   22 }, //  78
  {   22,   23 }, //  79
  {   13,   19 }, //  80
  {    3,   19 }, //  81
  {   19,   23 }, //  82
  {   19,   22 }, //  83
  {   12,   15 }, //  84
  {    8,   15 }, //  85
  {    8,   12 }, //  86
  {   15,   23 }, //  87
  {   12,   23 }, //  88
  {   15,   21 }, //  89
  {    8,   21 }, //  90
  {   21,   23 }, //  91
  {   12,   18 }, //  92
  {    8,   18 }, //  93
  {   18,   23 }, //  94
  {   18,   21 }, //  95
};
int cellToEdgeK024[24][12] = { // Edges on each cell, in cell order
  {    0,    1,    2,    3,   24,   26,   28,   30,   65,   66,   72,   77 }, //   0
  {    0,    1,    4,    5,   16,   18,   20,   22,   65,   67,   73,   85 }, //   1
  {    0,    2,    4,    6,    8,   10,   12,   14,   66,   67,   78,   86 }, //   2
  {    1,    3,    5,    7,   48,   50,   52,   54,   72,   73,   82,   90 }, //   3
  {    2,    3,    6,    7,   40,   42,   44,   46,   77,   78,   82,   93 }, //   4
  {    4,    5,    6,    7,   32,   34,   36,   38,   85,   86,   90,   93 }, //   5
  {    8,    9,   10,   11,   24,   25,   28,   29,   64,   66,   69,   76 }, //   6
  {    8,    9,   12,   13,   16,   17,   20,   21,   64,   67,   70,   84 }, //   7
  {    9,   11,   13,   15,   56,   58,   60,   62,   69,   70,   80,   88 }, //   8
  {   10,   11,   14,   15,   40,   41,   44,   45,   76,   78,   80,   92 }, //   9
  {   12,   13,   14,   15,   32,   33,   36,   37,   84,   86,   88,   92 }, //  10
  {   16,   17,   18,   19,   24,   25,   26,   27,   64,   65,   68,   71 }, //  11
  {   17,   19,   21,   23,   56,   57,   60,   61,   68,   70,   75,   87 }, //  12
  {   18,   19,   22,   23,   48,   49,   52,   53,   71,   73,   75,   89 }, //  13
  {   20,   21,   22,   23,   32,   33,   34,   35,   84,   85,   87,   89 }, //  14
  {   25,   27,   29,   31,   56,   57,   58,   59,   68,   69,   74,   79 }, //  15
  {   26,   27,   30,   31,   48,   49,   50,   51,   71,   72,   74,   81 }, //  16
  {   28,   29,   30,   31,   40,   41,   42,   43,   76,   77,   79,   81 }, //  17
  {   33,   35,   37,   39,   60,   61,   62,   63,   87,   88,   91,   94 }, //  18
  {   34,   35,   38,   39,   52,   53,   54,   55,   89,   90,   91,   95 }, //  19
  {   36,   37,   38,   39,   44,   45,   46,   47,   92,   93,   94,   95 }, //  20
  {   41,   43,   45,   47,   58,   59,   62,   63,   79,   80,   83,   94 }, //  21
  {   42,   43,   46,   47,   50,   51,   54,   55,   81,   82,   83,   95 }, //  22
  {   49,   51,   53,   55,   57,   59,   61,   63,   74,   75,   83,   91 }, //  23
};
int cellToVertK024[24][6] = { // Vertices on each cell, in cell order
  {    0,    3,    8,   10,   12,   14 }, //   0
  {    0,    2,    8,   10,   16,   18 }, //   1
  {    0,    1,    8,   12,   16,   20 }, //   2
  {    0,    6,   10,   14,   18,   22 }, //   3
  {    0,    5,   12,   14,   20,   22 }, //   4
  {    0,    4,   16,   18,   20,   22 }, //   5
  {    1,    3,    8,    9,   12,   13 }, //   6
  {    1,    2,    8,    9,   16,   17 }, //   7
  {    1,    7,    9,   13,   17,   21 }, //   8
  {    1,    5,   12,   13,   20,   21 }, //   9
  {    1,    4,   16,   17,   20,   21 }, //  10
  {    2,    3,    8,    9,   10,   11 }, //  11
  {    2,    7,    9,   11,   17,   19 }, //  12
  {    2,    6,   10,   11,   18,   19 }, //  13
  {    2,    4,   16,   17,   18,   19 }, //  14
  {    3,    7,    9,   11,   13,   15 }, //  15
  {    3,    6,   10,   11,   14,   15 }, //  16
  {    3,    5,   12,   13,   14,   15 }, //  17
  {    4,    7,   17,   19,   21,   23 }, //  18
  {    4,    6,   18,   19,   22,   23 }, //  19
  {    4,    5,   20,   21,   22,   23 }, //  20
  {    5,    7,   13,   15,   21,   23 }, //  21
  {    5,    6,   14,   15,   22,   23 }, //  22
  {    6,    7,   11,   15,   19,   23 }, //  23
};
float cellNormalK024[24][4] = { // Normals of cells, in cell order
  {    0.707107f,    0.000000f,    0.000000f,    0.707107f }, //   0
  {    0.000000f,    0.707107f,    0.000000f,    0.707107f }, //   1
  {    0.000000f,    0.000000f,    0.707107f,    0.707107f }, //   2
  {    0.000000f,    0.000000f,   -0.707107f,    0.707107f }, //   3
  {    0.000000f,   -0.707107f,    0.000000f,    0.707107f }, //   4
  {   -0.707107f,    0.000000f,    0.000000f,    0.707107f }, //   5
  {    0.707107f,    0.000000f,    0.707107f,    0.000000f }, //   6
  {    0.000000f,    0.707107f,    0.707107f,    0.000000f }, //   7
  {    0.000000f,    0.000000f,    0.707107f,   -0.707107f }, //   8
  {    0.000000f,   -0.707107f,    0.707107f,    0.000000f }, //   9
  {   -0.707107f,    0.000000f,    0.707107f,    0.000000f }, //  10
  {    0.707107f,    0.707107f,    0.000000f,    0.000000f }, //  11
  {    0.000000f,    0.707107f,    0.000000f,   -0.707107f }, //  12
  {    0.000000f,    0.707107f,   -0.707107f,    0.000000f }, //  13
  {   -0.707107f,    0.707107f,    0.000000f,    0.000000f }, //  14
  {    0.707107f,    0.000000f,    0.000000f,   -0.707107f }, //  15
  {    0.707107f,    0.000000f,   -0.707107f,    0.000000f }, //  16
  {    0.707107f,   -0.707107f,    0.000000f,    0.000000f }, //  17
  {   -0.707107f,    0.000000f,    0.000000f,   -0.707107f }, //  18
  {   -0.707107f,    0.000000f,   -0.707107f,    0.000000f }, //  19
  {   -0.707107f,   -0.707107f,    0.000000f,    0.000000f }, //  20
  {    0.000000f,   -0.707107f,    0.000000f,   -0.707107f }, //  21
  {    0.000000f,   -0.707107f,   -0.707107f,    0.000000f }, //  22
  {    0.000000f,    0.000000f,   -0.707107f,   -0.707107f }, //  23
};
int cellToOppositeK024[24] = { // The opposite cell, in cell order
     18, //   0
     21, //   1
     23, //   2
      8, //   3
     12, //   4
     15, //   5
     19, //   6
     22, //   7
      3, //   8
     13, //   9
     16, //  10
     20, //  11
      4, //  12
      9, //  13
     17, //  14
      5, //  15
     10, //  16
     14, //  17
      0, //  18
      6, //  19
     11, //  20
      1, //  21
      7, //  22
      2, //  23
};
////////// The Radius of the whole K024 is 1. The radius of each cell is     0.707107
////////// The Distance from the origin to the centre of each cell of K024 is     0.707107
////////// The Sphere circumscribing each cell of K024 overlaps the origin by     0.000000
FigInfo infoK024 = {
    4, // numDims;
   24, // numVerts;
   96, // numEdges;
   96, // numFaces;
   24, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    6, // numVertsPerCell;
    3, // numEdgesPerFace;
   12, // numEdgesPerCell;
    8, // numFacesPerCell;
    4, // numFacesPerVert;
    3, // numFacesPerEdge;
    0, // numCellsPerVert;
    3, // numCellsPerEdge;
    2, // numCellsPerFace;
   -0.333333f, // dihedralCosine;
    0.707107f, // cellRadius;
    0.707107f, // cellCentreRadius;
    0.816497f, // faceCentreRadius;
(float *)vertexK024, // The vertex matrix
(int *)edgeK024, // The edge Matrix
(int *)vertToEdgeK024, // The Matrix of vertices for each edge
(int *)faceK024, // The face to edge matrix
(int *)edgeToFaceK024, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK024, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK024, // The cell matrix
(float *)cellNormalK024, // The normal of a 4D cell
(int *)cellToEdgeK024, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK024, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
float vertexK120[600][4] = { // Coordinates of vertices, in vertex order
  {    0.707107f,    0.707107f,    0.000000f,    0.000000f }, //   0
  {    0.707107f,   -0.707107f,    0.000000f,    0.000000f }, //   1
  {   -0.707107f,    0.707107f,    0.000000f,    0.000000f }, //   2
  {   -0.707107f,   -0.707107f,    0.000000f,    0.000000f }, //   3
  {    0.707107f,    0.000000f,    0.707107f,    0.000000f }, //   4
  {    0.707107f,    0.000000f,   -0.707107f,    0.000000f }, //   5
  {   -0.707107f,    0.000000f,    0.707107f,    0.000000f }, //   6
  {   -0.707107f,    0.000000f,   -0.707107f,    0.000000f }, //   7
  {    0.707107f,    0.000000f,    0.000000f,    0.707107f }, //   8
  {    0.707107f,    0.000000f,    0.000000f,   -0.707107f }, //   9
  {   -0.707107f,    0.000000f,    0.000000f,    0.707107f }, //  10
  {   -0.707107f,    0.000000f,    0.000000f,   -0.707107f }, //  11
  {    0.000000f,    0.707107f,    0.707107f,    0.000000f }, //  12
  {    0.000000f,    0.707107f,   -0.707107f,    0.000000f }, //  13
  {    0.000000f,   -0.707107f,    0.707107f,    0.000000f }, //  14
  {    0.000000f,   -0.707107f,   -0.707107f,    0.000000f }, //  15
  {    0.000000f,    0.707107f,    0.000000f,    0.707107f }, //  16
  {    0.000000f,    0.707107f,    0.000000f,   -0.707107f }, //  17
  {    0.000000f,   -0.707107f,    0.000000f,    0.707107f }, //  18
  {    0.000000f,   -0.707107f,    0.000000f,   -0.707107f }, //  19
  {    0.000000f,    0.000000f,    0.707107f,    0.707107f }, //  20
  {    0.000000f,    0.000000f,    0.707107f,   -0.707107f }, //  21
  {    0.000000f,    0.000000f,   -0.707107f,    0.707107f }, //  22
  {    0.000000f,    0.000000f,   -0.707107f,   -0.707107f }, //  23
  {    0.790569f,    0.353553f,    0.353553f,    0.353553f }, //  24
  {    0.790569f,    0.353553f,    0.353553f,   -0.353553f }, //  25
  {    0.790569f,    0.353553f,   -0.353553f,    0.353553f }, //  26
  {    0.790569f,    0.353553f,   -0.353553f,   -0.353553f }, //  27
  {    0.790569f,   -0.353553f,    0.353553f,    0.353553f }, //  28
  {    0.790569f,   -0.353553f,    0.353553f,   -0.353553f }, //  29
  {    0.790569f,   -0.353553f,   -0.353553f,    0.353553f }, //  30
  {    0.790569f,   -0.353553f,   -0.353553f,   -0.353553f }, //  31
  {   -0.790569f,    0.353553f,    0.353553f,    0.353553f }, //  32
  {   -0.790569f,    0.353553f,    0.353553f,   -0.353553f }, //  33
  {   -0.790569f,    0.353553f,   -0.353553f,    0.353553f }, //  34
  {   -0.790569f,    0.353553f,   -0.353553f,   -0.353553f }, //  35
  {   -0.790569f,   -0.353553f,    0.353553f,    0.353553f }, //  36
  {   -0.790569f,   -0.353553f,    0.353553f,   -0.353553f }, //  37
  {   -0.790569f,   -0.353553f,   -0.353553f,    0.353553f }, //  38
  {   -0.790569f,   -0.353553f,   -0.353553f,   -0.353553f }, //  39
  {    0.353553f,    0.790569f,    0.353553f,    0.353553f }, //  40
  {    0.353553f,    0.790569f,    0.353553f,   -0.353553f }, //  41
  {    0.353553f,    0.790569f,   -0.353553f,    0.353553f }, //  42
  {    0.353553f,    0.790569f,   -0.353553f,   -0.353553f }, //  43
  {    0.353553f,   -0.790569f,    0.353553f,    0.353553f }, //  44
  {    0.353553f,   -0.790569f,    0.353553f,   -0.353553f }, //  45
  {    0.353553f,   -0.790569f,   -0.353553f,    0.353553f }, //  46
  {    0.353553f,   -0.790569f,   -0.353553f,   -0.353553f }, //  47
  {   -0.353553f,    0.790569f,    0.353553f,    0.353553f }, //  48
  {   -0.353553f,    0.790569f,    0.353553f,   -0.353553f }, //  49
  {   -0.353553f,    0.790569f,   -0.353553f,    0.353553f }, //  50
  {   -0.353553f,    0.790569f,   -0.353553f,   -0.353553f }, //  51
  {   -0.353553f,   -0.790569f,    0.353553f,    0.353553f }, //  52
  {   -0.353553f,   -0.790569f,    0.353553f,   -0.353553f }, //  53
  {   -0.353553f,   -0.790569f,   -0.353553f,    0.353553f }, //  54
  {   -0.353553f,   -0.790569f,   -0.353553f,   -0.353553f }, //  55
  {    0.353553f,    0.353553f,    0.790569f,    0.353553f }, //  56
  {    0.353553f,    0.353553f,    0.790569f,   -0.353553f }, //  57
  {    0.353553f,    0.353553f,   -0.790569f,    0.353553f }, //  58
  {    0.353553f,    0.353553f,   -0.790569f,   -0.353553f }, //  59
  {    0.353553f,   -0.353553f,    0.790569f,    0.353553f }, //  60
  {    0.353553f,   -0.353553f,    0.790569f,   -0.353553f }, //  61
  {    0.353553f,   -0.353553f,   -0.790569f,    0.353553f }, //  62
  {    0.353553f,   -0.353553f,   -0.790569f,   -0.353553f }, //  63
  {   -0.353553f,    0.353553f,    0.790569f,    0.353553f }, //  64
  {   -0.353553f,    0.353553f,    0.790569f,   -0.353553f }, //  65
  {   -0.353553f,    0.353553f,   -0.790569f,    0.353553f }, //  66
  {   -0.353553f,    0.353553f,   -0.790569f,   -0.353553f }, //  67
  {   -0.353553f,   -0.353553f,    0.790569f,    0.353553f }, //  68
  {   -0.353553f,   -0.353553f,    0.790569f,   -0.353553f }, //  69
  {   -0.353553f,   -0.353553f,   -0.790569f,    0.353553f }, //  70
  {   -0.353553f,   -0.353553f,   -0.790569f,   -0.353553f }, //  71
  {    0.353553f,    0.353553f,    0.353553f,    0.790569f }, //  72
  {    0.353553f,    0.353553f,    0.353553f,   -0.790569f }, //  73
  {    0.353553f,    0.353553f,   -0.353553f,    0.790569f }, //  74
  {    0.353553f,    0.353553f,   -0.353553f,   -0.790569f }, //  75
  {    0.353553f,   -0.353553f,    0.353553f,    0.790569f }, //  76
  {    0.353553f,   -0.353553f,    0.353553f,   -0.790569f }, //  77
  {    0.353553f,   -0.353553f,   -0.353553f,    0.790569f }, //  78
  {    0.353553f,   -0.353553f,   -0.353553f,   -0.790569f }, //  79
  {   -0.353553f,    0.353553f,    0.353553f,    0.790569f }, //  80
  {   -0.353553f,    0.353553f,    0.353553f,   -0.790569f }, //  81
  {   -0.353553f,    0.353553f,   -0.353553f,    0.790569f }, //  82
  {   -0.353553f,    0.353553f,   -0.353553f,   -0.790569f }, //  83
  {   -0.353553f,   -0.353553f,    0.353553f,    0.790569f }, //  84
  {   -0.353553f,   -0.353553f,    0.353553f,   -0.790569f }, //  85
  {   -0.353553f,   -0.353553f,   -0.353553f,    0.790569f }, //  86
  {   -0.353553f,   -0.353553f,   -0.353553f,   -0.790569f }, //  87
  {    0.135045f,    0.572061f,    0.572061f,    0.572061f }, //  88
  {    0.135045f,    0.572061f,    0.572061f,   -0.572061f }, //  89
  {    0.135045f,    0.572061f,   -0.572061f,    0.572061f }, //  90
  {    0.135045f,    0.572061f,   -0.572061f,   -0.572061f }, //  91
  {    0.135045f,   -0.572061f,    0.572061f,    0.572061f }, //  92
  {    0.135045f,   -0.572061f,    0.572061f,   -0.572061f }, //  93
  {    0.135045f,   -0.572061f,   -0.572061f,    0.572061f }, //  94
  {    0.135045f,   -0.572061f,   -0.572061f,   -0.572061f }, //  95
  {   -0.135045f,    0.572061f,    0.572061f,    0.572061f }, //  96
  {   -0.135045f,    0.572061f,    0.572061f,   -0.572061f }, //  97
  {   -0.135045f,    0.572061f,   -0.572061f,    0.572061f }, //  98
  {   -0.135045f,    0.572061f,   -0.572061f,   -0.572061f }, //  99
  {   -0.135045f,   -0.572061f,    0.572061f,    0.572061f }, // 100
  {   -0.135045f,   -0.572061f,    0.572061f,   -0.572061f }, // 101
  {   -0.135045f,   -0.572061f,   -0.572061f,    0.572061f }, // 102
  {   -0.135045f,   -0.572061f,   -0.572061f,   -0.572061f }, // 103
  {    0.572061f,    0.135045f,    0.572061f,    0.572061f }, // 104
  {    0.572061f,    0.135045f,    0.572061f,   -0.572061f }, // 105
  {    0.572061f,    0.135045f,   -0.572061f,    0.572061f }, // 106
  {    0.572061f,    0.135045f,   -0.572061f,   -0.572061f }, // 107
  {    0.572061f,   -0.135045f,    0.572061f,    0.572061f }, // 108
  {    0.572061f,   -0.135045f,    0.572061f,   -0.572061f }, // 109
  {    0.572061f,   -0.135045f,   -0.572061f,    0.572061f }, // 110
  {    0.572061f,   -0.135045f,   -0.572061f,   -0.572061f }, // 111
  {   -0.572061f,    0.135045f,    0.572061f,    0.572061f }, // 112
  {   -0.572061f,    0.135045f,    0.572061f,   -0.572061f }, // 113
  {   -0.572061f,    0.135045f,   -0.572061f,    0.572061f }, // 114
  {   -0.572061f,    0.135045f,   -0.572061f,   -0.572061f }, // 115
  {   -0.572061f,   -0.135045f,    0.572061f,    0.572061f }, // 116
  {   -0.572061f,   -0.135045f,    0.572061f,   -0.572061f }, // 117
  {   -0.572061f,   -0.135045f,   -0.572061f,    0.572061f }, // 118
  {   -0.572061f,   -0.135045f,   -0.572061f,   -0.572061f }, // 119
  {    0.572061f,    0.572061f,    0.135045f,    0.572061f }, // 120
  {    0.572061f,    0.572061f,    0.135045f,   -0.572061f }, // 121
  {    0.572061f,    0.572061f,   -0.135045f,    0.572061f }, // 122
  {    0.572061f,    0.572061f,   -0.135045f,   -0.572061f }, // 123
  {    0.572061f,   -0.572061f,    0.135045f,    0.572061f }, // 124
  {    0.572061f,   -0.572061f,    0.135045f,   -0.572061f }, // 125
  {    0.572061f,   -0.572061f,   -0.135045f,    0.572061f }, // 126
  {    0.572061f,   -0.572061f,   -0.135045f,   -0.572061f }, // 127
  {   -0.572061f,    0.572061f,    0.135045f,    0.572061f }, // 128
  {   -0.572061f,    0.572061f,    0.135045f,   -0.572061f }, // 129
  {   -0.572061f,    0.572061f,   -0.135045f,    0.572061f }, // 130
  {   -0.572061f,    0.572061f,   -0.135045f,   -0.572061f }, // 131
  {   -0.572061f,   -0.572061f,    0.135045f,    0.572061f }, // 132
  {   -0.572061f,   -0.572061f,    0.135045f,   -0.572061f }, // 133
  {   -0.572061f,   -0.572061f,   -0.135045f,    0.572061f }, // 134
  {   -0.572061f,   -0.572061f,   -0.135045f,   -0.572061f }, // 135
  {    0.572061f,    0.572061f,    0.572061f,    0.135045f }, // 136
  {    0.572061f,    0.572061f,    0.572061f,   -0.135045f }, // 137
  {    0.572061f,    0.572061f,   -0.572061f,    0.135045f }, // 138
  {    0.572061f,    0.572061f,   -0.572061f,   -0.135045f }, // 139
  {    0.572061f,   -0.572061f,    0.572061f,    0.135045f }, // 140
  {    0.572061f,   -0.572061f,    0.572061f,   -0.135045f }, // 141
  {    0.572061f,   -0.572061f,   -0.572061f,    0.135045f }, // 142
  {    0.572061f,   -0.572061f,   -0.572061f,   -0.135045f }, // 143
  {   -0.572061f,    0.572061f,    0.572061f,    0.135045f }, // 144
  {   -0.572061f,    0.572061f,    0.572061f,   -0.135045f }, // 145
  {   -0.572061f,    0.572061f,   -0.572061f,    0.135045f }, // 146
  {   -0.572061f,    0.572061f,   -0.572061f,   -0.135045f }, // 147
  {   -0.572061f,   -0.572061f,    0.572061f,    0.135045f }, // 148
  {   -0.572061f,   -0.572061f,    0.572061f,   -0.135045f }, // 149
  {   -0.572061f,   -0.572061f,   -0.572061f,    0.135045f }, // 150
  {   -0.572061f,   -0.572061f,   -0.572061f,   -0.135045f }, // 151
  {    0.925615f,    0.218508f,    0.218508f,    0.218508f }, // 152
  {    0.925615f,    0.218508f,    0.218508f,   -0.218508f }, // 153
  {    0.925615f,    0.218508f,   -0.218508f,    0.218508f }, // 154
  {    0.925615f,    0.218508f,   -0.218508f,   -0.218508f }, // 155
  {    0.925615f,   -0.218508f,    0.218508f,    0.218508f }, // 156
  {    0.925615f,   -0.218508f,    0.218508f,   -0.218508f }, // 157
  {    0.925615f,   -0.218508f,   -0.218508f,    0.218508f }, // 158
  {    0.925615f,   -0.218508f,   -0.218508f,   -0.218508f }, // 159
  {   -0.925615f,    0.218508f,    0.218508f,    0.218508f }, // 160
  {   -0.925615f,    0.218508f,    0.218508f,   -0.218508f }, // 161
  {   -0.925615f,    0.218508f,   -0.218508f,    0.218508f }, // 162
  {   -0.925615f,    0.218508f,   -0.218508f,   -0.218508f }, // 163
  {   -0.925615f,   -0.218508f,    0.218508f,    0.218508f }, // 164
  {   -0.925615f,   -0.218508f,    0.218508f,   -0.218508f }, // 165
  {   -0.925615f,   -0.218508f,   -0.218508f,    0.218508f }, // 166
  {   -0.925615f,   -0.218508f,   -0.218508f,   -0.218508f }, // 167
  {    0.218508f,    0.925615f,    0.218508f,    0.218508f }, // 168
  {    0.218508f,    0.925615f,    0.218508f,   -0.218508f }, // 169
  {    0.218508f,    0.925615f,   -0.218508f,    0.218508f }, // 170
  {    0.218508f,    0.925615f,   -0.218508f,   -0.218508f }, // 171
  {    0.218508f,   -0.925615f,    0.218508f,    0.218508f }, // 172
  {    0.218508f,   -0.925615f,    0.218508f,   -0.218508f }, // 173
  {    0.218508f,   -0.925615f,   -0.218508f,    0.218508f }, // 174
  {    0.218508f,   -0.925615f,   -0.218508f,   -0.218508f }, // 175
  {   -0.218508f,    0.925615f,    0.218508f,    0.218508f }, // 176
  {   -0.218508f,    0.925615f,    0.218508f,   -0.218508f }, // 177
  {   -0.218508f,    0.925615f,   -0.218508f,    0.218508f }, // 178
  {   -0.218508f,    0.925615f,   -0.218508f,   -0.218508f }, // 179
  {   -0.218508f,   -0.925615f,    0.218508f,    0.218508f }, // 180
  {   -0.218508f,   -0.925615f,    0.218508f,   -0.218508f }, // 181
  {   -0.218508f,   -0.925615f,   -0.218508f,    0.218508f }, // 182
  {   -0.218508f,   -0.925615f,   -0.218508f,   -0.218508f }, // 183
  {    0.218508f,    0.218508f,    0.925615f,    0.218508f }, // 184
  {    0.218508f,    0.218508f,    0.925615f,   -0.218508f }, // 185
  {    0.218508f,    0.218508f,   -0.925615f,    0.218508f }, // 186
  {    0.218508f,    0.218508f,   -0.925615f,   -0.218508f }, // 187
  {    0.218508f,   -0.218508f,    0.925615f,    0.218508f }, // 188
  {    0.218508f,   -0.218508f,    0.925615f,   -0.218508f }, // 189
  {    0.218508f,   -0.218508f,   -0.925615f,    0.218508f }, // 190
  {    0.218508f,   -0.218508f,   -0.925615f,   -0.218508f }, // 191
  {   -0.218508f,    0.218508f,    0.925615f,    0.218508f }, // 192
  {   -0.218508f,    0.218508f,    0.925615f,   -0.218508f }, // 193
  {   -0.218508f,    0.218508f,   -0.925615f,    0.218508f }, // 194
  {   -0.218508f,    0.218508f,   -0.925615f,   -0.218508f }, // 195
  {   -0.218508f,   -0.218508f,    0.925615f,    0.218508f }, // 196
  {   -0.218508f,   -0.218508f,    0.925615f,   -0.218508f }, // 197
  {   -0.218508f,   -0.218508f,   -0.925615f,    0.218508f }, // 198
  {   -0.218508f,   -0.218508f,   -0.925615f,   -0.218508f }, // 199
  {    0.218508f,    0.218508f,    0.218508f,    0.925615f }, // 200
  {    0.218508f,    0.218508f,    0.218508f,   -0.925615f }, // 201
  {    0.218508f,    0.218508f,   -0.218508f,    0.925615f }, // 202
  {    0.218508f,    0.218508f,   -0.218508f,   -0.925615f }, // 203
  {    0.218508f,   -0.218508f,    0.218508f,    0.925615f }, // 204
  {    0.218508f,   -0.218508f,    0.218508f,   -0.925615f }, // 205
  {    0.218508f,   -0.218508f,   -0.218508f,    0.925615f }, // 206
  {    0.218508f,   -0.218508f,   -0.218508f,   -0.925615f }, // 207
  {   -0.218508f,    0.218508f,    0.218508f,    0.925615f }, // 208
  {   -0.218508f,    0.218508f,    0.218508f,   -0.925615f }, // 209
  {   -0.218508f,    0.218508f,   -0.218508f,    0.925615f }, // 210
  {   -0.218508f,    0.218508f,   -0.218508f,   -0.925615f }, // 211
  {   -0.218508f,   -0.218508f,    0.218508f,    0.925615f }, // 212
  {   -0.218508f,   -0.218508f,    0.218508f,   -0.925615f }, // 213
  {   -0.218508f,   -0.218508f,   -0.218508f,    0.925615f }, // 214
  {   -0.218508f,   -0.218508f,   -0.218508f,   -0.925615f }, // 215
  {    0.925615f,    0.135045f,    0.353553f,    0.000000f }, // 216
  {    0.925615f,    0.135045f,   -0.353553f,    0.000000f }, // 217
  {    0.925615f,   -0.135045f,    0.353553f,    0.000000f }, // 218
  {    0.925615f,   -0.135045f,   -0.353553f,    0.000000f }, // 219
  {   -0.925615f,    0.135045f,    0.353553f,    0.000000f }, // 220
  {   -0.925615f,    0.135045f,   -0.353553f,    0.000000f }, // 221
  {   -0.925615f,   -0.135045f,    0.353553f,    0.000000f }, // 222
  {   -0.925615f,   -0.135045f,   -0.353553f,    0.000000f }, // 223
  {    0.135045f,    0.353553f,    0.925615f,    0.000000f }, // 224
  {    0.135045f,    0.353553f,   -0.925615f,    0.000000f }, // 225
  {    0.135045f,   -0.353553f,    0.925615f,    0.000000f }, // 226
  {    0.135045f,   -0.353553f,   -0.925615f,    0.000000f }, // 227
  {   -0.135045f,    0.353553f,    0.925615f,    0.000000f }, // 228
  {   -0.135045f,    0.353553f,   -0.925615f,    0.000000f }, // 229
  {   -0.135045f,   -0.353553f,    0.925615f,    0.000000f }, // 230
  {   -0.135045f,   -0.353553f,   -0.925615f,    0.000000f }, // 231
  {    0.925615f,    0.353553f,    0.000000f,    0.135045f }, // 232
  {    0.925615f,    0.353553f,    0.000000f,   -0.135045f }, // 233
  {    0.925615f,   -0.353553f,    0.000000f,    0.135045f }, // 234
  {    0.925615f,   -0.353553f,    0.000000f,   -0.135045f }, // 235
  {   -0.925615f,    0.353553f,    0.000000f,    0.135045f }, // 236
  {   -0.925615f,    0.353553f,    0.000000f,   -0.135045f }, // 237
  {   -0.925615f,   -0.353553f,    0.000000f,    0.135045f }, // 238
  {   -0.925615f,   -0.353553f,    0.000000f,   -0.135045f }, // 239
  {    0.925615f,    0.000000f,    0.135045f,    0.353553f }, // 240
  {    0.925615f,    0.000000f,    0.135045f,   -0.353553f }, // 241
  {    0.925615f,    0.000000f,   -0.135045f,    0.353553f }, // 242
  {    0.925615f,    0.000000f,   -0.135045f,   -0.353553f }, // 243
  {   -0.925615f,    0.000000f,    0.135045f,    0.353553f }, // 244
  {   -0.925615f,    0.000000f,    0.135045f,   -0.353553f }, // 245
  {   -0.925615f,    0.000000f,   -0.135045f,    0.353553f }, // 246
  {   -0.925615f,    0.000000f,   -0.135045f,   -0.353553f }, // 247
  {    0.353553f,    0.925615f,    0.135045f,    0.000000f }, // 248
  {    0.353553f,    0.925615f,   -0.135045f,    0.000000f }, // 249
  {    0.353553f,   -0.925615f,    0.135045f,    0.000000f }, // 250
  {    0.353553f,   -0.925615f,   -0.135045f,    0.000000f }, // 251
  {   -0.353553f,    0.925615f,    0.135045f,    0.000000f }, // 252
  {   -0.353553f,    0.925615f,   -0.135045f,    0.000000f }, // 253
  {   -0.353553f,   -0.925615f,    0.135045f,    0.000000f }, // 254
  {   -0.353553f,   -0.925615f,   -0.135045f,    0.000000f }, // 255
  {    0.135045f,    0.925615f,    0.000000f,    0.353553f }, // 256
  {    0.135045f,    0.925615f,    0.000000f,   -0.353553f }, // 257
  {    0.135045f,   -0.925615f,    0.000000f,    0.353553f }, // 258
  {    0.135045f,   -0.925615f,    0.000000f,   -0.353553f }, // 259
  {   -0.135045f,    0.925615f,    0.000000f,    0.353553f }, // 260
  {   -0.135045f,    0.925615f,    0.000000f,   -0.353553f }, // 261
  {   -0.135045f,   -0.925615f,    0.000000f,    0.353553f }, // 262
  {   -0.135045f,   -0.925615f,    0.000000f,   -0.353553f }, // 263
  {    0.000000f,    0.353553f,    0.135045f,    0.925615f }, // 264
  {    0.000000f,    0.353553f,    0.135045f,   -0.925615f }, // 265
  {    0.000000f,    0.353553f,   -0.135045f,    0.925615f }, // 266
  {    0.000000f,    0.353553f,   -0.135045f,   -0.925615f }, // 267
  {    0.000000f,   -0.353553f,    0.135045f,    0.925615f }, // 268
  {    0.000000f,   -0.353553f,    0.135045f,   -0.925615f }, // 269
  {    0.000000f,   -0.353553f,   -0.135045f,    0.925615f }, // 270
  {    0.000000f,   -0.353553f,   -0.135045f,   -0.925615f }, // 271
  {    0.000000f,    0.925615f,    0.353553f,    0.135045f }, // 272
  {    0.000000f,    0.925615f,    0.353553f,   -0.135045f }, // 273
  {    0.000000f,    0.925615f,   -0.353553f,    0.135045f }, // 274
  {    0.000000f,    0.925615f,   -0.353553f,   -0.135045f }, // 275
  {    0.000000f,   -0.925615f,    0.353553f,    0.135045f }, // 276
  {    0.000000f,   -0.925615f,    0.353553f,   -0.135045f }, // 277
  {    0.000000f,   -0.925615f,   -0.353553f,    0.135045f }, // 278
  {    0.000000f,   -0.925615f,   -0.353553f,   -0.135045f }, // 279
  {    0.135045f,    0.000000f,    0.353553f,    0.925615f }, // 280
  {    0.135045f,    0.000000f,    0.353553f,   -0.925615f }, // 281
  {    0.135045f,    0.000000f,   -0.353553f,    0.925615f }, // 282
  {    0.135045f,    0.000000f,   -0.353553f,   -0.925615f }, // 283
  {   -0.135045f,    0.000000f,    0.353553f,    0.925615f }, // 284
  {   -0.135045f,    0.000000f,    0.353553f,   -0.925615f }, // 285
  {   -0.135045f,    0.000000f,   -0.353553f,    0.925615f }, // 286
  {   -0.135045f,    0.000000f,   -0.353553f,   -0.925615f }, // 287
  {    0.353553f,    0.135045f,    0.000000f,    0.925615f }, // 288
  {    0.353553f,    0.135045f,    0.000000f,   -0.925615f }, // 289
  {    0.353553f,   -0.135045f,    0.000000f,    0.925615f }, // 290
  {    0.353553f,   -0.135045f,    0.000000f,   -0.925615f }, // 291
  {   -0.353553f,    0.135045f,    0.000000f,    0.925615f }, // 292
  {   -0.353553f,    0.135045f,    0.000000f,   -0.925615f }, // 293
  {   -0.353553f,   -0.135045f,    0.000000f,    0.925615f }, // 294
  {   -0.353553f,   -0.135045f,    0.000000f,   -0.925615f }, // 295
  {    0.000000f,    0.135045f,    0.925615f,    0.353553f }, // 296
  {    0.000000f,    0.135045f,    0.925615f,   -0.353553f }, // 297
  {    0.000000f,    0.135045f,   -0.925615f,    0.353553f }, // 298
  {    0.000000f,    0.135045f,   -0.925615f,   -0.353553f }, // 299
  {    0.000000f,   -0.135045f,    0.925615f,    0.353553f }, // 300
  {    0.000000f,   -0.135045f,    0.925615f,   -0.353553f }, // 301
  {    0.000000f,   -0.135045f,   -0.925615f,    0.353553f }, // 302
  {    0.000000f,   -0.135045f,   -0.925615f,   -0.353553f }, // 303
  {    0.353553f,    0.000000f,    0.925615f,    0.135045f }, // 304
  {    0.353553f,    0.000000f,    0.925615f,   -0.135045f }, // 305
  {    0.353553f,    0.000000f,   -0.925615f,    0.135045f }, // 306
  {    0.353553f,    0.000000f,   -0.925615f,   -0.135045f }, // 307
  {   -0.353553f,    0.000000f,    0.925615f,    0.135045f }, // 308
  {   -0.353553f,    0.000000f,    0.925615f,   -0.135045f }, // 309
  {   -0.353553f,    0.000000f,   -0.925615f,    0.135045f }, // 310
  {   -0.353553f,    0.000000f,   -0.925615f,   -0.135045f }, // 311
  {    0.790569f,    0.218508f,    0.572061f,    0.000000f }, // 312
  {    0.790569f,    0.218508f,   -0.572061f,    0.000000f }, // 313
  {    0.790569f,   -0.218508f,    0.572061f,    0.000000f }, // 314
  {    0.790569f,   -0.218508f,   -0.572061f,    0.000000f }, // 315
  {   -0.790569f,    0.218508f,    0.572061f,    0.000000f }, // 316
  {   -0.790569f,    0.218508f,   -0.572061f,    0.000000f }, // 317
  {   -0.790569f,   -0.218508f,    0.572061f,    0.000000f }, // 318
  {   -0.790569f,   -0.218508f,   -0.572061f,    0.000000f }, // 319
  {    0.218508f,    0.572061f,    0.790569f,    0.000000f }, // 320
  {    0.218508f,    0.572061f,   -0.790569f,    0.000000f }, // 321
  {    0.218508f,   -0.572061f,    0.790569f,    0.000000f }, // 322
  {    0.218508f,   -0.572061f,   -0.790569f,    0.000000f }, // 323
  {   -0.218508f,    0.572061f,    0.790569f,    0.000000f }, // 324
  {   -0.218508f,    0.572061f,   -0.790569f,    0.000000f }, // 325
  {   -0.218508f,   -0.572061f,    0.790569f,    0.000000f }, // 326
  {   -0.218508f,   -0.572061f,   -0.790569f,    0.000000f }, // 327
  {    0.790569f,    0.572061f,    0.000000f,    0.218508f }, // 328
  {    0.790569f,    0.572061f,    0.000000f,   -0.218508f }, // 329
  {    0.790569f,   -0.572061f,    0.000000f,    0.218508f }, // 330
  {    0.790569f,   -0.572061f,    0.000000f,   -0.218508f }, // 331
  {   -0.790569f,    0.572061f,    0.000000f,    0.218508f }, // 332
  {   -0.790569f,    0.572061f,    0.000000f,   -0.218508f }, // 333
  {   -0.790569f,   -0.572061f,    0.000000f,    0.218508f }, // 334
  {   -0.790569f,   -0.572061f,    0.000000f,   -0.218508f }, // 335
  {    0.790569f,    0.000000f,    0.218508f,    0.572061f }, // 336
  {    0.790569f,    0.000000f,    0.218508f,   -0.572061f }, // 337
  {    0.790569f,    0.000000f,   -0.218508f,    0.572061f }, // 338
  {    0.790569f,    0.000000f,   -0.218508f,   -0.572061f }, // 339
  {   -0.790569f,    0.000000f,    0.218508f,    0.572061f }, // 340
  {   -0.790569f,    0.000000f,    0.218508f,   -0.572061f }, // 341
  {   -0.790569f,    0.000000f,   -0.218508f,    0.572061f }, // 342
  {   -0.790569f,    0.000000f,   -0.218508f,   -0.572061f }, // 343
  {    0.572061f,    0.790569f,    0.218508f,    0.000000f }, // 344
  {    0.572061f,    0.790569f,   -0.218508f,    0.000000f }, // 345
  {    0.572061f,   -0.790569f,    0.218508f,    0.000000f }, // 346
  {    0.572061f,   -0.790569f,   -0.218508f,    0.000000f }, // 347
  {   -0.572061f,    0.790569f,    0.218508f,    0.000000f }, // 348
  {   -0.572061f,    0.790569f,   -0.218508f,    0.000000f }, // 349
  {   -0.572061f,   -0.790569f,    0.218508f,    0.000000f }, // 350
  {   -0.572061f,   -0.790569f,   -0.218508f,    0.000000f }, // 351
  {    0.218508f,    0.790569f,    0.000000f,    0.572061f }, // 352
  {    0.218508f,    0.790569f,    0.000000f,   -0.572061f }, // 353
  {    0.218508f,   -0.790569f,    0.000000f,    0.572061f }, // 354
  {    0.218508f,   -0.790569f,    0.000000f,   -0.572061f }, // 355
  {   -0.218508f,    0.790569f,    0.000000f,    0.572061f }, // 356
  {   -0.218508f,    0.790569f,    0.000000f,   -0.572061f }, // 357
  {   -0.218508f,   -0.790569f,    0.000000f,    0.572061f }, // 358
  {   -0.218508f,   -0.790569f,    0.000000f,   -0.572061f }, // 359
  {    0.000000f,    0.572061f,    0.218508f,    0.790569f }, // 360
  {    0.000000f,    0.572061f,    0.218508f,   -0.790569f }, // 361
  {    0.000000f,    0.572061f,   -0.218508f,    0.790569f }, // 362
  {    0.000000f,    0.572061f,   -0.218508f,   -0.790569f }, // 363
  {    0.000000f,   -0.572061f,    0.218508f,    0.790569f }, // 364
  {    0.000000f,   -0.572061f,    0.218508f,   -0.790569f }, // 365
  {    0.000000f,   -0.572061f,   -0.218508f,    0.790569f }, // 366
  {    0.000000f,   -0.572061f,   -0.218508f,   -0.790569f }, // 367
  {    0.000000f,    0.790569f,    0.572061f,    0.218508f }, // 368
  {    0.000000f,    0.790569f,    0.572061f,   -0.218508f }, // 369
  {    0.000000f,    0.790569f,   -0.572061f,    0.218508f }, // 370
  {    0.000000f,    0.790569f,   -0.572061f,   -0.218508f }, // 371
  {    0.000000f,   -0.790569f,    0.572061f,    0.218508f }, // 372
  {    0.000000f,   -0.790569f,    0.572061f,   -0.218508f }, // 373
  {    0.000000f,   -0.790569f,   -0.572061f,    0.218508f }, // 374
  {    0.000000f,   -0.790569f,   -0.572061f,   -0.218508f }, // 375
  {    0.218508f,    0.000000f,    0.572061f,    0.790569f }, // 376
  {    0.218508f,    0.000000f,    0.572061f,   -0.790569f }, // 377
  {    0.218508f,    0.000000f,   -0.572061f,    0.790569f }, // 378
  {    0.218508f,    0.000000f,   -0.572061f,   -0.790569f }, // 379
  {   -0.218508f,    0.000000f,    0.572061f,    0.790569f }, // 380
  {   -0.218508f,    0.000000f,    0.572061f,   -0.790569f }, // 381
  {   -0.218508f,    0.000000f,   -0.572061f,    0.790569f }, // 382
  {   -0.218508f,    0.000000f,   -0.572061f,   -0.790569f }, // 383
  {    0.572061f,    0.218508f,    0.000000f,    0.790569f }, // 384
  {    0.572061f,    0.218508f,    0.000000f,   -0.790569f }, // 385
  {    0.572061f,   -0.218508f,    0.000000f,    0.790569f }, // 386
  {    0.572061f,   -0.218508f,    0.000000f,   -0.790569f }, // 387
  {   -0.572061f,    0.218508f,    0.000000f,    0.790569f }, // 388
  {   -0.572061f,    0.218508f,    0.000000f,   -0.790569f }, // 389
  {   -0.572061f,   -0.218508f,    0.000000f,    0.790569f }, // 390
  {   -0.572061f,   -0.218508f,    0.000000f,   -0.790569f }, // 391
  {    0.000000f,    0.218508f,    0.790569f,    0.572061f }, // 392
  {    0.000000f,    0.218508f,    0.790569f,   -0.572061f }, // 393
  {    0.000000f,    0.218508f,   -0.790569f,    0.572061f }, // 394
  {    0.000000f,    0.218508f,   -0.790569f,   -0.572061f }, // 395
  {    0.000000f,   -0.218508f,    0.790569f,    0.572061f }, // 396
  {    0.000000f,   -0.218508f,    0.790569f,   -0.572061f }, // 397
  {    0.000000f,   -0.218508f,   -0.790569f,    0.572061f }, // 398
  {    0.000000f,   -0.218508f,   -0.790569f,   -0.572061f }, // 399
  {    0.572061f,    0.000000f,    0.790569f,    0.218508f }, // 400
  {    0.572061f,    0.000000f,    0.790569f,   -0.218508f }, // 401
  {    0.572061f,    0.000000f,   -0.790569f,    0.218508f }, // 402
  {    0.572061f,    0.000000f,   -0.790569f,   -0.218508f }, // 403
  {   -0.572061f,    0.000000f,    0.790569f,    0.218508f }, // 404
  {   -0.572061f,    0.000000f,    0.790569f,   -0.218508f }, // 405
  {   -0.572061f,    0.000000f,   -0.790569f,    0.218508f }, // 406
  {   -0.572061f,    0.000000f,   -0.790569f,   -0.218508f }, // 407
  {    0.707107f,    0.353553f,    0.572061f,    0.218508f }, // 408
  {    0.707107f,    0.353553f,   -0.572061f,    0.218508f }, // 409
  {    0.707107f,   -0.353553f,    0.572061f,    0.218508f }, // 410
  {    0.707107f,   -0.353553f,   -0.572061f,    0.218508f }, // 411
  {   -0.707107f,    0.353553f,    0.572061f,    0.218508f }, // 412
  {   -0.707107f,    0.353553f,   -0.572061f,    0.218508f }, // 413
  {   -0.707107f,   -0.353553f,    0.572061f,    0.218508f }, // 414
  {   -0.707107f,   -0.353553f,   -0.572061f,    0.218508f }, // 415
  {    0.707107f,    0.353553f,    0.572061f,   -0.218508f }, // 416
  {    0.707107f,    0.353553f,   -0.572061f,   -0.218508f }, // 417
  {    0.707107f,   -0.353553f,    0.572061f,   -0.218508f }, // 418
  {    0.707107f,   -0.353553f,   -0.572061f,   -0.218508f }, // 419
  {   -0.707107f,    0.353553f,    0.572061f,   -0.218508f }, // 420
  {   -0.707107f,    0.353553f,   -0.572061f,   -0.218508f }, // 421
  {   -0.707107f,   -0.353553f,    0.572061f,   -0.218508f }, // 422
  {   -0.707107f,   -0.353553f,   -0.572061f,   -0.218508f }, // 423
  {    0.353553f,    0.572061f,    0.707107f,    0.218508f }, // 424
  {    0.353553f,    0.572061f,   -0.707107f,    0.218508f }, // 425
  {    0.353553f,   -0.572061f,    0.707107f,    0.218508f }, // 426
  {    0.353553f,   -0.572061f,   -0.707107f,    0.218508f }, // 427
  {   -0.353553f,    0.572061f,    0.707107f,    0.218508f }, // 428
  {   -0.353553f,    0.572061f,   -0.707107f,    0.218508f }, // 429
  {   -0.353553f,   -0.572061f,    0.707107f,    0.218508f }, // 430
  {   -0.353553f,   -0.572061f,   -0.707107f,    0.218508f }, // 431
  {    0.353553f,    0.572061f,    0.707107f,   -0.218508f }, // 432
  {    0.353553f,    0.572061f,   -0.707107f,   -0.218508f }, // 433
  {    0.353553f,   -0.572061f,    0.707107f,   -0.218508f }, // 434
  {    0.353553f,   -0.572061f,   -0.707107f,   -0.218508f }, // 435
  {   -0.353553f,    0.572061f,    0.707107f,   -0.218508f }, // 436
  {   -0.353553f,    0.572061f,   -0.707107f,   -0.218508f }, // 437
  {   -0.353553f,   -0.572061f,    0.707107f,   -0.218508f }, // 438
  {   -0.353553f,   -0.572061f,   -0.707107f,   -0.218508f }, // 439
  {    0.707107f,    0.572061f,    0.218508f,    0.353553f }, // 440
  {    0.707107f,    0.572061f,    0.218508f,   -0.353553f }, // 441
  {    0.707107f,   -0.572061f,    0.218508f,    0.353553f }, // 442
  {    0.707107f,   -0.572061f,    0.218508f,   -0.353553f }, // 443
  {   -0.707107f,    0.572061f,    0.218508f,    0.353553f }, // 444
  {   -0.707107f,    0.572061f,    0.218508f,   -0.353553f }, // 445
  {   -0.707107f,   -0.572061f,    0.218508f,    0.353553f }, // 446
  {   -0.707107f,   -0.572061f,    0.218508f,   -0.353553f }, // 447
  {    0.707107f,    0.572061f,   -0.218508f,    0.353553f }, // 448
  {    0.707107f,    0.572061f,   -0.218508f,   -0.353553f }, // 449
  {    0.707107f,   -0.572061f,   -0.218508f,    0.353553f }, // 450
  {    0.707107f,   -0.572061f,   -0.218508f,   -0.353553f }, // 451
  {   -0.707107f,    0.572061f,   -0.218508f,    0.353553f }, // 452
  {   -0.707107f,    0.572061f,   -0.218508f,   -0.353553f }, // 453
  {   -0.707107f,   -0.572061f,   -0.218508f,    0.353553f }, // 454
  {   -0.707107f,   -0.572061f,   -0.218508f,   -0.353553f }, // 455
  {    0.707107f,    0.218508f,    0.353553f,    0.572061f }, // 456
  {    0.707107f,    0.218508f,    0.353553f,   -0.572061f }, // 457
  {    0.707107f,    0.218508f,   -0.353553f,    0.572061f }, // 458
  {    0.707107f,    0.218508f,   -0.353553f,   -0.572061f }, // 459
  {   -0.707107f,    0.218508f,    0.353553f,    0.572061f }, // 460
  {   -0.707107f,    0.218508f,    0.353553f,   -0.572061f }, // 461
  {   -0.707107f,    0.218508f,   -0.353553f,    0.572061f }, // 462
  {   -0.707107f,    0.218508f,   -0.353553f,   -0.572061f }, // 463
  {    0.707107f,   -0.218508f,    0.353553f,    0.572061f }, // 464
  {    0.707107f,   -0.218508f,    0.353553f,   -0.572061f }, // 465
  {    0.707107f,   -0.218508f,   -0.353553f,    0.572061f }, // 466
  {    0.707107f,   -0.218508f,   -0.353553f,   -0.572061f }, // 467
  {   -0.707107f,   -0.218508f,    0.353553f,    0.572061f }, // 468
  {   -0.707107f,   -0.218508f,    0.353553f,   -0.572061f }, // 469
  {   -0.707107f,   -0.218508f,   -0.353553f,    0.572061f }, // 470
  {   -0.707107f,   -0.218508f,   -0.353553f,   -0.572061f }, // 471
  {    0.572061f,    0.707107f,    0.353553f,    0.218508f }, // 472
  {    0.572061f,    0.707107f,   -0.353553f,    0.218508f }, // 473
  {    0.572061f,   -0.707107f,    0.353553f,    0.218508f }, // 474
  {    0.572061f,   -0.707107f,   -0.353553f,    0.218508f }, // 475
  {   -0.572061f,    0.707107f,    0.353553f,    0.218508f }, // 476
  {   -0.572061f,    0.707107f,   -0.353553f,    0.218508f }, // 477
  {   -0.572061f,   -0.707107f,    0.353553f,    0.218508f }, // 478
  {   -0.572061f,   -0.707107f,   -0.353553f,    0.218508f }, // 479
  {    0.572061f,    0.707107f,    0.353553f,   -0.218508f }, // 480
  {    0.572061f,    0.707107f,   -0.353553f,   -0.218508f }, // 481
  {    0.572061f,   -0.707107f,    0.353553f,   -0.218508f }, // 482
  {    0.572061f,   -0.707107f,   -0.353553f,   -0.218508f }, // 483
  {   -0.572061f,    0.707107f,    0.353553f,   -0.218508f }, // 484
  {   -0.572061f,    0.707107f,   -0.353553f,   -0.218508f }, // 485
  {   -0.572061f,   -0.707107f,    0.353553f,   -0.218508f }, // 486
  {   -0.572061f,   -0.707107f,   -0.353553f,   -0.218508f }, // 487
  {    0.353553f,    0.707107f,    0.218508f,    0.572061f }, // 488
  {    0.353553f,    0.707107f,    0.218508f,   -0.572061f }, // 489
  {    0.353553f,   -0.707107f,    0.218508f,    0.572061f }, // 490
  {    0.353553f,   -0.707107f,    0.218508f,   -0.572061f }, // 491
  {   -0.353553f,    0.707107f,    0.218508f,    0.572061f }, // 492
  {   -0.353553f,    0.707107f,    0.218508f,   -0.572061f }, // 493
  {   -0.353553f,   -0.707107f,    0.218508f,    0.572061f }, // 494
  {   -0.353553f,   -0.707107f,    0.218508f,   -0.572061f }, // 495
  {    0.353553f,    0.707107f,   -0.218508f,    0.572061f }, // 496
  {    0.353553f,    0.707107f,   -0.218508f,   -0.572061f }, // 497
  {    0.353553f,   -0.707107f,   -0.218508f,    0.572061f }, // 498
  {    0.353553f,   -0.707107f,   -0.218508f,   -0.572061f }, // 499
  {   -0.353553f,    0.707107f,   -0.218508f,    0.572061f }, // 500
  {   -0.353553f,    0.707107f,   -0.218508f,   -0.572061f }, // 501
  {   -0.353553f,   -0.707107f,   -0.218508f,    0.572061f }, // 502
  {   -0.353553f,   -0.707107f,   -0.218508f,   -0.572061f }, // 503
  {    0.218508f,    0.572061f,    0.353553f,    0.707107f }, // 504
  {    0.218508f,    0.572061f,    0.353553f,   -0.707107f }, // 505
  {    0.218508f,    0.572061f,   -0.353553f,    0.707107f }, // 506
  {    0.218508f,    0.572061f,   -0.353553f,   -0.707107f }, // 507
  {    0.218508f,   -0.572061f,    0.353553f,    0.707107f }, // 508
  {    0.218508f,   -0.572061f,    0.353553f,   -0.707107f }, // 509
  {    0.218508f,   -0.572061f,   -0.353553f,    0.707107f }, // 510
  {    0.218508f,   -0.572061f,   -0.353553f,   -0.707107f }, // 511
  {   -0.218508f,    0.572061f,    0.353553f,    0.707107f }, // 512
  {   -0.218508f,    0.572061f,    0.353553f,   -0.707107f }, // 513
  {   -0.218508f,    0.572061f,   -0.353553f,    0.707107f }, // 514
  {   -0.218508f,    0.572061f,   -0.353553f,   -0.707107f }, // 515
  {   -0.218508f,   -0.572061f,    0.353553f,    0.707107f }, // 516
  {   -0.218508f,   -0.572061f,    0.353553f,   -0.707107f }, // 517
  {   -0.218508f,   -0.572061f,   -0.353553f,    0.707107f }, // 518
  {   -0.218508f,   -0.572061f,   -0.353553f,   -0.707107f }, // 519
  {    0.218508f,    0.707107f,    0.572061f,    0.353553f }, // 520
  {    0.218508f,    0.707107f,    0.572061f,   -0.353553f }, // 521
  {    0.218508f,    0.707107f,   -0.572061f,    0.353553f }, // 522
  {    0.218508f,    0.707107f,   -0.572061f,   -0.353553f }, // 523
  {    0.218508f,   -0.707107f,    0.572061f,    0.353553f }, // 524
  {    0.218508f,   -0.707107f,    0.572061f,   -0.353553f }, // 525
  {    0.218508f,   -0.707107f,   -0.572061f,    0.353553f }, // 526
  {    0.218508f,   -0.707107f,   -0.572061f,   -0.353553f }, // 527
  {   -0.218508f,    0.707107f,    0.572061f,    0.353553f }, // 528
  {   -0.218508f,    0.707107f,    0.572061f,   -0.353553f }, // 529
  {   -0.218508f,    0.707107f,   -0.572061f,    0.353553f }, // 530
  {   -0.218508f,    0.707107f,   -0.572061f,   -0.353553f }, // 531
  {   -0.218508f,   -0.707107f,    0.572061f,    0.353553f }, // 532
  {   -0.218508f,   -0.707107f,    0.572061f,   -0.353553f }, // 533
  {   -0.218508f,   -0.707107f,   -0.572061f,    0.353553f }, // 534
  {   -0.218508f,   -0.707107f,   -0.572061f,   -0.353553f }, // 535
  {    0.353553f,    0.218508f,    0.572061f,    0.707107f }, // 536
  {    0.353553f,    0.218508f,    0.572061f,   -0.707107f }, // 537
  {    0.353553f,    0.218508f,   -0.572061f,    0.707107f }, // 538
  {    0.353553f,    0.218508f,   -0.572061f,   -0.707107f }, // 539
  {   -0.353553f,    0.218508f,    0.572061f,    0.707107f }, // 540
  {   -0.353553f,    0.218508f,    0.572061f,   -0.707107f }, // 541
  {   -0.353553f,    0.218508f,   -0.572061f,    0.707107f }, // 542
  {   -0.353553f,    0.218508f,   -0.572061f,   -0.707107f }, // 543
  {    0.353553f,   -0.218508f,    0.572061f,    0.707107f }, // 544
  {    0.353553f,   -0.218508f,    0.572061f,   -0.707107f }, // 545
  {    0.353553f,   -0.218508f,   -0.572061f,    0.707107f }, // 546
  {    0.353553f,   -0.218508f,   -0.572061f,   -0.707107f }, // 547
  {   -0.353553f,   -0.218508f,    0.572061f,    0.707107f }, // 548
  {   -0.353553f,   -0.218508f,    0.572061f,   -0.707107f }, // 549
  {   -0.353553f,   -0.218508f,   -0.572061f,    0.707107f }, // 550
  {   -0.353553f,   -0.218508f,   -0.572061f,   -0.707107f }, // 551
  {    0.572061f,    0.353553f,    0.218508f,    0.707107f }, // 552
  {    0.572061f,    0.353553f,    0.218508f,   -0.707107f }, // 553
  {    0.572061f,   -0.353553f,    0.218508f,    0.707107f }, // 554
  {    0.572061f,   -0.353553f,    0.218508f,   -0.707107f }, // 555
  {   -0.572061f,    0.353553f,    0.218508f,    0.707107f }, // 556
  {   -0.572061f,    0.353553f,    0.218508f,   -0.707107f }, // 557
  {   -0.572061f,   -0.353553f,    0.218508f,    0.707107f }, // 558
  {   -0.572061f,   -0.353553f,    0.218508f,   -0.707107f }, // 559
  {    0.572061f,    0.353553f,   -0.218508f,    0.707107f }, // 560
  {    0.572061f,    0.353553f,   -0.218508f,   -0.707107f }, // 561
  {    0.572061f,   -0.353553f,   -0.218508f,    0.707107f }, // 562
  {    0.572061f,   -0.353553f,   -0.218508f,   -0.707107f }, // 563
  {   -0.572061f,    0.353553f,   -0.218508f,    0.707107f }, // 564
  {   -0.572061f,    0.353553f,   -0.218508f,   -0.707107f }, // 565
  {   -0.572061f,   -0.353553f,   -0.218508f,    0.707107f }, // 566
  {   -0.572061f,   -0.353553f,   -0.218508f,   -0.707107f }, // 567
  {    0.218508f,    0.353553f,    0.707107f,    0.572061f }, // 568
  {    0.218508f,    0.353553f,    0.707107f,   -0.572061f }, // 569
  {    0.218508f,    0.353553f,   -0.707107f,    0.572061f }, // 570
  {    0.218508f,    0.353553f,   -0.707107f,   -0.572061f }, // 571
  {    0.218508f,   -0.353553f,    0.707107f,    0.572061f }, // 572
  {    0.218508f,   -0.353553f,    0.707107f,   -0.572061f }, // 573
  {    0.218508f,   -0.353553f,   -0.707107f,    0.572061f }, // 574
  {    0.218508f,   -0.353553f,   -0.707107f,   -0.572061f }, // 575
  {   -0.218508f,    0.353553f,    0.707107f,    0.572061f }, // 576
  {   -0.218508f,    0.353553f,    0.707107f,   -0.572061f }, // 577
  {   -0.218508f,    0.353553f,   -0.707107f,    0.572061f }, // 578
  {   -0.218508f,    0.353553f,   -0.707107f,   -0.572061f }, // 579
  {   -0.218508f,   -0.353553f,    0.707107f,    0.572061f }, // 580
  {   -0.218508f,   -0.353553f,    0.707107f,   -0.572061f }, // 581
  {   -0.218508f,   -0.353553f,   -0.707107f,    0.572061f }, // 582
  {   -0.218508f,   -0.353553f,   -0.707107f,   -0.572061f }, // 583
  {    0.572061f,    0.218508f,    0.707107f,    0.353553f }, // 584
  {    0.572061f,    0.218508f,    0.707107f,   -0.353553f }, // 585
  {    0.572061f,    0.218508f,   -0.707107f,    0.353553f }, // 586
  {    0.572061f,    0.218508f,   -0.707107f,   -0.353553f }, // 587
  {   -0.572061f,    0.218508f,    0.707107f,    0.353553f }, // 588
  {   -0.572061f,    0.218508f,    0.707107f,   -0.353553f }, // 589
  {   -0.572061f,    0.218508f,   -0.707107f,    0.353553f }, // 590
  {   -0.572061f,    0.218508f,   -0.707107f,   -0.353553f }, // 591
  {    0.572061f,   -0.218508f,    0.707107f,    0.353553f }, // 592
  {    0.572061f,   -0.218508f,    0.707107f,   -0.353553f }, // 593
  {    0.572061f,   -0.218508f,   -0.707107f,    0.353553f }, // 594
  {    0.572061f,   -0.218508f,   -0.707107f,   -0.353553f }, // 595
  {   -0.572061f,   -0.218508f,    0.707107f,    0.353553f }, // 596
  {   -0.572061f,   -0.218508f,    0.707107f,   -0.353553f }, // 597
  {   -0.572061f,   -0.218508f,   -0.707107f,    0.353553f }, // 598
  {   -0.572061f,   -0.218508f,   -0.707107f,   -0.353553f }, // 599
};
int edgeK120[1200][2] = { // Vertex pairs defining each edge, in edge order
  {    0,  328 }, //   0
  {    0,  329 }, //   1
  {    0,  344 }, //   2
  {    0,  345 }, //   3
  {    1,  330 }, //   4
  {    1,  331 }, //   5
  {    1,  346 }, //   6
  {    1,  347 }, //   7
  {    2,  332 }, //   8
  {    2,  333 }, //   9
  {    2,  348 }, //  10
  {    2,  349 }, //  11
  {    3,  334 }, //  12
  {    3,  335 }, //  13
  {    3,  350 }, //  14
  {    3,  351 }, //  15
  {    4,  312 }, //  16
  {    4,  314 }, //  17
  {    4,  400 }, //  18
  {    4,  401 }, //  19
  {    5,  313 }, //  20
  {    5,  315 }, //  21
  {    5,  402 }, //  22
  {    5,  403 }, //  23
  {    6,  316 }, //  24
  {    6,  318 }, //  25
  {    6,  404 }, //  26
  {    6,  405 }, //  27
  {    7,  317 }, //  28
  {    7,  319 }, //  29
  {    7,  406 }, //  30
  {    7,  407 }, //  31
  {    8,  336 }, //  32
  {    8,  338 }, //  33
  {    8,  384 }, //  34
  {    8,  386 }, //  35
  {    9,  337 }, //  36
  {    9,  339 }, //  37
  {    9,  385 }, //  38
  {    9,  387 }, //  39
  {   10,  340 }, //  40
  {   10,  342 }, //  41
  {   10,  388 }, //  42
  {   10,  390 }, //  43
  {   11,  341 }, //  44
  {   11,  343 }, //  45
  {   11,  389 }, //  46
  {   11,  391 }, //  47
  {   12,  320 }, //  48
  {   12,  324 }, //  49
  {   12,  368 }, //  50
  {   12,  369 }, //  51
  {   13,  321 }, //  52
  {   13,  325 }, //  53
  {   13,  370 }, //  54
  {   13,  371 }, //  55
  {   14,  322 }, //  56
  {   14,  326 }, //  57
  {   14,  372 }, //  58
  {   14,  373 }, //  59
  {   15,  323 }, //  60
  {   15,  327 }, //  61
  {   15,  374 }, //  62
  {   15,  375 }, //  63
  {   16,  352 }, //  64
  {   16,  356 }, //  65
  {   16,  360 }, //  66
  {   16,  362 }, //  67
  {   17,  353 }, //  68
  {   17,  357 }, //  69
  {   17,  361 }, //  70
  {   17,  363 }, //  71
  {   18,  354 }, //  72
  {   18,  358 }, //  73
  {   18,  364 }, //  74
  {   18,  366 }, //  75
  {   19,  355 }, //  76
  {   19,  359 }, //  77
  {   19,  365 }, //  78
  {   19,  367 }, //  79
  {   20,  376 }, //  80
  {   20,  380 }, //  81
  {   20,  392 }, //  82
  {   20,  396 }, //  83
  {   21,  377 }, //  84
  {   21,  381 }, //  85
  {   21,  393 }, //  86
  {   21,  397 }, //  87
  {   22,  378 }, //  88
  {   22,  382 }, //  89
  {   22,  394 }, //  90
  {   22,  398 }, //  91
  {   23,  379 }, //  92
  {   23,  383 }, //  93
  {   23,  395 }, //  94
  {   23,  399 }, //  95
  {   24,  152 }, //  96
  {   24,  408 }, //  97
  {   24,  440 }, //  98
  {   24,  456 }, //  99
  {   25,  153 }, // 100
  {   25,  416 }, // 101
  {   25,  441 }, // 102
  {   25,  457 }, // 103
  {   26,  154 }, // 104
  {   26,  409 }, // 105
  {   26,  448 }, // 106
  {   26,  458 }, // 107
  {   27,  155 }, // 108
  {   27,  417 }, // 109
  {   27,  449 }, // 110
  {   27,  459 }, // 111
  {   28,  156 }, // 112
  {   28,  410 }, // 113
  {   28,  442 }, // 114
  {   28,  464 }, // 115
  {   29,  157 }, // 116
  {   29,  418 }, // 117
  {   29,  443 }, // 118
  {   29,  465 }, // 119
  {   30,  158 }, // 120
  {   30,  411 }, // 121
  {   30,  450 }, // 122
  {   30,  466 }, // 123
  {   31,  159 }, // 124
  {   31,  419 }, // 125
  {   31,  451 }, // 126
  {   31,  467 }, // 127
  {   32,  160 }, // 128
  {   32,  412 }, // 129
  {   32,  444 }, // 130
  {   32,  460 }, // 131
  {   33,  161 }, // 132
  {   33,  420 }, // 133
  {   33,  445 }, // 134
  {   33,  461 }, // 135
  {   34,  162 }, // 136
  {   34,  413 }, // 137
  {   34,  452 }, // 138
  {   34,  462 }, // 139
  {   35,  163 }, // 140
  {   35,  421 }, // 141
  {   35,  453 }, // 142
  {   35,  463 }, // 143
  {   36,  164 }, // 144
  {   36,  414 }, // 145
  {   36,  446 }, // 146
  {   36,  468 }, // 147
  {   37,  165 }, // 148
  {   37,  422 }, // 149
  {   37,  447 }, // 150
  {   37,  469 }, // 151
  {   38,  166 }, // 152
  {   38,  415 }, // 153
  {   38,  454 }, // 154
  {   38,  470 }, // 155
  {   39,  167 }, // 156
  {   39,  423 }, // 157
  {   39,  455 }, // 158
  {   39,  471 }, // 159
  {   40,  168 }, // 160
  {   40,  472 }, // 161
  {   40,  488 }, // 162
  {   40,  520 }, // 163
  {   41,  169 }, // 164
  {   41,  480 }, // 165
  {   41,  489 }, // 166
  {   41,  521 }, // 167
  {   42,  170 }, // 168
  {   42,  473 }, // 169
  {   42,  496 }, // 170
  {   42,  522 }, // 171
  {   43,  171 }, // 172
  {   43,  481 }, // 173
  {   43,  497 }, // 174
  {   43,  523 }, // 175
  {   44,  172 }, // 176
  {   44,  474 }, // 177
  {   44,  490 }, // 178
  {   44,  524 }, // 179
  {   45,  173 }, // 180
  {   45,  482 }, // 181
  {   45,  491 }, // 182
  {   45,  525 }, // 183
  {   46,  174 }, // 184
  {   46,  475 }, // 185
  {   46,  498 }, // 186
  {   46,  526 }, // 187
  {   47,  175 }, // 188
  {   47,  483 }, // 189
  {   47,  499 }, // 190
  {   47,  527 }, // 191
  {   48,  176 }, // 192
  {   48,  476 }, // 193
  {   48,  492 }, // 194
  {   48,  528 }, // 195
  {   49,  177 }, // 196
  {   49,  484 }, // 197
  {   49,  493 }, // 198
  {   49,  529 }, // 199
  {   50,  178 }, // 200
  {   50,  477 }, // 201
  {   50,  500 }, // 202
  {   50,  530 }, // 203
  {   51,  179 }, // 204
  {   51,  485 }, // 205
  {   51,  501 }, // 206
  {   51,  531 }, // 207
  {   52,  180 }, // 208
  {   52,  478 }, // 209
  {   52,  494 }, // 210
  {   52,  532 }, // 211
  {   53,  181 }, // 212
  {   53,  486 }, // 213
  {   53,  495 }, // 214
  {   53,  533 }, // 215
  {   54,  182 }, // 216
  {   54,  479 }, // 217
  {   54,  502 }, // 218
  {   54,  534 }, // 219
  {   55,  183 }, // 220
  {   55,  487 }, // 221
  {   55,  503 }, // 222
  {   55,  535 }, // 223
  {   56,  184 }, // 224
  {   56,  424 }, // 225
  {   56,  568 }, // 226
  {   56,  584 }, // 227
  {   57,  185 }, // 228
  {   57,  432 }, // 229
  {   57,  569 }, // 230
  {   57,  585 }, // 231
  {   58,  186 }, // 232
  {   58,  425 }, // 233
  {   58,  570 }, // 234
  {   58,  586 }, // 235
  {   59,  187 }, // 236
  {   59,  433 }, // 237
  {   59,  571 }, // 238
  {   59,  587 }, // 239
  {   60,  188 }, // 240
  {   60,  426 }, // 241
  {   60,  572 }, // 242
  {   60,  592 }, // 243
  {   61,  189 }, // 244
  {   61,  434 }, // 245
  {   61,  573 }, // 246
  {   61,  593 }, // 247
  {   62,  190 }, // 248
  {   62,  427 }, // 249
  {   62,  574 }, // 250
  {   62,  594 }, // 251
  {   63,  191 }, // 252
  {   63,  435 }, // 253
  {   63,  575 }, // 254
  {   63,  595 }, // 255
  {   64,  192 }, // 256
  {   64,  428 }, // 257
  {   64,  576 }, // 258
  {   64,  588 }, // 259
  {   65,  193 }, // 260
  {   65,  436 }, // 261
  {   65,  577 }, // 262
  {   65,  589 }, // 263
  {   66,  194 }, // 264
  {   66,  429 }, // 265
  {   66,  578 }, // 266
  {   66,  590 }, // 267
  {   67,  195 }, // 268
  {   67,  437 }, // 269
  {   67,  579 }, // 270
  {   67,  591 }, // 271
  {   68,  196 }, // 272
  {   68,  430 }, // 273
  {   68,  580 }, // 274
  {   68,  596 }, // 275
  {   69,  197 }, // 276
  {   69,  438 }, // 277
  {   69,  581 }, // 278
  {   69,  597 }, // 279
  {   70,  198 }, // 280
  {   70,  431 }, // 281
  {   70,  582 }, // 282
  {   70,  598 }, // 283
  {   71,  199 }, // 284
  {   71,  439 }, // 285
  {   71,  583 }, // 286
  {   71,  599 }, // 287
  {   72,  200 }, // 288
  {   72,  504 }, // 289
  {   72,  536 }, // 290
  {   72,  552 }, // 291
  {   73,  201 }, // 292
  {   73,  505 }, // 293
  {   73,  537 }, // 294
  {   73,  553 }, // 295
  {   74,  202 }, // 296
  {   74,  506 }, // 297
  {   74,  538 }, // 298
  {   74,  560 }, // 299
  {   75,  203 }, // 300
  {   75,  507 }, // 301
  {   75,  539 }, // 302
  {   75,  561 }, // 303
  {   76,  204 }, // 304
  {   76,  508 }, // 305
  {   76,  544 }, // 306
  {   76,  554 }, // 307
  {   77,  205 }, // 308
  {   77,  509 }, // 309
  {   77,  545 }, // 310
  {   77,  555 }, // 311
  {   78,  206 }, // 312
  {   78,  510 }, // 313
  {   78,  546 }, // 314
  {   78,  562 }, // 315
  {   79,  207 }, // 316
  {   79,  511 }, // 317
  {   79,  547 }, // 318
  {   79,  563 }, // 319
  {   80,  208 }, // 320
  {   80,  512 }, // 321
  {   80,  540 }, // 322
  {   80,  556 }, // 323
  {   81,  209 }, // 324
  {   81,  513 }, // 325
  {   81,  541 }, // 326
  {   81,  557 }, // 327
  {   82,  210 }, // 328
  {   82,  514 }, // 329
  {   82,  542 }, // 330
  {   82,  564 }, // 331
  {   83,  211 }, // 332
  {   83,  515 }, // 333
  {   83,  543 }, // 334
  {   83,  565 }, // 335
  {   84,  212 }, // 336
  {   84,  516 }, // 337
  {   84,  548 }, // 338
  {   84,  558 }, // 339
  {   85,  213 }, // 340
  {   85,  517 }, // 341
  {   85,  549 }, // 342
  {   85,  559 }, // 343
  {   86,  214 }, // 344
  {   86,  518 }, // 345
  {   86,  550 }, // 346
  {   86,  566 }, // 347
  {   87,  215 }, // 348
  {   87,  519 }, // 349
  {   87,  551 }, // 350
  {   87,  567 }, // 351
  {   88,   96 }, // 352
  {   88,  504 }, // 353
  {   88,  520 }, // 354
  {   88,  568 }, // 355
  {   89,   97 }, // 356
  {   89,  505 }, // 357
  {   89,  521 }, // 358
  {   89,  569 }, // 359
  {   90,   98 }, // 360
  {   90,  506 }, // 361
  {   90,  522 }, // 362
  {   90,  570 }, // 363
  {   91,   99 }, // 364
  {   91,  507 }, // 365
  {   91,  523 }, // 366
  {   91,  571 }, // 367
  {   92,  100 }, // 368
  {   92,  508 }, // 369
  {   92,  524 }, // 370
  {   92,  572 }, // 371
  {   93,  101 }, // 372
  {   93,  509 }, // 373
  {   93,  525 }, // 374
  {   93,  573 }, // 375
  {   94,  102 }, // 376
  {   94,  510 }, // 377
  {   94,  526 }, // 378
  {   94,  574 }, // 379
  {   95,  103 }, // 380
  {   95,  511 }, // 381
  {   95,  527 }, // 382
  {   95,  575 }, // 383
  {   96,  512 }, // 384
  {   96,  528 }, // 385
  {   96,  576 }, // 386
  {   97,  513 }, // 387
  {   97,  529 }, // 388
  {   97,  577 }, // 389
  {   98,  514 }, // 390
  {   98,  530 }, // 391
  {   98,  578 }, // 392
  {   99,  515 }, // 393
  {   99,  531 }, // 394
  {   99,  579 }, // 395
  {  100,  516 }, // 396
  {  100,  532 }, // 397
  {  100,  580 }, // 398
  {  101,  517 }, // 399
  {  101,  533 }, // 400
  {  101,  581 }, // 401
  {  102,  518 }, // 402
  {  102,  534 }, // 403
  {  102,  582 }, // 404
  {  103,  519 }, // 405
  {  103,  535 }, // 406
  {  103,  583 }, // 407
  {  104,  108 }, // 408
  {  104,  456 }, // 409
  {  104,  536 }, // 410
  {  104,  584 }, // 411
  {  105,  109 }, // 412
  {  105,  457 }, // 413
  {  105,  537 }, // 414
  {  105,  585 }, // 415
  {  106,  110 }, // 416
  {  106,  458 }, // 417
  {  106,  538 }, // 418
  {  106,  586 }, // 419
  {  107,  111 }, // 420
  {  107,  459 }, // 421
  {  107,  539 }, // 422
  {  107,  587 }, // 423
  {  108,  464 }, // 424
  {  108,  544 }, // 425
  {  108,  592 }, // 426
  {  109,  465 }, // 427
  {  109,  545 }, // 428
  {  109,  593 }, // 429
  {  110,  466 }, // 430
  {  110,  546 }, // 431
  {  110,  594 }, // 432
  {  111,  467 }, // 433
  {  111,  547 }, // 434
  {  111,  595 }, // 435
  {  112,  116 }, // 436
  {  112,  460 }, // 437
  {  112,  540 }, // 438
  {  112,  588 }, // 439
  {  113,  117 }, // 440
  {  113,  461 }, // 441
  {  113,  541 }, // 442
  {  113,  589 }, // 443
  {  114,  118 }, // 444
  {  114,  462 }, // 445
  {  114,  542 }, // 446
  {  114,  590 }, // 447
  {  115,  119 }, // 448
  {  115,  463 }, // 449
  {  115,  543 }, // 450
  {  115,  591 }, // 451
  {  116,  468 }, // 452
  {  116,  548 }, // 453
  {  116,  596 }, // 454
  {  117,  469 }, // 455
  {  117,  549 }, // 456
  {  117,  597 }, // 457
  {  118,  470 }, // 458
  {  118,  550 }, // 459
  {  118,  598 }, // 460
  {  119,  471 }, // 461
  {  119,  551 }, // 462
  {  119,  599 }, // 463
  {  120,  122 }, // 464
  {  120,  440 }, // 465
  {  120,  488 }, // 466
  {  120,  552 }, // 467
  {  121,  123 }, // 468
  {  121,  441 }, // 469
  {  121,  489 }, // 470
  {  121,  553 }, // 471
  {  122,  448 }, // 472
  {  122,  496 }, // 473
  {  122,  560 }, // 474
  {  123,  449 }, // 475
  {  123,  497 }, // 476
  {  123,  561 }, // 477
  {  124,  126 }, // 478
  {  124,  442 }, // 479
  {  124,  490 }, // 480
  {  124,  554 }, // 481
  {  125,  127 }, // 482
  {  125,  443 }, // 483
  {  125,  491 }, // 484
  {  125,  555 }, // 485
  {  126,  450 }, // 486
  {  126,  498 }, // 487
  {  126,  562 }, // 488
  {  127,  451 }, // 489
  {  127,  499 }, // 490
  {  127,  563 }, // 491
  {  128,  130 }, // 492
  {  128,  444 }, // 493
  {  128,  492 }, // 494
  {  128,  556 }, // 495
  {  129,  131 }, // 496
  {  129,  445 }, // 497
  {  129,  493 }, // 498
  {  129,  557 }, // 499
  {  130,  452 }, // 500
  {  130,  500 }, // 501
  {  130,  564 }, // 502
  {  131,  453 }, // 503
  {  131,  501 }, // 504
  {  131,  565 }, // 505
  {  132,  134 }, // 506
  {  132,  446 }, // 507
  {  132,  494 }, // 508
  {  132,  558 }, // 509
  {  133,  135 }, // 510
  {  133,  447 }, // 511
  {  133,  495 }, // 512
  {  133,  559 }, // 513
  {  134,  454 }, // 514
  {  134,  502 }, // 515
  {  134,  566 }, // 516
  {  135,  455 }, // 517
  {  135,  503 }, // 518
  {  135,  567 }, // 519
  {  136,  137 }, // 520
  {  136,  408 }, // 521
  {  136,  424 }, // 522
  {  136,  472 }, // 523
  {  137,  416 }, // 524
  {  137,  432 }, // 525
  {  137,  480 }, // 526
  {  138,  139 }, // 527
  {  138,  409 }, // 528
  {  138,  425 }, // 529
  {  138,  473 }, // 530
  {  139,  417 }, // 531
  {  139,  433 }, // 532
  {  139,  481 }, // 533
  {  140,  141 }, // 534
  {  140,  410 }, // 535
  {  140,  426 }, // 536
  {  140,  474 }, // 537
  {  141,  418 }, // 538
  {  141,  434 }, // 539
  {  141,  482 }, // 540
  {  142,  143 }, // 541
  {  142,  411 }, // 542
  {  142,  427 }, // 543
  {  142,  475 }, // 544
  {  143,  419 }, // 545
  {  143,  435 }, // 546
  {  143,  483 }, // 547
  {  144,  145 }, // 548
  {  144,  412 }, // 549
  {  144,  428 }, // 550
  {  144,  476 }, // 551
  {  145,  420 }, // 552
  {  145,  436 }, // 553
  {  145,  484 }, // 554
  {  146,  147 }, // 555
  {  146,  413 }, // 556
  {  146,  429 }, // 557
  {  146,  477 }, // 558
  {  147,  421 }, // 559
  {  147,  437 }, // 560
  {  147,  485 }, // 561
  {  148,  149 }, // 562
  {  148,  414 }, // 563
  {  148,  430 }, // 564
  {  148,  478 }, // 565
  {  149,  422 }, // 566
  {  149,  438 }, // 567
  {  149,  486 }, // 568
  {  150,  151 }, // 569
  {  150,  415 }, // 570
  {  150,  431 }, // 571
  {  150,  479 }, // 572
  {  151,  423 }, // 573
  {  151,  439 }, // 574
  {  151,  487 }, // 575
  {  152,  216 }, // 576
  {  152,  232 }, // 577
  {  152,  240 }, // 578
  {  153,  216 }, // 579
  {  153,  233 }, // 580
  {  153,  241 }, // 581
  {  154,  217 }, // 582
  {  154,  232 }, // 583
  {  154,  242 }, // 584
  {  155,  217 }, // 585
  {  155,  233 }, // 586
  {  155,  243 }, // 587
  {  156,  218 }, // 588
  {  156,  234 }, // 589
  {  156,  240 }, // 590
  {  157,  218 }, // 591
  {  157,  235 }, // 592
  {  157,  241 }, // 593
  {  158,  219 }, // 594
  {  158,  234 }, // 595
  {  158,  242 }, // 596
  {  159,  219 }, // 597
  {  159,  235 }, // 598
  {  159,  243 }, // 599
  {  160,  220 }, // 600
  {  160,  236 }, // 601
  {  160,  244 }, // 602
  {  161,  220 }, // 603
  {  161,  237 }, // 604
  {  161,  245 }, // 605
  {  162,  221 }, // 606
  {  162,  236 }, // 607
  {  162,  246 }, // 608
  {  163,  221 }, // 609
  {  163,  237 }, // 610
  {  163,  247 }, // 611
  {  164,  222 }, // 612
  {  164,  238 }, // 613
  {  164,  244 }, // 614
  {  165,  222 }, // 615
  {  165,  239 }, // 616
  {  165,  245 }, // 617
  {  166,  223 }, // 618
  {  166,  238 }, // 619
  {  166,  246 }, // 620
  {  167,  223 }, // 621
  {  167,  239 }, // 622
  {  167,  247 }, // 623
  {  168,  248 }, // 624
  {  168,  256 }, // 625
  {  168,  272 }, // 626
  {  169,  248 }, // 627
  {  169,  257 }, // 628
  {  169,  273 }, // 629
  {  170,  249 }, // 630
  {  170,  256 }, // 631
  {  170,  274 }, // 632
  {  171,  249 }, // 633
  {  171,  257 }, // 634
  {  171,  275 }, // 635
  {  172,  250 }, // 636
  {  172,  258 }, // 637
  {  172,  276 }, // 638
  {  173,  250 }, // 639
  {  173,  259 }, // 640
  {  173,  277 }, // 641
  {  174,  251 }, // 642
  {  174,  258 }, // 643
  {  174,  278 }, // 644
  {  175,  251 }, // 645
  {  175,  259 }, // 646
  {  175,  279 }, // 647
  {  176,  252 }, // 648
  {  176,  260 }, // 649
  {  176,  272 }, // 650
  {  177,  252 }, // 651
  {  177,  261 }, // 652
  {  177,  273 }, // 653
  {  178,  253 }, // 654
  {  178,  260 }, // 655
  {  178,  274 }, // 656
  {  179,  253 }, // 657
  {  179,  261 }, // 658
  {  179,  275 }, // 659
  {  180,  254 }, // 660
  {  180,  262 }, // 661
  {  180,  276 }, // 662
  {  181,  254 }, // 663
  {  181,  263 }, // 664
  {  181,  277 }, // 665
  {  182,  255 }, // 666
  {  182,  262 }, // 667
  {  182,  278 }, // 668
  {  183,  255 }, // 669
  {  183,  263 }, // 670
  {  183,  279 }, // 671
  {  184,  224 }, // 672
  {  184,  296 }, // 673
  {  184,  304 }, // 674
  {  185,  224 }, // 675
  {  185,  297 }, // 676
  {  185,  305 }, // 677
  {  186,  225 }, // 678
  {  186,  298 }, // 679
  {  186,  306 }, // 680
  {  187,  225 }, // 681
  {  187,  299 }, // 682
  {  187,  307 }, // 683
  {  188,  226 }, // 684
  {  188,  300 }, // 685
  {  188,  304 }, // 686
  {  189,  226 }, // 687
  {  189,  301 }, // 688
  {  189,  305 }, // 689
  {  190,  227 }, // 690
  {  190,  302 }, // 691
  {  190,  306 }, // 692
  {  191,  227 }, // 693
  {  191,  303 }, // 694
  {  191,  307 }, // 695
  {  192,  228 }, // 696
  {  192,  296 }, // 697
  {  192,  308 }, // 698
  {  193,  228 }, // 699
  {  193,  297 }, // 700
  {  193,  309 }, // 701
  {  194,  229 }, // 702
  {  194,  298 }, // 703
  {  194,  310 }, // 704
  {  195,  229 }, // 705
  {  195,  299 }, // 706
  {  195,  311 }, // 707
  {  196,  230 }, // 708
  {  196,  300 }, // 709
  {  196,  308 }, // 710
  {  197,  230 }, // 711
  {  197,  301 }, // 712
  {  197,  309 }, // 713
  {  198,  231 }, // 714
  {  198,  302 }, // 715
  {  198,  310 }, // 716
  {  199,  231 }, // 717
  {  199,  303 }, // 718
  {  199,  311 }, // 719
  {  200,  264 }, // 720
  {  200,  280 }, // 721
  {  200,  288 }, // 722
  {  201,  265 }, // 723
  {  201,  281 }, // 724
  {  201,  289 }, // 725
  {  202,  266 }, // 726
  {  202,  282 }, // 727
  {  202,  288 }, // 728
  {  203,  267 }, // 729
  {  203,  283 }, // 730
  {  203,  289 }, // 731
  {  204,  268 }, // 732
  {  204,  280 }, // 733
  {  204,  290 }, // 734
  {  205,  269 }, // 735
  {  205,  281 }, // 736
  {  205,  291 }, // 737
  {  206,  270 }, // 738
  {  206,  282 }, // 739
  {  206,  290 }, // 740
  {  207,  271 }, // 741
  {  207,  283 }, // 742
  {  207,  291 }, // 743
  {  208,  264 }, // 744
  {  208,  284 }, // 745
  {  208,  292 }, // 746
  {  209,  265 }, // 747
  {  209,  285 }, // 748
  {  209,  293 }, // 749
  {  210,  266 }, // 750
  {  210,  286 }, // 751
  {  210,  292 }, // 752
  {  211,  267 }, // 753
  {  211,  287 }, // 754
  {  211,  293 }, // 755
  {  212,  268 }, // 756
  {  212,  284 }, // 757
  {  212,  294 }, // 758
  {  213,  269 }, // 759
  {  213,  285 }, // 760
  {  213,  295 }, // 761
  {  214,  270 }, // 762
  {  214,  286 }, // 763
  {  214,  294 }, // 764
  {  215,  271 }, // 765
  {  215,  287 }, // 766
  {  215,  295 }, // 767
  {  216,  218 }, // 768
  {  216,  312 }, // 769
  {  217,  219 }, // 770
  {  217,  313 }, // 771
  {  218,  314 }, // 772
  {  219,  315 }, // 773
  {  220,  222 }, // 774
  {  220,  316 }, // 775
  {  221,  223 }, // 776
  {  221,  317 }, // 777
  {  222,  318 }, // 778
  {  223,  319 }, // 779
  {  224,  228 }, // 780
  {  224,  320 }, // 781
  {  225,  229 }, // 782
  {  225,  321 }, // 783
  {  226,  230 }, // 784
  {  226,  322 }, // 785
  {  227,  231 }, // 786
  {  227,  323 }, // 787
  {  228,  324 }, // 788
  {  229,  325 }, // 789
  {  230,  326 }, // 790
  {  231,  327 }, // 791
  {  232,  233 }, // 792
  {  232,  328 }, // 793
  {  233,  329 }, // 794
  {  234,  235 }, // 795
  {  234,  330 }, // 796
  {  235,  331 }, // 797
  {  236,  237 }, // 798
  {  236,  332 }, // 799
  {  237,  333 }, // 800
  {  238,  239 }, // 801
  {  238,  334 }, // 802
  {  239,  335 }, // 803
  {  240,  242 }, // 804
  {  240,  336 }, // 805
  {  241,  243 }, // 806
  {  241,  337 }, // 807
  {  242,  338 }, // 808
  {  243,  339 }, // 809
  {  244,  246 }, // 810
  {  244,  340 }, // 811
  {  245,  247 }, // 812
  {  245,  341 }, // 813
  {  246,  342 }, // 814
  {  247,  343 }, // 815
  {  248,  249 }, // 816
  {  248,  344 }, // 817
  {  249,  345 }, // 818
  {  250,  251 }, // 819
  {  250,  346 }, // 820
  {  251,  347 }, // 821
  {  252,  253 }, // 822
  {  252,  348 }, // 823
  {  253,  349 }, // 824
  {  254,  255 }, // 825
  {  254,  350 }, // 826
  {  255,  351 }, // 827
  {  256,  260 }, // 828
  {  256,  352 }, // 829
  {  257,  261 }, // 830
  {  257,  353 }, // 831
  {  258,  262 }, // 832
  {  258,  354 }, // 833
  {  259,  263 }, // 834
  {  259,  355 }, // 835
  {  260,  356 }, // 836
  {  261,  357 }, // 837
  {  262,  358 }, // 838
  {  263,  359 }, // 839
  {  264,  266 }, // 840
  {  264,  360 }, // 841
  {  265,  267 }, // 842
  {  265,  361 }, // 843
  {  266,  362 }, // 844
  {  267,  363 }, // 845
  {  268,  270 }, // 846
  {  268,  364 }, // 847
  {  269,  271 }, // 848
  {  269,  365 }, // 849
  {  270,  366 }, // 850
  {  271,  367 }, // 851
  {  272,  273 }, // 852
  {  272,  368 }, // 853
  {  273,  369 }, // 854
  {  274,  275 }, // 855
  {  274,  370 }, // 856
  {  275,  371 }, // 857
  {  276,  277 }, // 858
  {  276,  372 }, // 859
  {  277,  373 }, // 860
  {  278,  279 }, // 861
  {  278,  374 }, // 862
  {  279,  375 }, // 863
  {  280,  284 }, // 864
  {  280,  376 }, // 865
  {  281,  285 }, // 866
  {  281,  377 }, // 867
  {  282,  286 }, // 868
  {  282,  378 }, // 869
  {  283,  287 }, // 870
  {  283,  379 }, // 871
  {  284,  380 }, // 872
  {  285,  381 }, // 873
  {  286,  382 }, // 874
  {  287,  383 }, // 875
  {  288,  290 }, // 876
  {  288,  384 }, // 877
  {  289,  291 }, // 878
  {  289,  385 }, // 879
  {  290,  386 }, // 880
  {  291,  387 }, // 881
  {  292,  294 }, // 882
  {  292,  388 }, // 883
  {  293,  295 }, // 884
  {  293,  389 }, // 885
  {  294,  390 }, // 886
  {  295,  391 }, // 887
  {  296,  300 }, // 888
  {  296,  392 }, // 889
  {  297,  301 }, // 890
  {  297,  393 }, // 891
  {  298,  302 }, // 892
  {  298,  394 }, // 893
  {  299,  303 }, // 894
  {  299,  395 }, // 895
  {  300,  396 }, // 896
  {  301,  397 }, // 897
  {  302,  398 }, // 898
  {  303,  399 }, // 899
  {  304,  305 }, // 900
  {  304,  400 }, // 901
  {  305,  401 }, // 902
  {  306,  307 }, // 903
  {  306,  402 }, // 904
  {  307,  403 }, // 905
  {  308,  309 }, // 906
  {  308,  404 }, // 907
  {  309,  405 }, // 908
  {  310,  311 }, // 909
  {  310,  406 }, // 910
  {  311,  407 }, // 911
  {  312,  408 }, // 912
  {  312,  416 }, // 913
  {  313,  409 }, // 914
  {  313,  417 }, // 915
  {  314,  410 }, // 916
  {  314,  418 }, // 917
  {  315,  411 }, // 918
  {  315,  419 }, // 919
  {  316,  412 }, // 920
  {  316,  420 }, // 921
  {  317,  413 }, // 922
  {  317,  421 }, // 923
  {  318,  414 }, // 924
  {  318,  422 }, // 925
  {  319,  415 }, // 926
  {  319,  423 }, // 927
  {  320,  424 }, // 928
  {  320,  432 }, // 929
  {  321,  425 }, // 930
  {  321,  433 }, // 931
  {  322,  426 }, // 932
  {  322,  434 }, // 933
  {  323,  427 }, // 934
  {  323,  435 }, // 935
  {  324,  428 }, // 936
  {  324,  436 }, // 937
  {  325,  429 }, // 938
  {  325,  437 }, // 939
  {  326,  430 }, // 940
  {  326,  438 }, // 941
  {  327,  431 }, // 942
  {  327,  439 }, // 943
  {  328,  440 }, // 944
  {  328,  448 }, // 945
  {  329,  441 }, // 946
  {  329,  449 }, // 947
  {  330,  442 }, // 948
  {  330,  450 }, // 949
  {  331,  443 }, // 950
  {  331,  451 }, // 951
  {  332,  444 }, // 952
  {  332,  452 }, // 953
  {  333,  445 }, // 954
  {  333,  453 }, // 955
  {  334,  446 }, // 956
  {  334,  454 }, // 957
  {  335,  447 }, // 958
  {  335,  455 }, // 959
  {  336,  456 }, // 960
  {  336,  464 }, // 961
  {  337,  457 }, // 962
  {  337,  465 }, // 963
  {  338,  458 }, // 964
  {  338,  466 }, // 965
  {  339,  459 }, // 966
  {  339,  467 }, // 967
  {  340,  460 }, // 968
  {  340,  468 }, // 969
  {  341,  461 }, // 970
  {  341,  469 }, // 971
  {  342,  462 }, // 972
  {  342,  470 }, // 973
  {  343,  463 }, // 974
  {  343,  471 }, // 975
  {  344,  472 }, // 976
  {  344,  480 }, // 977
  {  345,  473 }, // 978
  {  345,  481 }, // 979
  {  346,  474 }, // 980
  {  346,  482 }, // 981
  {  347,  475 }, // 982
  {  347,  483 }, // 983
  {  348,  476 }, // 984
  {  348,  484 }, // 985
  {  349,  477 }, // 986
  {  349,  485 }, // 987
  {  350,  478 }, // 988
  {  350,  486 }, // 989
  {  351,  479 }, // 990
  {  351,  487 }, // 991
  {  352,  488 }, // 992
  {  352,  496 }, // 993
  {  353,  489 }, // 994
  {  353,  497 }, // 995
  {  354,  490 }, // 996
  {  354,  498 }, // 997
  {  355,  491 }, // 998
  {  355,  499 }, // 999
  {  356,  492 }, //1000
  {  356,  500 }, //1001
  {  357,  493 }, //1002
  {  357,  501 }, //1003
  {  358,  494 }, //1004
  {  358,  502 }, //1005
  {  359,  495 }, //1006
  {  359,  503 }, //1007
  {  360,  504 }, //1008
  {  360,  512 }, //1009
  {  361,  505 }, //1010
  {  361,  513 }, //1011
  {  362,  506 }, //1012
  {  362,  514 }, //1013
  {  363,  507 }, //1014
  {  363,  515 }, //1015
  {  364,  508 }, //1016
  {  364,  516 }, //1017
  {  365,  509 }, //1018
  {  365,  517 }, //1019
  {  366,  510 }, //1020
  {  366,  518 }, //1021
  {  367,  511 }, //1022
  {  367,  519 }, //1023
  {  368,  520 }, //1024
  {  368,  528 }, //1025
  {  369,  521 }, //1026
  {  369,  529 }, //1027
  {  370,  522 }, //1028
  {  370,  530 }, //1029
  {  371,  523 }, //1030
  {  371,  531 }, //1031
  {  372,  524 }, //1032
  {  372,  532 }, //1033
  {  373,  525 }, //1034
  {  373,  533 }, //1035
  {  374,  526 }, //1036
  {  374,  534 }, //1037
  {  375,  527 }, //1038
  {  375,  535 }, //1039
  {  376,  536 }, //1040
  {  376,  544 }, //1041
  {  377,  537 }, //1042
  {  377,  545 }, //1043
  {  378,  538 }, //1044
  {  378,  546 }, //1045
  {  379,  539 }, //1046
  {  379,  547 }, //1047
  {  380,  540 }, //1048
  {  380,  548 }, //1049
  {  381,  541 }, //1050
  {  381,  549 }, //1051
  {  382,  542 }, //1052
  {  382,  550 }, //1053
  {  383,  543 }, //1054
  {  383,  551 }, //1055
  {  384,  552 }, //1056
  {  384,  560 }, //1057
  {  385,  553 }, //1058
  {  385,  561 }, //1059
  {  386,  554 }, //1060
  {  386,  562 }, //1061
  {  387,  555 }, //1062
  {  387,  563 }, //1063
  {  388,  556 }, //1064
  {  388,  564 }, //1065
  {  389,  557 }, //1066
  {  389,  565 }, //1067
  {  390,  558 }, //1068
  {  390,  566 }, //1069
  {  391,  559 }, //1070
  {  391,  567 }, //1071
  {  392,  568 }, //1072
  {  392,  576 }, //1073
  {  393,  569 }, //1074
  {  393,  577 }, //1075
  {  394,  570 }, //1076
  {  394,  578 }, //1077
  {  395,  571 }, //1078
  {  395,  579 }, //1079
  {  396,  572 }, //1080
  {  396,  580 }, //1081
  {  397,  573 }, //1082
  {  397,  581 }, //1083
  {  398,  574 }, //1084
  {  398,  582 }, //1085
  {  399,  575 }, //1086
  {  399,  583 }, //1087
  {  400,  584 }, //1088
  {  400,  592 }, //1089
  {  401,  585 }, //1090
  {  401,  593 }, //1091
  {  402,  586 }, //1092
  {  402,  594 }, //1093
  {  403,  587 }, //1094
  {  403,  595 }, //1095
  {  404,  588 }, //1096
  {  404,  596 }, //1097
  {  405,  589 }, //1098
  {  405,  597 }, //1099
  {  406,  590 }, //1100
  {  406,  598 }, //1101
  {  407,  591 }, //1102
  {  407,  599 }, //1103
  {  408,  584 }, //1104
  {  409,  586 }, //1105
  {  410,  592 }, //1106
  {  411,  594 }, //1107
  {  412,  588 }, //1108
  {  413,  590 }, //1109
  {  414,  596 }, //1110
  {  415,  598 }, //1111
  {  416,  585 }, //1112
  {  417,  587 }, //1113
  {  418,  593 }, //1114
  {  419,  595 }, //1115
  {  420,  589 }, //1116
  {  421,  591 }, //1117
  {  422,  597 }, //1118
  {  423,  599 }, //1119
  {  424,  520 }, //1120
  {  425,  522 }, //1121
  {  426,  524 }, //1122
  {  427,  526 }, //1123
  {  428,  528 }, //1124
  {  429,  530 }, //1125
  {  430,  532 }, //1126
  {  431,  534 }, //1127
  {  432,  521 }, //1128
  {  433,  523 }, //1129
  {  434,  525 }, //1130
  {  435,  527 }, //1131
  {  436,  529 }, //1132
  {  437,  531 }, //1133
  {  438,  533 }, //1134
  {  439,  535 }, //1135
  {  440,  472 }, //1136
  {  441,  480 }, //1137
  {  442,  474 }, //1138
  {  443,  482 }, //1139
  {  444,  476 }, //1140
  {  445,  484 }, //1141
  {  446,  478 }, //1142
  {  447,  486 }, //1143
  {  448,  473 }, //1144
  {  449,  481 }, //1145
  {  450,  475 }, //1146
  {  451,  483 }, //1147
  {  452,  477 }, //1148
  {  453,  485 }, //1149
  {  454,  479 }, //1150
  {  455,  487 }, //1151
  {  456,  552 }, //1152
  {  457,  553 }, //1153
  {  458,  560 }, //1154
  {  459,  561 }, //1155
  {  460,  556 }, //1156
  {  461,  557 }, //1157
  {  462,  564 }, //1158
  {  463,  565 }, //1159
  {  464,  554 }, //1160
  {  465,  555 }, //1161
  {  466,  562 }, //1162
  {  467,  563 }, //1163
  {  468,  558 }, //1164
  {  469,  559 }, //1165
  {  470,  566 }, //1166
  {  471,  567 }, //1167
  {  488,  504 }, //1168
  {  489,  505 }, //1169
  {  490,  508 }, //1170
  {  491,  509 }, //1171
  {  492,  512 }, //1172
  {  493,  513 }, //1173
  {  494,  516 }, //1174
  {  495,  517 }, //1175
  {  496,  506 }, //1176
  {  497,  507 }, //1177
  {  498,  510 }, //1178
  {  499,  511 }, //1179
  {  500,  514 }, //1180
  {  501,  515 }, //1181
  {  502,  518 }, //1182
  {  503,  519 }, //1183
  {  536,  568 }, //1184
  {  537,  569 }, //1185
  {  538,  570 }, //1186
  {  539,  571 }, //1187
  {  540,  576 }, //1188
  {  541,  577 }, //1189
  {  542,  578 }, //1190
  {  543,  579 }, //1191
  {  544,  572 }, //1192
  {  545,  573 }, //1193
  {  546,  574 }, //1194
  {  547,  575 }, //1195
  {  548,  580 }, //1196
  {  549,  581 }, //1197
  {  550,  582 }, //1198
  {  551,  583 }, //1199
};
int vertToEdgeK120[600][4] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3 }, //   0
  {    4,    5,    6,    7 }, //   1
  {    8,    9,   10,   11 }, //   2
  {   12,   13,   14,   15 }, //   3
  {   16,   17,   18,   19 }, //   4
  {   20,   21,   22,   23 }, //   5
  {   24,   25,   26,   27 }, //   6
  {   28,   29,   30,   31 }, //   7
  {   32,   33,   34,   35 }, //   8
  {   36,   37,   38,   39 }, //   9
  {   40,   41,   42,   43 }, //  10
  {   44,   45,   46,   47 }, //  11
  {   48,   49,   50,   51 }, //  12
  {   52,   53,   54,   55 }, //  13
  {   56,   57,   58,   59 }, //  14
  {   60,   61,   62,   63 }, //  15
  {   64,   65,   66,   67 }, //  16
  {   68,   69,   70,   71 }, //  17
  {   72,   73,   74,   75 }, //  18
  {   76,   77,   78,   79 }, //  19
  {   80,   81,   82,   83 }, //  20
  {   84,   85,   86,   87 }, //  21
  {   88,   89,   90,   91 }, //  22
  {   92,   93,   94,   95 }, //  23
  {   96,   97,   98,   99 }, //  24
  {  100,  101,  102,  103 }, //  25
  {  104,  105,  106,  107 }, //  26
  {  108,  109,  110,  111 }, //  27
  {  112,  113,  114,  115 }, //  28
  {  116,  117,  118,  119 }, //  29
  {  120,  121,  122,  123 }, //  30
  {  124,  125,  126,  127 }, //  31
  {  128,  129,  130,  131 }, //  32
  {  132,  133,  134,  135 }, //  33
  {  136,  137,  138,  139 }, //  34
  {  140,  141,  142,  143 }, //  35
  {  144,  145,  146,  147 }, //  36
  {  148,  149,  150,  151 }, //  37
  {  152,  153,  154,  155 }, //  38
  {  156,  157,  158,  159 }, //  39
  {  160,  161,  162,  163 }, //  40
  {  164,  165,  166,  167 }, //  41
  {  168,  169,  170,  171 }, //  42
  {  172,  173,  174,  175 }, //  43
  {  176,  177,  178,  179 }, //  44
  {  180,  181,  182,  183 }, //  45
  {  184,  185,  186,  187 }, //  46
  {  188,  189,  190,  191 }, //  47
  {  192,  193,  194,  195 }, //  48
  {  196,  197,  198,  199 }, //  49
  {  200,  201,  202,  203 }, //  50
  {  204,  205,  206,  207 }, //  51
  {  208,  209,  210,  211 }, //  52
  {  212,  213,  214,  215 }, //  53
  {  216,  217,  218,  219 }, //  54
  {  220,  221,  222,  223 }, //  55
  {  224,  225,  226,  227 }, //  56
  {  228,  229,  230,  231 }, //  57
  {  232,  233,  234,  235 }, //  58
  {  236,  237,  238,  239 }, //  59
  {  240,  241,  242,  243 }, //  60
  {  244,  245,  246,  247 }, //  61
  {  248,  249,  250,  251 }, //  62
  {  252,  253,  254,  255 }, //  63
  {  256,  257,  258,  259 }, //  64
  {  260,  261,  262,  263 }, //  65
  {  264,  265,  266,  267 }, //  66
  {  268,  269,  270,  271 }, //  67
  {  272,  273,  274,  275 }, //  68
  {  276,  277,  278,  279 }, //  69
  {  280,  281,  282,  283 }, //  70
  {  284,  285,  286,  287 }, //  71
  {  288,  289,  290,  291 }, //  72
  {  292,  293,  294,  295 }, //  73
  {  296,  297,  298,  299 }, //  74
  {  300,  301,  302,  303 }, //  75
  {  304,  305,  306,  307 }, //  76
  {  308,  309,  310,  311 }, //  77
  {  312,  313,  314,  315 }, //  78
  {  316,  317,  318,  319 }, //  79
  {  320,  321,  322,  323 }, //  80
  {  324,  325,  326,  327 }, //  81
  {  328,  329,  330,  331 }, //  82
  {  332,  333,  334,  335 }, //  83
  {  336,  337,  338,  339 }, //  84
  {  340,  341,  342,  343 }, //  85
  {  344,  345,  346,  347 }, //  86
  {  348,  349,  350,  351 }, //  87
  {  352,  353,  354,  355 }, //  88
  {  356,  357,  358,  359 }, //  89
  {  360,  361,  362,  363 }, //  90
  {  364,  365,  366,  367 }, //  91
  {  368,  369,  370,  371 }, //  92
  {  372,  373,  374,  375 }, //  93
  {  376,  377,  378,  379 }, //  94
  {  380,  381,  382,  383 }, //  95
  {  352,  384,  385,  386 }, //  96
  {  356,  387,  388,  389 }, //  97
  {  360,  390,  391,  392 }, //  98
  {  364,  393,  394,  395 }, //  99
  {  368,  396,  397,  398 }, // 100
  {  372,  399,  400,  401 }, // 101
  {  376,  402,  403,  404 }, // 102
  {  380,  405,  406,  407 }, // 103
  {  408,  409,  410,  411 }, // 104
  {  412,  413,  414,  415 }, // 105
  {  416,  417,  418,  419 }, // 106
  {  420,  421,  422,  423 }, // 107
  {  408,  424,  425,  426 }, // 108
  {  412,  427,  428,  429 }, // 109
  {  416,  430,  431,  432 }, // 110
  {  420,  433,  434,  435 }, // 111
  {  436,  437,  438,  439 }, // 112
  {  440,  441,  442,  443 }, // 113
  {  444,  445,  446,  447 }, // 114
  {  448,  449,  450,  451 }, // 115
  {  436,  452,  453,  454 }, // 116
  {  440,  455,  456,  457 }, // 117
  {  444,  458,  459,  460 }, // 118
  {  448,  461,  462,  463 }, // 119
  {  464,  465,  466,  467 }, // 120
  {  468,  469,  470,  471 }, // 121
  {  464,  472,  473,  474 }, // 122
  {  468,  475,  476,  477 }, // 123
  {  478,  479,  480,  481 }, // 124
  {  482,  483,  484,  485 }, // 125
  {  478,  486,  487,  488 }, // 126
  {  482,  489,  490,  491 }, // 127
  {  492,  493,  494,  495 }, // 128
  {  496,  497,  498,  499 }, // 129
  {  492,  500,  501,  502 }, // 130
  {  496,  503,  504,  505 }, // 131
  {  506,  507,  508,  509 }, // 132
  {  510,  511,  512,  513 }, // 133
  {  506,  514,  515,  516 }, // 134
  {  510,  517,  518,  519 }, // 135
  {  520,  521,  522,  523 }, // 136
  {  520,  524,  525,  526 }, // 137
  {  527,  528,  529,  530 }, // 138
  {  527,  531,  532,  533 }, // 139
  {  534,  535,  536,  537 }, // 140
  {  534,  538,  539,  540 }, // 141
  {  541,  542,  543,  544 }, // 142
  {  541,  545,  546,  547 }, // 143
  {  548,  549,  550,  551 }, // 144
  {  548,  552,  553,  554 }, // 145
  {  555,  556,  557,  558 }, // 146
  {  555,  559,  560,  561 }, // 147
  {  562,  563,  564,  565 }, // 148
  {  562,  566,  567,  568 }, // 149
  {  569,  570,  571,  572 }, // 150
  {  569,  573,  574,  575 }, // 151
  {   96,  576,  577,  578 }, // 152
  {  100,  579,  580,  581 }, // 153
  {  104,  582,  583,  584 }, // 154
  {  108,  585,  586,  587 }, // 155
  {  112,  588,  589,  590 }, // 156
  {  116,  591,  592,  593 }, // 157
  {  120,  594,  595,  596 }, // 158
  {  124,  597,  598,  599 }, // 159
  {  128,  600,  601,  602 }, // 160
  {  132,  603,  604,  605 }, // 161
  {  136,  606,  607,  608 }, // 162
  {  140,  609,  610,  611 }, // 163
  {  144,  612,  613,  614 }, // 164
  {  148,  615,  616,  617 }, // 165
  {  152,  618,  619,  620 }, // 166
  {  156,  621,  622,  623 }, // 167
  {  160,  624,  625,  626 }, // 168
  {  164,  627,  628,  629 }, // 169
  {  168,  630,  631,  632 }, // 170
  {  172,  633,  634,  635 }, // 171
  {  176,  636,  637,  638 }, // 172
  {  180,  639,  640,  641 }, // 173
  {  184,  642,  643,  644 }, // 174
  {  188,  645,  646,  647 }, // 175
  {  192,  648,  649,  650 }, // 176
  {  196,  651,  652,  653 }, // 177
  {  200,  654,  655,  656 }, // 178
  {  204,  657,  658,  659 }, // 179
  {  208,  660,  661,  662 }, // 180
  {  212,  663,  664,  665 }, // 181
  {  216,  666,  667,  668 }, // 182
  {  220,  669,  670,  671 }, // 183
  {  224,  672,  673,  674 }, // 184
  {  228,  675,  676,  677 }, // 185
  {  232,  678,  679,  680 }, // 186
  {  236,  681,  682,  683 }, // 187
  {  240,  684,  685,  686 }, // 188
  {  244,  687,  688,  689 }, // 189
  {  248,  690,  691,  692 }, // 190
  {  252,  693,  694,  695 }, // 191
  {  256,  696,  697,  698 }, // 192
  {  260,  699,  700,  701 }, // 193
  {  264,  702,  703,  704 }, // 194
  {  268,  705,  706,  707 }, // 195
  {  272,  708,  709,  710 }, // 196
  {  276,  711,  712,  713 }, // 197
  {  280,  714,  715,  716 }, // 198
  {  284,  717,  718,  719 }, // 199
  {  288,  720,  721,  722 }, // 200
  {  292,  723,  724,  725 }, // 201
  {  296,  726,  727,  728 }, // 202
  {  300,  729,  730,  731 }, // 203
  {  304,  732,  733,  734 }, // 204
  {  308,  735,  736,  737 }, // 205
  {  312,  738,  739,  740 }, // 206
  {  316,  741,  742,  743 }, // 207
  {  320,  744,  745,  746 }, // 208
  {  324,  747,  748,  749 }, // 209
  {  328,  750,  751,  752 }, // 210
  {  332,  753,  754,  755 }, // 211
  {  336,  756,  757,  758 }, // 212
  {  340,  759,  760,  761 }, // 213
  {  344,  762,  763,  764 }, // 214
  {  348,  765,  766,  767 }, // 215
  {  576,  579,  768,  769 }, // 216
  {  582,  585,  770,  771 }, // 217
  {  588,  591,  768,  772 }, // 218
  {  594,  597,  770,  773 }, // 219
  {  600,  603,  774,  775 }, // 220
  {  606,  609,  776,  777 }, // 221
  {  612,  615,  774,  778 }, // 222
  {  618,  621,  776,  779 }, // 223
  {  672,  675,  780,  781 }, // 224
  {  678,  681,  782,  783 }, // 225
  {  684,  687,  784,  785 }, // 226
  {  690,  693,  786,  787 }, // 227
  {  696,  699,  780,  788 }, // 228
  {  702,  705,  782,  789 }, // 229
  {  708,  711,  784,  790 }, // 230
  {  714,  717,  786,  791 }, // 231
  {  577,  583,  792,  793 }, // 232
  {  580,  586,  792,  794 }, // 233
  {  589,  595,  795,  796 }, // 234
  {  592,  598,  795,  797 }, // 235
  {  601,  607,  798,  799 }, // 236
  {  604,  610,  798,  800 }, // 237
  {  613,  619,  801,  802 }, // 238
  {  616,  622,  801,  803 }, // 239
  {  578,  590,  804,  805 }, // 240
  {  581,  593,  806,  807 }, // 241
  {  584,  596,  804,  808 }, // 242
  {  587,  599,  806,  809 }, // 243
  {  602,  614,  810,  811 }, // 244
  {  605,  617,  812,  813 }, // 245
  {  608,  620,  810,  814 }, // 246
  {  611,  623,  812,  815 }, // 247
  {  624,  627,  816,  817 }, // 248
  {  630,  633,  816,  818 }, // 249
  {  636,  639,  819,  820 }, // 250
  {  642,  645,  819,  821 }, // 251
  {  648,  651,  822,  823 }, // 252
  {  654,  657,  822,  824 }, // 253
  {  660,  663,  825,  826 }, // 254
  {  666,  669,  825,  827 }, // 255
  {  625,  631,  828,  829 }, // 256
  {  628,  634,  830,  831 }, // 257
  {  637,  643,  832,  833 }, // 258
  {  640,  646,  834,  835 }, // 259
  {  649,  655,  828,  836 }, // 260
  {  652,  658,  830,  837 }, // 261
  {  661,  667,  832,  838 }, // 262
  {  664,  670,  834,  839 }, // 263
  {  720,  744,  840,  841 }, // 264
  {  723,  747,  842,  843 }, // 265
  {  726,  750,  840,  844 }, // 266
  {  729,  753,  842,  845 }, // 267
  {  732,  756,  846,  847 }, // 268
  {  735,  759,  848,  849 }, // 269
  {  738,  762,  846,  850 }, // 270
  {  741,  765,  848,  851 }, // 271
  {  626,  650,  852,  853 }, // 272
  {  629,  653,  852,  854 }, // 273
  {  632,  656,  855,  856 }, // 274
  {  635,  659,  855,  857 }, // 275
  {  638,  662,  858,  859 }, // 276
  {  641,  665,  858,  860 }, // 277
  {  644,  668,  861,  862 }, // 278
  {  647,  671,  861,  863 }, // 279
  {  721,  733,  864,  865 }, // 280
  {  724,  736,  866,  867 }, // 281
  {  727,  739,  868,  869 }, // 282
  {  730,  742,  870,  871 }, // 283
  {  745,  757,  864,  872 }, // 284
  {  748,  760,  866,  873 }, // 285
  {  751,  763,  868,  874 }, // 286
  {  754,  766,  870,  875 }, // 287
  {  722,  728,  876,  877 }, // 288
  {  725,  731,  878,  879 }, // 289
  {  734,  740,  876,  880 }, // 290
  {  737,  743,  878,  881 }, // 291
  {  746,  752,  882,  883 }, // 292
  {  749,  755,  884,  885 }, // 293
  {  758,  764,  882,  886 }, // 294
  {  761,  767,  884,  887 }, // 295
  {  673,  697,  888,  889 }, // 296
  {  676,  700,  890,  891 }, // 297
  {  679,  703,  892,  893 }, // 298
  {  682,  706,  894,  895 }, // 299
  {  685,  709,  888,  896 }, // 300
  {  688,  712,  890,  897 }, // 301
  {  691,  715,  892,  898 }, // 302
  {  694,  718,  894,  899 }, // 303
  {  674,  686,  900,  901 }, // 304
  {  677,  689,  900,  902 }, // 305
  {  680,  692,  903,  904 }, // 306
  {  683,  695,  903,  905 }, // 307
  {  698,  710,  906,  907 }, // 308
  {  701,  713,  906,  908 }, // 309
  {  704,  716,  909,  910 }, // 310
  {  707,  719,  909,  911 }, // 311
  {   16,  769,  912,  913 }, // 312
  {   20,  771,  914,  915 }, // 313
  {   17,  772,  916,  917 }, // 314
  {   21,  773,  918,  919 }, // 315
  {   24,  775,  920,  921 }, // 316
  {   28,  777,  922,  923 }, // 317
  {   25,  778,  924,  925 }, // 318
  {   29,  779,  926,  927 }, // 319
  {   48,  781,  928,  929 }, // 320
  {   52,  783,  930,  931 }, // 321
  {   56,  785,  932,  933 }, // 322
  {   60,  787,  934,  935 }, // 323
  {   49,  788,  936,  937 }, // 324
  {   53,  789,  938,  939 }, // 325
  {   57,  790,  940,  941 }, // 326
  {   61,  791,  942,  943 }, // 327
  {    0,  793,  944,  945 }, // 328
  {    1,  794,  946,  947 }, // 329
  {    4,  796,  948,  949 }, // 330
  {    5,  797,  950,  951 }, // 331
  {    8,  799,  952,  953 }, // 332
  {    9,  800,  954,  955 }, // 333
  {   12,  802,  956,  957 }, // 334
  {   13,  803,  958,  959 }, // 335
  {   32,  805,  960,  961 }, // 336
  {   36,  807,  962,  963 }, // 337
  {   33,  808,  964,  965 }, // 338
  {   37,  809,  966,  967 }, // 339
  {   40,  811,  968,  969 }, // 340
  {   44,  813,  970,  971 }, // 341
  {   41,  814,  972,  973 }, // 342
  {   45,  815,  974,  975 }, // 343
  {    2,  817,  976,  977 }, // 344
  {    3,  818,  978,  979 }, // 345
  {    6,  820,  980,  981 }, // 346
  {    7,  821,  982,  983 }, // 347
  {   10,  823,  984,  985 }, // 348
  {   11,  824,  986,  987 }, // 349
  {   14,  826,  988,  989 }, // 350
  {   15,  827,  990,  991 }, // 351
  {   64,  829,  992,  993 }, // 352
  {   68,  831,  994,  995 }, // 353
  {   72,  833,  996,  997 }, // 354
  {   76,  835,  998,  999 }, // 355
  {   65,  836, 1000, 1001 }, // 356
  {   69,  837, 1002, 1003 }, // 357
  {   73,  838, 1004, 1005 }, // 358
  {   77,  839, 1006, 1007 }, // 359
  {   66,  841, 1008, 1009 }, // 360
  {   70,  843, 1010, 1011 }, // 361
  {   67,  844, 1012, 1013 }, // 362
  {   71,  845, 1014, 1015 }, // 363
  {   74,  847, 1016, 1017 }, // 364
  {   78,  849, 1018, 1019 }, // 365
  {   75,  850, 1020, 1021 }, // 366
  {   79,  851, 1022, 1023 }, // 367
  {   50,  853, 1024, 1025 }, // 368
  {   51,  854, 1026, 1027 }, // 369
  {   54,  856, 1028, 1029 }, // 370
  {   55,  857, 1030, 1031 }, // 371
  {   58,  859, 1032, 1033 }, // 372
  {   59,  860, 1034, 1035 }, // 373
  {   62,  862, 1036, 1037 }, // 374
  {   63,  863, 1038, 1039 }, // 375
  {   80,  865, 1040, 1041 }, // 376
  {   84,  867, 1042, 1043 }, // 377
  {   88,  869, 1044, 1045 }, // 378
  {   92,  871, 1046, 1047 }, // 379
  {   81,  872, 1048, 1049 }, // 380
  {   85,  873, 1050, 1051 }, // 381
  {   89,  874, 1052, 1053 }, // 382
  {   93,  875, 1054, 1055 }, // 383
  {   34,  877, 1056, 1057 }, // 384
  {   38,  879, 1058, 1059 }, // 385
  {   35,  880, 1060, 1061 }, // 386
  {   39,  881, 1062, 1063 }, // 387
  {   42,  883, 1064, 1065 }, // 388
  {   46,  885, 1066, 1067 }, // 389
  {   43,  886, 1068, 1069 }, // 390
  {   47,  887, 1070, 1071 }, // 391
  {   82,  889, 1072, 1073 }, // 392
  {   86,  891, 1074, 1075 }, // 393
  {   90,  893, 1076, 1077 }, // 394
  {   94,  895, 1078, 1079 }, // 395
  {   83,  896, 1080, 1081 }, // 396
  {   87,  897, 1082, 1083 }, // 397
  {   91,  898, 1084, 1085 }, // 398
  {   95,  899, 1086, 1087 }, // 399
  {   18,  901, 1088, 1089 }, // 400
  {   19,  902, 1090, 1091 }, // 401
  {   22,  904, 1092, 1093 }, // 402
  {   23,  905, 1094, 1095 }, // 403
  {   26,  907, 1096, 1097 }, // 404
  {   27,  908, 1098, 1099 }, // 405
  {   30,  910, 1100, 1101 }, // 406
  {   31,  911, 1102, 1103 }, // 407
  {   97,  521,  912, 1104 }, // 408
  {  105,  528,  914, 1105 }, // 409
  {  113,  535,  916, 1106 }, // 410
  {  121,  542,  918, 1107 }, // 411
  {  129,  549,  920, 1108 }, // 412
  {  137,  556,  922, 1109 }, // 413
  {  145,  563,  924, 1110 }, // 414
  {  153,  570,  926, 1111 }, // 415
  {  101,  524,  913, 1112 }, // 416
  {  109,  531,  915, 1113 }, // 417
  {  117,  538,  917, 1114 }, // 418
  {  125,  545,  919, 1115 }, // 419
  {  133,  552,  921, 1116 }, // 420
  {  141,  559,  923, 1117 }, // 421
  {  149,  566,  925, 1118 }, // 422
  {  157,  573,  927, 1119 }, // 423
  {  225,  522,  928, 1120 }, // 424
  {  233,  529,  930, 1121 }, // 425
  {  241,  536,  932, 1122 }, // 426
  {  249,  543,  934, 1123 }, // 427
  {  257,  550,  936, 1124 }, // 428
  {  265,  557,  938, 1125 }, // 429
  {  273,  564,  940, 1126 }, // 430
  {  281,  571,  942, 1127 }, // 431
  {  229,  525,  929, 1128 }, // 432
  {  237,  532,  931, 1129 }, // 433
  {  245,  539,  933, 1130 }, // 434
  {  253,  546,  935, 1131 }, // 435
  {  261,  553,  937, 1132 }, // 436
  {  269,  560,  939, 1133 }, // 437
  {  277,  567,  941, 1134 }, // 438
  {  285,  574,  943, 1135 }, // 439
  {   98,  465,  944, 1136 }, // 440
  {  102,  469,  946, 1137 }, // 441
  {  114,  479,  948, 1138 }, // 442
  {  118,  483,  950, 1139 }, // 443
  {  130,  493,  952, 1140 }, // 444
  {  134,  497,  954, 1141 }, // 445
  {  146,  507,  956, 1142 }, // 446
  {  150,  511,  958, 1143 }, // 447
  {  106,  472,  945, 1144 }, // 448
  {  110,  475,  947, 1145 }, // 449
  {  122,  486,  949, 1146 }, // 450
  {  126,  489,  951, 1147 }, // 451
  {  138,  500,  953, 1148 }, // 452
  {  142,  503,  955, 1149 }, // 453
  {  154,  514,  957, 1150 }, // 454
  {  158,  517,  959, 1151 }, // 455
  {   99,  409,  960, 1152 }, // 456
  {  103,  413,  962, 1153 }, // 457
  {  107,  417,  964, 1154 }, // 458
  {  111,  421,  966, 1155 }, // 459
  {  131,  437,  968, 1156 }, // 460
  {  135,  441,  970, 1157 }, // 461
  {  139,  445,  972, 1158 }, // 462
  {  143,  449,  974, 1159 }, // 463
  {  115,  424,  961, 1160 }, // 464
  {  119,  427,  963, 1161 }, // 465
  {  123,  430,  965, 1162 }, // 466
  {  127,  433,  967, 1163 }, // 467
  {  147,  452,  969, 1164 }, // 468
  {  151,  455,  971, 1165 }, // 469
  {  155,  458,  973, 1166 }, // 470
  {  159,  461,  975, 1167 }, // 471
  {  161,  523,  976, 1136 }, // 472
  {  169,  530,  978, 1144 }, // 473
  {  177,  537,  980, 1138 }, // 474
  {  185,  544,  982, 1146 }, // 475
  {  193,  551,  984, 1140 }, // 476
  {  201,  558,  986, 1148 }, // 477
  {  209,  565,  988, 1142 }, // 478
  {  217,  572,  990, 1150 }, // 479
  {  165,  526,  977, 1137 }, // 480
  {  173,  533,  979, 1145 }, // 481
  {  181,  540,  981, 1139 }, // 482
  {  189,  547,  983, 1147 }, // 483
  {  197,  554,  985, 1141 }, // 484
  {  205,  561,  987, 1149 }, // 485
  {  213,  568,  989, 1143 }, // 486
  {  221,  575,  991, 1151 }, // 487
  {  162,  466,  992, 1168 }, // 488
  {  166,  470,  994, 1169 }, // 489
  {  178,  480,  996, 1170 }, // 490
  {  182,  484,  998, 1171 }, // 491
  {  194,  494, 1000, 1172 }, // 492
  {  198,  498, 1002, 1173 }, // 493
  {  210,  508, 1004, 1174 }, // 494
  {  214,  512, 1006, 1175 }, // 495
  {  170,  473,  993, 1176 }, // 496
  {  174,  476,  995, 1177 }, // 497
  {  186,  487,  997, 1178 }, // 498
  {  190,  490,  999, 1179 }, // 499
  {  202,  501, 1001, 1180 }, // 500
  {  206,  504, 1003, 1181 }, // 501
  {  218,  515, 1005, 1182 }, // 502
  {  222,  518, 1007, 1183 }, // 503
  {  289,  353, 1008, 1168 }, // 504
  {  293,  357, 1010, 1169 }, // 505
  {  297,  361, 1012, 1176 }, // 506
  {  301,  365, 1014, 1177 }, // 507
  {  305,  369, 1016, 1170 }, // 508
  {  309,  373, 1018, 1171 }, // 509
  {  313,  377, 1020, 1178 }, // 510
  {  317,  381, 1022, 1179 }, // 511
  {  321,  384, 1009, 1172 }, // 512
  {  325,  387, 1011, 1173 }, // 513
  {  329,  390, 1013, 1180 }, // 514
  {  333,  393, 1015, 1181 }, // 515
  {  337,  396, 1017, 1174 }, // 516
  {  341,  399, 1019, 1175 }, // 517
  {  345,  402, 1021, 1182 }, // 518
  {  349,  405, 1023, 1183 }, // 519
  {  163,  354, 1024, 1120 }, // 520
  {  167,  358, 1026, 1128 }, // 521
  {  171,  362, 1028, 1121 }, // 522
  {  175,  366, 1030, 1129 }, // 523
  {  179,  370, 1032, 1122 }, // 524
  {  183,  374, 1034, 1130 }, // 525
  {  187,  378, 1036, 1123 }, // 526
  {  191,  382, 1038, 1131 }, // 527
  {  195,  385, 1025, 1124 }, // 528
  {  199,  388, 1027, 1132 }, // 529
  {  203,  391, 1029, 1125 }, // 530
  {  207,  394, 1031, 1133 }, // 531
  {  211,  397, 1033, 1126 }, // 532
  {  215,  400, 1035, 1134 }, // 533
  {  219,  403, 1037, 1127 }, // 534
  {  223,  406, 1039, 1135 }, // 535
  {  290,  410, 1040, 1184 }, // 536
  {  294,  414, 1042, 1185 }, // 537
  {  298,  418, 1044, 1186 }, // 538
  {  302,  422, 1046, 1187 }, // 539
  {  322,  438, 1048, 1188 }, // 540
  {  326,  442, 1050, 1189 }, // 541
  {  330,  446, 1052, 1190 }, // 542
  {  334,  450, 1054, 1191 }, // 543
  {  306,  425, 1041, 1192 }, // 544
  {  310,  428, 1043, 1193 }, // 545
  {  314,  431, 1045, 1194 }, // 546
  {  318,  434, 1047, 1195 }, // 547
  {  338,  453, 1049, 1196 }, // 548
  {  342,  456, 1051, 1197 }, // 549
  {  346,  459, 1053, 1198 }, // 550
  {  350,  462, 1055, 1199 }, // 551
  {  291,  467, 1056, 1152 }, // 552
  {  295,  471, 1058, 1153 }, // 553
  {  307,  481, 1060, 1160 }, // 554
  {  311,  485, 1062, 1161 }, // 555
  {  323,  495, 1064, 1156 }, // 556
  {  327,  499, 1066, 1157 }, // 557
  {  339,  509, 1068, 1164 }, // 558
  {  343,  513, 1070, 1165 }, // 559
  {  299,  474, 1057, 1154 }, // 560
  {  303,  477, 1059, 1155 }, // 561
  {  315,  488, 1061, 1162 }, // 562
  {  319,  491, 1063, 1163 }, // 563
  {  331,  502, 1065, 1158 }, // 564
  {  335,  505, 1067, 1159 }, // 565
  {  347,  516, 1069, 1166 }, // 566
  {  351,  519, 1071, 1167 }, // 567
  {  226,  355, 1072, 1184 }, // 568
  {  230,  359, 1074, 1185 }, // 569
  {  234,  363, 1076, 1186 }, // 570
  {  238,  367, 1078, 1187 }, // 571
  {  242,  371, 1080, 1192 }, // 572
  {  246,  375, 1082, 1193 }, // 573
  {  250,  379, 1084, 1194 }, // 574
  {  254,  383, 1086, 1195 }, // 575
  {  258,  386, 1073, 1188 }, // 576
  {  262,  389, 1075, 1189 }, // 577
  {  266,  392, 1077, 1190 }, // 578
  {  270,  395, 1079, 1191 }, // 579
  {  274,  398, 1081, 1196 }, // 580
  {  278,  401, 1083, 1197 }, // 581
  {  282,  404, 1085, 1198 }, // 582
  {  286,  407, 1087, 1199 }, // 583
  {  227,  411, 1088, 1104 }, // 584
  {  231,  415, 1090, 1112 }, // 585
  {  235,  419, 1092, 1105 }, // 586
  {  239,  423, 1094, 1113 }, // 587
  {  259,  439, 1096, 1108 }, // 588
  {  263,  443, 1098, 1116 }, // 589
  {  267,  447, 1100, 1109 }, // 590
  {  271,  451, 1102, 1117 }, // 591
  {  243,  426, 1089, 1106 }, // 592
  {  247,  429, 1091, 1114 }, // 593
  {  251,  432, 1093, 1107 }, // 594
  {  255,  435, 1095, 1115 }, // 595
  {  275,  454, 1097, 1110 }, // 596
  {  279,  457, 1099, 1118 }, // 597
  {  283,  460, 1101, 1111 }, // 598
  {  287,  463, 1103, 1119 }, // 599
};
int edgeToEdgeK120[1200][6] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,  793,  944,  945 }, //   0
  {    0,    2,    3,  794,  946,  947 }, //   1
  {    0,    1,    3,  817,  976,  977 }, //   2
  {    0,    1,    2,  818,  978,  979 }, //   3
  {    5,    6,    7,  796,  948,  949 }, //   4
  {    4,    6,    7,  797,  950,  951 }, //   5
  {    4,    5,    7,  820,  980,  981 }, //   6
  {    4,    5,    6,  821,  982,  983 }, //   7
  {    9,   10,   11,  799,  952,  953 }, //   8
  {    8,   10,   11,  800,  954,  955 }, //   9
  {    8,    9,   11,  823,  984,  985 }, //  10
  {    8,    9,   10,  824,  986,  987 }, //  11
  {   13,   14,   15,  802,  956,  957 }, //  12
  {   12,   14,   15,  803,  958,  959 }, //  13
  {   12,   13,   15,  826,  988,  989 }, //  14
  {   12,   13,   14,  827,  990,  991 }, //  15
  {   17,   18,   19,  769,  912,  913 }, //  16
  {   16,   18,   19,  772,  916,  917 }, //  17
  {   16,   17,   19,  901, 1088, 1089 }, //  18
  {   16,   17,   18,  902, 1090, 1091 }, //  19
  {   21,   22,   23,  771,  914,  915 }, //  20
  {   20,   22,   23,  773,  918,  919 }, //  21
  {   20,   21,   23,  904, 1092, 1093 }, //  22
  {   20,   21,   22,  905, 1094, 1095 }, //  23
  {   25,   26,   27,  775,  920,  921 }, //  24
  {   24,   26,   27,  778,  924,  925 }, //  25
  {   24,   25,   27,  907, 1096, 1097 }, //  26
  {   24,   25,   26,  908, 1098, 1099 }, //  27
  {   29,   30,   31,  777,  922,  923 }, //  28
  {   28,   30,   31,  779,  926,  927 }, //  29
  {   28,   29,   31,  910, 1100, 1101 }, //  30
  {   28,   29,   30,  911, 1102, 1103 }, //  31
  {   33,   34,   35,  805,  960,  961 }, //  32
  {   32,   34,   35,  808,  964,  965 }, //  33
  {   32,   33,   35,  877, 1056, 1057 }, //  34
  {   32,   33,   34,  880, 1060, 1061 }, //  35
  {   37,   38,   39,  807,  962,  963 }, //  36
  {   36,   38,   39,  809,  966,  967 }, //  37
  {   36,   37,   39,  879, 1058, 1059 }, //  38
  {   36,   37,   38,  881, 1062, 1063 }, //  39
  {   41,   42,   43,  811,  968,  969 }, //  40
  {   40,   42,   43,  814,  972,  973 }, //  41
  {   40,   41,   43,  883, 1064, 1065 }, //  42
  {   40,   41,   42,  886, 1068, 1069 }, //  43
  {   45,   46,   47,  813,  970,  971 }, //  44
  {   44,   46,   47,  815,  974,  975 }, //  45
  {   44,   45,   47,  885, 1066, 1067 }, //  46
  {   44,   45,   46,  887, 1070, 1071 }, //  47
  {   49,   50,   51,  781,  928,  929 }, //  48
  {   48,   50,   51,  788,  936,  937 }, //  49
  {   48,   49,   51,  853, 1024, 1025 }, //  50
  {   48,   49,   50,  854, 1026, 1027 }, //  51
  {   53,   54,   55,  783,  930,  931 }, //  52
  {   52,   54,   55,  789,  938,  939 }, //  53
  {   52,   53,   55,  856, 1028, 1029 }, //  54
  {   52,   53,   54,  857, 1030, 1031 }, //  55
  {   57,   58,   59,  785,  932,  933 }, //  56
  {   56,   58,   59,  790,  940,  941 }, //  57
  {   56,   57,   59,  859, 1032, 1033 }, //  58
  {   56,   57,   58,  860, 1034, 1035 }, //  59
  {   61,   62,   63,  787,  934,  935 }, //  60
  {   60,   62,   63,  791,  942,  943 }, //  61
  {   60,   61,   63,  862, 1036, 1037 }, //  62
  {   60,   61,   62,  863, 1038, 1039 }, //  63
  {   65,   66,   67,  829,  992,  993 }, //  64
  {   64,   66,   67,  836, 1000, 1001 }, //  65
  {   64,   65,   67,  841, 1008, 1009 }, //  66
  {   64,   65,   66,  844, 1012, 1013 }, //  67
  {   69,   70,   71,  831,  994,  995 }, //  68
  {   68,   70,   71,  837, 1002, 1003 }, //  69
  {   68,   69,   71,  843, 1010, 1011 }, //  70
  {   68,   69,   70,  845, 1014, 1015 }, //  71
  {   73,   74,   75,  833,  996,  997 }, //  72
  {   72,   74,   75,  838, 1004, 1005 }, //  73
  {   72,   73,   75,  847, 1016, 1017 }, //  74
  {   72,   73,   74,  850, 1020, 1021 }, //  75
  {   77,   78,   79,  835,  998,  999 }, //  76
  {   76,   78,   79,  839, 1006, 1007 }, //  77
  {   76,   77,   79,  849, 1018, 1019 }, //  78
  {   76,   77,   78,  851, 1022, 1023 }, //  79
  {   81,   82,   83,  865, 1040, 1041 }, //  80
  {   80,   82,   83,  872, 1048, 1049 }, //  81
  {   80,   81,   83,  889, 1072, 1073 }, //  82
  {   80,   81,   82,  896, 1080, 1081 }, //  83
  {   85,   86,   87,  867, 1042, 1043 }, //  84
  {   84,   86,   87,  873, 1050, 1051 }, //  85
  {   84,   85,   87,  891, 1074, 1075 }, //  86
  {   84,   85,   86,  897, 1082, 1083 }, //  87
  {   89,   90,   91,  869, 1044, 1045 }, //  88
  {   88,   90,   91,  874, 1052, 1053 }, //  89
  {   88,   89,   91,  893, 1076, 1077 }, //  90
  {   88,   89,   90,  898, 1084, 1085 }, //  91
  {   93,   94,   95,  871, 1046, 1047 }, //  92
  {   92,   94,   95,  875, 1054, 1055 }, //  93
  {   92,   93,   95,  895, 1078, 1079 }, //  94
  {   92,   93,   94,  899, 1086, 1087 }, //  95
  {   97,   98,   99,  576,  577,  578 }, //  96
  {   96,   98,   99,  521,  912, 1104 }, //  97
  {   96,   97,   99,  465,  944, 1136 }, //  98
  {   96,   97,   98,  409,  960, 1152 }, //  99
  {  101,  102,  103,  579,  580,  581 }, // 100
  {  100,  102,  103,  524,  913, 1112 }, // 101
  {  100,  101,  103,  469,  946, 1137 }, // 102
  {  100,  101,  102,  413,  962, 1153 }, // 103
  {  105,  106,  107,  582,  583,  584 }, // 104
  {  104,  106,  107,  528,  914, 1105 }, // 105
  {  104,  105,  107,  472,  945, 1144 }, // 106
  {  104,  105,  106,  417,  964, 1154 }, // 107
  {  109,  110,  111,  585,  586,  587 }, // 108
  {  108,  110,  111,  531,  915, 1113 }, // 109
  {  108,  109,  111,  475,  947, 1145 }, // 110
  {  108,  109,  110,  421,  966, 1155 }, // 111
  {  113,  114,  115,  588,  589,  590 }, // 112
  {  112,  114,  115,  535,  916, 1106 }, // 113
  {  112,  113,  115,  479,  948, 1138 }, // 114
  {  112,  113,  114,  424,  961, 1160 }, // 115
  {  117,  118,  119,  591,  592,  593 }, // 116
  {  116,  118,  119,  538,  917, 1114 }, // 117
  {  116,  117,  119,  483,  950, 1139 }, // 118
  {  116,  117,  118,  427,  963, 1161 }, // 119
  {  121,  122,  123,  594,  595,  596 }, // 120
  {  120,  122,  123,  542,  918, 1107 }, // 121
  {  120,  121,  123,  486,  949, 1146 }, // 122
  {  120,  121,  122,  430,  965, 1162 }, // 123
  {  125,  126,  127,  597,  598,  599 }, // 124
  {  124,  126,  127,  545,  919, 1115 }, // 125
  {  124,  125,  127,  489,  951, 1147 }, // 126
  {  124,  125,  126,  433,  967, 1163 }, // 127
  {  129,  130,  131,  600,  601,  602 }, // 128
  {  128,  130,  131,  549,  920, 1108 }, // 129
  {  128,  129,  131,  493,  952, 1140 }, // 130
  {  128,  129,  130,  437,  968, 1156 }, // 131
  {  133,  134,  135,  603,  604,  605 }, // 132
  {  132,  134,  135,  552,  921, 1116 }, // 133
  {  132,  133,  135,  497,  954, 1141 }, // 134
  {  132,  133,  134,  441,  970, 1157 }, // 135
  {  137,  138,  139,  606,  607,  608 }, // 136
  {  136,  138,  139,  556,  922, 1109 }, // 137
  {  136,  137,  139,  500,  953, 1148 }, // 138
  {  136,  137,  138,  445,  972, 1158 }, // 139
  {  141,  142,  143,  609,  610,  611 }, // 140
  {  140,  142,  143,  559,  923, 1117 }, // 141
  {  140,  141,  143,  503,  955, 1149 }, // 142
  {  140,  141,  142,  449,  974, 1159 }, // 143
  {  145,  146,  147,  612,  613,  614 }, // 144
  {  144,  146,  147,  563,  924, 1110 }, // 145
  {  144,  145,  147,  507,  956, 1142 }, // 146
  {  144,  145,  146,  452,  969, 1164 }, // 147
  {  149,  150,  151,  615,  616,  617 }, // 148
  {  148,  150,  151,  566,  925, 1118 }, // 149
  {  148,  149,  151,  511,  958, 1143 }, // 150
  {  148,  149,  150,  455,  971, 1165 }, // 151
  {  153,  154,  155,  618,  619,  620 }, // 152
  {  152,  154,  155,  570,  926, 1111 }, // 153
  {  152,  153,  155,  514,  957, 1150 }, // 154
  {  152,  153,  154,  458,  973, 1166 }, // 155
  {  157,  158,  159,  621,  622,  623 }, // 156
  {  156,  158,  159,  573,  927, 1119 }, // 157
  {  156,  157,  159,  517,  959, 1151 }, // 158
  {  156,  157,  158,  461,  975, 1167 }, // 159
  {  161,  162,  163,  624,  625,  626 }, // 160
  {  160,  162,  163,  523,  976, 1136 }, // 161
  {  160,  161,  163,  466,  992, 1168 }, // 162
  {  160,  161,  162,  354, 1024, 1120 }, // 163
  {  165,  166,  167,  627,  628,  629 }, // 164
  {  164,  166,  167,  526,  977, 1137 }, // 165
  {  164,  165,  167,  470,  994, 1169 }, // 166
  {  164,  165,  166,  358, 1026, 1128 }, // 167
  {  169,  170,  171,  630,  631,  632 }, // 168
  {  168,  170,  171,  530,  978, 1144 }, // 169
  {  168,  169,  171,  473,  993, 1176 }, // 170
  {  168,  169,  170,  362, 1028, 1121 }, // 171
  {  173,  174,  175,  633,  634,  635 }, // 172
  {  172,  174,  175,  533,  979, 1145 }, // 173
  {  172,  173,  175,  476,  995, 1177 }, // 174
  {  172,  173,  174,  366, 1030, 1129 }, // 175
  {  177,  178,  179,  636,  637,  638 }, // 176
  {  176,  178,  179,  537,  980, 1138 }, // 177
  {  176,  177,  179,  480,  996, 1170 }, // 178
  {  176,  177,  178,  370, 1032, 1122 }, // 179
  {  181,  182,  183,  639,  640,  641 }, // 180
  {  180,  182,  183,  540,  981, 1139 }, // 181
  {  180,  181,  183,  484,  998, 1171 }, // 182
  {  180,  181,  182,  374, 1034, 1130 }, // 183
  {  185,  186,  187,  642,  643,  644 }, // 184
  {  184,  186,  187,  544,  982, 1146 }, // 185
  {  184,  185,  187,  487,  997, 1178 }, // 186
  {  184,  185,  186,  378, 1036, 1123 }, // 187
  {  189,  190,  191,  645,  646,  647 }, // 188
  {  188,  190,  191,  547,  983, 1147 }, // 189
  {  188,  189,  191,  490,  999, 1179 }, // 190
  {  188,  189,  190,  382, 1038, 1131 }, // 191
  {  193,  194,  195,  648,  649,  650 }, // 192
  {  192,  194,  195,  551,  984, 1140 }, // 193
  {  192,  193,  195,  494, 1000, 1172 }, // 194
  {  192,  193,  194,  385, 1025, 1124 }, // 195
  {  197,  198,  199,  651,  652,  653 }, // 196
  {  196,  198,  199,  554,  985, 1141 }, // 197
  {  196,  197,  199,  498, 1002, 1173 }, // 198
  {  196,  197,  198,  388, 1027, 1132 }, // 199
  {  201,  202,  203,  654,  655,  656 }, // 200
  {  200,  202,  203,  558,  986, 1148 }, // 201
  {  200,  201,  203,  501, 1001, 1180 }, // 202
  {  200,  201,  202,  391, 1029, 1125 }, // 203
  {  205,  206,  207,  657,  658,  659 }, // 204
  {  204,  206,  207,  561,  987, 1149 }, // 205
  {  204,  205,  207,  504, 1003, 1181 }, // 206
  {  204,  205,  206,  394, 1031, 1133 }, // 207
  {  209,  210,  211,  660,  661,  662 }, // 208
  {  208,  210,  211,  565,  988, 1142 }, // 209
  {  208,  209,  211,  508, 1004, 1174 }, // 210
  {  208,  209,  210,  397, 1033, 1126 }, // 211
  {  213,  214,  215,  663,  664,  665 }, // 212
  {  212,  214,  215,  568,  989, 1143 }, // 213
  {  212,  213,  215,  512, 1006, 1175 }, // 214
  {  212,  213,  214,  400, 1035, 1134 }, // 215
  {  217,  218,  219,  666,  667,  668 }, // 216
  {  216,  218,  219,  572,  990, 1150 }, // 217
  {  216,  217,  219,  515, 1005, 1182 }, // 218
  {  216,  217,  218,  403, 1037, 1127 }, // 219
  {  221,  222,  223,  669,  670,  671 }, // 220
  {  220,  222,  223,  575,  991, 1151 }, // 221
  {  220,  221,  223,  518, 1007, 1183 }, // 222
  {  220,  221,  222,  406, 1039, 1135 }, // 223
  {  225,  226,  227,  672,  673,  674 }, // 224
  {  224,  226,  227,  522,  928, 1120 }, // 225
  {  224,  225,  227,  355, 1072, 1184 }, // 226
  {  224,  225,  226,  411, 1088, 1104 }, // 227
  {  229,  230,  231,  675,  676,  677 }, // 228
  {  228,  230,  231,  525,  929, 1128 }, // 229
  {  228,  229,  231,  359, 1074, 1185 }, // 230
  {  228,  229,  230,  415, 1090, 1112 }, // 231
  {  233,  234,  235,  678,  679,  680 }, // 232
  {  232,  234,  235,  529,  930, 1121 }, // 233
  {  232,  233,  235,  363, 1076, 1186 }, // 234
  {  232,  233,  234,  419, 1092, 1105 }, // 235
  {  237,  238,  239,  681,  682,  683 }, // 236
  {  236,  238,  239,  532,  931, 1129 }, // 237
  {  236,  237,  239,  367, 1078, 1187 }, // 238
  {  236,  237,  238,  423, 1094, 1113 }, // 239
  {  241,  242,  243,  684,  685,  686 }, // 240
  {  240,  242,  243,  536,  932, 1122 }, // 241
  {  240,  241,  243,  371, 1080, 1192 }, // 242
  {  240,  241,  242,  426, 1089, 1106 }, // 243
  {  245,  246,  247,  687,  688,  689 }, // 244
  {  244,  246,  247,  539,  933, 1130 }, // 245
  {  244,  245,  247,  375, 1082, 1193 }, // 246
  {  244,  245,  246,  429, 1091, 1114 }, // 247
  {  249,  250,  251,  690,  691,  692 }, // 248
  {  248,  250,  251,  543,  934, 1123 }, // 249
  {  248,  249,  251,  379, 1084, 1194 }, // 250
  {  248,  249,  250,  432, 1093, 1107 }, // 251
  {  253,  254,  255,  693,  694,  695 }, // 252
  {  252,  254,  255,  546,  935, 1131 }, // 253
  {  252,  253,  255,  383, 1086, 1195 }, // 254
  {  252,  253,  254,  435, 1095, 1115 }, // 255
  {  257,  258,  259,  696,  697,  698 }, // 256
  {  256,  258,  259,  550,  936, 1124 }, // 257
  {  256,  257,  259,  386, 1073, 1188 }, // 258
  {  256,  257,  258,  439, 1096, 1108 }, // 259
  {  261,  262,  263,  699,  700,  701 }, // 260
  {  260,  262,  263,  553,  937, 1132 }, // 261
  {  260,  261,  263,  389, 1075, 1189 }, // 262
  {  260,  261,  262,  443, 1098, 1116 }, // 263
  {  265,  266,  267,  702,  703,  704 }, // 264
  {  264,  266,  267,  557,  938, 1125 }, // 265
  {  264,  265,  267,  392, 1077, 1190 }, // 266
  {  264,  265,  266,  447, 1100, 1109 }, // 267
  {  269,  270,  271,  705,  706,  707 }, // 268
  {  268,  270,  271,  560,  939, 1133 }, // 269
  {  268,  269,  271,  395, 1079, 1191 }, // 270
  {  268,  269,  270,  451, 1102, 1117 }, // 271
  {  273,  274,  275,  708,  709,  710 }, // 272
  {  272,  274,  275,  564,  940, 1126 }, // 273
  {  272,  273,  275,  398, 1081, 1196 }, // 274
  {  272,  273,  274,  454, 1097, 1110 }, // 275
  {  277,  278,  279,  711,  712,  713 }, // 276
  {  276,  278,  279,  567,  941, 1134 }, // 277
  {  276,  277,  279,  401, 1083, 1197 }, // 278
  {  276,  277,  278,  457, 1099, 1118 }, // 279
  {  281,  282,  283,  714,  715,  716 }, // 280
  {  280,  282,  283,  571,  942, 1127 }, // 281
  {  280,  281,  283,  404, 1085, 1198 }, // 282
  {  280,  281,  282,  460, 1101, 1111 }, // 283
  {  285,  286,  287,  717,  718,  719 }, // 284
  {  284,  286,  287,  574,  943, 1135 }, // 285
  {  284,  285,  287,  407, 1087, 1199 }, // 286
  {  284,  285,  286,  463, 1103, 1119 }, // 287
  {  289,  290,  291,  720,  721,  722 }, // 288
  {  288,  290,  291,  353, 1008, 1168 }, // 289
  {  288,  289,  291,  410, 1040, 1184 }, // 290
  {  288,  289,  290,  467, 1056, 1152 }, // 291
  {  293,  294,  295,  723,  724,  725 }, // 292
  {  292,  294,  295,  357, 1010, 1169 }, // 293
  {  292,  293,  295,  414, 1042, 1185 }, // 294
  {  292,  293,  294,  471, 1058, 1153 }, // 295
  {  297,  298,  299,  726,  727,  728 }, // 296
  {  296,  298,  299,  361, 1012, 1176 }, // 297
  {  296,  297,  299,  418, 1044, 1186 }, // 298
  {  296,  297,  298,  474, 1057, 1154 }, // 299
  {  301,  302,  303,  729,  730,  731 }, // 300
  {  300,  302,  303,  365, 1014, 1177 }, // 301
  {  300,  301,  303,  422, 1046, 1187 }, // 302
  {  300,  301,  302,  477, 1059, 1155 }, // 303
  {  305,  306,  307,  732,  733,  734 }, // 304
  {  304,  306,  307,  369, 1016, 1170 }, // 305
  {  304,  305,  307,  425, 1041, 1192 }, // 306
  {  304,  305,  306,  481, 1060, 1160 }, // 307
  {  309,  310,  311,  735,  736,  737 }, // 308
  {  308,  310,  311,  373, 1018, 1171 }, // 309
  {  308,  309,  311,  428, 1043, 1193 }, // 310
  {  308,  309,  310,  485, 1062, 1161 }, // 311
  {  313,  314,  315,  738,  739,  740 }, // 312
  {  312,  314,  315,  377, 1020, 1178 }, // 313
  {  312,  313,  315,  431, 1045, 1194 }, // 314
  {  312,  313,  314,  488, 1061, 1162 }, // 315
  {  317,  318,  319,  741,  742,  743 }, // 316
  {  316,  318,  319,  381, 1022, 1179 }, // 317
  {  316,  317,  319,  434, 1047, 1195 }, // 318
  {  316,  317,  318,  491, 1063, 1163 }, // 319
  {  321,  322,  323,  744,  745,  746 }, // 320
  {  320,  322,  323,  384, 1009, 1172 }, // 321
  {  320,  321,  323,  438, 1048, 1188 }, // 322
  {  320,  321,  322,  495, 1064, 1156 }, // 323
  {  325,  326,  327,  747,  748,  749 }, // 324
  {  324,  326,  327,  387, 1011, 1173 }, // 325
  {  324,  325,  327,  442, 1050, 1189 }, // 326
  {  324,  325,  326,  499, 1066, 1157 }, // 327
  {  329,  330,  331,  750,  751,  752 }, // 328
  {  328,  330,  331,  390, 1013, 1180 }, // 329
  {  328,  329,  331,  446, 1052, 1190 }, // 330
  {  328,  329,  330,  502, 1065, 1158 }, // 331
  {  333,  334,  335,  753,  754,  755 }, // 332
  {  332,  334,  335,  393, 1015, 1181 }, // 333
  {  332,  333,  335,  450, 1054, 1191 }, // 334
  {  332,  333,  334,  505, 1067, 1159 }, // 335
  {  337,  338,  339,  756,  757,  758 }, // 336
  {  336,  338,  339,  396, 1017, 1174 }, // 337
  {  336,  337,  339,  453, 1049, 1196 }, // 338
  {  336,  337,  338,  509, 1068, 1164 }, // 339
  {  341,  342,  343,  759,  760,  761 }, // 340
  {  340,  342,  343,  399, 1019, 1175 }, // 341
  {  340,  341,  343,  456, 1051, 1197 }, // 342
  {  340,  341,  342,  513, 1070, 1165 }, // 343
  {  345,  346,  347,  762,  763,  764 }, // 344
  {  344,  346,  347,  402, 1021, 1182 }, // 345
  {  344,  345,  347,  459, 1053, 1198 }, // 346
  {  344,  345,  346,  516, 1069, 1166 }, // 347
  {  349,  350,  351,  765,  766,  767 }, // 348
  {  348,  350,  351,  405, 1023, 1183 }, // 349
  {  348,  349,  351,  462, 1055, 1199 }, // 350
  {  348,  349,  350,  519, 1071, 1167 }, // 351
  {  353,  354,  355,  384,  385,  386 }, // 352
  {  352,  354,  355,  289, 1008, 1168 }, // 353
  {  352,  353,  355,  163, 1024, 1120 }, // 354
  {  352,  353,  354,  226, 1072, 1184 }, // 355
  {  357,  358,  359,  387,  388,  389 }, // 356
  {  356,  358,  359,  293, 1010, 1169 }, // 357
  {  356,  357,  359,  167, 1026, 1128 }, // 358
  {  356,  357,  358,  230, 1074, 1185 }, // 359
  {  361,  362,  363,  390,  391,  392 }, // 360
  {  360,  362,  363,  297, 1012, 1176 }, // 361
  {  360,  361,  363,  171, 1028, 1121 }, // 362
  {  360,  361,  362,  234, 1076, 1186 }, // 363
  {  365,  366,  367,  393,  394,  395 }, // 364
  {  364,  366,  367,  301, 1014, 1177 }, // 365
  {  364,  365,  367,  175, 1030, 1129 }, // 366
  {  364,  365,  366,  238, 1078, 1187 }, // 367
  {  369,  370,  371,  396,  397,  398 }, // 368
  {  368,  370,  371,  305, 1016, 1170 }, // 369
  {  368,  369,  371,  179, 1032, 1122 }, // 370
  {  368,  369,  370,  242, 1080, 1192 }, // 371
  {  373,  374,  375,  399,  400,  401 }, // 372
  {  372,  374,  375,  309, 1018, 1171 }, // 373
  {  372,  373,  375,  183, 1034, 1130 }, // 374
  {  372,  373,  374,  246, 1082, 1193 }, // 375
  {  377,  378,  379,  402,  403,  404 }, // 376
  {  376,  378,  379,  313, 1020, 1178 }, // 377
  {  376,  377,  379,  187, 1036, 1123 }, // 378
  {  376,  377,  378,  250, 1084, 1194 }, // 379
  {  381,  382,  383,  405,  406,  407 }, // 380
  {  380,  382,  383,  317, 1022, 1179 }, // 381
  {  380,  381,  383,  191, 1038, 1131 }, // 382
  {  380,  381,  382,  254, 1086, 1195 }, // 383
  {  352,  385,  386,  321, 1009, 1172 }, // 384
  {  352,  384,  386,  195, 1025, 1124 }, // 385
  {  352,  384,  385,  258, 1073, 1188 }, // 386
  {  356,  388,  389,  325, 1011, 1173 }, // 387
  {  356,  387,  389,  199, 1027, 1132 }, // 388
  {  356,  387,  388,  262, 1075, 1189 }, // 389
  {  360,  391,  392,  329, 1013, 1180 }, // 390
  {  360,  390,  392,  203, 1029, 1125 }, // 391
  {  360,  390,  391,  266, 1077, 1190 }, // 392
  {  364,  394,  395,  333, 1015, 1181 }, // 393
  {  364,  393,  395,  207, 1031, 1133 }, // 394
  {  364,  393,  394,  270, 1079, 1191 }, // 395
  {  368,  397,  398,  337, 1017, 1174 }, // 396
  {  368,  396,  398,  211, 1033, 1126 }, // 397
  {  368,  396,  397,  274, 1081, 1196 }, // 398
  {  372,  400,  401,  341, 1019, 1175 }, // 399
  {  372,  399,  401,  215, 1035, 1134 }, // 400
  {  372,  399,  400,  278, 1083, 1197 }, // 401
  {  376,  403,  404,  345, 1021, 1182 }, // 402
  {  376,  402,  404,  219, 1037, 1127 }, // 403
  {  376,  402,  403,  282, 1085, 1198 }, // 404
  {  380,  406,  407,  349, 1023, 1183 }, // 405
  {  380,  405,  407,  223, 1039, 1135 }, // 406
  {  380,  405,  406,  286, 1087, 1199 }, // 407
  {  409,  410,  411,  424,  425,  426 }, // 408
  {  408,  410,  411,   99,  960, 1152 }, // 409
  {  408,  409,  411,  290, 1040, 1184 }, // 410
  {  408,  409,  410,  227, 1088, 1104 }, // 411
  {  413,  414,  415,  427,  428,  429 }, // 412
  {  412,  414,  415,  103,  962, 1153 }, // 413
  {  412,  413,  415,  294, 1042, 1185 }, // 414
  {  412,  413,  414,  231, 1090, 1112 }, // 415
  {  417,  418,  419,  430,  431,  432 }, // 416
  {  416,  418,  419,  107,  964, 1154 }, // 417
  {  416,  417,  419,  298, 1044, 1186 }, // 418
  {  416,  417,  418,  235, 1092, 1105 }, // 419
  {  421,  422,  423,  433,  434,  435 }, // 420
  {  420,  422,  423,  111,  966, 1155 }, // 421
  {  420,  421,  423,  302, 1046, 1187 }, // 422
  {  420,  421,  422,  239, 1094, 1113 }, // 423
  {  408,  425,  426,  115,  961, 1160 }, // 424
  {  408,  424,  426,  306, 1041, 1192 }, // 425
  {  408,  424,  425,  243, 1089, 1106 }, // 426
  {  412,  428,  429,  119,  963, 1161 }, // 427
  {  412,  427,  429,  310, 1043, 1193 }, // 428
  {  412,  427,  428,  247, 1091, 1114 }, // 429
  {  416,  431,  432,  123,  965, 1162 }, // 430
  {  416,  430,  432,  314, 1045, 1194 }, // 431
  {  416,  430,  431,  251, 1093, 1107 }, // 432
  {  420,  434,  435,  127,  967, 1163 }, // 433
  {  420,  433,  435,  318, 1047, 1195 }, // 434
  {  420,  433,  434,  255, 1095, 1115 }, // 435
  {  437,  438,  439,  452,  453,  454 }, // 436
  {  436,  438,  439,  131,  968, 1156 }, // 437
  {  436,  437,  439,  322, 1048, 1188 }, // 438
  {  436,  437,  438,  259, 1096, 1108 }, // 439
  {  441,  442,  443,  455,  456,  457 }, // 440
  {  440,  442,  443,  135,  970, 1157 }, // 441
  {  440,  441,  443,  326, 1050, 1189 }, // 442
  {  440,  441,  442,  263, 1098, 1116 }, // 443
  {  445,  446,  447,  458,  459,  460 }, // 444
  {  444,  446,  447,  139,  972, 1158 }, // 445
  {  444,  445,  447,  330, 1052, 1190 }, // 446
  {  444,  445,  446,  267, 1100, 1109 }, // 447
  {  449,  450,  451,  461,  462,  463 }, // 448
  {  448,  450,  451,  143,  974, 1159 }, // 449
  {  448,  449,  451,  334, 1054, 1191 }, // 450
  {  448,  449,  450,  271, 1102, 1117 }, // 451
  {  436,  453,  454,  147,  969, 1164 }, // 452
  {  436,  452,  454,  338, 1049, 1196 }, // 453
  {  436,  452,  453,  275, 1097, 1110 }, // 454
  {  440,  456,  457,  151,  971, 1165 }, // 455
  {  440,  455,  457,  342, 1051, 1197 }, // 456
  {  440,  455,  456,  279, 1099, 1118 }, // 457
  {  444,  459,  460,  155,  973, 1166 }, // 458
  {  444,  458,  460,  346, 1053, 1198 }, // 459
  {  444,  458,  459,  283, 1101, 1111 }, // 460
  {  448,  462,  463,  159,  975, 1167 }, // 461
  {  448,  461,  463,  350, 1055, 1199 }, // 462
  {  448,  461,  462,  287, 1103, 1119 }, // 463
  {  465,  466,  467,  472,  473,  474 }, // 464
  {  464,  466,  467,   98,  944, 1136 }, // 465
  {  464,  465,  467,  162,  992, 1168 }, // 466
  {  464,  465,  466,  291, 1056, 1152 }, // 467
  {  469,  470,  471,  475,  476,  477 }, // 468
  {  468,  470,  471,  102,  946, 1137 }, // 469
  {  468,  469,  471,  166,  994, 1169 }, // 470
  {  468,  469,  470,  295, 1058, 1153 }, // 471
  {  464,  473,  474,  106,  945, 1144 }, // 472
  {  464,  472,  474,  170,  993, 1176 }, // 473
  {  464,  472,  473,  299, 1057, 1154 }, // 474
  {  468,  476,  477,  110,  947, 1145 }, // 475
  {  468,  475,  477,  174,  995, 1177 }, // 476
  {  468,  475,  476,  303, 1059, 1155 }, // 477
  {  479,  480,  481,  486,  487,  488 }, // 478
  {  478,  480,  481,  114,  948, 1138 }, // 479
  {  478,  479,  481,  178,  996, 1170 }, // 480
  {  478,  479,  480,  307, 1060, 1160 }, // 481
  {  483,  484,  485,  489,  490,  491 }, // 482
  {  482,  484,  485,  118,  950, 1139 }, // 483
  {  482,  483,  485,  182,  998, 1171 }, // 484
  {  482,  483,  484,  311, 1062, 1161 }, // 485
  {  478,  487,  488,  122,  949, 1146 }, // 486
  {  478,  486,  488,  186,  997, 1178 }, // 487
  {  478,  486,  487,  315, 1061, 1162 }, // 488
  {  482,  490,  491,  126,  951, 1147 }, // 489
  {  482,  489,  491,  190,  999, 1179 }, // 490
  {  482,  489,  490,  319, 1063, 1163 }, // 491
  {  493,  494,  495,  500,  501,  502 }, // 492
  {  492,  494,  495,  130,  952, 1140 }, // 493
  {  492,  493,  495,  194, 1000, 1172 }, // 494
  {  492,  493,  494,  323, 1064, 1156 }, // 495
  {  497,  498,  499,  503,  504,  505 }, // 496
  {  496,  498,  499,  134,  954, 1141 }, // 497
  {  496,  497,  499,  198, 1002, 1173 }, // 498
  {  496,  497,  498,  327, 1066, 1157 }, // 499
  {  492,  501,  502,  138,  953, 1148 }, // 500
  {  492,  500,  502,  202, 1001, 1180 }, // 501
  {  492,  500,  501,  331, 1065, 1158 }, // 502
  {  496,  504,  505,  142,  955, 1149 }, // 503
  {  496,  503,  505,  206, 1003, 1181 }, // 504
  {  496,  503,  504,  335, 1067, 1159 }, // 505
  {  507,  508,  509,  514,  515,  516 }, // 506
  {  506,  508,  509,  146,  956, 1142 }, // 507
  {  506,  507,  509,  210, 1004, 1174 }, // 508
  {  506,  507,  508,  339, 1068, 1164 }, // 509
  {  511,  512,  513,  517,  518,  519 }, // 510
  {  510,  512,  513,  150,  958, 1143 }, // 511
  {  510,  511,  513,  214, 1006, 1175 }, // 512
  {  510,  511,  512,  343, 1070, 1165 }, // 513
  {  506,  515,  516,  154,  957, 1150 }, // 514
  {  506,  514,  516,  218, 1005, 1182 }, // 515
  {  506,  514,  515,  347, 1069, 1166 }, // 516
  {  510,  518,  519,  158,  959, 1151 }, // 517
  {  510,  517,  519,  222, 1007, 1183 }, // 518
  {  510,  517,  518,  351, 1071, 1167 }, // 519
  {  521,  522,  523,  524,  525,  526 }, // 520
  {  520,  522,  523,   97,  912, 1104 }, // 521
  {  520,  521,  523,  225,  928, 1120 }, // 522
  {  520,  521,  522,  161,  976, 1136 }, // 523
  {  520,  525,  526,  101,  913, 1112 }, // 524
  {  520,  524,  526,  229,  929, 1128 }, // 525
  {  520,  524,  525,  165,  977, 1137 }, // 526
  {  528,  529,  530,  531,  532,  533 }, // 527
  {  527,  529,  530,  105,  914, 1105 }, // 528
  {  527,  528,  530,  233,  930, 1121 }, // 529
  {  527,  528,  529,  169,  978, 1144 }, // 530
  {  527,  532,  533,  109,  915, 1113 }, // 531
  {  527,  531,  533,  237,  931, 1129 }, // 532
  {  527,  531,  532,  173,  979, 1145 }, // 533
  {  535,  536,  537,  538,  539,  540 }, // 534
  {  534,  536,  537,  113,  916, 1106 }, // 535
  {  534,  535,  537,  241,  932, 1122 }, // 536
  {  534,  535,  536,  177,  980, 1138 }, // 537
  {  534,  539,  540,  117,  917, 1114 }, // 538
  {  534,  538,  540,  245,  933, 1130 }, // 539
  {  534,  538,  539,  181,  981, 1139 }, // 540
  {  542,  543,  544,  545,  546,  547 }, // 541
  {  541,  543,  544,  121,  918, 1107 }, // 542
  {  541,  542,  544,  249,  934, 1123 }, // 543
  {  541,  542,  543,  185,  982, 1146 }, // 544
  {  541,  546,  547,  125,  919, 1115 }, // 545
  {  541,  545,  547,  253,  935, 1131 }, // 546
  {  541,  545,  546,  189,  983, 1147 }, // 547
  {  549,  550,  551,  552,  553,  554 }, // 548
  {  548,  550,  551,  129,  920, 1108 }, // 549
  {  548,  549,  551,  257,  936, 1124 }, // 550
  {  548,  549,  550,  193,  984, 1140 }, // 551
  {  548,  553,  554,  133,  921, 1116 }, // 552
  {  548,  552,  554,  261,  937, 1132 }, // 553
  {  548,  552,  553,  197,  985, 1141 }, // 554
  {  556,  557,  558,  559,  560,  561 }, // 555
  {  555,  557,  558,  137,  922, 1109 }, // 556
  {  555,  556,  558,  265,  938, 1125 }, // 557
  {  555,  556,  557,  201,  986, 1148 }, // 558
  {  555,  560,  561,  141,  923, 1117 }, // 559
  {  555,  559,  561,  269,  939, 1133 }, // 560
  {  555,  559,  560,  205,  987, 1149 }, // 561
  {  563,  564,  565,  566,  567,  568 }, // 562
  {  562,  564,  565,  145,  924, 1110 }, // 563
  {  562,  563,  565,  273,  940, 1126 }, // 564
  {  562,  563,  564,  209,  988, 1142 }, // 565
  {  562,  567,  568,  149,  925, 1118 }, // 566
  {  562,  566,  568,  277,  941, 1134 }, // 567
  {  562,  566,  567,  213,  989, 1143 }, // 568
  {  570,  571,  572,  573,  574,  575 }, // 569
  {  569,  571,  572,  153,  926, 1111 }, // 570
  {  569,  570,  572,  281,  942, 1127 }, // 571
  {  569,  570,  571,  217,  990, 1150 }, // 572
  {  569,  574,  575,  157,  927, 1119 }, // 573
  {  569,  573,  575,  285,  943, 1135 }, // 574
  {  569,  573,  574,  221,  991, 1151 }, // 575
  {   96,  577,  578,  579,  768,  769 }, // 576
  {   96,  576,  578,  583,  792,  793 }, // 577
  {   96,  576,  577,  590,  804,  805 }, // 578
  {  100,  580,  581,  576,  768,  769 }, // 579
  {  100,  579,  581,  586,  792,  794 }, // 580
  {  100,  579,  580,  593,  806,  807 }, // 581
  {  104,  583,  584,  585,  770,  771 }, // 582
  {  104,  582,  584,  577,  792,  793 }, // 583
  {  104,  582,  583,  596,  804,  808 }, // 584
  {  108,  586,  587,  582,  770,  771 }, // 585
  {  108,  585,  587,  580,  792,  794 }, // 586
  {  108,  585,  586,  599,  806,  809 }, // 587
  {  112,  589,  590,  591,  768,  772 }, // 588
  {  112,  588,  590,  595,  795,  796 }, // 589
  {  112,  588,  589,  578,  804,  805 }, // 590
  {  116,  592,  593,  588,  768,  772 }, // 591
  {  116,  591,  593,  598,  795,  797 }, // 592
  {  116,  591,  592,  581,  806,  807 }, // 593
  {  120,  595,  596,  597,  770,  773 }, // 594
  {  120,  594,  596,  589,  795,  796 }, // 595
  {  120,  594,  595,  584,  804,  808 }, // 596
  {  124,  598,  599,  594,  770,  773 }, // 597
  {  124,  597,  599,  592,  795,  797 }, // 598
  {  124,  597,  598,  587,  806,  809 }, // 599
  {  128,  601,  602,  603,  774,  775 }, // 600
  {  128,  600,  602,  607,  798,  799 }, // 601
  {  128,  600,  601,  614,  810,  811 }, // 602
  {  132,  604,  605,  600,  774,  775 }, // 603
  {  132,  603,  605,  610,  798,  800 }, // 604
  {  132,  603,  604,  617,  812,  813 }, // 605
  {  136,  607,  608,  609,  776,  777 }, // 606
  {  136,  606,  608,  601,  798,  799 }, // 607
  {  136,  606,  607,  620,  810,  814 }, // 608
  {  140,  610,  611,  606,  776,  777 }, // 609
  {  140,  609,  611,  604,  798,  800 }, // 610
  {  140,  609,  610,  623,  812,  815 }, // 611
  {  144,  613,  614,  615,  774,  778 }, // 612
  {  144,  612,  614,  619,  801,  802 }, // 613
  {  144,  612,  613,  602,  810,  811 }, // 614
  {  148,  616,  617,  612,  774,  778 }, // 615
  {  148,  615,  617,  622,  801,  803 }, // 616
  {  148,  615,  616,  605,  812,  813 }, // 617
  {  152,  619,  620,  621,  776,  779 }, // 618
  {  152,  618,  620,  613,  801,  802 }, // 619
  {  152,  618,  619,  608,  810,  814 }, // 620
  {  156,  622,  623,  618,  776,  779 }, // 621
  {  156,  621,  623,  616,  801,  803 }, // 622
  {  156,  621,  622,  611,  812,  815 }, // 623
  {  160,  625,  626,  627,  816,  817 }, // 624
  {  160,  624,  626,  631,  828,  829 }, // 625
  {  160,  624,  625,  650,  852,  853 }, // 626
  {  164,  628,  629,  624,  816,  817 }, // 627
  {  164,  627,  629,  634,  830,  831 }, // 628
  {  164,  627,  628,  653,  852,  854 }, // 629
  {  168,  631,  632,  633,  816,  818 }, // 630
  {  168,  630,  632,  625,  828,  829 }, // 631
  {  168,  630,  631,  656,  855,  856 }, // 632
  {  172,  634,  635,  630,  816,  818 }, // 633
  {  172,  633,  635,  628,  830,  831 }, // 634
  {  172,  633,  634,  659,  855,  857 }, // 635
  {  176,  637,  638,  639,  819,  820 }, // 636
  {  176,  636,  638,  643,  832,  833 }, // 637
  {  176,  636,  637,  662,  858,  859 }, // 638
  {  180,  640,  641,  636,  819,  820 }, // 639
  {  180,  639,  641,  646,  834,  835 }, // 640
  {  180,  639,  640,  665,  858,  860 }, // 641
  {  184,  643,  644,  645,  819,  821 }, // 642
  {  184,  642,  644,  637,  832,  833 }, // 643
  {  184,  642,  643,  668,  861,  862 }, // 644
  {  188,  646,  647,  642,  819,  821 }, // 645
  {  188,  645,  647,  640,  834,  835 }, // 646
  {  188,  645,  646,  671,  861,  863 }, // 647
  {  192,  649,  650,  651,  822,  823 }, // 648
  {  192,  648,  650,  655,  828,  836 }, // 649
  {  192,  648,  649,  626,  852,  853 }, // 650
  {  196,  652,  653,  648,  822,  823 }, // 651
  {  196,  651,  653,  658,  830,  837 }, // 652
  {  196,  651,  652,  629,  852,  854 }, // 653
  {  200,  655,  656,  657,  822,  824 }, // 654
  {  200,  654,  656,  649,  828,  836 }, // 655
  {  200,  654,  655,  632,  855,  856 }, // 656
  {  204,  658,  659,  654,  822,  824 }, // 657
  {  204,  657,  659,  652,  830,  837 }, // 658
  {  204,  657,  658,  635,  855,  857 }, // 659
  {  208,  661,  662,  663,  825,  826 }, // 660
  {  208,  660,  662,  667,  832,  838 }, // 661
  {  208,  660,  661,  638,  858,  859 }, // 662
  {  212,  664,  665,  660,  825,  826 }, // 663
  {  212,  663,  665,  670,  834,  839 }, // 664
  {  212,  663,  664,  641,  858,  860 }, // 665
  {  216,  667,  668,  669,  825,  827 }, // 666
  {  216,  666,  668,  661,  832,  838 }, // 667
  {  216,  666,  667,  644,  861,  862 }, // 668
  {  220,  670,  671,  666,  825,  827 }, // 669
  {  220,  669,  671,  664,  834,  839 }, // 670
  {  220,  669,  670,  647,  861,  863 }, // 671
  {  224,  673,  674,  675,  780,  781 }, // 672
  {  224,  672,  674,  697,  888,  889 }, // 673
  {  224,  672,  673,  686,  900,  901 }, // 674
  {  228,  676,  677,  672,  780,  781 }, // 675
  {  228,  675,  677,  700,  890,  891 }, // 676
  {  228,  675,  676,  689,  900,  902 }, // 677
  {  232,  679,  680,  681,  782,  783 }, // 678
  {  232,  678,  680,  703,  892,  893 }, // 679
  {  232,  678,  679,  692,  903,  904 }, // 680
  {  236,  682,  683,  678,  782,  783 }, // 681
  {  236,  681,  683,  706,  894,  895 }, // 682
  {  236,  681,  682,  695,  903,  905 }, // 683
  {  240,  685,  686,  687,  784,  785 }, // 684
  {  240,  684,  686,  709,  888,  896 }, // 685
  {  240,  684,  685,  674,  900,  901 }, // 686
  {  244,  688,  689,  684,  784,  785 }, // 687
  {  244,  687,  689,  712,  890,  897 }, // 688
  {  244,  687,  688,  677,  900,  902 }, // 689
  {  248,  691,  692,  693,  786,  787 }, // 690
  {  248,  690,  692,  715,  892,  898 }, // 691
  {  248,  690,  691,  680,  903,  904 }, // 692
  {  252,  694,  695,  690,  786,  787 }, // 693
  {  252,  693,  695,  718,  894,  899 }, // 694
  {  252,  693,  694,  683,  903,  905 }, // 695
  {  256,  697,  698,  699,  780,  788 }, // 696
  {  256,  696,  698,  673,  888,  889 }, // 697
  {  256,  696,  697,  710,  906,  907 }, // 698
  {  260,  700,  701,  696,  780,  788 }, // 699
  {  260,  699,  701,  676,  890,  891 }, // 700
  {  260,  699,  700,  713,  906,  908 }, // 701
  {  264,  703,  704,  705,  782,  789 }, // 702
  {  264,  702,  704,  679,  892,  893 }, // 703
  {  264,  702,  703,  716,  909,  910 }, // 704
  {  268,  706,  707,  702,  782,  789 }, // 705
  {  268,  705,  707,  682,  894,  895 }, // 706
  {  268,  705,  706,  719,  909,  911 }, // 707
  {  272,  709,  710,  711,  784,  790 }, // 708
  {  272,  708,  710,  685,  888,  896 }, // 709
  {  272,  708,  709,  698,  906,  907 }, // 710
  {  276,  712,  713,  708,  784,  790 }, // 711
  {  276,  711,  713,  688,  890,  897 }, // 712
  {  276,  711,  712,  701,  906,  908 }, // 713
  {  280,  715,  716,  717,  786,  791 }, // 714
  {  280,  714,  716,  691,  892,  898 }, // 715
  {  280,  714,  715,  704,  909,  910 }, // 716
  {  284,  718,  719,  714,  786,  791 }, // 717
  {  284,  717,  719,  694,  894,  899 }, // 718
  {  284,  717,  718,  707,  909,  911 }, // 719
  {  288,  721,  722,  744,  840,  841 }, // 720
  {  288,  720,  722,  733,  864,  865 }, // 721
  {  288,  720,  721,  728,  876,  877 }, // 722
  {  292,  724,  725,  747,  842,  843 }, // 723
  {  292,  723,  725,  736,  866,  867 }, // 724
  {  292,  723,  724,  731,  878,  879 }, // 725
  {  296,  727,  728,  750,  840,  844 }, // 726
  {  296,  726,  728,  739,  868,  869 }, // 727
  {  296,  726,  727,  722,  876,  877 }, // 728
  {  300,  730,  731,  753,  842,  845 }, // 729
  {  300,  729,  731,  742,  870,  871 }, // 730
  {  300,  729,  730,  725,  878,  879 }, // 731
  {  304,  733,  734,  756,  846,  847 }, // 732
  {  304,  732,  734,  721,  864,  865 }, // 733
  {  304,  732,  733,  740,  876,  880 }, // 734
  {  308,  736,  737,  759,  848,  849 }, // 735
  {  308,  735,  737,  724,  866,  867 }, // 736
  {  308,  735,  736,  743,  878,  881 }, // 737
  {  312,  739,  740,  762,  846,  850 }, // 738
  {  312,  738,  740,  727,  868,  869 }, // 739
  {  312,  738,  739,  734,  876,  880 }, // 740
  {  316,  742,  743,  765,  848,  851 }, // 741
  {  316,  741,  743,  730,  870,  871 }, // 742
  {  316,  741,  742,  737,  878,  881 }, // 743
  {  320,  745,  746,  720,  840,  841 }, // 744
  {  320,  744,  746,  757,  864,  872 }, // 745
  {  320,  744,  745,  752,  882,  883 }, // 746
  {  324,  748,  749,  723,  842,  843 }, // 747
  {  324,  747,  749,  760,  866,  873 }, // 748
  {  324,  747,  748,  755,  884,  885 }, // 749
  {  328,  751,  752,  726,  840,  844 }, // 750
  {  328,  750,  752,  763,  868,  874 }, // 751
  {  328,  750,  751,  746,  882,  883 }, // 752
  {  332,  754,  755,  729,  842,  845 }, // 753
  {  332,  753,  755,  766,  870,  875 }, // 754
  {  332,  753,  754,  749,  884,  885 }, // 755
  {  336,  757,  758,  732,  846,  847 }, // 756
  {  336,  756,  758,  745,  864,  872 }, // 757
  {  336,  756,  757,  764,  882,  886 }, // 758
  {  340,  760,  761,  735,  848,  849 }, // 759
  {  340,  759,  761,  748,  866,  873 }, // 760
  {  340,  759,  760,  767,  884,  887 }, // 761
  {  344,  763,  764,  738,  846,  850 }, // 762
  {  344,  762,  764,  751,  868,  874 }, // 763
  {  344,  762,  763,  758,  882,  886 }, // 764
  {  348,  766,  767,  741,  848,  851 }, // 765
  {  348,  765,  767,  754,  870,  875 }, // 766
  {  348,  765,  766,  761,  884,  887 }, // 767
  {  576,  579,  769,  588,  591,  772 }, // 768
  {  576,  579,  768,   16,  912,  913 }, // 769
  {  582,  585,  771,  594,  597,  773 }, // 770
  {  582,  585,  770,   20,  914,  915 }, // 771
  {  588,  591,  768,   17,  916,  917 }, // 772
  {  594,  597,  770,   21,  918,  919 }, // 773
  {  600,  603,  775,  612,  615,  778 }, // 774
  {  600,  603,  774,   24,  920,  921 }, // 775
  {  606,  609,  777,  618,  621,  779 }, // 776
  {  606,  609,  776,   28,  922,  923 }, // 777
  {  612,  615,  774,   25,  924,  925 }, // 778
  {  618,  621,  776,   29,  926,  927 }, // 779
  {  672,  675,  781,  696,  699,  788 }, // 780
  {  672,  675,  780,   48,  928,  929 }, // 781
  {  678,  681,  783,  702,  705,  789 }, // 782
  {  678,  681,  782,   52,  930,  931 }, // 783
  {  684,  687,  785,  708,  711,  790 }, // 784
  {  684,  687,  784,   56,  932,  933 }, // 785
  {  690,  693,  787,  714,  717,  791 }, // 786
  {  690,  693,  786,   60,  934,  935 }, // 787
  {  696,  699,  780,   49,  936,  937 }, // 788
  {  702,  705,  782,   53,  938,  939 }, // 789
  {  708,  711,  784,   57,  940,  941 }, // 790
  {  714,  717,  786,   61,  942,  943 }, // 791
  {  577,  583,  793,  580,  586,  794 }, // 792
  {  577,  583,  792,    0,  944,  945 }, // 793
  {  580,  586,  792,    1,  946,  947 }, // 794
  {  589,  595,  796,  592,  598,  797 }, // 795
  {  589,  595,  795,    4,  948,  949 }, // 796
  {  592,  598,  795,    5,  950,  951 }, // 797
  {  601,  607,  799,  604,  610,  800 }, // 798
  {  601,  607,  798,    8,  952,  953 }, // 799
  {  604,  610,  798,    9,  954,  955 }, // 800
  {  613,  619,  802,  616,  622,  803 }, // 801
  {  613,  619,  801,   12,  956,  957 }, // 802
  {  616,  622,  801,   13,  958,  959 }, // 803
  {  578,  590,  805,  584,  596,  808 }, // 804
  {  578,  590,  804,   32,  960,  961 }, // 805
  {  581,  593,  807,  587,  599,  809 }, // 806
  {  581,  593,  806,   36,  962,  963 }, // 807
  {  584,  596,  804,   33,  964,  965 }, // 808
  {  587,  599,  806,   37,  966,  967 }, // 809
  {  602,  614,  811,  608,  620,  814 }, // 810
  {  602,  614,  810,   40,  968,  969 }, // 811
  {  605,  617,  813,  611,  623,  815 }, // 812
  {  605,  617,  812,   44,  970,  971 }, // 813
  {  608,  620,  810,   41,  972,  973 }, // 814
  {  611,  623,  812,   45,  974,  975 }, // 815
  {  624,  627,  817,  630,  633,  818 }, // 816
  {  624,  627,  816,    2,  976,  977 }, // 817
  {  630,  633,  816,    3,  978,  979 }, // 818
  {  636,  639,  820,  642,  645,  821 }, // 819
  {  636,  639,  819,    6,  980,  981 }, // 820
  {  642,  645,  819,    7,  982,  983 }, // 821
  {  648,  651,  823,  654,  657,  824 }, // 822
  {  648,  651,  822,   10,  984,  985 }, // 823
  {  654,  657,  822,   11,  986,  987 }, // 824
  {  660,  663,  826,  666,  669,  827 }, // 825
  {  660,  663,  825,   14,  988,  989 }, // 826
  {  666,  669,  825,   15,  990,  991 }, // 827
  {  625,  631,  829,  649,  655,  836 }, // 828
  {  625,  631,  828,   64,  992,  993 }, // 829
  {  628,  634,  831,  652,  658,  837 }, // 830
  {  628,  634,  830,   68,  994,  995 }, // 831
  {  637,  643,  833,  661,  667,  838 }, // 832
  {  637,  643,  832,   72,  996,  997 }, // 833
  {  640,  646,  835,  664,  670,  839 }, // 834
  {  640,  646,  834,   76,  998,  999 }, // 835
  {  649,  655,  828,   65, 1000, 1001 }, // 836
  {  652,  658,  830,   69, 1002, 1003 }, // 837
  {  661,  667,  832,   73, 1004, 1005 }, // 838
  {  664,  670,  834,   77, 1006, 1007 }, // 839
  {  720,  744,  841,  726,  750,  844 }, // 840
  {  720,  744,  840,   66, 1008, 1009 }, // 841
  {  723,  747,  843,  729,  753,  845 }, // 842
  {  723,  747,  842,   70, 1010, 1011 }, // 843
  {  726,  750,  840,   67, 1012, 1013 }, // 844
  {  729,  753,  842,   71, 1014, 1015 }, // 845
  {  732,  756,  847,  738,  762,  850 }, // 846
  {  732,  756,  846,   74, 1016, 1017 }, // 847
  {  735,  759,  849,  741,  765,  851 }, // 848
  {  735,  759,  848,   78, 1018, 1019 }, // 849
  {  738,  762,  846,   75, 1020, 1021 }, // 850
  {  741,  765,  848,   79, 1022, 1023 }, // 851
  {  626,  650,  853,  629,  653,  854 }, // 852
  {  626,  650,  852,   50, 1024, 1025 }, // 853
  {  629,  653,  852,   51, 1026, 1027 }, // 854
  {  632,  656,  856,  635,  659,  857 }, // 855
  {  632,  656,  855,   54, 1028, 1029 }, // 856
  {  635,  659,  855,   55, 1030, 1031 }, // 857
  {  638,  662,  859,  641,  665,  860 }, // 858
  {  638,  662,  858,   58, 1032, 1033 }, // 859
  {  641,  665,  858,   59, 1034, 1035 }, // 860
  {  644,  668,  862,  647,  671,  863 }, // 861
  {  644,  668,  861,   62, 1036, 1037 }, // 862
  {  647,  671,  861,   63, 1038, 1039 }, // 863
  {  721,  733,  865,  745,  757,  872 }, // 864
  {  721,  733,  864,   80, 1040, 1041 }, // 865
  {  724,  736,  867,  748,  760,  873 }, // 866
  {  724,  736,  866,   84, 1042, 1043 }, // 867
  {  727,  739,  869,  751,  763,  874 }, // 868
  {  727,  739,  868,   88, 1044, 1045 }, // 869
  {  730,  742,  871,  754,  766,  875 }, // 870
  {  730,  742,  870,   92, 1046, 1047 }, // 871
  {  745,  757,  864,   81, 1048, 1049 }, // 872
  {  748,  760,  866,   85, 1050, 1051 }, // 873
  {  751,  763,  868,   89, 1052, 1053 }, // 874
  {  754,  766,  870,   93, 1054, 1055 }, // 875
  {  722,  728,  877,  734,  740,  880 }, // 876
  {  722,  728,  876,   34, 1056, 1057 }, // 877
  {  725,  731,  879,  737,  743,  881 }, // 878
  {  725,  731,  878,   38, 1058, 1059 }, // 879
  {  734,  740,  876,   35, 1060, 1061 }, // 880
  {  737,  743,  878,   39, 1062, 1063 }, // 881
  {  746,  752,  883,  758,  764,  886 }, // 882
  {  746,  752,  882,   42, 1064, 1065 }, // 883
  {  749,  755,  885,  761,  767,  887 }, // 884
  {  749,  755,  884,   46, 1066, 1067 }, // 885
  {  758,  764,  882,   43, 1068, 1069 }, // 886
  {  761,  767,  884,   47, 1070, 1071 }, // 887
  {  673,  697,  889,  685,  709,  896 }, // 888
  {  673,  697,  888,   82, 1072, 1073 }, // 889
  {  676,  700,  891,  688,  712,  897 }, // 890
  {  676,  700,  890,   86, 1074, 1075 }, // 891
  {  679,  703,  893,  691,  715,  898 }, // 892
  {  679,  703,  892,   90, 1076, 1077 }, // 893
  {  682,  706,  895,  694,  718,  899 }, // 894
  {  682,  706,  894,   94, 1078, 1079 }, // 895
  {  685,  709,  888,   83, 1080, 1081 }, // 896
  {  688,  712,  890,   87, 1082, 1083 }, // 897
  {  691,  715,  892,   91, 1084, 1085 }, // 898
  {  694,  718,  894,   95, 1086, 1087 }, // 899
  {  674,  686,  901,  677,  689,  902 }, // 900
  {  674,  686,  900,   18, 1088, 1089 }, // 901
  {  677,  689,  900,   19, 1090, 1091 }, // 902
  {  680,  692,  904,  683,  695,  905 }, // 903
  {  680,  692,  903,   22, 1092, 1093 }, // 904
  {  683,  695,  903,   23, 1094, 1095 }, // 905
  {  698,  710,  907,  701,  713,  908 }, // 906
  {  698,  710,  906,   26, 1096, 1097 }, // 907
  {  701,  713,  906,   27, 1098, 1099 }, // 908
  {  704,  716,  910,  707,  719,  911 }, // 909
  {  704,  716,  909,   30, 1100, 1101 }, // 910
  {  707,  719,  909,   31, 1102, 1103 }, // 911
  {   16,  769,  913,   97,  521, 1104 }, // 912
  {   16,  769,  912,  101,  524, 1112 }, // 913
  {   20,  771,  915,  105,  528, 1105 }, // 914
  {   20,  771,  914,  109,  531, 1113 }, // 915
  {   17,  772,  917,  113,  535, 1106 }, // 916
  {   17,  772,  916,  117,  538, 1114 }, // 917
  {   21,  773,  919,  121,  542, 1107 }, // 918
  {   21,  773,  918,  125,  545, 1115 }, // 919
  {   24,  775,  921,  129,  549, 1108 }, // 920
  {   24,  775,  920,  133,  552, 1116 }, // 921
  {   28,  777,  923,  137,  556, 1109 }, // 922
  {   28,  777,  922,  141,  559, 1117 }, // 923
  {   25,  778,  925,  145,  563, 1110 }, // 924
  {   25,  778,  924,  149,  566, 1118 }, // 925
  {   29,  779,  927,  153,  570, 1111 }, // 926
  {   29,  779,  926,  157,  573, 1119 }, // 927
  {   48,  781,  929,  225,  522, 1120 }, // 928
  {   48,  781,  928,  229,  525, 1128 }, // 929
  {   52,  783,  931,  233,  529, 1121 }, // 930
  {   52,  783,  930,  237,  532, 1129 }, // 931
  {   56,  785,  933,  241,  536, 1122 }, // 932
  {   56,  785,  932,  245,  539, 1130 }, // 933
  {   60,  787,  935,  249,  543, 1123 }, // 934
  {   60,  787,  934,  253,  546, 1131 }, // 935
  {   49,  788,  937,  257,  550, 1124 }, // 936
  {   49,  788,  936,  261,  553, 1132 }, // 937
  {   53,  789,  939,  265,  557, 1125 }, // 938
  {   53,  789,  938,  269,  560, 1133 }, // 939
  {   57,  790,  941,  273,  564, 1126 }, // 940
  {   57,  790,  940,  277,  567, 1134 }, // 941
  {   61,  791,  943,  281,  571, 1127 }, // 942
  {   61,  791,  942,  285,  574, 1135 }, // 943
  {    0,  793,  945,   98,  465, 1136 }, // 944
  {    0,  793,  944,  106,  472, 1144 }, // 945
  {    1,  794,  947,  102,  469, 1137 }, // 946
  {    1,  794,  946,  110,  475, 1145 }, // 947
  {    4,  796,  949,  114,  479, 1138 }, // 948
  {    4,  796,  948,  122,  486, 1146 }, // 949
  {    5,  797,  951,  118,  483, 1139 }, // 950
  {    5,  797,  950,  126,  489, 1147 }, // 951
  {    8,  799,  953,  130,  493, 1140 }, // 952
  {    8,  799,  952,  138,  500, 1148 }, // 953
  {    9,  800,  955,  134,  497, 1141 }, // 954
  {    9,  800,  954,  142,  503, 1149 }, // 955
  {   12,  802,  957,  146,  507, 1142 }, // 956
  {   12,  802,  956,  154,  514, 1150 }, // 957
  {   13,  803,  959,  150,  511, 1143 }, // 958
  {   13,  803,  958,  158,  517, 1151 }, // 959
  {   32,  805,  961,   99,  409, 1152 }, // 960
  {   32,  805,  960,  115,  424, 1160 }, // 961
  {   36,  807,  963,  103,  413, 1153 }, // 962
  {   36,  807,  962,  119,  427, 1161 }, // 963
  {   33,  808,  965,  107,  417, 1154 }, // 964
  {   33,  808,  964,  123,  430, 1162 }, // 965
  {   37,  809,  967,  111,  421, 1155 }, // 966
  {   37,  809,  966,  127,  433, 1163 }, // 967
  {   40,  811,  969,  131,  437, 1156 }, // 968
  {   40,  811,  968,  147,  452, 1164 }, // 969
  {   44,  813,  971,  135,  441, 1157 }, // 970
  {   44,  813,  970,  151,  455, 1165 }, // 971
  {   41,  814,  973,  139,  445, 1158 }, // 972
  {   41,  814,  972,  155,  458, 1166 }, // 973
  {   45,  815,  975,  143,  449, 1159 }, // 974
  {   45,  815,  974,  159,  461, 1167 }, // 975
  {    2,  817,  977,  161,  523, 1136 }, // 976
  {    2,  817,  976,  165,  526, 1137 }, // 977
  {    3,  818,  979,  169,  530, 1144 }, // 978
  {    3,  818,  978,  173,  533, 1145 }, // 979
  {    6,  820,  981,  177,  537, 1138 }, // 980
  {    6,  820,  980,  181,  540, 1139 }, // 981
  {    7,  821,  983,  185,  544, 1146 }, // 982
  {    7,  821,  982,  189,  547, 1147 }, // 983
  {   10,  823,  985,  193,  551, 1140 }, // 984
  {   10,  823,  984,  197,  554, 1141 }, // 985
  {   11,  824,  987,  201,  558, 1148 }, // 986
  {   11,  824,  986,  205,  561, 1149 }, // 987
  {   14,  826,  989,  209,  565, 1142 }, // 988
  {   14,  826,  988,  213,  568, 1143 }, // 989
  {   15,  827,  991,  217,  572, 1150 }, // 990
  {   15,  827,  990,  221,  575, 1151 }, // 991
  {   64,  829,  993,  162,  466, 1168 }, // 992
  {   64,  829,  992,  170,  473, 1176 }, // 993
  {   68,  831,  995,  166,  470, 1169 }, // 994
  {   68,  831,  994,  174,  476, 1177 }, // 995
  {   72,  833,  997,  178,  480, 1170 }, // 996
  {   72,  833,  996,  186,  487, 1178 }, // 997
  {   76,  835,  999,  182,  484, 1171 }, // 998
  {   76,  835,  998,  190,  490, 1179 }, // 999
  {   65,  836, 1001,  194,  494, 1172 }, //1000
  {   65,  836, 1000,  202,  501, 1180 }, //1001
  {   69,  837, 1003,  198,  498, 1173 }, //1002
  {   69,  837, 1002,  206,  504, 1181 }, //1003
  {   73,  838, 1005,  210,  508, 1174 }, //1004
  {   73,  838, 1004,  218,  515, 1182 }, //1005
  {   77,  839, 1007,  214,  512, 1175 }, //1006
  {   77,  839, 1006,  222,  518, 1183 }, //1007
  {   66,  841, 1009,  289,  353, 1168 }, //1008
  {   66,  841, 1008,  321,  384, 1172 }, //1009
  {   70,  843, 1011,  293,  357, 1169 }, //1010
  {   70,  843, 1010,  325,  387, 1173 }, //1011
  {   67,  844, 1013,  297,  361, 1176 }, //1012
  {   67,  844, 1012,  329,  390, 1180 }, //1013
  {   71,  845, 1015,  301,  365, 1177 }, //1014
  {   71,  845, 1014,  333,  393, 1181 }, //1015
  {   74,  847, 1017,  305,  369, 1170 }, //1016
  {   74,  847, 1016,  337,  396, 1174 }, //1017
  {   78,  849, 1019,  309,  373, 1171 }, //1018
  {   78,  849, 1018,  341,  399, 1175 }, //1019
  {   75,  850, 1021,  313,  377, 1178 }, //1020
  {   75,  850, 1020,  345,  402, 1182 }, //1021
  {   79,  851, 1023,  317,  381, 1179 }, //1022
  {   79,  851, 1022,  349,  405, 1183 }, //1023
  {   50,  853, 1025,  163,  354, 1120 }, //1024
  {   50,  853, 1024,  195,  385, 1124 }, //1025
  {   51,  854, 1027,  167,  358, 1128 }, //1026
  {   51,  854, 1026,  199,  388, 1132 }, //1027
  {   54,  856, 1029,  171,  362, 1121 }, //1028
  {   54,  856, 1028,  203,  391, 1125 }, //1029
  {   55,  857, 1031,  175,  366, 1129 }, //1030
  {   55,  857, 1030,  207,  394, 1133 }, //1031
  {   58,  859, 1033,  179,  370, 1122 }, //1032
  {   58,  859, 1032,  211,  397, 1126 }, //1033
  {   59,  860, 1035,  183,  374, 1130 }, //1034
  {   59,  860, 1034,  215,  400, 1134 }, //1035
  {   62,  862, 1037,  187,  378, 1123 }, //1036
  {   62,  862, 1036,  219,  403, 1127 }, //1037
  {   63,  863, 1039,  191,  382, 1131 }, //1038
  {   63,  863, 1038,  223,  406, 1135 }, //1039
  {   80,  865, 1041,  290,  410, 1184 }, //1040
  {   80,  865, 1040,  306,  425, 1192 }, //1041
  {   84,  867, 1043,  294,  414, 1185 }, //1042
  {   84,  867, 1042,  310,  428, 1193 }, //1043
  {   88,  869, 1045,  298,  418, 1186 }, //1044
  {   88,  869, 1044,  314,  431, 1194 }, //1045
  {   92,  871, 1047,  302,  422, 1187 }, //1046
  {   92,  871, 1046,  318,  434, 1195 }, //1047
  {   81,  872, 1049,  322,  438, 1188 }, //1048
  {   81,  872, 1048,  338,  453, 1196 }, //1049
  {   85,  873, 1051,  326,  442, 1189 }, //1050
  {   85,  873, 1050,  342,  456, 1197 }, //1051
  {   89,  874, 1053,  330,  446, 1190 }, //1052
  {   89,  874, 1052,  346,  459, 1198 }, //1053
  {   93,  875, 1055,  334,  450, 1191 }, //1054
  {   93,  875, 1054,  350,  462, 1199 }, //1055
  {   34,  877, 1057,  291,  467, 1152 }, //1056
  {   34,  877, 1056,  299,  474, 1154 }, //1057
  {   38,  879, 1059,  295,  471, 1153 }, //1058
  {   38,  879, 1058,  303,  477, 1155 }, //1059
  {   35,  880, 1061,  307,  481, 1160 }, //1060
  {   35,  880, 1060,  315,  488, 1162 }, //1061
  {   39,  881, 1063,  311,  485, 1161 }, //1062
  {   39,  881, 1062,  319,  491, 1163 }, //1063
  {   42,  883, 1065,  323,  495, 1156 }, //1064
  {   42,  883, 1064,  331,  502, 1158 }, //1065
  {   46,  885, 1067,  327,  499, 1157 }, //1066
  {   46,  885, 1066,  335,  505, 1159 }, //1067
  {   43,  886, 1069,  339,  509, 1164 }, //1068
  {   43,  886, 1068,  347,  516, 1166 }, //1069
  {   47,  887, 1071,  343,  513, 1165 }, //1070
  {   47,  887, 1070,  351,  519, 1167 }, //1071
  {   82,  889, 1073,  226,  355, 1184 }, //1072
  {   82,  889, 1072,  258,  386, 1188 }, //1073
  {   86,  891, 1075,  230,  359, 1185 }, //1074
  {   86,  891, 1074,  262,  389, 1189 }, //1075
  {   90,  893, 1077,  234,  363, 1186 }, //1076
  {   90,  893, 1076,  266,  392, 1190 }, //1077
  {   94,  895, 1079,  238,  367, 1187 }, //1078
  {   94,  895, 1078,  270,  395, 1191 }, //1079
  {   83,  896, 1081,  242,  371, 1192 }, //1080
  {   83,  896, 1080,  274,  398, 1196 }, //1081
  {   87,  897, 1083,  246,  375, 1193 }, //1082
  {   87,  897, 1082,  278,  401, 1197 }, //1083
  {   91,  898, 1085,  250,  379, 1194 }, //1084
  {   91,  898, 1084,  282,  404, 1198 }, //1085
  {   95,  899, 1087,  254,  383, 1195 }, //1086
  {   95,  899, 1086,  286,  407, 1199 }, //1087
  {   18,  901, 1089,  227,  411, 1104 }, //1088
  {   18,  901, 1088,  243,  426, 1106 }, //1089
  {   19,  902, 1091,  231,  415, 1112 }, //1090
  {   19,  902, 1090,  247,  429, 1114 }, //1091
  {   22,  904, 1093,  235,  419, 1105 }, //1092
  {   22,  904, 1092,  251,  432, 1107 }, //1093
  {   23,  905, 1095,  239,  423, 1113 }, //1094
  {   23,  905, 1094,  255,  435, 1115 }, //1095
  {   26,  907, 1097,  259,  439, 1108 }, //1096
  {   26,  907, 1096,  275,  454, 1110 }, //1097
  {   27,  908, 1099,  263,  443, 1116 }, //1098
  {   27,  908, 1098,  279,  457, 1118 }, //1099
  {   30,  910, 1101,  267,  447, 1109 }, //1100
  {   30,  910, 1100,  283,  460, 1111 }, //1101
  {   31,  911, 1103,  271,  451, 1117 }, //1102
  {   31,  911, 1102,  287,  463, 1119 }, //1103
  {   97,  521,  912,  227,  411, 1088 }, //1104
  {  105,  528,  914,  235,  419, 1092 }, //1105
  {  113,  535,  916,  243,  426, 1089 }, //1106
  {  121,  542,  918,  251,  432, 1093 }, //1107
  {  129,  549,  920,  259,  439, 1096 }, //1108
  {  137,  556,  922,  267,  447, 1100 }, //1109
  {  145,  563,  924,  275,  454, 1097 }, //1110
  {  153,  570,  926,  283,  460, 1101 }, //1111
  {  101,  524,  913,  231,  415, 1090 }, //1112
  {  109,  531,  915,  239,  423, 1094 }, //1113
  {  117,  538,  917,  247,  429, 1091 }, //1114
  {  125,  545,  919,  255,  435, 1095 }, //1115
  {  133,  552,  921,  263,  443, 1098 }, //1116
  {  141,  559,  923,  271,  451, 1102 }, //1117
  {  149,  566,  925,  279,  457, 1099 }, //1118
  {  157,  573,  927,  287,  463, 1103 }, //1119
  {  225,  522,  928,  163,  354, 1024 }, //1120
  {  233,  529,  930,  171,  362, 1028 }, //1121
  {  241,  536,  932,  179,  370, 1032 }, //1122
  {  249,  543,  934,  187,  378, 1036 }, //1123
  {  257,  550,  936,  195,  385, 1025 }, //1124
  {  265,  557,  938,  203,  391, 1029 }, //1125
  {  273,  564,  940,  211,  397, 1033 }, //1126
  {  281,  571,  942,  219,  403, 1037 }, //1127
  {  229,  525,  929,  167,  358, 1026 }, //1128
  {  237,  532,  931,  175,  366, 1030 }, //1129
  {  245,  539,  933,  183,  374, 1034 }, //1130
  {  253,  546,  935,  191,  382, 1038 }, //1131
  {  261,  553,  937,  199,  388, 1027 }, //1132
  {  269,  560,  939,  207,  394, 1031 }, //1133
  {  277,  567,  941,  215,  400, 1035 }, //1134
  {  285,  574,  943,  223,  406, 1039 }, //1135
  {   98,  465,  944,  161,  523,  976 }, //1136
  {  102,  469,  946,  165,  526,  977 }, //1137
  {  114,  479,  948,  177,  537,  980 }, //1138
  {  118,  483,  950,  181,  540,  981 }, //1139
  {  130,  493,  952,  193,  551,  984 }, //1140
  {  134,  497,  954,  197,  554,  985 }, //1141
  {  146,  507,  956,  209,  565,  988 }, //1142
  {  150,  511,  958,  213,  568,  989 }, //1143
  {  106,  472,  945,  169,  530,  978 }, //1144
  {  110,  475,  947,  173,  533,  979 }, //1145
  {  122,  486,  949,  185,  544,  982 }, //1146
  {  126,  489,  951,  189,  547,  983 }, //1147
  {  138,  500,  953,  201,  558,  986 }, //1148
  {  142,  503,  955,  205,  561,  987 }, //1149
  {  154,  514,  957,  217,  572,  990 }, //1150
  {  158,  517,  959,  221,  575,  991 }, //1151
  {   99,  409,  960,  291,  467, 1056 }, //1152
  {  103,  413,  962,  295,  471, 1058 }, //1153
  {  107,  417,  964,  299,  474, 1057 }, //1154
  {  111,  421,  966,  303,  477, 1059 }, //1155
  {  131,  437,  968,  323,  495, 1064 }, //1156
  {  135,  441,  970,  327,  499, 1066 }, //1157
  {  139,  445,  972,  331,  502, 1065 }, //1158
  {  143,  449,  974,  335,  505, 1067 }, //1159
  {  115,  424,  961,  307,  481, 1060 }, //1160
  {  119,  427,  963,  311,  485, 1062 }, //1161
  {  123,  430,  965,  315,  488, 1061 }, //1162
  {  127,  433,  967,  319,  491, 1063 }, //1163
  {  147,  452,  969,  339,  509, 1068 }, //1164
  {  151,  455,  971,  343,  513, 1070 }, //1165
  {  155,  458,  973,  347,  516, 1069 }, //1166
  {  159,  461,  975,  351,  519, 1071 }, //1167
  {  162,  466,  992,  289,  353, 1008 }, //1168
  {  166,  470,  994,  293,  357, 1010 }, //1169
  {  178,  480,  996,  305,  369, 1016 }, //1170
  {  182,  484,  998,  309,  373, 1018 }, //1171
  {  194,  494, 1000,  321,  384, 1009 }, //1172
  {  198,  498, 1002,  325,  387, 1011 }, //1173
  {  210,  508, 1004,  337,  396, 1017 }, //1174
  {  214,  512, 1006,  341,  399, 1019 }, //1175
  {  170,  473,  993,  297,  361, 1012 }, //1176
  {  174,  476,  995,  301,  365, 1014 }, //1177
  {  186,  487,  997,  313,  377, 1020 }, //1178
  {  190,  490,  999,  317,  381, 1022 }, //1179
  {  202,  501, 1001,  329,  390, 1013 }, //1180
  {  206,  504, 1003,  333,  393, 1015 }, //1181
  {  218,  515, 1005,  345,  402, 1021 }, //1182
  {  222,  518, 1007,  349,  405, 1023 }, //1183
  {  290,  410, 1040,  226,  355, 1072 }, //1184
  {  294,  414, 1042,  230,  359, 1074 }, //1185
  {  298,  418, 1044,  234,  363, 1076 }, //1186
  {  302,  422, 1046,  238,  367, 1078 }, //1187
  {  322,  438, 1048,  258,  386, 1073 }, //1188
  {  326,  442, 1050,  262,  389, 1075 }, //1189
  {  330,  446, 1052,  266,  392, 1077 }, //1190
  {  334,  450, 1054,  270,  395, 1079 }, //1191
  {  306,  425, 1041,  242,  371, 1080 }, //1192
  {  310,  428, 1043,  246,  375, 1082 }, //1193
  {  314,  431, 1045,  250,  379, 1084 }, //1194
  {  318,  434, 1047,  254,  383, 1086 }, //1195
  {  338,  453, 1049,  274,  398, 1081 }, //1196
  {  342,  456, 1051,  278,  401, 1083 }, //1197
  {  346,  459, 1053,  282,  404, 1085 }, //1198
  {  350,  462, 1055,  286,  407, 1087 }, //1199
};
int faceK120[720][5] = { // Edges bordering each face, in face order
  {    0,    1,  794,  792,  793 }, //   0
  {    0,    2,  976, 1136,  944 }, //   1
  {    0,    3,  978, 1144,  945 }, //   2
  {    1,    2,  977, 1137,  946 }, //   3
  {    1,    3,  979, 1145,  947 }, //   4
  {    2,    3,  818,  816,  817 }, //   5
  {    4,    5,  797,  795,  796 }, //   6
  {    4,    6,  980, 1138,  948 }, //   7
  {    4,    7,  982, 1146,  949 }, //   8
  {    5,    6,  981, 1139,  950 }, //   9
  {    5,    7,  983, 1147,  951 }, //  10
  {    6,    7,  821,  819,  820 }, //  11
  {    8,    9,  800,  798,  799 }, //  12
  {    8,   10,  984, 1140,  952 }, //  13
  {    8,   11,  986, 1148,  953 }, //  14
  {    9,   10,  985, 1141,  954 }, //  15
  {    9,   11,  987, 1149,  955 }, //  16
  {   10,   11,  824,  822,  823 }, //  17
  {   12,   13,  803,  801,  802 }, //  18
  {   12,   14,  988, 1142,  956 }, //  19
  {   12,   15,  990, 1150,  957 }, //  20
  {   13,   14,  989, 1143,  958 }, //  21
  {   13,   15,  991, 1151,  959 }, //  22
  {   14,   15,  827,  825,  826 }, //  23
  {   16,   17,  772,  768,  769 }, //  24
  {   16,   18, 1088, 1104,  912 }, //  25
  {   16,   19, 1090, 1112,  913 }, //  26
  {   17,   18, 1089, 1106,  916 }, //  27
  {   17,   19, 1091, 1114,  917 }, //  28
  {   18,   19,  902,  900,  901 }, //  29
  {   20,   21,  773,  770,  771 }, //  30
  {   20,   22, 1092, 1105,  914 }, //  31
  {   20,   23, 1094, 1113,  915 }, //  32
  {   21,   22, 1093, 1107,  918 }, //  33
  {   21,   23, 1095, 1115,  919 }, //  34
  {   22,   23,  905,  903,  904 }, //  35
  {   24,   25,  778,  774,  775 }, //  36
  {   24,   26, 1096, 1108,  920 }, //  37
  {   24,   27, 1098, 1116,  921 }, //  38
  {   25,   26, 1097, 1110,  924 }, //  39
  {   25,   27, 1099, 1118,  925 }, //  40
  {   26,   27,  908,  906,  907 }, //  41
  {   28,   29,  779,  776,  777 }, //  42
  {   28,   30, 1100, 1109,  922 }, //  43
  {   28,   31, 1102, 1117,  923 }, //  44
  {   29,   30, 1101, 1111,  926 }, //  45
  {   29,   31, 1103, 1119,  927 }, //  46
  {   30,   31,  911,  909,  910 }, //  47
  {   32,   33,  808,  804,  805 }, //  48
  {   32,   34, 1056, 1152,  960 }, //  49
  {   32,   35, 1060, 1160,  961 }, //  50
  {   33,   34, 1057, 1154,  964 }, //  51
  {   33,   35, 1061, 1162,  965 }, //  52
  {   34,   35,  880,  876,  877 }, //  53
  {   36,   37,  809,  806,  807 }, //  54
  {   36,   38, 1058, 1153,  962 }, //  55
  {   36,   39, 1062, 1161,  963 }, //  56
  {   37,   38, 1059, 1155,  966 }, //  57
  {   37,   39, 1063, 1163,  967 }, //  58
  {   38,   39,  881,  878,  879 }, //  59
  {   40,   41,  814,  810,  811 }, //  60
  {   40,   42, 1064, 1156,  968 }, //  61
  {   40,   43, 1068, 1164,  969 }, //  62
  {   41,   42, 1065, 1158,  972 }, //  63
  {   41,   43, 1069, 1166,  973 }, //  64
  {   42,   43,  886,  882,  883 }, //  65
  {   44,   45,  815,  812,  813 }, //  66
  {   44,   46, 1066, 1157,  970 }, //  67
  {   44,   47, 1070, 1165,  971 }, //  68
  {   45,   46, 1067, 1159,  974 }, //  69
  {   45,   47, 1071, 1167,  975 }, //  70
  {   46,   47,  887,  884,  885 }, //  71
  {   48,   49,  788,  780,  781 }, //  72
  {   48,   50, 1024, 1120,  928 }, //  73
  {   48,   51, 1026, 1128,  929 }, //  74
  {   49,   50, 1025, 1124,  936 }, //  75
  {   49,   51, 1027, 1132,  937 }, //  76
  {   50,   51,  854,  852,  853 }, //  77
  {   52,   53,  789,  782,  783 }, //  78
  {   52,   54, 1028, 1121,  930 }, //  79
  {   52,   55, 1030, 1129,  931 }, //  80
  {   53,   54, 1029, 1125,  938 }, //  81
  {   53,   55, 1031, 1133,  939 }, //  82
  {   54,   55,  857,  855,  856 }, //  83
  {   56,   57,  790,  784,  785 }, //  84
  {   56,   58, 1032, 1122,  932 }, //  85
  {   56,   59, 1034, 1130,  933 }, //  86
  {   57,   58, 1033, 1126,  940 }, //  87
  {   57,   59, 1035, 1134,  941 }, //  88
  {   58,   59,  860,  858,  859 }, //  89
  {   60,   61,  791,  786,  787 }, //  90
  {   60,   62, 1036, 1123,  934 }, //  91
  {   60,   63, 1038, 1131,  935 }, //  92
  {   61,   62, 1037, 1127,  942 }, //  93
  {   61,   63, 1039, 1135,  943 }, //  94
  {   62,   63,  863,  861,  862 }, //  95
  {   64,   65,  836,  828,  829 }, //  96
  {   64,   66, 1008, 1168,  992 }, //  97
  {   64,   67, 1012, 1176,  993 }, //  98
  {   65,   66, 1009, 1172, 1000 }, //  99
  {   65,   67, 1013, 1180, 1001 }, // 100
  {   66,   67,  844,  840,  841 }, // 101
  {   68,   69,  837,  830,  831 }, // 102
  {   68,   70, 1010, 1169,  994 }, // 103
  {   68,   71, 1014, 1177,  995 }, // 104
  {   69,   70, 1011, 1173, 1002 }, // 105
  {   69,   71, 1015, 1181, 1003 }, // 106
  {   70,   71,  845,  842,  843 }, // 107
  {   72,   73,  838,  832,  833 }, // 108
  {   72,   74, 1016, 1170,  996 }, // 109
  {   72,   75, 1020, 1178,  997 }, // 110
  {   73,   74, 1017, 1174, 1004 }, // 111
  {   73,   75, 1021, 1182, 1005 }, // 112
  {   74,   75,  850,  846,  847 }, // 113
  {   76,   77,  839,  834,  835 }, // 114
  {   76,   78, 1018, 1171,  998 }, // 115
  {   76,   79, 1022, 1179,  999 }, // 116
  {   77,   78, 1019, 1175, 1006 }, // 117
  {   77,   79, 1023, 1183, 1007 }, // 118
  {   78,   79,  851,  848,  849 }, // 119
  {   80,   81,  872,  864,  865 }, // 120
  {   80,   82, 1072, 1184, 1040 }, // 121
  {   80,   83, 1080, 1192, 1041 }, // 122
  {   81,   82, 1073, 1188, 1048 }, // 123
  {   81,   83, 1081, 1196, 1049 }, // 124
  {   82,   83,  896,  888,  889 }, // 125
  {   84,   85,  873,  866,  867 }, // 126
  {   84,   86, 1074, 1185, 1042 }, // 127
  {   84,   87, 1082, 1193, 1043 }, // 128
  {   85,   86, 1075, 1189, 1050 }, // 129
  {   85,   87, 1083, 1197, 1051 }, // 130
  {   86,   87,  897,  890,  891 }, // 131
  {   88,   89,  874,  868,  869 }, // 132
  {   88,   90, 1076, 1186, 1044 }, // 133
  {   88,   91, 1084, 1194, 1045 }, // 134
  {   89,   90, 1077, 1190, 1052 }, // 135
  {   89,   91, 1085, 1198, 1053 }, // 136
  {   90,   91,  898,  892,  893 }, // 137
  {   92,   93,  875,  870,  871 }, // 138
  {   92,   94, 1078, 1187, 1046 }, // 139
  {   92,   95, 1086, 1195, 1047 }, // 140
  {   93,   94, 1079, 1191, 1054 }, // 141
  {   93,   95, 1087, 1199, 1055 }, // 142
  {   94,   95,  899,  894,  895 }, // 143
  {   96,   97,  912,  769,  576 }, // 144
  {   96,   98,  944,  793,  577 }, // 145
  {   96,   99,  960,  805,  578 }, // 146
  {   97,   98, 1136,  523,  521 }, // 147
  {   97,   99,  409,  411, 1104 }, // 148
  {   98,   99, 1152,  467,  465 }, // 149
  {  100,  101,  913,  769,  579 }, // 150
  {  100,  102,  946,  794,  580 }, // 151
  {  100,  103,  962,  807,  581 }, // 152
  {  101,  102, 1137,  526,  524 }, // 153
  {  101,  103,  413,  415, 1112 }, // 154
  {  102,  103, 1153,  471,  469 }, // 155
  {  104,  105,  914,  771,  582 }, // 156
  {  104,  106,  945,  793,  583 }, // 157
  {  104,  107,  964,  808,  584 }, // 158
  {  105,  106, 1144,  530,  528 }, // 159
  {  105,  107,  417,  419, 1105 }, // 160
  {  106,  107, 1154,  474,  472 }, // 161
  {  108,  109,  915,  771,  585 }, // 162
  {  108,  110,  947,  794,  586 }, // 163
  {  108,  111,  966,  809,  587 }, // 164
  {  109,  110, 1145,  533,  531 }, // 165
  {  109,  111,  421,  423, 1113 }, // 166
  {  110,  111, 1155,  477,  475 }, // 167
  {  112,  113,  916,  772,  588 }, // 168
  {  112,  114,  948,  796,  589 }, // 169
  {  112,  115,  961,  805,  590 }, // 170
  {  113,  114, 1138,  537,  535 }, // 171
  {  113,  115,  424,  426, 1106 }, // 172
  {  114,  115, 1160,  481,  479 }, // 173
  {  116,  117,  917,  772,  591 }, // 174
  {  116,  118,  950,  797,  592 }, // 175
  {  116,  119,  963,  807,  593 }, // 176
  {  117,  118, 1139,  540,  538 }, // 177
  {  117,  119,  427,  429, 1114 }, // 178
  {  118,  119, 1161,  485,  483 }, // 179
  {  120,  121,  918,  773,  594 }, // 180
  {  120,  122,  949,  796,  595 }, // 181
  {  120,  123,  965,  808,  596 }, // 182
  {  121,  122, 1146,  544,  542 }, // 183
  {  121,  123,  430,  432, 1107 }, // 184
  {  122,  123, 1162,  488,  486 }, // 185
  {  124,  125,  919,  773,  597 }, // 186
  {  124,  126,  951,  797,  598 }, // 187
  {  124,  127,  967,  809,  599 }, // 188
  {  125,  126, 1147,  547,  545 }, // 189
  {  125,  127,  433,  435, 1115 }, // 190
  {  126,  127, 1163,  491,  489 }, // 191
  {  128,  129,  920,  775,  600 }, // 192
  {  128,  130,  952,  799,  601 }, // 193
  {  128,  131,  968,  811,  602 }, // 194
  {  129,  130, 1140,  551,  549 }, // 195
  {  129,  131,  437,  439, 1108 }, // 196
  {  130,  131, 1156,  495,  493 }, // 197
  {  132,  133,  921,  775,  603 }, // 198
  {  132,  134,  954,  800,  604 }, // 199
  {  132,  135,  970,  813,  605 }, // 200
  {  133,  134, 1141,  554,  552 }, // 201
  {  133,  135,  441,  443, 1116 }, // 202
  {  134,  135, 1157,  499,  497 }, // 203
  {  136,  137,  922,  777,  606 }, // 204
  {  136,  138,  953,  799,  607 }, // 205
  {  136,  139,  972,  814,  608 }, // 206
  {  137,  138, 1148,  558,  556 }, // 207
  {  137,  139,  445,  447, 1109 }, // 208
  {  138,  139, 1158,  502,  500 }, // 209
  {  140,  141,  923,  777,  609 }, // 210
  {  140,  142,  955,  800,  610 }, // 211
  {  140,  143,  974,  815,  611 }, // 212
  {  141,  142, 1149,  561,  559 }, // 213
  {  141,  143,  449,  451, 1117 }, // 214
  {  142,  143, 1159,  505,  503 }, // 215
  {  144,  145,  924,  778,  612 }, // 216
  {  144,  146,  956,  802,  613 }, // 217
  {  144,  147,  969,  811,  614 }, // 218
  {  145,  146, 1142,  565,  563 }, // 219
  {  145,  147,  452,  454, 1110 }, // 220
  {  146,  147, 1164,  509,  507 }, // 221
  {  148,  149,  925,  778,  615 }, // 222
  {  148,  150,  958,  803,  616 }, // 223
  {  148,  151,  971,  813,  617 }, // 224
  {  149,  150, 1143,  568,  566 }, // 225
  {  149,  151,  455,  457, 1118 }, // 226
  {  150,  151, 1165,  513,  511 }, // 227
  {  152,  153,  926,  779,  618 }, // 228
  {  152,  154,  957,  802,  619 }, // 229
  {  152,  155,  973,  814,  620 }, // 230
  {  153,  154, 1150,  572,  570 }, // 231
  {  153,  155,  458,  460, 1111 }, // 232
  {  154,  155, 1166,  516,  514 }, // 233
  {  156,  157,  927,  779,  621 }, // 234
  {  156,  158,  959,  803,  622 }, // 235
  {  156,  159,  975,  815,  623 }, // 236
  {  157,  158, 1151,  575,  573 }, // 237
  {  157,  159,  461,  463, 1119 }, // 238
  {  158,  159, 1167,  519,  517 }, // 239
  {  160,  161,  976,  817,  624 }, // 240
  {  160,  162,  992,  829,  625 }, // 241
  {  160,  163, 1024,  853,  626 }, // 242
  {  161,  162,  466,  465, 1136 }, // 243
  {  161,  163, 1120,  522,  523 }, // 244
  {  162,  163,  354,  353, 1168 }, // 245
  {  164,  165,  977,  817,  627 }, // 246
  {  164,  166,  994,  831,  628 }, // 247
  {  164,  167, 1026,  854,  629 }, // 248
  {  165,  166,  470,  469, 1137 }, // 249
  {  165,  167, 1128,  525,  526 }, // 250
  {  166,  167,  358,  357, 1169 }, // 251
  {  168,  169,  978,  818,  630 }, // 252
  {  168,  170,  993,  829,  631 }, // 253
  {  168,  171, 1028,  856,  632 }, // 254
  {  169,  170,  473,  472, 1144 }, // 255
  {  169,  171, 1121,  529,  530 }, // 256
  {  170,  171,  362,  361, 1176 }, // 257
  {  172,  173,  979,  818,  633 }, // 258
  {  172,  174,  995,  831,  634 }, // 259
  {  172,  175, 1030,  857,  635 }, // 260
  {  173,  174,  476,  475, 1145 }, // 261
  {  173,  175, 1129,  532,  533 }, // 262
  {  174,  175,  366,  365, 1177 }, // 263
  {  176,  177,  980,  820,  636 }, // 264
  {  176,  178,  996,  833,  637 }, // 265
  {  176,  179, 1032,  859,  638 }, // 266
  {  177,  178,  480,  479, 1138 }, // 267
  {  177,  179, 1122,  536,  537 }, // 268
  {  178,  179,  370,  369, 1170 }, // 269
  {  180,  181,  981,  820,  639 }, // 270
  {  180,  182,  998,  835,  640 }, // 271
  {  180,  183, 1034,  860,  641 }, // 272
  {  181,  182,  484,  483, 1139 }, // 273
  {  181,  183, 1130,  539,  540 }, // 274
  {  182,  183,  374,  373, 1171 }, // 275
  {  184,  185,  982,  821,  642 }, // 276
  {  184,  186,  997,  833,  643 }, // 277
  {  184,  187, 1036,  862,  644 }, // 278
  {  185,  186,  487,  486, 1146 }, // 279
  {  185,  187, 1123,  543,  544 }, // 280
  {  186,  187,  378,  377, 1178 }, // 281
  {  188,  189,  983,  821,  645 }, // 282
  {  188,  190,  999,  835,  646 }, // 283
  {  188,  191, 1038,  863,  647 }, // 284
  {  189,  190,  490,  489, 1147 }, // 285
  {  189,  191, 1131,  546,  547 }, // 286
  {  190,  191,  382,  381, 1179 }, // 287
  {  192,  193,  984,  823,  648 }, // 288
  {  192,  194, 1000,  836,  649 }, // 289
  {  192,  195, 1025,  853,  650 }, // 290
  {  193,  194,  494,  493, 1140 }, // 291
  {  193,  195, 1124,  550,  551 }, // 292
  {  194,  195,  385,  384, 1172 }, // 293
  {  196,  197,  985,  823,  651 }, // 294
  {  196,  198, 1002,  837,  652 }, // 295
  {  196,  199, 1027,  854,  653 }, // 296
  {  197,  198,  498,  497, 1141 }, // 297
  {  197,  199, 1132,  553,  554 }, // 298
  {  198,  199,  388,  387, 1173 }, // 299
  {  200,  201,  986,  824,  654 }, // 300
  {  200,  202, 1001,  836,  655 }, // 301
  {  200,  203, 1029,  856,  656 }, // 302
  {  201,  202,  501,  500, 1148 }, // 303
  {  201,  203, 1125,  557,  558 }, // 304
  {  202,  203,  391,  390, 1180 }, // 305
  {  204,  205,  987,  824,  657 }, // 306
  {  204,  206, 1003,  837,  658 }, // 307
  {  204,  207, 1031,  857,  659 }, // 308
  {  205,  206,  504,  503, 1149 }, // 309
  {  205,  207, 1133,  560,  561 }, // 310
  {  206,  207,  394,  393, 1181 }, // 311
  {  208,  209,  988,  826,  660 }, // 312
  {  208,  210, 1004,  838,  661 }, // 313
  {  208,  211, 1033,  859,  662 }, // 314
  {  209,  210,  508,  507, 1142 }, // 315
  {  209,  211, 1126,  564,  565 }, // 316
  {  210,  211,  397,  396, 1174 }, // 317
  {  212,  213,  989,  826,  663 }, // 318
  {  212,  214, 1006,  839,  664 }, // 319
  {  212,  215, 1035,  860,  665 }, // 320
  {  213,  214,  512,  511, 1143 }, // 321
  {  213,  215, 1134,  567,  568 }, // 322
  {  214,  215,  400,  399, 1175 }, // 323
  {  216,  217,  990,  827,  666 }, // 324
  {  216,  218, 1005,  838,  667 }, // 325
  {  216,  219, 1037,  862,  668 }, // 326
  {  217,  218,  515,  514, 1150 }, // 327
  {  217,  219, 1127,  571,  572 }, // 328
  {  218,  219,  403,  402, 1182 }, // 329
  {  220,  221,  991,  827,  669 }, // 330
  {  220,  222, 1007,  839,  670 }, // 331
  {  220,  223, 1039,  863,  671 }, // 332
  {  221,  222,  518,  517, 1151 }, // 333
  {  221,  223, 1135,  574,  575 }, // 334
  {  222,  223,  406,  405, 1183 }, // 335
  {  224,  225,  928,  781,  672 }, // 336
  {  224,  226, 1072,  889,  673 }, // 337
  {  224,  227, 1088,  901,  674 }, // 338
  {  225,  226,  355,  354, 1120 }, // 339
  {  225,  227, 1104,  521,  522 }, // 340
  {  226,  227,  411,  410, 1184 }, // 341
  {  228,  229,  929,  781,  675 }, // 342
  {  228,  230, 1074,  891,  676 }, // 343
  {  228,  231, 1090,  902,  677 }, // 344
  {  229,  230,  359,  358, 1128 }, // 345
  {  229,  231, 1112,  524,  525 }, // 346
  {  230,  231,  415,  414, 1185 }, // 347
  {  232,  233,  930,  783,  678 }, // 348
  {  232,  234, 1076,  893,  679 }, // 349
  {  232,  235, 1092,  904,  680 }, // 350
  {  233,  234,  363,  362, 1121 }, // 351
  {  233,  235, 1105,  528,  529 }, // 352
  {  234,  235,  419,  418, 1186 }, // 353
  {  236,  237,  931,  783,  681 }, // 354
  {  236,  238, 1078,  895,  682 }, // 355
  {  236,  239, 1094,  905,  683 }, // 356
  {  237,  238,  367,  366, 1129 }, // 357
  {  237,  239, 1113,  531,  532 }, // 358
  {  238,  239,  423,  422, 1187 }, // 359
  {  240,  241,  932,  785,  684 }, // 360
  {  240,  242, 1080,  896,  685 }, // 361
  {  240,  243, 1089,  901,  686 }, // 362
  {  241,  242,  371,  370, 1122 }, // 363
  {  241,  243, 1106,  535,  536 }, // 364
  {  242,  243,  426,  425, 1192 }, // 365
  {  244,  245,  933,  785,  687 }, // 366
  {  244,  246, 1082,  897,  688 }, // 367
  {  244,  247, 1091,  902,  689 }, // 368
  {  245,  246,  375,  374, 1130 }, // 369
  {  245,  247, 1114,  538,  539 }, // 370
  {  246,  247,  429,  428, 1193 }, // 371
  {  248,  249,  934,  787,  690 }, // 372
  {  248,  250, 1084,  898,  691 }, // 373
  {  248,  251, 1093,  904,  692 }, // 374
  {  249,  250,  379,  378, 1123 }, // 375
  {  249,  251, 1107,  542,  543 }, // 376
  {  250,  251,  432,  431, 1194 }, // 377
  {  252,  253,  935,  787,  693 }, // 378
  {  252,  254, 1086,  899,  694 }, // 379
  {  252,  255, 1095,  905,  695 }, // 380
  {  253,  254,  383,  382, 1131 }, // 381
  {  253,  255, 1115,  545,  546 }, // 382
  {  254,  255,  435,  434, 1195 }, // 383
  {  256,  257,  936,  788,  696 }, // 384
  {  256,  258, 1073,  889,  697 }, // 385
  {  256,  259, 1096,  907,  698 }, // 386
  {  257,  258,  386,  385, 1124 }, // 387
  {  257,  259, 1108,  549,  550 }, // 388
  {  258,  259,  439,  438, 1188 }, // 389
  {  260,  261,  937,  788,  699 }, // 390
  {  260,  262, 1075,  891,  700 }, // 391
  {  260,  263, 1098,  908,  701 }, // 392
  {  261,  262,  389,  388, 1132 }, // 393
  {  261,  263, 1116,  552,  553 }, // 394
  {  262,  263,  443,  442, 1189 }, // 395
  {  264,  265,  938,  789,  702 }, // 396
  {  264,  266, 1077,  893,  703 }, // 397
  {  264,  267, 1100,  910,  704 }, // 398
  {  265,  266,  392,  391, 1125 }, // 399
  {  265,  267, 1109,  556,  557 }, // 400
  {  266,  267,  447,  446, 1190 }, // 401
  {  268,  269,  939,  789,  705 }, // 402
  {  268,  270, 1079,  895,  706 }, // 403
  {  268,  271, 1102,  911,  707 }, // 404
  {  269,  270,  395,  394, 1133 }, // 405
  {  269,  271, 1117,  559,  560 }, // 406
  {  270,  271,  451,  450, 1191 }, // 407
  {  272,  273,  940,  790,  708 }, // 408
  {  272,  274, 1081,  896,  709 }, // 409
  {  272,  275, 1097,  907,  710 }, // 410
  {  273,  274,  398,  397, 1126 }, // 411
  {  273,  275, 1110,  563,  564 }, // 412
  {  274,  275,  454,  453, 1196 }, // 413
  {  276,  277,  941,  790,  711 }, // 414
  {  276,  278, 1083,  897,  712 }, // 415
  {  276,  279, 1099,  908,  713 }, // 416
  {  277,  278,  401,  400, 1134 }, // 417
  {  277,  279, 1118,  566,  567 }, // 418
  {  278,  279,  457,  456, 1197 }, // 419
  {  280,  281,  942,  791,  714 }, // 420
  {  280,  282, 1085,  898,  715 }, // 421
  {  280,  283, 1101,  910,  716 }, // 422
  {  281,  282,  404,  403, 1127 }, // 423
  {  281,  283, 1111,  570,  571 }, // 424
  {  282,  283,  460,  459, 1198 }, // 425
  {  284,  285,  943,  791,  717 }, // 426
  {  284,  286, 1087,  899,  718 }, // 427
  {  284,  287, 1103,  911,  719 }, // 428
  {  285,  286,  407,  406, 1135 }, // 429
  {  285,  287, 1119,  573,  574 }, // 430
  {  286,  287,  463,  462, 1199 }, // 431
  {  288,  289, 1008,  841,  720 }, // 432
  {  288,  290, 1040,  865,  721 }, // 433
  {  288,  291, 1056,  877,  722 }, // 434
  {  289,  290, 1184,  355,  353 }, // 435
  {  289,  291,  467,  466, 1168 }, // 436
  {  290,  291, 1152,  409,  410 }, // 437
  {  292,  293, 1010,  843,  723 }, // 438
  {  292,  294, 1042,  867,  724 }, // 439
  {  292,  295, 1058,  879,  725 }, // 440
  {  293,  294, 1185,  359,  357 }, // 441
  {  293,  295,  471,  470, 1169 }, // 442
  {  294,  295, 1153,  413,  414 }, // 443
  {  296,  297, 1012,  844,  726 }, // 444
  {  296,  298, 1044,  869,  727 }, // 445
  {  296,  299, 1057,  877,  728 }, // 446
  {  297,  298, 1186,  363,  361 }, // 447
  {  297,  299,  474,  473, 1176 }, // 448
  {  298,  299, 1154,  417,  418 }, // 449
  {  300,  301, 1014,  845,  729 }, // 450
  {  300,  302, 1046,  871,  730 }, // 451
  {  300,  303, 1059,  879,  731 }, // 452
  {  301,  302, 1187,  367,  365 }, // 453
  {  301,  303,  477,  476, 1177 }, // 454
  {  302,  303, 1155,  421,  422 }, // 455
  {  304,  305, 1016,  847,  732 }, // 456
  {  304,  306, 1041,  865,  733 }, // 457
  {  304,  307, 1060,  880,  734 }, // 458
  {  305,  306, 1192,  371,  369 }, // 459
  {  305,  307,  481,  480, 1170 }, // 460
  {  306,  307, 1160,  424,  425 }, // 461
  {  308,  309, 1018,  849,  735 }, // 462
  {  308,  310, 1043,  867,  736 }, // 463
  {  308,  311, 1062,  881,  737 }, // 464
  {  309,  310, 1193,  375,  373 }, // 465
  {  309,  311,  485,  484, 1171 }, // 466
  {  310,  311, 1161,  427,  428 }, // 467
  {  312,  313, 1020,  850,  738 }, // 468
  {  312,  314, 1045,  869,  739 }, // 469
  {  312,  315, 1061,  880,  740 }, // 470
  {  313,  314, 1194,  379,  377 }, // 471
  {  313,  315,  488,  487, 1178 }, // 472
  {  314,  315, 1162,  430,  431 }, // 473
  {  316,  317, 1022,  851,  741 }, // 474
  {  316,  318, 1047,  871,  742 }, // 475
  {  316,  319, 1063,  881,  743 }, // 476
  {  317,  318, 1195,  383,  381 }, // 477
  {  317,  319,  491,  490, 1179 }, // 478
  {  318,  319, 1163,  433,  434 }, // 479
  {  320,  321, 1009,  841,  744 }, // 480
  {  320,  322, 1048,  872,  745 }, // 481
  {  320,  323, 1064,  883,  746 }, // 482
  {  321,  322, 1188,  386,  384 }, // 483
  {  321,  323,  495,  494, 1172 }, // 484
  {  322,  323, 1156,  437,  438 }, // 485
  {  324,  325, 1011,  843,  747 }, // 486
  {  324,  326, 1050,  873,  748 }, // 487
  {  324,  327, 1066,  885,  749 }, // 488
  {  325,  326, 1189,  389,  387 }, // 489
  {  325,  327,  499,  498, 1173 }, // 490
  {  326,  327, 1157,  441,  442 }, // 491
  {  328,  329, 1013,  844,  750 }, // 492
  {  328,  330, 1052,  874,  751 }, // 493
  {  328,  331, 1065,  883,  752 }, // 494
  {  329,  330, 1190,  392,  390 }, // 495
  {  329,  331,  502,  501, 1180 }, // 496
  {  330,  331, 1158,  445,  446 }, // 497
  {  332,  333, 1015,  845,  753 }, // 498
  {  332,  334, 1054,  875,  754 }, // 499
  {  332,  335, 1067,  885,  755 }, // 500
  {  333,  334, 1191,  395,  393 }, // 501
  {  333,  335,  505,  504, 1181 }, // 502
  {  334,  335, 1159,  449,  450 }, // 503
  {  336,  337, 1017,  847,  756 }, // 504
  {  336,  338, 1049,  872,  757 }, // 505
  {  336,  339, 1068,  886,  758 }, // 506
  {  337,  338, 1196,  398,  396 }, // 507
  {  337,  339,  509,  508, 1174 }, // 508
  {  338,  339, 1164,  452,  453 }, // 509
  {  340,  341, 1019,  849,  759 }, // 510
  {  340,  342, 1051,  873,  760 }, // 511
  {  340,  343, 1070,  887,  761 }, // 512
  {  341,  342, 1197,  401,  399 }, // 513
  {  341,  343,  513,  512, 1175 }, // 514
  {  342,  343, 1165,  455,  456 }, // 515
  {  344,  345, 1021,  850,  762 }, // 516
  {  344,  346, 1053,  874,  763 }, // 517
  {  344,  347, 1069,  886,  764 }, // 518
  {  345,  346, 1198,  404,  402 }, // 519
  {  345,  347,  516,  515, 1182 }, // 520
  {  346,  347, 1166,  458,  459 }, // 521
  {  348,  349, 1023,  851,  765 }, // 522
  {  348,  350, 1055,  875,  766 }, // 523
  {  348,  351, 1071,  887,  767 }, // 524
  {  349,  350, 1199,  407,  405 }, // 525
  {  349,  351,  519,  518, 1183 }, // 526
  {  350,  351, 1167,  461,  462 }, // 527
  {  352,  353, 1008, 1009,  384 }, // 528
  {  352,  354, 1024, 1025,  385 }, // 529
  {  352,  355, 1072, 1073,  386 }, // 530
  {  356,  357, 1010, 1011,  387 }, // 531
  {  356,  358, 1026, 1027,  388 }, // 532
  {  356,  359, 1074, 1075,  389 }, // 533
  {  360,  361, 1012, 1013,  390 }, // 534
  {  360,  362, 1028, 1029,  391 }, // 535
  {  360,  363, 1076, 1077,  392 }, // 536
  {  364,  365, 1014, 1015,  393 }, // 537
  {  364,  366, 1030, 1031,  394 }, // 538
  {  364,  367, 1078, 1079,  395 }, // 539
  {  368,  369, 1016, 1017,  396 }, // 540
  {  368,  370, 1032, 1033,  397 }, // 541
  {  368,  371, 1080, 1081,  398 }, // 542
  {  372,  373, 1018, 1019,  399 }, // 543
  {  372,  374, 1034, 1035,  400 }, // 544
  {  372,  375, 1082, 1083,  401 }, // 545
  {  376,  377, 1020, 1021,  402 }, // 546
  {  376,  378, 1036, 1037,  403 }, // 547
  {  376,  379, 1084, 1085,  404 }, // 548
  {  380,  381, 1022, 1023,  405 }, // 549
  {  380,  382, 1038, 1039,  406 }, // 550
  {  380,  383, 1086, 1087,  407 }, // 551
  {  408,  409,  960,  961,  424 }, // 552
  {  408,  410, 1040, 1041,  425 }, // 553
  {  408,  411, 1088, 1089,  426 }, // 554
  {  412,  413,  962,  963,  427 }, // 555
  {  412,  414, 1042, 1043,  428 }, // 556
  {  412,  415, 1090, 1091,  429 }, // 557
  {  416,  417,  964,  965,  430 }, // 558
  {  416,  418, 1044, 1045,  431 }, // 559
  {  416,  419, 1092, 1093,  432 }, // 560
  {  420,  421,  966,  967,  433 }, // 561
  {  420,  422, 1046, 1047,  434 }, // 562
  {  420,  423, 1094, 1095,  435 }, // 563
  {  436,  437,  968,  969,  452 }, // 564
  {  436,  438, 1048, 1049,  453 }, // 565
  {  436,  439, 1096, 1097,  454 }, // 566
  {  440,  441,  970,  971,  455 }, // 567
  {  440,  442, 1050, 1051,  456 }, // 568
  {  440,  443, 1098, 1099,  457 }, // 569
  {  444,  445,  972,  973,  458 }, // 570
  {  444,  446, 1052, 1053,  459 }, // 571
  {  444,  447, 1100, 1101,  460 }, // 572
  {  448,  449,  974,  975,  461 }, // 573
  {  448,  450, 1054, 1055,  462 }, // 574
  {  448,  451, 1102, 1103,  463 }, // 575
  {  464,  465,  944,  945,  472 }, // 576
  {  464,  466,  992,  993,  473 }, // 577
  {  464,  467, 1056, 1057,  474 }, // 578
  {  468,  469,  946,  947,  475 }, // 579
  {  468,  470,  994,  995,  476 }, // 580
  {  468,  471, 1058, 1059,  477 }, // 581
  {  478,  479,  948,  949,  486 }, // 582
  {  478,  480,  996,  997,  487 }, // 583
  {  478,  481, 1060, 1061,  488 }, // 584
  {  482,  483,  950,  951,  489 }, // 585
  {  482,  484,  998,  999,  490 }, // 586
  {  482,  485, 1062, 1063,  491 }, // 587
  {  492,  493,  952,  953,  500 }, // 588
  {  492,  494, 1000, 1001,  501 }, // 589
  {  492,  495, 1064, 1065,  502 }, // 590
  {  496,  497,  954,  955,  503 }, // 591
  {  496,  498, 1002, 1003,  504 }, // 592
  {  496,  499, 1066, 1067,  505 }, // 593
  {  506,  507,  956,  957,  514 }, // 594
  {  506,  508, 1004, 1005,  515 }, // 595
  {  506,  509, 1068, 1069,  516 }, // 596
  {  510,  511,  958,  959,  517 }, // 597
  {  510,  512, 1006, 1007,  518 }, // 598
  {  510,  513, 1070, 1071,  519 }, // 599
  {  520,  521,  912,  913,  524 }, // 600
  {  520,  522,  928,  929,  525 }, // 601
  {  520,  523,  976,  977,  526 }, // 602
  {  527,  528,  914,  915,  531 }, // 603
  {  527,  529,  930,  931,  532 }, // 604
  {  527,  530,  978,  979,  533 }, // 605
  {  534,  535,  916,  917,  538 }, // 606
  {  534,  536,  932,  933,  539 }, // 607
  {  534,  537,  980,  981,  540 }, // 608
  {  541,  542,  918,  919,  545 }, // 609
  {  541,  543,  934,  935,  546 }, // 610
  {  541,  544,  982,  983,  547 }, // 611
  {  548,  549,  920,  921,  552 }, // 612
  {  548,  550,  936,  937,  553 }, // 613
  {  548,  551,  984,  985,  554 }, // 614
  {  555,  556,  922,  923,  559 }, // 615
  {  555,  557,  938,  939,  560 }, // 616
  {  555,  558,  986,  987,  561 }, // 617
  {  562,  563,  924,  925,  566 }, // 618
  {  562,  564,  940,  941,  567 }, // 619
  {  562,  565,  988,  989,  568 }, // 620
  {  569,  570,  926,  927,  573 }, // 621
  {  569,  571,  942,  943,  574 }, // 622
  {  569,  572,  990,  991,  575 }, // 623
  {  576,  577,  792,  580,  579 }, // 624
  {  576,  578,  590,  588,  768 }, // 625
  {  577,  578,  804,  584,  583 }, // 626
  {  579,  581,  593,  591,  768 }, // 627
  {  580,  581,  806,  587,  586 }, // 628
  {  582,  583,  792,  586,  585 }, // 629
  {  582,  584,  596,  594,  770 }, // 630
  {  585,  587,  599,  597,  770 }, // 631
  {  588,  589,  795,  592,  591 }, // 632
  {  589,  590,  804,  596,  595 }, // 633
  {  592,  593,  806,  599,  598 }, // 634
  {  594,  595,  795,  598,  597 }, // 635
  {  600,  601,  798,  604,  603 }, // 636
  {  600,  602,  614,  612,  774 }, // 637
  {  601,  602,  810,  608,  607 }, // 638
  {  603,  605,  617,  615,  774 }, // 639
  {  604,  605,  812,  611,  610 }, // 640
  {  606,  607,  798,  610,  609 }, // 641
  {  606,  608,  620,  618,  776 }, // 642
  {  609,  611,  623,  621,  776 }, // 643
  {  612,  613,  801,  616,  615 }, // 644
  {  613,  614,  810,  620,  619 }, // 645
  {  616,  617,  812,  623,  622 }, // 646
  {  618,  619,  801,  622,  621 }, // 647
  {  624,  625,  631,  630,  816 }, // 648
  {  624,  626,  852,  629,  627 }, // 649
  {  625,  626,  650,  649,  828 }, // 650
  {  627,  628,  634,  633,  816 }, // 651
  {  628,  629,  653,  652,  830 }, // 652
  {  630,  632,  855,  635,  633 }, // 653
  {  631,  632,  656,  655,  828 }, // 654
  {  634,  635,  659,  658,  830 }, // 655
  {  636,  637,  643,  642,  819 }, // 656
  {  636,  638,  858,  641,  639 }, // 657
  {  637,  638,  662,  661,  832 }, // 658
  {  639,  640,  646,  645,  819 }, // 659
  {  640,  641,  665,  664,  834 }, // 660
  {  642,  644,  861,  647,  645 }, // 661
  {  643,  644,  668,  667,  832 }, // 662
  {  646,  647,  671,  670,  834 }, // 663
  {  648,  649,  655,  654,  822 }, // 664
  {  648,  650,  852,  653,  651 }, // 665
  {  651,  652,  658,  657,  822 }, // 666
  {  654,  656,  855,  659,  657 }, // 667
  {  660,  661,  667,  666,  825 }, // 668
  {  660,  662,  858,  665,  663 }, // 669
  {  663,  664,  670,  669,  825 }, // 670
  {  666,  668,  861,  671,  669 }, // 671
  {  672,  673,  697,  696,  780 }, // 672
  {  672,  674,  900,  677,  675 }, // 673
  {  673,  674,  686,  685,  888 }, // 674
  {  675,  676,  700,  699,  780 }, // 675
  {  676,  677,  689,  688,  890 }, // 676
  {  678,  679,  703,  702,  782 }, // 677
  {  678,  680,  903,  683,  681 }, // 678
  {  679,  680,  692,  691,  892 }, // 679
  {  681,  682,  706,  705,  782 }, // 680
  {  682,  683,  695,  694,  894 }, // 681
  {  684,  685,  709,  708,  784 }, // 682
  {  684,  686,  900,  689,  687 }, // 683
  {  687,  688,  712,  711,  784 }, // 684
  {  690,  691,  715,  714,  786 }, // 685
  {  690,  692,  903,  695,  693 }, // 686
  {  693,  694,  718,  717,  786 }, // 687
  {  696,  698,  906,  701,  699 }, // 688
  {  697,  698,  710,  709,  888 }, // 689
  {  700,  701,  713,  712,  890 }, // 690
  {  702,  704,  909,  707,  705 }, // 691
  {  703,  704,  716,  715,  892 }, // 692
  {  706,  707,  719,  718,  894 }, // 693
  {  708,  710,  906,  713,  711 }, // 694
  {  714,  716,  909,  719,  717 }, // 695
  {  720,  721,  864,  745,  744 }, // 696
  {  720,  722,  728,  726,  840 }, // 697
  {  721,  722,  876,  734,  733 }, // 698
  {  723,  724,  866,  748,  747 }, // 699
  {  723,  725,  731,  729,  842 }, // 700
  {  724,  725,  878,  737,  736 }, // 701
  {  726,  727,  868,  751,  750 }, // 702
  {  727,  728,  876,  740,  739 }, // 703
  {  729,  730,  870,  754,  753 }, // 704
  {  730,  731,  878,  743,  742 }, // 705
  {  732,  733,  864,  757,  756 }, // 706
  {  732,  734,  740,  738,  846 }, // 707
  {  735,  736,  866,  760,  759 }, // 708
  {  735,  737,  743,  741,  848 }, // 709
  {  738,  739,  868,  763,  762 }, // 710
  {  741,  742,  870,  766,  765 }, // 711
  {  744,  746,  752,  750,  840 }, // 712
  {  745,  746,  882,  758,  757 }, // 713
  {  747,  749,  755,  753,  842 }, // 714
  {  748,  749,  884,  761,  760 }, // 715
  {  751,  752,  882,  764,  763 }, // 716
  {  754,  755,  884,  767,  766 }, // 717
  {  756,  758,  764,  762,  846 }, // 718
  {  759,  761,  767,  765,  848 }, // 719
};
int edgeToFaceK120[1200][3] = { // Faces on each edge, in edge order
  {    0,    1,    2 }, //   0
  {    0,    3,    4 }, //   1
  {    1,    3,    5 }, //   2
  {    2,    4,    5 }, //   3
  {    6,    7,    8 }, //   4
  {    6,    9,   10 }, //   5
  {    7,    9,   11 }, //   6
  {    8,   10,   11 }, //   7
  {   12,   13,   14 }, //   8
  {   12,   15,   16 }, //   9
  {   13,   15,   17 }, //  10
  {   14,   16,   17 }, //  11
  {   18,   19,   20 }, //  12
  {   18,   21,   22 }, //  13
  {   19,   21,   23 }, //  14
  {   20,   22,   23 }, //  15
  {   24,   25,   26 }, //  16
  {   24,   27,   28 }, //  17
  {   25,   27,   29 }, //  18
  {   26,   28,   29 }, //  19
  {   30,   31,   32 }, //  20
  {   30,   33,   34 }, //  21
  {   31,   33,   35 }, //  22
  {   32,   34,   35 }, //  23
  {   36,   37,   38 }, //  24
  {   36,   39,   40 }, //  25
  {   37,   39,   41 }, //  26
  {   38,   40,   41 }, //  27
  {   42,   43,   44 }, //  28
  {   42,   45,   46 }, //  29
  {   43,   45,   47 }, //  30
  {   44,   46,   47 }, //  31
  {   48,   49,   50 }, //  32
  {   48,   51,   52 }, //  33
  {   49,   51,   53 }, //  34
  {   50,   52,   53 }, //  35
  {   54,   55,   56 }, //  36
  {   54,   57,   58 }, //  37
  {   55,   57,   59 }, //  38
  {   56,   58,   59 }, //  39
  {   60,   61,   62 }, //  40
  {   60,   63,   64 }, //  41
  {   61,   63,   65 }, //  42
  {   62,   64,   65 }, //  43
  {   66,   67,   68 }, //  44
  {   66,   69,   70 }, //  45
  {   67,   69,   71 }, //  46
  {   68,   70,   71 }, //  47
  {   72,   73,   74 }, //  48
  {   72,   75,   76 }, //  49
  {   73,   75,   77 }, //  50
  {   74,   76,   77 }, //  51
  {   78,   79,   80 }, //  52
  {   78,   81,   82 }, //  53
  {   79,   81,   83 }, //  54
  {   80,   82,   83 }, //  55
  {   84,   85,   86 }, //  56
  {   84,   87,   88 }, //  57
  {   85,   87,   89 }, //  58
  {   86,   88,   89 }, //  59
  {   90,   91,   92 }, //  60
  {   90,   93,   94 }, //  61
  {   91,   93,   95 }, //  62
  {   92,   94,   95 }, //  63
  {   96,   97,   98 }, //  64
  {   96,   99,  100 }, //  65
  {   97,   99,  101 }, //  66
  {   98,  100,  101 }, //  67
  {  102,  103,  104 }, //  68
  {  102,  105,  106 }, //  69
  {  103,  105,  107 }, //  70
  {  104,  106,  107 }, //  71
  {  108,  109,  110 }, //  72
  {  108,  111,  112 }, //  73
  {  109,  111,  113 }, //  74
  {  110,  112,  113 }, //  75
  {  114,  115,  116 }, //  76
  {  114,  117,  118 }, //  77
  {  115,  117,  119 }, //  78
  {  116,  118,  119 }, //  79
  {  120,  121,  122 }, //  80
  {  120,  123,  124 }, //  81
  {  121,  123,  125 }, //  82
  {  122,  124,  125 }, //  83
  {  126,  127,  128 }, //  84
  {  126,  129,  130 }, //  85
  {  127,  129,  131 }, //  86
  {  128,  130,  131 }, //  87
  {  132,  133,  134 }, //  88
  {  132,  135,  136 }, //  89
  {  133,  135,  137 }, //  90
  {  134,  136,  137 }, //  91
  {  138,  139,  140 }, //  92
  {  138,  141,  142 }, //  93
  {  139,  141,  143 }, //  94
  {  140,  142,  143 }, //  95
  {  144,  145,  146 }, //  96
  {  144,  147,  148 }, //  97
  {  145,  147,  149 }, //  98
  {  146,  148,  149 }, //  99
  {  150,  151,  152 }, // 100
  {  150,  153,  154 }, // 101
  {  151,  153,  155 }, // 102
  {  152,  154,  155 }, // 103
  {  156,  157,  158 }, // 104
  {  156,  159,  160 }, // 105
  {  157,  159,  161 }, // 106
  {  158,  160,  161 }, // 107
  {  162,  163,  164 }, // 108
  {  162,  165,  166 }, // 109
  {  163,  165,  167 }, // 110
  {  164,  166,  167 }, // 111
  {  168,  169,  170 }, // 112
  {  168,  171,  172 }, // 113
  {  169,  171,  173 }, // 114
  {  170,  172,  173 }, // 115
  {  174,  175,  176 }, // 116
  {  174,  177,  178 }, // 117
  {  175,  177,  179 }, // 118
  {  176,  178,  179 }, // 119
  {  180,  181,  182 }, // 120
  {  180,  183,  184 }, // 121
  {  181,  183,  185 }, // 122
  {  182,  184,  185 }, // 123
  {  186,  187,  188 }, // 124
  {  186,  189,  190 }, // 125
  {  187,  189,  191 }, // 126
  {  188,  190,  191 }, // 127
  {  192,  193,  194 }, // 128
  {  192,  195,  196 }, // 129
  {  193,  195,  197 }, // 130
  {  194,  196,  197 }, // 131
  {  198,  199,  200 }, // 132
  {  198,  201,  202 }, // 133
  {  199,  201,  203 }, // 134
  {  200,  202,  203 }, // 135
  {  204,  205,  206 }, // 136
  {  204,  207,  208 }, // 137
  {  205,  207,  209 }, // 138
  {  206,  208,  209 }, // 139
  {  210,  211,  212 }, // 140
  {  210,  213,  214 }, // 141
  {  211,  213,  215 }, // 142
  {  212,  214,  215 }, // 143
  {  216,  217,  218 }, // 144
  {  216,  219,  220 }, // 145
  {  217,  219,  221 }, // 146
  {  218,  220,  221 }, // 147
  {  222,  223,  224 }, // 148
  {  222,  225,  226 }, // 149
  {  223,  225,  227 }, // 150
  {  224,  226,  227 }, // 151
  {  228,  229,  230 }, // 152
  {  228,  231,  232 }, // 153
  {  229,  231,  233 }, // 154
  {  230,  232,  233 }, // 155
  {  234,  235,  236 }, // 156
  {  234,  237,  238 }, // 157
  {  235,  237,  239 }, // 158
  {  236,  238,  239 }, // 159
  {  240,  241,  242 }, // 160
  {  240,  243,  244 }, // 161
  {  241,  243,  245 }, // 162
  {  242,  244,  245 }, // 163
  {  246,  247,  248 }, // 164
  {  246,  249,  250 }, // 165
  {  247,  249,  251 }, // 166
  {  248,  250,  251 }, // 167
  {  252,  253,  254 }, // 168
  {  252,  255,  256 }, // 169
  {  253,  255,  257 }, // 170
  {  254,  256,  257 }, // 171
  {  258,  259,  260 }, // 172
  {  258,  261,  262 }, // 173
  {  259,  261,  263 }, // 174
  {  260,  262,  263 }, // 175
  {  264,  265,  266 }, // 176
  {  264,  267,  268 }, // 177
  {  265,  267,  269 }, // 178
  {  266,  268,  269 }, // 179
  {  270,  271,  272 }, // 180
  {  270,  273,  274 }, // 181
  {  271,  273,  275 }, // 182
  {  272,  274,  275 }, // 183
  {  276,  277,  278 }, // 184
  {  276,  279,  280 }, // 185
  {  277,  279,  281 }, // 186
  {  278,  280,  281 }, // 187
  {  282,  283,  284 }, // 188
  {  282,  285,  286 }, // 189
  {  283,  285,  287 }, // 190
  {  284,  286,  287 }, // 191
  {  288,  289,  290 }, // 192
  {  288,  291,  292 }, // 193
  {  289,  291,  293 }, // 194
  {  290,  292,  293 }, // 195
  {  294,  295,  296 }, // 196
  {  294,  297,  298 }, // 197
  {  295,  297,  299 }, // 198
  {  296,  298,  299 }, // 199
  {  300,  301,  302 }, // 200
  {  300,  303,  304 }, // 201
  {  301,  303,  305 }, // 202
  {  302,  304,  305 }, // 203
  {  306,  307,  308 }, // 204
  {  306,  309,  310 }, // 205
  {  307,  309,  311 }, // 206
  {  308,  310,  311 }, // 207
  {  312,  313,  314 }, // 208
  {  312,  315,  316 }, // 209
  {  313,  315,  317 }, // 210
  {  314,  316,  317 }, // 211
  {  318,  319,  320 }, // 212
  {  318,  321,  322 }, // 213
  {  319,  321,  323 }, // 214
  {  320,  322,  323 }, // 215
  {  324,  325,  326 }, // 216
  {  324,  327,  328 }, // 217
  {  325,  327,  329 }, // 218
  {  326,  328,  329 }, // 219
  {  330,  331,  332 }, // 220
  {  330,  333,  334 }, // 221
  {  331,  333,  335 }, // 222
  {  332,  334,  335 }, // 223
  {  336,  337,  338 }, // 224
  {  336,  339,  340 }, // 225
  {  337,  339,  341 }, // 226
  {  338,  340,  341 }, // 227
  {  342,  343,  344 }, // 228
  {  342,  345,  346 }, // 229
  {  343,  345,  347 }, // 230
  {  344,  346,  347 }, // 231
  {  348,  349,  350 }, // 232
  {  348,  351,  352 }, // 233
  {  349,  351,  353 }, // 234
  {  350,  352,  353 }, // 235
  {  354,  355,  356 }, // 236
  {  354,  357,  358 }, // 237
  {  355,  357,  359 }, // 238
  {  356,  358,  359 }, // 239
  {  360,  361,  362 }, // 240
  {  360,  363,  364 }, // 241
  {  361,  363,  365 }, // 242
  {  362,  364,  365 }, // 243
  {  366,  367,  368 }, // 244
  {  366,  369,  370 }, // 245
  {  367,  369,  371 }, // 246
  {  368,  370,  371 }, // 247
  {  372,  373,  374 }, // 248
  {  372,  375,  376 }, // 249
  {  373,  375,  377 }, // 250
  {  374,  376,  377 }, // 251
  {  378,  379,  380 }, // 252
  {  378,  381,  382 }, // 253
  {  379,  381,  383 }, // 254
  {  380,  382,  383 }, // 255
  {  384,  385,  386 }, // 256
  {  384,  387,  388 }, // 257
  {  385,  387,  389 }, // 258
  {  386,  388,  389 }, // 259
  {  390,  391,  392 }, // 260
  {  390,  393,  394 }, // 261
  {  391,  393,  395 }, // 262
  {  392,  394,  395 }, // 263
  {  396,  397,  398 }, // 264
  {  396,  399,  400 }, // 265
  {  397,  399,  401 }, // 266
  {  398,  400,  401 }, // 267
  {  402,  403,  404 }, // 268
  {  402,  405,  406 }, // 269
  {  403,  405,  407 }, // 270
  {  404,  406,  407 }, // 271
  {  408,  409,  410 }, // 272
  {  408,  411,  412 }, // 273
  {  409,  411,  413 }, // 274
  {  410,  412,  413 }, // 275
  {  414,  415,  416 }, // 276
  {  414,  417,  418 }, // 277
  {  415,  417,  419 }, // 278
  {  416,  418,  419 }, // 279
  {  420,  421,  422 }, // 280
  {  420,  423,  424 }, // 281
  {  421,  423,  425 }, // 282
  {  422,  424,  425 }, // 283
  {  426,  427,  428 }, // 284
  {  426,  429,  430 }, // 285
  {  427,  429,  431 }, // 286
  {  428,  430,  431 }, // 287
  {  432,  433,  434 }, // 288
  {  432,  435,  436 }, // 289
  {  433,  435,  437 }, // 290
  {  434,  436,  437 }, // 291
  {  438,  439,  440 }, // 292
  {  438,  441,  442 }, // 293
  {  439,  441,  443 }, // 294
  {  440,  442,  443 }, // 295
  {  444,  445,  446 }, // 296
  {  444,  447,  448 }, // 297
  {  445,  447,  449 }, // 298
  {  446,  448,  449 }, // 299
  {  450,  451,  452 }, // 300
  {  450,  453,  454 }, // 301
  {  451,  453,  455 }, // 302
  {  452,  454,  455 }, // 303
  {  456,  457,  458 }, // 304
  {  456,  459,  460 }, // 305
  {  457,  459,  461 }, // 306
  {  458,  460,  461 }, // 307
  {  462,  463,  464 }, // 308
  {  462,  465,  466 }, // 309
  {  463,  465,  467 }, // 310
  {  464,  466,  467 }, // 311
  {  468,  469,  470 }, // 312
  {  468,  471,  472 }, // 313
  {  469,  471,  473 }, // 314
  {  470,  472,  473 }, // 315
  {  474,  475,  476 }, // 316
  {  474,  477,  478 }, // 317
  {  475,  477,  479 }, // 318
  {  476,  478,  479 }, // 319
  {  480,  481,  482 }, // 320
  {  480,  483,  484 }, // 321
  {  481,  483,  485 }, // 322
  {  482,  484,  485 }, // 323
  {  486,  487,  488 }, // 324
  {  486,  489,  490 }, // 325
  {  487,  489,  491 }, // 326
  {  488,  490,  491 }, // 327
  {  492,  493,  494 }, // 328
  {  492,  495,  496 }, // 329
  {  493,  495,  497 }, // 330
  {  494,  496,  497 }, // 331
  {  498,  499,  500 }, // 332
  {  498,  501,  502 }, // 333
  {  499,  501,  503 }, // 334
  {  500,  502,  503 }, // 335
  {  504,  505,  506 }, // 336
  {  504,  507,  508 }, // 337
  {  505,  507,  509 }, // 338
  {  506,  508,  509 }, // 339
  {  510,  511,  512 }, // 340
  {  510,  513,  514 }, // 341
  {  511,  513,  515 }, // 342
  {  512,  514,  515 }, // 343
  {  516,  517,  518 }, // 344
  {  516,  519,  520 }, // 345
  {  517,  519,  521 }, // 346
  {  518,  520,  521 }, // 347
  {  522,  523,  524 }, // 348
  {  522,  525,  526 }, // 349
  {  523,  525,  527 }, // 350
  {  524,  526,  527 }, // 351
  {  528,  529,  530 }, // 352
  {  245,  435,  528 }, // 353
  {  245,  339,  529 }, // 354
  {  339,  435,  530 }, // 355
  {  531,  532,  533 }, // 356
  {  251,  441,  531 }, // 357
  {  251,  345,  532 }, // 358
  {  345,  441,  533 }, // 359
  {  534,  535,  536 }, // 360
  {  257,  447,  534 }, // 361
  {  257,  351,  535 }, // 362
  {  351,  447,  536 }, // 363
  {  537,  538,  539 }, // 364
  {  263,  453,  537 }, // 365
  {  263,  357,  538 }, // 366
  {  357,  453,  539 }, // 367
  {  540,  541,  542 }, // 368
  {  269,  459,  540 }, // 369
  {  269,  363,  541 }, // 370
  {  363,  459,  542 }, // 371
  {  543,  544,  545 }, // 372
  {  275,  465,  543 }, // 373
  {  275,  369,  544 }, // 374
  {  369,  465,  545 }, // 375
  {  546,  547,  548 }, // 376
  {  281,  471,  546 }, // 377
  {  281,  375,  547 }, // 378
  {  375,  471,  548 }, // 379
  {  549,  550,  551 }, // 380
  {  287,  477,  549 }, // 381
  {  287,  381,  550 }, // 382
  {  381,  477,  551 }, // 383
  {  293,  483,  528 }, // 384
  {  293,  387,  529 }, // 385
  {  387,  483,  530 }, // 386
  {  299,  489,  531 }, // 387
  {  299,  393,  532 }, // 388
  {  393,  489,  533 }, // 389
  {  305,  495,  534 }, // 390
  {  305,  399,  535 }, // 391
  {  399,  495,  536 }, // 392
  {  311,  501,  537 }, // 393
  {  311,  405,  538 }, // 394
  {  405,  501,  539 }, // 395
  {  317,  507,  540 }, // 396
  {  317,  411,  541 }, // 397
  {  411,  507,  542 }, // 398
  {  323,  513,  543 }, // 399
  {  323,  417,  544 }, // 400
  {  417,  513,  545 }, // 401
  {  329,  519,  546 }, // 402
  {  329,  423,  547 }, // 403
  {  423,  519,  548 }, // 404
  {  335,  525,  549 }, // 405
  {  335,  429,  550 }, // 406
  {  429,  525,  551 }, // 407
  {  552,  553,  554 }, // 408
  {  148,  437,  552 }, // 409
  {  341,  437,  553 }, // 410
  {  148,  341,  554 }, // 411
  {  555,  556,  557 }, // 412
  {  154,  443,  555 }, // 413
  {  347,  443,  556 }, // 414
  {  154,  347,  557 }, // 415
  {  558,  559,  560 }, // 416
  {  160,  449,  558 }, // 417
  {  353,  449,  559 }, // 418
  {  160,  353,  560 }, // 419
  {  561,  562,  563 }, // 420
  {  166,  455,  561 }, // 421
  {  359,  455,  562 }, // 422
  {  166,  359,  563 }, // 423
  {  172,  461,  552 }, // 424
  {  365,  461,  553 }, // 425
  {  172,  365,  554 }, // 426
  {  178,  467,  555 }, // 427
  {  371,  467,  556 }, // 428
  {  178,  371,  557 }, // 429
  {  184,  473,  558 }, // 430
  {  377,  473,  559 }, // 431
  {  184,  377,  560 }, // 432
  {  190,  479,  561 }, // 433
  {  383,  479,  562 }, // 434
  {  190,  383,  563 }, // 435
  {  564,  565,  566 }, // 436
  {  196,  485,  564 }, // 437
  {  389,  485,  565 }, // 438
  {  196,  389,  566 }, // 439
  {  567,  568,  569 }, // 440
  {  202,  491,  567 }, // 441
  {  395,  491,  568 }, // 442
  {  202,  395,  569 }, // 443
  {  570,  571,  572 }, // 444
  {  208,  497,  570 }, // 445
  {  401,  497,  571 }, // 446
  {  208,  401,  572 }, // 447
  {  573,  574,  575 }, // 448
  {  214,  503,  573 }, // 449
  {  407,  503,  574 }, // 450
  {  214,  407,  575 }, // 451
  {  220,  509,  564 }, // 452
  {  413,  509,  565 }, // 453
  {  220,  413,  566 }, // 454
  {  226,  515,  567 }, // 455
  {  419,  515,  568 }, // 456
  {  226,  419,  569 }, // 457
  {  232,  521,  570 }, // 458
  {  425,  521,  571 }, // 459
  {  232,  425,  572 }, // 460
  {  238,  527,  573 }, // 461
  {  431,  527,  574 }, // 462
  {  238,  431,  575 }, // 463
  {  576,  577,  578 }, // 464
  {  149,  243,  576 }, // 465
  {  243,  436,  577 }, // 466
  {  149,  436,  578 }, // 467
  {  579,  580,  581 }, // 468
  {  155,  249,  579 }, // 469
  {  249,  442,  580 }, // 470
  {  155,  442,  581 }, // 471
  {  161,  255,  576 }, // 472
  {  255,  448,  577 }, // 473
  {  161,  448,  578 }, // 474
  {  167,  261,  579 }, // 475
  {  261,  454,  580 }, // 476
  {  167,  454,  581 }, // 477
  {  582,  583,  584 }, // 478
  {  173,  267,  582 }, // 479
  {  267,  460,  583 }, // 480
  {  173,  460,  584 }, // 481
  {  585,  586,  587 }, // 482
  {  179,  273,  585 }, // 483
  {  273,  466,  586 }, // 484
  {  179,  466,  587 }, // 485
  {  185,  279,  582 }, // 486
  {  279,  472,  583 }, // 487
  {  185,  472,  584 }, // 488
  {  191,  285,  585 }, // 489
  {  285,  478,  586 }, // 490
  {  191,  478,  587 }, // 491
  {  588,  589,  590 }, // 492
  {  197,  291,  588 }, // 493
  {  291,  484,  589 }, // 494
  {  197,  484,  590 }, // 495
  {  591,  592,  593 }, // 496
  {  203,  297,  591 }, // 497
  {  297,  490,  592 }, // 498
  {  203,  490,  593 }, // 499
  {  209,  303,  588 }, // 500
  {  303,  496,  589 }, // 501
  {  209,  496,  590 }, // 502
  {  215,  309,  591 }, // 503
  {  309,  502,  592 }, // 504
  {  215,  502,  593 }, // 505
  {  594,  595,  596 }, // 506
  {  221,  315,  594 }, // 507
  {  315,  508,  595 }, // 508
  {  221,  508,  596 }, // 509
  {  597,  598,  599 }, // 510
  {  227,  321,  597 }, // 511
  {  321,  514,  598 }, // 512
  {  227,  514,  599 }, // 513
  {  233,  327,  594 }, // 514
  {  327,  520,  595 }, // 515
  {  233,  520,  596 }, // 516
  {  239,  333,  597 }, // 517
  {  333,  526,  598 }, // 518
  {  239,  526,  599 }, // 519
  {  600,  601,  602 }, // 520
  {  147,  340,  600 }, // 521
  {  244,  340,  601 }, // 522
  {  147,  244,  602 }, // 523
  {  153,  346,  600 }, // 524
  {  250,  346,  601 }, // 525
  {  153,  250,  602 }, // 526
  {  603,  604,  605 }, // 527
  {  159,  352,  603 }, // 528
  {  256,  352,  604 }, // 529
  {  159,  256,  605 }, // 530
  {  165,  358,  603 }, // 531
  {  262,  358,  604 }, // 532
  {  165,  262,  605 }, // 533
  {  606,  607,  608 }, // 534
  {  171,  364,  606 }, // 535
  {  268,  364,  607 }, // 536
  {  171,  268,  608 }, // 537
  {  177,  370,  606 }, // 538
  {  274,  370,  607 }, // 539
  {  177,  274,  608 }, // 540
  {  609,  610,  611 }, // 541
  {  183,  376,  609 }, // 542
  {  280,  376,  610 }, // 543
  {  183,  280,  611 }, // 544
  {  189,  382,  609 }, // 545
  {  286,  382,  610 }, // 546
  {  189,  286,  611 }, // 547
  {  612,  613,  614 }, // 548
  {  195,  388,  612 }, // 549
  {  292,  388,  613 }, // 550
  {  195,  292,  614 }, // 551
  {  201,  394,  612 }, // 552
  {  298,  394,  613 }, // 553
  {  201,  298,  614 }, // 554
  {  615,  616,  617 }, // 555
  {  207,  400,  615 }, // 556
  {  304,  400,  616 }, // 557
  {  207,  304,  617 }, // 558
  {  213,  406,  615 }, // 559
  {  310,  406,  616 }, // 560
  {  213,  310,  617 }, // 561
  {  618,  619,  620 }, // 562
  {  219,  412,  618 }, // 563
  {  316,  412,  619 }, // 564
  {  219,  316,  620 }, // 565
  {  225,  418,  618 }, // 566
  {  322,  418,  619 }, // 567
  {  225,  322,  620 }, // 568
  {  621,  622,  623 }, // 569
  {  231,  424,  621 }, // 570
  {  328,  424,  622 }, // 571
  {  231,  328,  623 }, // 572
  {  237,  430,  621 }, // 573
  {  334,  430,  622 }, // 574
  {  237,  334,  623 }, // 575
  {  144,  624,  625 }, // 576
  {  145,  624,  626 }, // 577
  {  146,  625,  626 }, // 578
  {  150,  624,  627 }, // 579
  {  151,  624,  628 }, // 580
  {  152,  627,  628 }, // 581
  {  156,  629,  630 }, // 582
  {  157,  626,  629 }, // 583
  {  158,  626,  630 }, // 584
  {  162,  629,  631 }, // 585
  {  163,  628,  629 }, // 586
  {  164,  628,  631 }, // 587
  {  168,  625,  632 }, // 588
  {  169,  632,  633 }, // 589
  {  170,  625,  633 }, // 590
  {  174,  627,  632 }, // 591
  {  175,  632,  634 }, // 592
  {  176,  627,  634 }, // 593
  {  180,  630,  635 }, // 594
  {  181,  633,  635 }, // 595
  {  182,  630,  633 }, // 596
  {  186,  631,  635 }, // 597
  {  187,  634,  635 }, // 598
  {  188,  631,  634 }, // 599
  {  192,  636,  637 }, // 600
  {  193,  636,  638 }, // 601
  {  194,  637,  638 }, // 602
  {  198,  636,  639 }, // 603
  {  199,  636,  640 }, // 604
  {  200,  639,  640 }, // 605
  {  204,  641,  642 }, // 606
  {  205,  638,  641 }, // 607
  {  206,  638,  642 }, // 608
  {  210,  641,  643 }, // 609
  {  211,  640,  641 }, // 610
  {  212,  640,  643 }, // 611
  {  216,  637,  644 }, // 612
  {  217,  644,  645 }, // 613
  {  218,  637,  645 }, // 614
  {  222,  639,  644 }, // 615
  {  223,  644,  646 }, // 616
  {  224,  639,  646 }, // 617
  {  228,  642,  647 }, // 618
  {  229,  645,  647 }, // 619
  {  230,  642,  645 }, // 620
  {  234,  643,  647 }, // 621
  {  235,  646,  647 }, // 622
  {  236,  643,  646 }, // 623
  {  240,  648,  649 }, // 624
  {  241,  648,  650 }, // 625
  {  242,  649,  650 }, // 626
  {  246,  649,  651 }, // 627
  {  247,  651,  652 }, // 628
  {  248,  649,  652 }, // 629
  {  252,  648,  653 }, // 630
  {  253,  648,  654 }, // 631
  {  254,  653,  654 }, // 632
  {  258,  651,  653 }, // 633
  {  259,  651,  655 }, // 634
  {  260,  653,  655 }, // 635
  {  264,  656,  657 }, // 636
  {  265,  656,  658 }, // 637
  {  266,  657,  658 }, // 638
  {  270,  657,  659 }, // 639
  {  271,  659,  660 }, // 640
  {  272,  657,  660 }, // 641
  {  276,  656,  661 }, // 642
  {  277,  656,  662 }, // 643
  {  278,  661,  662 }, // 644
  {  282,  659,  661 }, // 645
  {  283,  659,  663 }, // 646
  {  284,  661,  663 }, // 647
  {  288,  664,  665 }, // 648
  {  289,  650,  664 }, // 649
  {  290,  650,  665 }, // 650
  {  294,  665,  666 }, // 651
  {  295,  652,  666 }, // 652
  {  296,  652,  665 }, // 653
  {  300,  664,  667 }, // 654
  {  301,  654,  664 }, // 655
  {  302,  654,  667 }, // 656
  {  306,  666,  667 }, // 657
  {  307,  655,  666 }, // 658
  {  308,  655,  667 }, // 659
  {  312,  668,  669 }, // 660
  {  313,  658,  668 }, // 661
  {  314,  658,  669 }, // 662
  {  318,  669,  670 }, // 663
  {  319,  660,  670 }, // 664
  {  320,  660,  669 }, // 665
  {  324,  668,  671 }, // 666
  {  325,  662,  668 }, // 667
  {  326,  662,  671 }, // 668
  {  330,  670,  671 }, // 669
  {  331,  663,  670 }, // 670
  {  332,  663,  671 }, // 671
  {  336,  672,  673 }, // 672
  {  337,  672,  674 }, // 673
  {  338,  673,  674 }, // 674
  {  342,  673,  675 }, // 675
  {  343,  675,  676 }, // 676
  {  344,  673,  676 }, // 677
  {  348,  677,  678 }, // 678
  {  349,  677,  679 }, // 679
  {  350,  678,  679 }, // 680
  {  354,  678,  680 }, // 681
  {  355,  680,  681 }, // 682
  {  356,  678,  681 }, // 683
  {  360,  682,  683 }, // 684
  {  361,  674,  682 }, // 685
  {  362,  674,  683 }, // 686
  {  366,  683,  684 }, // 687
  {  367,  676,  684 }, // 688
  {  368,  676,  683 }, // 689
  {  372,  685,  686 }, // 690
  {  373,  679,  685 }, // 691
  {  374,  679,  686 }, // 692
  {  378,  686,  687 }, // 693
  {  379,  681,  687 }, // 694
  {  380,  681,  686 }, // 695
  {  384,  672,  688 }, // 696
  {  385,  672,  689 }, // 697
  {  386,  688,  689 }, // 698
  {  390,  675,  688 }, // 699
  {  391,  675,  690 }, // 700
  {  392,  688,  690 }, // 701
  {  396,  677,  691 }, // 702
  {  397,  677,  692 }, // 703
  {  398,  691,  692 }, // 704
  {  402,  680,  691 }, // 705
  {  403,  680,  693 }, // 706
  {  404,  691,  693 }, // 707
  {  408,  682,  694 }, // 708
  {  409,  682,  689 }, // 709
  {  410,  689,  694 }, // 710
  {  414,  684,  694 }, // 711
  {  415,  684,  690 }, // 712
  {  416,  690,  694 }, // 713
  {  420,  685,  695 }, // 714
  {  421,  685,  692 }, // 715
  {  422,  692,  695 }, // 716
  {  426,  687,  695 }, // 717
  {  427,  687,  693 }, // 718
  {  428,  693,  695 }, // 719
  {  432,  696,  697 }, // 720
  {  433,  696,  698 }, // 721
  {  434,  697,  698 }, // 722
  {  438,  699,  700 }, // 723
  {  439,  699,  701 }, // 724
  {  440,  700,  701 }, // 725
  {  444,  697,  702 }, // 726
  {  445,  702,  703 }, // 727
  {  446,  697,  703 }, // 728
  {  450,  700,  704 }, // 729
  {  451,  704,  705 }, // 730
  {  452,  700,  705 }, // 731
  {  456,  706,  707 }, // 732
  {  457,  698,  706 }, // 733
  {  458,  698,  707 }, // 734
  {  462,  708,  709 }, // 735
  {  463,  701,  708 }, // 736
  {  464,  701,  709 }, // 737
  {  468,  707,  710 }, // 738
  {  469,  703,  710 }, // 739
  {  470,  703,  707 }, // 740
  {  474,  709,  711 }, // 741
  {  475,  705,  711 }, // 742
  {  476,  705,  709 }, // 743
  {  480,  696,  712 }, // 744
  {  481,  696,  713 }, // 745
  {  482,  712,  713 }, // 746
  {  486,  699,  714 }, // 747
  {  487,  699,  715 }, // 748
  {  488,  714,  715 }, // 749
  {  492,  702,  712 }, // 750
  {  493,  702,  716 }, // 751
  {  494,  712,  716 }, // 752
  {  498,  704,  714 }, // 753
  {  499,  704,  717 }, // 754
  {  500,  714,  717 }, // 755
  {  504,  706,  718 }, // 756
  {  505,  706,  713 }, // 757
  {  506,  713,  718 }, // 758
  {  510,  708,  719 }, // 759
  {  511,  708,  715 }, // 760
  {  512,  715,  719 }, // 761
  {  516,  710,  718 }, // 762
  {  517,  710,  716 }, // 763
  {  518,  716,  718 }, // 764
  {  522,  711,  719 }, // 765
  {  523,  711,  717 }, // 766
  {  524,  717,  719 }, // 767
  {   24,  625,  627 }, // 768
  {   24,  144,  150 }, // 769
  {   30,  630,  631 }, // 770
  {   30,  156,  162 }, // 771
  {   24,  168,  174 }, // 772
  {   30,  180,  186 }, // 773
  {   36,  637,  639 }, // 774
  {   36,  192,  198 }, // 775
  {   42,  642,  643 }, // 776
  {   42,  204,  210 }, // 777
  {   36,  216,  222 }, // 778
  {   42,  228,  234 }, // 779
  {   72,  672,  675 }, // 780
  {   72,  336,  342 }, // 781
  {   78,  677,  680 }, // 782
  {   78,  348,  354 }, // 783
  {   84,  682,  684 }, // 784
  {   84,  360,  366 }, // 785
  {   90,  685,  687 }, // 786
  {   90,  372,  378 }, // 787
  {   72,  384,  390 }, // 788
  {   78,  396,  402 }, // 789
  {   84,  408,  414 }, // 790
  {   90,  420,  426 }, // 791
  {    0,  624,  629 }, // 792
  {    0,  145,  157 }, // 793
  {    0,  151,  163 }, // 794
  {    6,  632,  635 }, // 795
  {    6,  169,  181 }, // 796
  {    6,  175,  187 }, // 797
  {   12,  636,  641 }, // 798
  {   12,  193,  205 }, // 799
  {   12,  199,  211 }, // 800
  {   18,  644,  647 }, // 801
  {   18,  217,  229 }, // 802
  {   18,  223,  235 }, // 803
  {   48,  626,  633 }, // 804
  {   48,  146,  170 }, // 805
  {   54,  628,  634 }, // 806
  {   54,  152,  176 }, // 807
  {   48,  158,  182 }, // 808
  {   54,  164,  188 }, // 809
  {   60,  638,  645 }, // 810
  {   60,  194,  218 }, // 811
  {   66,  640,  646 }, // 812
  {   66,  200,  224 }, // 813
  {   60,  206,  230 }, // 814
  {   66,  212,  236 }, // 815
  {    5,  648,  651 }, // 816
  {    5,  240,  246 }, // 817
  {    5,  252,  258 }, // 818
  {   11,  656,  659 }, // 819
  {   11,  264,  270 }, // 820
  {   11,  276,  282 }, // 821
  {   17,  664,  666 }, // 822
  {   17,  288,  294 }, // 823
  {   17,  300,  306 }, // 824
  {   23,  668,  670 }, // 825
  {   23,  312,  318 }, // 826
  {   23,  324,  330 }, // 827
  {   96,  650,  654 }, // 828
  {   96,  241,  253 }, // 829
  {  102,  652,  655 }, // 830
  {  102,  247,  259 }, // 831
  {  108,  658,  662 }, // 832
  {  108,  265,  277 }, // 833
  {  114,  660,  663 }, // 834
  {  114,  271,  283 }, // 835
  {   96,  289,  301 }, // 836
  {  102,  295,  307 }, // 837
  {  108,  313,  325 }, // 838
  {  114,  319,  331 }, // 839
  {  101,  697,  712 }, // 840
  {  101,  432,  480 }, // 841
  {  107,  700,  714 }, // 842
  {  107,  438,  486 }, // 843
  {  101,  444,  492 }, // 844
  {  107,  450,  498 }, // 845
  {  113,  707,  718 }, // 846
  {  113,  456,  504 }, // 847
  {  119,  709,  719 }, // 848
  {  119,  462,  510 }, // 849
  {  113,  468,  516 }, // 850
  {  119,  474,  522 }, // 851
  {   77,  649,  665 }, // 852
  {   77,  242,  290 }, // 853
  {   77,  248,  296 }, // 854
  {   83,  653,  667 }, // 855
  {   83,  254,  302 }, // 856
  {   83,  260,  308 }, // 857
  {   89,  657,  669 }, // 858
  {   89,  266,  314 }, // 859
  {   89,  272,  320 }, // 860
  {   95,  661,  671 }, // 861
  {   95,  278,  326 }, // 862
  {   95,  284,  332 }, // 863
  {  120,  696,  706 }, // 864
  {  120,  433,  457 }, // 865
  {  126,  699,  708 }, // 866
  {  126,  439,  463 }, // 867
  {  132,  702,  710 }, // 868
  {  132,  445,  469 }, // 869
  {  138,  704,  711 }, // 870
  {  138,  451,  475 }, // 871
  {  120,  481,  505 }, // 872
  {  126,  487,  511 }, // 873
  {  132,  493,  517 }, // 874
  {  138,  499,  523 }, // 875
  {   53,  698,  703 }, // 876
  {   53,  434,  446 }, // 877
  {   59,  701,  705 }, // 878
  {   59,  440,  452 }, // 879
  {   53,  458,  470 }, // 880
  {   59,  464,  476 }, // 881
  {   65,  713,  716 }, // 882
  {   65,  482,  494 }, // 883
  {   71,  715,  717 }, // 884
  {   71,  488,  500 }, // 885
  {   65,  506,  518 }, // 886
  {   71,  512,  524 }, // 887
  {  125,  674,  689 }, // 888
  {  125,  337,  385 }, // 889
  {  131,  676,  690 }, // 890
  {  131,  343,  391 }, // 891
  {  137,  679,  692 }, // 892
  {  137,  349,  397 }, // 893
  {  143,  681,  693 }, // 894
  {  143,  355,  403 }, // 895
  {  125,  361,  409 }, // 896
  {  131,  367,  415 }, // 897
  {  137,  373,  421 }, // 898
  {  143,  379,  427 }, // 899
  {   29,  673,  683 }, // 900
  {   29,  338,  362 }, // 901
  {   29,  344,  368 }, // 902
  {   35,  678,  686 }, // 903
  {   35,  350,  374 }, // 904
  {   35,  356,  380 }, // 905
  {   41,  688,  694 }, // 906
  {   41,  386,  410 }, // 907
  {   41,  392,  416 }, // 908
  {   47,  691,  695 }, // 909
  {   47,  398,  422 }, // 910
  {   47,  404,  428 }, // 911
  {   25,  144,  600 }, // 912
  {   26,  150,  600 }, // 913
  {   31,  156,  603 }, // 914
  {   32,  162,  603 }, // 915
  {   27,  168,  606 }, // 916
  {   28,  174,  606 }, // 917
  {   33,  180,  609 }, // 918
  {   34,  186,  609 }, // 919
  {   37,  192,  612 }, // 920
  {   38,  198,  612 }, // 921
  {   43,  204,  615 }, // 922
  {   44,  210,  615 }, // 923
  {   39,  216,  618 }, // 924
  {   40,  222,  618 }, // 925
  {   45,  228,  621 }, // 926
  {   46,  234,  621 }, // 927
  {   73,  336,  601 }, // 928
  {   74,  342,  601 }, // 929
  {   79,  348,  604 }, // 930
  {   80,  354,  604 }, // 931
  {   85,  360,  607 }, // 932
  {   86,  366,  607 }, // 933
  {   91,  372,  610 }, // 934
  {   92,  378,  610 }, // 935
  {   75,  384,  613 }, // 936
  {   76,  390,  613 }, // 937
  {   81,  396,  616 }, // 938
  {   82,  402,  616 }, // 939
  {   87,  408,  619 }, // 940
  {   88,  414,  619 }, // 941
  {   93,  420,  622 }, // 942
  {   94,  426,  622 }, // 943
  {    1,  145,  576 }, // 944
  {    2,  157,  576 }, // 945
  {    3,  151,  579 }, // 946
  {    4,  163,  579 }, // 947
  {    7,  169,  582 }, // 948
  {    8,  181,  582 }, // 949
  {    9,  175,  585 }, // 950
  {   10,  187,  585 }, // 951
  {   13,  193,  588 }, // 952
  {   14,  205,  588 }, // 953
  {   15,  199,  591 }, // 954
  {   16,  211,  591 }, // 955
  {   19,  217,  594 }, // 956
  {   20,  229,  594 }, // 957
  {   21,  223,  597 }, // 958
  {   22,  235,  597 }, // 959
  {   49,  146,  552 }, // 960
  {   50,  170,  552 }, // 961
  {   55,  152,  555 }, // 962
  {   56,  176,  555 }, // 963
  {   51,  158,  558 }, // 964
  {   52,  182,  558 }, // 965
  {   57,  164,  561 }, // 966
  {   58,  188,  561 }, // 967
  {   61,  194,  564 }, // 968
  {   62,  218,  564 }, // 969
  {   67,  200,  567 }, // 970
  {   68,  224,  567 }, // 971
  {   63,  206,  570 }, // 972
  {   64,  230,  570 }, // 973
  {   69,  212,  573 }, // 974
  {   70,  236,  573 }, // 975
  {    1,  240,  602 }, // 976
  {    3,  246,  602 }, // 977
  {    2,  252,  605 }, // 978
  {    4,  258,  605 }, // 979
  {    7,  264,  608 }, // 980
  {    9,  270,  608 }, // 981
  {    8,  276,  611 }, // 982
  {   10,  282,  611 }, // 983
  {   13,  288,  614 }, // 984
  {   15,  294,  614 }, // 985
  {   14,  300,  617 }, // 986
  {   16,  306,  617 }, // 987
  {   19,  312,  620 }, // 988
  {   21,  318,  620 }, // 989
  {   20,  324,  623 }, // 990
  {   22,  330,  623 }, // 991
  {   97,  241,  577 }, // 992
  {   98,  253,  577 }, // 993
  {  103,  247,  580 }, // 994
  {  104,  259,  580 }, // 995
  {  109,  265,  583 }, // 996
  {  110,  277,  583 }, // 997
  {  115,  271,  586 }, // 998
  {  116,  283,  586 }, // 999
  {   99,  289,  589 }, //1000
  {  100,  301,  589 }, //1001
  {  105,  295,  592 }, //1002
  {  106,  307,  592 }, //1003
  {  111,  313,  595 }, //1004
  {  112,  325,  595 }, //1005
  {  117,  319,  598 }, //1006
  {  118,  331,  598 }, //1007
  {   97,  432,  528 }, //1008
  {   99,  480,  528 }, //1009
  {  103,  438,  531 }, //1010
  {  105,  486,  531 }, //1011
  {   98,  444,  534 }, //1012
  {  100,  492,  534 }, //1013
  {  104,  450,  537 }, //1014
  {  106,  498,  537 }, //1015
  {  109,  456,  540 }, //1016
  {  111,  504,  540 }, //1017
  {  115,  462,  543 }, //1018
  {  117,  510,  543 }, //1019
  {  110,  468,  546 }, //1020
  {  112,  516,  546 }, //1021
  {  116,  474,  549 }, //1022
  {  118,  522,  549 }, //1023
  {   73,  242,  529 }, //1024
  {   75,  290,  529 }, //1025
  {   74,  248,  532 }, //1026
  {   76,  296,  532 }, //1027
  {   79,  254,  535 }, //1028
  {   81,  302,  535 }, //1029
  {   80,  260,  538 }, //1030
  {   82,  308,  538 }, //1031
  {   85,  266,  541 }, //1032
  {   87,  314,  541 }, //1033
  {   86,  272,  544 }, //1034
  {   88,  320,  544 }, //1035
  {   91,  278,  547 }, //1036
  {   93,  326,  547 }, //1037
  {   92,  284,  550 }, //1038
  {   94,  332,  550 }, //1039
  {  121,  433,  553 }, //1040
  {  122,  457,  553 }, //1041
  {  127,  439,  556 }, //1042
  {  128,  463,  556 }, //1043
  {  133,  445,  559 }, //1044
  {  134,  469,  559 }, //1045
  {  139,  451,  562 }, //1046
  {  140,  475,  562 }, //1047
  {  123,  481,  565 }, //1048
  {  124,  505,  565 }, //1049
  {  129,  487,  568 }, //1050
  {  130,  511,  568 }, //1051
  {  135,  493,  571 }, //1052
  {  136,  517,  571 }, //1053
  {  141,  499,  574 }, //1054
  {  142,  523,  574 }, //1055
  {   49,  434,  578 }, //1056
  {   51,  446,  578 }, //1057
  {   55,  440,  581 }, //1058
  {   57,  452,  581 }, //1059
  {   50,  458,  584 }, //1060
  {   52,  470,  584 }, //1061
  {   56,  464,  587 }, //1062
  {   58,  476,  587 }, //1063
  {   61,  482,  590 }, //1064
  {   63,  494,  590 }, //1065
  {   67,  488,  593 }, //1066
  {   69,  500,  593 }, //1067
  {   62,  506,  596 }, //1068
  {   64,  518,  596 }, //1069
  {   68,  512,  599 }, //1070
  {   70,  524,  599 }, //1071
  {  121,  337,  530 }, //1072
  {  123,  385,  530 }, //1073
  {  127,  343,  533 }, //1074
  {  129,  391,  533 }, //1075
  {  133,  349,  536 }, //1076
  {  135,  397,  536 }, //1077
  {  139,  355,  539 }, //1078
  {  141,  403,  539 }, //1079
  {  122,  361,  542 }, //1080
  {  124,  409,  542 }, //1081
  {  128,  367,  545 }, //1082
  {  130,  415,  545 }, //1083
  {  134,  373,  548 }, //1084
  {  136,  421,  548 }, //1085
  {  140,  379,  551 }, //1086
  {  142,  427,  551 }, //1087
  {   25,  338,  554 }, //1088
  {   27,  362,  554 }, //1089
  {   26,  344,  557 }, //1090
  {   28,  368,  557 }, //1091
  {   31,  350,  560 }, //1092
  {   33,  374,  560 }, //1093
  {   32,  356,  563 }, //1094
  {   34,  380,  563 }, //1095
  {   37,  386,  566 }, //1096
  {   39,  410,  566 }, //1097
  {   38,  392,  569 }, //1098
  {   40,  416,  569 }, //1099
  {   43,  398,  572 }, //1100
  {   45,  422,  572 }, //1101
  {   44,  404,  575 }, //1102
  {   46,  428,  575 }, //1103
  {   25,  148,  340 }, //1104
  {   31,  160,  352 }, //1105
  {   27,  172,  364 }, //1106
  {   33,  184,  376 }, //1107
  {   37,  196,  388 }, //1108
  {   43,  208,  400 }, //1109
  {   39,  220,  412 }, //1110
  {   45,  232,  424 }, //1111
  {   26,  154,  346 }, //1112
  {   32,  166,  358 }, //1113
  {   28,  178,  370 }, //1114
  {   34,  190,  382 }, //1115
  {   38,  202,  394 }, //1116
  {   44,  214,  406 }, //1117
  {   40,  226,  418 }, //1118
  {   46,  238,  430 }, //1119
  {   73,  244,  339 }, //1120
  {   79,  256,  351 }, //1121
  {   85,  268,  363 }, //1122
  {   91,  280,  375 }, //1123
  {   75,  292,  387 }, //1124
  {   81,  304,  399 }, //1125
  {   87,  316,  411 }, //1126
  {   93,  328,  423 }, //1127
  {   74,  250,  345 }, //1128
  {   80,  262,  357 }, //1129
  {   86,  274,  369 }, //1130
  {   92,  286,  381 }, //1131
  {   76,  298,  393 }, //1132
  {   82,  310,  405 }, //1133
  {   88,  322,  417 }, //1134
  {   94,  334,  429 }, //1135
  {    1,  147,  243 }, //1136
  {    3,  153,  249 }, //1137
  {    7,  171,  267 }, //1138
  {    9,  177,  273 }, //1139
  {   13,  195,  291 }, //1140
  {   15,  201,  297 }, //1141
  {   19,  219,  315 }, //1142
  {   21,  225,  321 }, //1143
  {    2,  159,  255 }, //1144
  {    4,  165,  261 }, //1145
  {    8,  183,  279 }, //1146
  {   10,  189,  285 }, //1147
  {   14,  207,  303 }, //1148
  {   16,  213,  309 }, //1149
  {   20,  231,  327 }, //1150
  {   22,  237,  333 }, //1151
  {   49,  149,  437 }, //1152
  {   55,  155,  443 }, //1153
  {   51,  161,  449 }, //1154
  {   57,  167,  455 }, //1155
  {   61,  197,  485 }, //1156
  {   67,  203,  491 }, //1157
  {   63,  209,  497 }, //1158
  {   69,  215,  503 }, //1159
  {   50,  173,  461 }, //1160
  {   56,  179,  467 }, //1161
  {   52,  185,  473 }, //1162
  {   58,  191,  479 }, //1163
  {   62,  221,  509 }, //1164
  {   68,  227,  515 }, //1165
  {   64,  233,  521 }, //1166
  {   70,  239,  527 }, //1167
  {   97,  245,  436 }, //1168
  {  103,  251,  442 }, //1169
  {  109,  269,  460 }, //1170
  {  115,  275,  466 }, //1171
  {   99,  293,  484 }, //1172
  {  105,  299,  490 }, //1173
  {  111,  317,  508 }, //1174
  {  117,  323,  514 }, //1175
  {   98,  257,  448 }, //1176
  {  104,  263,  454 }, //1177
  {  110,  281,  472 }, //1178
  {  116,  287,  478 }, //1179
  {  100,  305,  496 }, //1180
  {  106,  311,  502 }, //1181
  {  112,  329,  520 }, //1182
  {  118,  335,  526 }, //1183
  {  121,  341,  435 }, //1184
  {  127,  347,  441 }, //1185
  {  133,  353,  447 }, //1186
  {  139,  359,  453 }, //1187
  {  123,  389,  483 }, //1188
  {  129,  395,  489 }, //1189
  {  135,  401,  495 }, //1190
  {  141,  407,  501 }, //1191
  {  122,  365,  459 }, //1192
  {  128,  371,  465 }, //1193
  {  134,  377,  471 }, //1194
  {  140,  383,  477 }, //1195
  {  124,  413,  507 }, //1196
  {  130,  419,  513 }, //1197
  {  136,  425,  519 }, //1198
  {  142,  431,  525 }, //1199
};
int faceToFaceK120[720][10] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,  151,  163,  624,  629,  145,  157 }, //   0
  {    0,    2,    3,    5,  240,  602,  147,  243,  145,  576 }, //   1
  {    0,    1,    4,    5,  252,  605,  159,  255,  157,  576 }, //   2
  {    0,    4,    1,    5,  246,  602,  153,  249,  151,  579 }, //   3
  {    0,    3,    2,    5,  258,  605,  165,  261,  163,  579 }, //   4
  {    1,    3,    2,    4,  252,  258,  648,  651,  240,  246 }, //   5
  {    7,    8,    9,   10,  175,  187,  632,  635,  169,  181 }, //   6
  {    6,    8,    9,   11,  264,  608,  171,  267,  169,  582 }, //   7
  {    6,    7,   10,   11,  276,  611,  183,  279,  181,  582 }, //   8
  {    6,   10,    7,   11,  270,  608,  177,  273,  175,  585 }, //   9
  {    6,    9,    8,   11,  282,  611,  189,  285,  187,  585 }, //  10
  {    7,    9,    8,   10,  276,  282,  656,  659,  264,  270 }, //  11
  {   13,   14,   15,   16,  199,  211,  636,  641,  193,  205 }, //  12
  {   12,   14,   15,   17,  288,  614,  195,  291,  193,  588 }, //  13
  {   12,   13,   16,   17,  300,  617,  207,  303,  205,  588 }, //  14
  {   12,   16,   13,   17,  294,  614,  201,  297,  199,  591 }, //  15
  {   12,   15,   14,   17,  306,  617,  213,  309,  211,  591 }, //  16
  {   13,   15,   14,   16,  300,  306,  664,  666,  288,  294 }, //  17
  {   19,   20,   21,   22,  223,  235,  644,  647,  217,  229 }, //  18
  {   18,   20,   21,   23,  312,  620,  219,  315,  217,  594 }, //  19
  {   18,   19,   22,   23,  324,  623,  231,  327,  229,  594 }, //  20
  {   18,   22,   19,   23,  318,  620,  225,  321,  223,  597 }, //  21
  {   18,   21,   20,   23,  330,  623,  237,  333,  235,  597 }, //  22
  {   19,   21,   20,   22,  324,  330,  668,  670,  312,  318 }, //  23
  {   25,   26,   27,   28,  168,  174,  625,  627,  144,  150 }, //  24
  {   24,   26,   27,   29,  338,  554,  148,  340,  144,  600 }, //  25
  {   24,   25,   28,   29,  344,  557,  154,  346,  150,  600 }, //  26
  {   24,   28,   25,   29,  362,  554,  172,  364,  168,  606 }, //  27
  {   24,   27,   26,   29,  368,  557,  178,  370,  174,  606 }, //  28
  {   25,   27,   26,   28,  344,  368,  673,  683,  338,  362 }, //  29
  {   31,   32,   33,   34,  180,  186,  630,  631,  156,  162 }, //  30
  {   30,   32,   33,   35,  350,  560,  160,  352,  156,  603 }, //  31
  {   30,   31,   34,   35,  356,  563,  166,  358,  162,  603 }, //  32
  {   30,   34,   31,   35,  374,  560,  184,  376,  180,  609 }, //  33
  {   30,   33,   32,   35,  380,  563,  190,  382,  186,  609 }, //  34
  {   31,   33,   32,   34,  356,  380,  678,  686,  350,  374 }, //  35
  {   37,   38,   39,   40,  216,  222,  637,  639,  192,  198 }, //  36
  {   36,   38,   39,   41,  386,  566,  196,  388,  192,  612 }, //  37
  {   36,   37,   40,   41,  392,  569,  202,  394,  198,  612 }, //  38
  {   36,   40,   37,   41,  410,  566,  220,  412,  216,  618 }, //  39
  {   36,   39,   38,   41,  416,  569,  226,  418,  222,  618 }, //  40
  {   37,   39,   38,   40,  392,  416,  688,  694,  386,  410 }, //  41
  {   43,   44,   45,   46,  228,  234,  642,  643,  204,  210 }, //  42
  {   42,   44,   45,   47,  398,  572,  208,  400,  204,  615 }, //  43
  {   42,   43,   46,   47,  404,  575,  214,  406,  210,  615 }, //  44
  {   42,   46,   43,   47,  422,  572,  232,  424,  228,  621 }, //  45
  {   42,   45,   44,   47,  428,  575,  238,  430,  234,  621 }, //  46
  {   43,   45,   44,   46,  404,  428,  691,  695,  398,  422 }, //  47
  {   49,   50,   51,   52,  158,  182,  626,  633,  146,  170 }, //  48
  {   48,   50,   51,   53,  434,  578,  149,  437,  146,  552 }, //  49
  {   48,   49,   52,   53,  458,  584,  173,  461,  170,  552 }, //  50
  {   48,   52,   49,   53,  446,  578,  161,  449,  158,  558 }, //  51
  {   48,   51,   50,   53,  470,  584,  185,  473,  182,  558 }, //  52
  {   49,   51,   50,   52,  458,  470,  698,  703,  434,  446 }, //  53
  {   55,   56,   57,   58,  164,  188,  628,  634,  152,  176 }, //  54
  {   54,   56,   57,   59,  440,  581,  155,  443,  152,  555 }, //  55
  {   54,   55,   58,   59,  464,  587,  179,  467,  176,  555 }, //  56
  {   54,   58,   55,   59,  452,  581,  167,  455,  164,  561 }, //  57
  {   54,   57,   56,   59,  476,  587,  191,  479,  188,  561 }, //  58
  {   55,   57,   56,   58,  464,  476,  701,  705,  440,  452 }, //  59
  {   61,   62,   63,   64,  206,  230,  638,  645,  194,  218 }, //  60
  {   60,   62,   63,   65,  482,  590,  197,  485,  194,  564 }, //  61
  {   60,   61,   64,   65,  506,  596,  221,  509,  218,  564 }, //  62
  {   60,   64,   61,   65,  494,  590,  209,  497,  206,  570 }, //  63
  {   60,   63,   62,   65,  518,  596,  233,  521,  230,  570 }, //  64
  {   61,   63,   62,   64,  506,  518,  713,  716,  482,  494 }, //  65
  {   67,   68,   69,   70,  212,  236,  640,  646,  200,  224 }, //  66
  {   66,   68,   69,   71,  488,  593,  203,  491,  200,  567 }, //  67
  {   66,   67,   70,   71,  512,  599,  227,  515,  224,  567 }, //  68
  {   66,   70,   67,   71,  500,  593,  215,  503,  212,  573 }, //  69
  {   66,   69,   68,   71,  524,  599,  239,  527,  236,  573 }, //  70
  {   67,   69,   68,   70,  512,  524,  715,  717,  488,  500 }, //  71
  {   73,   74,   75,   76,  384,  390,  672,  675,  336,  342 }, //  72
  {   72,   74,   75,   77,  242,  529,  244,  339,  336,  601 }, //  73
  {   72,   73,   76,   77,  248,  532,  250,  345,  342,  601 }, //  74
  {   72,   76,   73,   77,  290,  529,  292,  387,  384,  613 }, //  75
  {   72,   75,   74,   77,  296,  532,  298,  393,  390,  613 }, //  76
  {   73,   75,   74,   76,  248,  296,  649,  665,  242,  290 }, //  77
  {   79,   80,   81,   82,  396,  402,  677,  680,  348,  354 }, //  78
  {   78,   80,   81,   83,  254,  535,  256,  351,  348,  604 }, //  79
  {   78,   79,   82,   83,  260,  538,  262,  357,  354,  604 }, //  80
  {   78,   82,   79,   83,  302,  535,  304,  399,  396,  616 }, //  81
  {   78,   81,   80,   83,  308,  538,  310,  405,  402,  616 }, //  82
  {   79,   81,   80,   82,  260,  308,  653,  667,  254,  302 }, //  83
  {   85,   86,   87,   88,  408,  414,  682,  684,  360,  366 }, //  84
  {   84,   86,   87,   89,  266,  541,  268,  363,  360,  607 }, //  85
  {   84,   85,   88,   89,  272,  544,  274,  369,  366,  607 }, //  86
  {   84,   88,   85,   89,  314,  541,  316,  411,  408,  619 }, //  87
  {   84,   87,   86,   89,  320,  544,  322,  417,  414,  619 }, //  88
  {   85,   87,   86,   88,  272,  320,  657,  669,  266,  314 }, //  89
  {   91,   92,   93,   94,  420,  426,  685,  687,  372,  378 }, //  90
  {   90,   92,   93,   95,  278,  547,  280,  375,  372,  610 }, //  91
  {   90,   91,   94,   95,  284,  550,  286,  381,  378,  610 }, //  92
  {   90,   94,   91,   95,  326,  547,  328,  423,  420,  622 }, //  93
  {   90,   93,   92,   95,  332,  550,  334,  429,  426,  622 }, //  94
  {   91,   93,   92,   94,  284,  332,  661,  671,  278,  326 }, //  95
  {   97,   98,   99,  100,  289,  301,  650,  654,  241,  253 }, //  96
  {   96,   98,   99,  101,  432,  528,  245,  436,  241,  577 }, //  97
  {   96,   97,  100,  101,  444,  534,  257,  448,  253,  577 }, //  98
  {   96,  100,   97,  101,  480,  528,  293,  484,  289,  589 }, //  99
  {   96,   99,   98,  101,  492,  534,  305,  496,  301,  589 }, // 100
  {   97,   99,   98,  100,  444,  492,  697,  712,  432,  480 }, // 101
  {  103,  104,  105,  106,  295,  307,  652,  655,  247,  259 }, // 102
  {  102,  104,  105,  107,  438,  531,  251,  442,  247,  580 }, // 103
  {  102,  103,  106,  107,  450,  537,  263,  454,  259,  580 }, // 104
  {  102,  106,  103,  107,  486,  531,  299,  490,  295,  592 }, // 105
  {  102,  105,  104,  107,  498,  537,  311,  502,  307,  592 }, // 106
  {  103,  105,  104,  106,  450,  498,  700,  714,  438,  486 }, // 107
  {  109,  110,  111,  112,  313,  325,  658,  662,  265,  277 }, // 108
  {  108,  110,  111,  113,  456,  540,  269,  460,  265,  583 }, // 109
  {  108,  109,  112,  113,  468,  546,  281,  472,  277,  583 }, // 110
  {  108,  112,  109,  113,  504,  540,  317,  508,  313,  595 }, // 111
  {  108,  111,  110,  113,  516,  546,  329,  520,  325,  595 }, // 112
  {  109,  111,  110,  112,  468,  516,  707,  718,  456,  504 }, // 113
  {  115,  116,  117,  118,  319,  331,  660,  663,  271,  283 }, // 114
  {  114,  116,  117,  119,  462,  543,  275,  466,  271,  586 }, // 115
  {  114,  115,  118,  119,  474,  549,  287,  478,  283,  586 }, // 116
  {  114,  118,  115,  119,  510,  543,  323,  514,  319,  598 }, // 117
  {  114,  117,  116,  119,  522,  549,  335,  526,  331,  598 }, // 118
  {  115,  117,  116,  118,  474,  522,  709,  719,  462,  510 }, // 119
  {  121,  122,  123,  124,  481,  505,  696,  706,  433,  457 }, // 120
  {  120,  122,  123,  125,  337,  530,  341,  435,  433,  553 }, // 121
  {  120,  121,  124,  125,  361,  542,  365,  459,  457,  553 }, // 122
  {  120,  124,  121,  125,  385,  530,  389,  483,  481,  565 }, // 123
  {  120,  123,  122,  125,  409,  542,  413,  507,  505,  565 }, // 124
  {  121,  123,  122,  124,  361,  409,  674,  689,  337,  385 }, // 125
  {  127,  128,  129,  130,  487,  511,  699,  708,  439,  463 }, // 126
  {  126,  128,  129,  131,  343,  533,  347,  441,  439,  556 }, // 127
  {  126,  127,  130,  131,  367,  545,  371,  465,  463,  556 }, // 128
  {  126,  130,  127,  131,  391,  533,  395,  489,  487,  568 }, // 129
  {  126,  129,  128,  131,  415,  545,  419,  513,  511,  568 }, // 130
  {  127,  129,  128,  130,  367,  415,  676,  690,  343,  391 }, // 131
  {  133,  134,  135,  136,  493,  517,  702,  710,  445,  469 }, // 132
  {  132,  134,  135,  137,  349,  536,  353,  447,  445,  559 }, // 133
  {  132,  133,  136,  137,  373,  548,  377,  471,  469,  559 }, // 134
  {  132,  136,  133,  137,  397,  536,  401,  495,  493,  571 }, // 135
  {  132,  135,  134,  137,  421,  548,  425,  519,  517,  571 }, // 136
  {  133,  135,  134,  136,  373,  421,  679,  692,  349,  397 }, // 137
  {  139,  140,  141,  142,  499,  523,  704,  711,  451,  475 }, // 138
  {  138,  140,  141,  143,  355,  539,  359,  453,  451,  562 }, // 139
  {  138,  139,  142,  143,  379,  551,  383,  477,  475,  562 }, // 140
  {  138,  142,  139,  143,  403,  539,  407,  501,  499,  574 }, // 141
  {  138,  141,  140,  143,  427,  551,  431,  525,  523,  574 }, // 142
  {  139,  141,  140,  142,  379,  427,  681,  693,  355,  403 }, // 143
  {  145,  146,  147,  148,   25,  600,   24,  150,  624,  625 }, // 144
  {  144,  146,  147,  149,    1,  576,    0,  157,  624,  626 }, // 145
  {  144,  145,  148,  149,   49,  552,   48,  170,  625,  626 }, // 146
  {  144,  148,  145,  149,    1,  243,  244,  602,  340,  600 }, // 147
  {  144,  147,  146,  149,  437,  552,  341,  554,   25,  340 }, // 148
  {  145,  147,  146,  148,   49,  437,  436,  578,  243,  576 }, // 149
  {  151,  152,  153,  154,   26,  600,   24,  144,  624,  627 }, // 150
  {  150,  152,  153,  155,    3,  579,    0,  163,  624,  628 }, // 151
  {  150,  151,  154,  155,   55,  555,   54,  176,  627,  628 }, // 152
  {  150,  154,  151,  155,    3,  249,  250,  602,  346,  600 }, // 153
  {  150,  153,  152,  155,  443,  555,  347,  557,   26,  346 }, // 154
  {  151,  153,  152,  154,   55,  443,  442,  581,  249,  579 }, // 155
  {  157,  158,  159,  160,   31,  603,   30,  162,  629,  630 }, // 156
  {  156,  158,  159,  161,    2,  576,    0,  145,  626,  629 }, // 157
  {  156,  157,  160,  161,   51,  558,   48,  182,  626,  630 }, // 158
  {  156,  160,  157,  161,    2,  255,  256,  605,  352,  603 }, // 159
  {  156,  159,  158,  161,  449,  558,  353,  560,   31,  352 }, // 160
  {  157,  159,  158,  160,   51,  449,  448,  578,  255,  576 }, // 161
  {  163,  164,  165,  166,   32,  603,   30,  156,  629,  631 }, // 162
  {  162,  164,  165,  167,    4,  579,    0,  151,  628,  629 }, // 163
  {  162,  163,  166,  167,   57,  561,   54,  188,  628,  631 }, // 164
  {  162,  166,  163,  167,    4,  261,  262,  605,  358,  603 }, // 165
  {  162,  165,  164,  167,  455,  561,  359,  563,   32,  358 }, // 166
  {  163,  165,  164,  166,   57,  455,  454,  581,  261,  579 }, // 167
  {  169,  170,  171,  172,   27,  606,   24,  174,  625,  632 }, // 168
  {  168,  170,  171,  173,    7,  582,    6,  181,  632,  633 }, // 169
  {  168,  169,  172,  173,   50,  552,   48,  146,  625,  633 }, // 170
  {  168,  172,  169,  173,    7,  267,  268,  608,  364,  606 }, // 171
  {  168,  171,  170,  173,  461,  552,  365,  554,   27,  364 }, // 172
  {  169,  171,  170,  172,   50,  461,  460,  584,  267,  582 }, // 173
  {  175,  176,  177,  178,   28,  606,   24,  168,  627,  632 }, // 174
  {  174,  176,  177,  179,    9,  585,    6,  187,  632,  634 }, // 175
  {  174,  175,  178,  179,   56,  555,   54,  152,  627,  634 }, // 176
  {  174,  178,  175,  179,    9,  273,  274,  608,  370,  606 }, // 177
  {  174,  177,  176,  179,  467,  555,  371,  557,   28,  370 }, // 178
  {  175,  177,  176,  178,   56,  467,  466,  587,  273,  585 }, // 179
  {  181,  182,  183,  184,   33,  609,   30,  186,  630,  635 }, // 180
  {  180,  182,  183,  185,    8,  582,    6,  169,  633,  635 }, // 181
  {  180,  181,  184,  185,   52,  558,   48,  158,  630,  633 }, // 182
  {  180,  184,  181,  185,    8,  279,  280,  611,  376,  609 }, // 183
  {  180,  183,  182,  185,  473,  558,  377,  560,   33,  376 }, // 184
  {  181,  183,  182,  184,   52,  473,  472,  584,  279,  582 }, // 185
  {  187,  188,  189,  190,   34,  609,   30,  180,  631,  635 }, // 186
  {  186,  188,  189,  191,   10,  585,    6,  175,  634,  635 }, // 187
  {  186,  187,  190,  191,   58,  561,   54,  164,  631,  634 }, // 188
  {  186,  190,  187,  191,   10,  285,  286,  611,  382,  609 }, // 189
  {  186,  189,  188,  191,  479,  561,  383,  563,   34,  382 }, // 190
  {  187,  189,  188,  190,   58,  479,  478,  587,  285,  585 }, // 191
  {  193,  194,  195,  196,   37,  612,   36,  198,  636,  637 }, // 192
  {  192,  194,  195,  197,   13,  588,   12,  205,  636,  638 }, // 193
  {  192,  193,  196,  197,   61,  564,   60,  218,  637,  638 }, // 194
  {  192,  196,  193,  197,   13,  291,  292,  614,  388,  612 }, // 195
  {  192,  195,  194,  197,  485,  564,  389,  566,   37,  388 }, // 196
  {  193,  195,  194,  196,   61,  485,  484,  590,  291,  588 }, // 197
  {  199,  200,  201,  202,   38,  612,   36,  192,  636,  639 }, // 198
  {  198,  200,  201,  203,   15,  591,   12,  211,  636,  640 }, // 199
  {  198,  199,  202,  203,   67,  567,   66,  224,  639,  640 }, // 200
  {  198,  202,  199,  203,   15,  297,  298,  614,  394,  612 }, // 201
  {  198,  201,  200,  203,  491,  567,  395,  569,   38,  394 }, // 202
  {  199,  201,  200,  202,   67,  491,  490,  593,  297,  591 }, // 203
  {  205,  206,  207,  208,   43,  615,   42,  210,  641,  642 }, // 204
  {  204,  206,  207,  209,   14,  588,   12,  193,  638,  641 }, // 205
  {  204,  205,  208,  209,   63,  570,   60,  230,  638,  642 }, // 206
  {  204,  208,  205,  209,   14,  303,  304,  617,  400,  615 }, // 207
  {  204,  207,  206,  209,  497,  570,  401,  572,   43,  400 }, // 208
  {  205,  207,  206,  208,   63,  497,  496,  590,  303,  588 }, // 209
  {  211,  212,  213,  214,   44,  615,   42,  204,  641,  643 }, // 210
  {  210,  212,  213,  215,   16,  591,   12,  199,  640,  641 }, // 211
  {  210,  211,  214,  215,   69,  573,   66,  236,  640,  643 }, // 212
  {  210,  214,  211,  215,   16,  309,  310,  617,  406,  615 }, // 213
  {  210,  213,  212,  215,  503,  573,  407,  575,   44,  406 }, // 214
  {  211,  213,  212,  214,   69,  503,  502,  593,  309,  591 }, // 215
  {  217,  218,  219,  220,   39,  618,   36,  222,  637,  644 }, // 216
  {  216,  218,  219,  221,   19,  594,   18,  229,  644,  645 }, // 217
  {  216,  217,  220,  221,   62,  564,   60,  194,  637,  645 }, // 218
  {  216,  220,  217,  221,   19,  315,  316,  620,  412,  618 }, // 219
  {  216,  219,  218,  221,  509,  564,  413,  566,   39,  412 }, // 220
  {  217,  219,  218,  220,   62,  509,  508,  596,  315,  594 }, // 221
  {  223,  224,  225,  226,   40,  618,   36,  216,  639,  644 }, // 222
  {  222,  224,  225,  227,   21,  597,   18,  235,  644,  646 }, // 223
  {  222,  223,  226,  227,   68,  567,   66,  200,  639,  646 }, // 224
  {  222,  226,  223,  227,   21,  321,  322,  620,  418,  618 }, // 225
  {  222,  225,  224,  227,  515,  567,  419,  569,   40,  418 }, // 226
  {  223,  225,  224,  226,   68,  515,  514,  599,  321,  597 }, // 227
  {  229,  230,  231,  232,   45,  621,   42,  234,  642,  647 }, // 228
  {  228,  230,  231,  233,   20,  594,   18,  217,  645,  647 }, // 229
  {  228,  229,  232,  233,   64,  570,   60,  206,  642,  645 }, // 230
  {  228,  232,  229,  233,   20,  327,  328,  623,  424,  621 }, // 231
  {  228,  231,  230,  233,  521,  570,  425,  572,   45,  424 }, // 232
  {  229,  231,  230,  232,   64,  521,  520,  596,  327,  594 }, // 233
  {  235,  236,  237,  238,   46,  621,   42,  228,  643,  647 }, // 234
  {  234,  236,  237,  239,   22,  597,   18,  223,  646,  647 }, // 235
  {  234,  235,  238,  239,   70,  573,   66,  212,  643,  646 }, // 236
  {  234,  238,  235,  239,   22,  333,  334,  623,  430,  621 }, // 237
  {  234,  237,  236,  239,  527,  573,  431,  575,   46,  430 }, // 238
  {  235,  237,  236,  238,   70,  527,  526,  599,  333,  597 }, // 239
  {  241,  242,  243,  244,    1,  602,    5,  246,  648,  649 }, // 240
  {  240,  242,  243,  245,   97,  577,   96,  253,  648,  650 }, // 241
  {  240,  241,  244,  245,   73,  529,   77,  290,  649,  650 }, // 242
  {  240,  244,  241,  245,  436,  577,  149,  576,    1,  147 }, // 243
  {  240,  243,  242,  245,   73,  339,  340,  601,  147,  602 }, // 244
  {  241,  243,  242,  244,  339,  529,  435,  528,   97,  436 }, // 245
  {  247,  248,  249,  250,    3,  602,    5,  240,  649,  651 }, // 246
  {  246,  248,  249,  251,  103,  580,  102,  259,  651,  652 }, // 247
  {  246,  247,  250,  251,   74,  532,   77,  296,  649,  652 }, // 248
  {  246,  250,  247,  251,  442,  580,  155,  579,    3,  153 }, // 249
  {  246,  249,  248,  251,   74,  345,  346,  601,  153,  602 }, // 250
  {  247,  249,  248,  250,  345,  532,  441,  531,  103,  442 }, // 251
  {  253,  254,  255,  256,    2,  605,    5,  258,  648,  653 }, // 252
  {  252,  254,  255,  257,   98,  577,   96,  241,  648,  654 }, // 253
  {  252,  253,  256,  257,   79,  535,   83,  302,  653,  654 }, // 254
  {  252,  256,  253,  257,  448,  577,  161,  576,    2,  159 }, // 255
  {  252,  255,  254,  257,   79,  351,  352,  604,  159,  605 }, // 256
  {  253,  255,  254,  256,  351,  535,  447,  534,   98,  448 }, // 257
  {  259,  260,  261,  262,    4,  605,    5,  252,  651,  653 }, // 258
  {  258,  260,  261,  263,  104,  580,  102,  247,  651,  655 }, // 259
  {  258,  259,  262,  263,   80,  538,   83,  308,  653,  655 }, // 260
  {  258,  262,  259,  263,  454,  580,  167,  579,    4,  165 }, // 261
  {  258,  261,  260,  263,   80,  357,  358,  604,  165,  605 }, // 262
  {  259,  261,  260,  262,  357,  538,  453,  537,  104,  454 }, // 263
  {  265,  266,  267,  268,    7,  608,   11,  270,  656,  657 }, // 264
  {  264,  266,  267,  269,  109,  583,  108,  277,  656,  658 }, // 265
  {  264,  265,  268,  269,   85,  541,   89,  314,  657,  658 }, // 266
  {  264,  268,  265,  269,  460,  583,  173,  582,    7,  171 }, // 267
  {  264,  267,  266,  269,   85,  363,  364,  607,  171,  608 }, // 268
  {  265,  267,  266,  268,  363,  541,  459,  540,  109,  460 }, // 269
  {  271,  272,  273,  274,    9,  608,   11,  264,  657,  659 }, // 270
  {  270,  272,  273,  275,  115,  586,  114,  283,  659,  660 }, // 271
  {  270,  271,  274,  275,   86,  544,   89,  320,  657,  660 }, // 272
  {  270,  274,  271,  275,  466,  586,  179,  585,    9,  177 }, // 273
  {  270,  273,  272,  275,   86,  369,  370,  607,  177,  608 }, // 274
  {  271,  273,  272,  274,  369,  544,  465,  543,  115,  466 }, // 275
  {  277,  278,  279,  280,    8,  611,   11,  282,  656,  661 }, // 276
  {  276,  278,  279,  281,  110,  583,  108,  265,  656,  662 }, // 277
  {  276,  277,  280,  281,   91,  547,   95,  326,  661,  662 }, // 278
  {  276,  280,  277,  281,  472,  583,  185,  582,    8,  183 }, // 279
  {  276,  279,  278,  281,   91,  375,  376,  610,  183,  611 }, // 280
  {  277,  279,  278,  280,  375,  547,  471,  546,  110,  472 }, // 281
  {  283,  284,  285,  286,   10,  611,   11,  276,  659,  661 }, // 282
  {  282,  284,  285,  287,  116,  586,  114,  271,  659,  663 }, // 283
  {  282,  283,  286,  287,   92,  550,   95,  332,  661,  663 }, // 284
  {  282,  286,  283,  287,  478,  586,  191,  585,   10,  189 }, // 285
  {  282,  285,  284,  287,   92,  381,  382,  610,  189,  611 }, // 286
  {  283,  285,  284,  286,  381,  550,  477,  549,  116,  478 }, // 287
  {  289,  290,  291,  292,   13,  614,   17,  294,  664,  665 }, // 288
  {  288,  290,  291,  293,   99,  589,   96,  301,  650,  664 }, // 289
  {  288,  289,  292,  293,   75,  529,   77,  242,  650,  665 }, // 290
  {  288,  292,  289,  293,  484,  589,  197,  588,   13,  195 }, // 291
  {  288,  291,  290,  293,   75,  387,  388,  613,  195,  614 }, // 292
  {  289,  291,  290,  292,  387,  529,  483,  528,   99,  484 }, // 293
  {  295,  296,  297,  298,   15,  614,   17,  288,  665,  666 }, // 294
  {  294,  296,  297,  299,  105,  592,  102,  307,  652,  666 }, // 295
  {  294,  295,  298,  299,   76,  532,   77,  248,  652,  665 }, // 296
  {  294,  298,  295,  299,  490,  592,  203,  591,   15,  201 }, // 297
  {  294,  297,  296,  299,   76,  393,  394,  613,  201,  614 }, // 298
  {  295,  297,  296,  298,  393,  532,  489,  531,  105,  490 }, // 299
  {  301,  302,  303,  304,   14,  617,   17,  306,  664,  667 }, // 300
  {  300,  302,  303,  305,  100,  589,   96,  289,  654,  664 }, // 301
  {  300,  301,  304,  305,   81,  535,   83,  254,  654,  667 }, // 302
  {  300,  304,  301,  305,  496,  589,  209,  588,   14,  207 }, // 303
  {  300,  303,  302,  305,   81,  399,  400,  616,  207,  617 }, // 304
  {  301,  303,  302,  304,  399,  535,  495,  534,  100,  496 }, // 305
  {  307,  308,  309,  310,   16,  617,   17,  300,  666,  667 }, // 306
  {  306,  308,  309,  311,  106,  592,  102,  295,  655,  666 }, // 307
  {  306,  307,  310,  311,   82,  538,   83,  260,  655,  667 }, // 308
  {  306,  310,  307,  311,  502,  592,  215,  591,   16,  213 }, // 309
  {  306,  309,  308,  311,   82,  405,  406,  616,  213,  617 }, // 310
  {  307,  309,  308,  310,  405,  538,  501,  537,  106,  502 }, // 311
  {  313,  314,  315,  316,   19,  620,   23,  318,  668,  669 }, // 312
  {  312,  314,  315,  317,  111,  595,  108,  325,  658,  668 }, // 313
  {  312,  313,  316,  317,   87,  541,   89,  266,  658,  669 }, // 314
  {  312,  316,  313,  317,  508,  595,  221,  594,   19,  219 }, // 315
  {  312,  315,  314,  317,   87,  411,  412,  619,  219,  620 }, // 316
  {  313,  315,  314,  316,  411,  541,  507,  540,  111,  508 }, // 317
  {  319,  320,  321,  322,   21,  620,   23,  312,  669,  670 }, // 318
  {  318,  320,  321,  323,  117,  598,  114,  331,  660,  670 }, // 319
  {  318,  319,  322,  323,   88,  544,   89,  272,  660,  669 }, // 320
  {  318,  322,  319,  323,  514,  598,  227,  597,   21,  225 }, // 321
  {  318,  321,  320,  323,   88,  417,  418,  619,  225,  620 }, // 322
  {  319,  321,  320,  322,  417,  544,  513,  543,  117,  514 }, // 323
  {  325,  326,  327,  328,   20,  623,   23,  330,  668,  671 }, // 324
  {  324,  326,  327,  329,  112,  595,  108,  313,  662,  668 }, // 325
  {  324,  325,  328,  329,   93,  547,   95,  278,  662,  671 }, // 326
  {  324,  328,  325,  329,  520,  595,  233,  594,   20,  231 }, // 327
  {  324,  327,  326,  329,   93,  423,  424,  622,  231,  623 }, // 328
  {  325,  327,  326,  328,  423,  547,  519,  546,  112,  520 }, // 329
  {  331,  332,  333,  334,   22,  623,   23,  324,  670,  671 }, // 330
  {  330,  332,  333,  335,  118,  598,  114,  319,  663,  670 }, // 331
  {  330,  331,  334,  335,   94,  550,   95,  284,  663,  671 }, // 332
  {  330,  334,  331,  335,  526,  598,  239,  597,   22,  237 }, // 333
  {  330,  333,  332,  335,   94,  429,  430,  622,  237,  623 }, // 334
  {  331,  333,  332,  334,  429,  550,  525,  549,  118,  526 }, // 335
  {  337,  338,  339,  340,   73,  601,   72,  342,  672,  673 }, // 336
  {  336,  338,  339,  341,  121,  530,  125,  385,  672,  674 }, // 337
  {  336,  337,  340,  341,   25,  554,   29,  362,  673,  674 }, // 338
  {  336,  340,  337,  341,  435,  530,  245,  529,   73,  244 }, // 339
  {  336,  339,  338,  341,   25,  148,  147,  600,  244,  601 }, // 340
  {  337,  339,  338,  340,  148,  554,  437,  553,  121,  435 }, // 341
  {  343,  344,  345,  346,   74,  601,   72,  336,  673,  675 }, // 342
  {  342,  344,  345,  347,  127,  533,  131,  391,  675,  676 }, // 343
  {  342,  343,  346,  347,   26,  557,   29,  368,  673,  676 }, // 344
  {  342,  346,  343,  347,  441,  533,  251,  532,   74,  250 }, // 345
  {  342,  345,  344,  347,   26,  154,  153,  600,  250,  601 }, // 346
  {  343,  345,  344,  346,  154,  557,  443,  556,  127,  441 }, // 347
  {  349,  350,  351,  352,   79,  604,   78,  354,  677,  678 }, // 348
  {  348,  350,  351,  353,  133,  536,  137,  397,  677,  679 }, // 349
  {  348,  349,  352,  353,   31,  560,   35,  374,  678,  679 }, // 350
  {  348,  352,  349,  353,  447,  536,  257,  535,   79,  256 }, // 351
  {  348,  351,  350,  353,   31,  160,  159,  603,  256,  604 }, // 352
  {  349,  351,  350,  352,  160,  560,  449,  559,  133,  447 }, // 353
  {  355,  356,  357,  358,   80,  604,   78,  348,  678,  680 }, // 354
  {  354,  356,  357,  359,  139,  539,  143,  403,  680,  681 }, // 355
  {  354,  355,  358,  359,   32,  563,   35,  380,  678,  681 }, // 356
  {  354,  358,  355,  359,  453,  539,  263,  538,   80,  262 }, // 357
  {  354,  357,  356,  359,   32,  166,  165,  603,  262,  604 }, // 358
  {  355,  357,  356,  358,  166,  563,  455,  562,  139,  453 }, // 359
  {  361,  362,  363,  364,   85,  607,   84,  366,  682,  683 }, // 360
  {  360,  362,  363,  365,  122,  542,  125,  409,  674,  682 }, // 361
  {  360,  361,  364,  365,   27,  554,   29,  338,  674,  683 }, // 362
  {  360,  364,  361,  365,  459,  542,  269,  541,   85,  268 }, // 363
  {  360,  363,  362,  365,   27,  172,  171,  606,  268,  607 }, // 364
  {  361,  363,  362,  364,  172,  554,  461,  553,  122,  459 }, // 365
  {  367,  368,  369,  370,   86,  607,   84,  360,  683,  684 }, // 366
  {  366,  368,  369,  371,  128,  545,  131,  415,  676,  684 }, // 367
  {  366,  367,  370,  371,   28,  557,   29,  344,  676,  683 }, // 368
  {  366,  370,  367,  371,  465,  545,  275,  544,   86,  274 }, // 369
  {  366,  369,  368,  371,   28,  178,  177,  606,  274,  607 }, // 370
  {  367,  369,  368,  370,  178,  557,  467,  556,  128,  465 }, // 371
  {  373,  374,  375,  376,   91,  610,   90,  378,  685,  686 }, // 372
  {  372,  374,  375,  377,  134,  548,  137,  421,  679,  685 }, // 373
  {  372,  373,  376,  377,   33,  560,   35,  350,  679,  686 }, // 374
  {  372,  376,  373,  377,  471,  548,  281,  547,   91,  280 }, // 375
  {  372,  375,  374,  377,   33,  184,  183,  609,  280,  610 }, // 376
  {  373,  375,  374,  376,  184,  560,  473,  559,  134,  471 }, // 377
  {  379,  380,  381,  382,   92,  610,   90,  372,  686,  687 }, // 378
  {  378,  380,  381,  383,  140,  551,  143,  427,  681,  687 }, // 379
  {  378,  379,  382,  383,   34,  563,   35,  356,  681,  686 }, // 380
  {  378,  382,  379,  383,  477,  551,  287,  550,   92,  286 }, // 381
  {  378,  381,  380,  383,   34,  190,  189,  609,  286,  610 }, // 382
  {  379,  381,  380,  382,  190,  563,  479,  562,  140,  477 }, // 383
  {  385,  386,  387,  388,   75,  613,   72,  390,  672,  688 }, // 384
  {  384,  386,  387,  389,  123,  530,  125,  337,  672,  689 }, // 385
  {  384,  385,  388,  389,   37,  566,   41,  410,  688,  689 }, // 386
  {  384,  388,  385,  389,  483,  530,  293,  529,   75,  292 }, // 387
  {  384,  387,  386,  389,   37,  196,  195,  612,  292,  613 }, // 388
  {  385,  387,  386,  388,  196,  566,  485,  565,  123,  483 }, // 389
  {  391,  392,  393,  394,   76,  613,   72,  384,  675,  688 }, // 390
  {  390,  392,  393,  395,  129,  533,  131,  343,  675,  690 }, // 391
  {  390,  391,  394,  395,   38,  569,   41,  416,  688,  690 }, // 392
  {  390,  394,  391,  395,  489,  533,  299,  532,   76,  298 }, // 393
  {  390,  393,  392,  395,   38,  202,  201,  612,  298,  613 }, // 394
  {  391,  393,  392,  394,  202,  569,  491,  568,  129,  489 }, // 395
  {  397,  398,  399,  400,   81,  616,   78,  402,  677,  691 }, // 396
  {  396,  398,  399,  401,  135,  536,  137,  349,  677,  692 }, // 397
  {  396,  397,  400,  401,   43,  572,   47,  422,  691,  692 }, // 398
  {  396,  400,  397,  401,  495,  536,  305,  535,   81,  304 }, // 399
  {  396,  399,  398,  401,   43,  208,  207,  615,  304,  616 }, // 400
  {  397,  399,  398,  400,  208,  572,  497,  571,  135,  495 }, // 401
  {  403,  404,  405,  406,   82,  616,   78,  396,  680,  691 }, // 402
  {  402,  404,  405,  407,  141,  539,  143,  355,  680,  693 }, // 403
  {  402,  403,  406,  407,   44,  575,   47,  428,  691,  693 }, // 404
  {  402,  406,  403,  407,  501,  539,  311,  538,   82,  310 }, // 405
  {  402,  405,  404,  407,   44,  214,  213,  615,  310,  616 }, // 406
  {  403,  405,  404,  406,  214,  575,  503,  574,  141,  501 }, // 407
  {  409,  410,  411,  412,   87,  619,   84,  414,  682,  694 }, // 408
  {  408,  410,  411,  413,  124,  542,  125,  361,  682,  689 }, // 409
  {  408,  409,  412,  413,   39,  566,   41,  386,  689,  694 }, // 410
  {  408,  412,  409,  413,  507,  542,  317,  541,   87,  316 }, // 411
  {  408,  411,  410,  413,   39,  220,  219,  618,  316,  619 }, // 412
  {  409,  411,  410,  412,  220,  566,  509,  565,  124,  507 }, // 413
  {  415,  416,  417,  418,   88,  619,   84,  408,  684,  694 }, // 414
  {  414,  416,  417,  419,  130,  545,  131,  367,  684,  690 }, // 415
  {  414,  415,  418,  419,   40,  569,   41,  392,  690,  694 }, // 416
  {  414,  418,  415,  419,  513,  545,  323,  544,   88,  322 }, // 417
  {  414,  417,  416,  419,   40,  226,  225,  618,  322,  619 }, // 418
  {  415,  417,  416,  418,  226,  569,  515,  568,  130,  513 }, // 419
  {  421,  422,  423,  424,   93,  622,   90,  426,  685,  695 }, // 420
  {  420,  422,  423,  425,  136,  548,  137,  373,  685,  692 }, // 421
  {  420,  421,  424,  425,   45,  572,   47,  398,  692,  695 }, // 422
  {  420,  424,  421,  425,  519,  548,  329,  547,   93,  328 }, // 423
  {  420,  423,  422,  425,   45,  232,  231,  621,  328,  622 }, // 424
  {  421,  423,  422,  424,  232,  572,  521,  571,  136,  519 }, // 425
  {  427,  428,  429,  430,   94,  622,   90,  420,  687,  695 }, // 426
  {  426,  428,  429,  431,  142,  551,  143,  379,  687,  693 }, // 427
  {  426,  427,  430,  431,   46,  575,   47,  404,  693,  695 }, // 428
  {  426,  430,  427,  431,  525,  551,  335,  550,   94,  334 }, // 429
  {  426,  429,  428,  431,   46,  238,  237,  621,  334,  622 }, // 430
  {  427,  429,  428,  430,  238,  575,  527,  574,  142,  525 }, // 431
  {  433,  434,  435,  436,   97,  528,  101,  480,  696,  697 }, // 432
  {  432,  434,  435,  437,  121,  553,  120,  457,  696,  698 }, // 433
  {  432,  433,  436,  437,   49,  578,   53,  446,  697,  698 }, // 434
  {  432,  436,  433,  437,  121,  341,  339,  530,  245,  528 }, // 435
  {  432,  435,  434,  437,  149,  578,  243,  577,   97,  245 }, // 436
  {  433,  435,  434,  436,   49,  149,  148,  552,  341,  553 }, // 437
  {  439,  440,  441,  442,  103,  531,  107,  486,  699,  700 }, // 438
  {  438,  440,  441,  443,  127,  556,  126,  463,  699,  701 }, // 439
  {  438,  439,  442,  443,   55,  581,   59,  452,  700,  701 }, // 440
  {  438,  442,  439,  443,  127,  347,  345,  533,  251,  531 }, // 441
  {  438,  441,  440,  443,  155,  581,  249,  580,  103,  251 }, // 442
  {  439,  441,  440,  442,   55,  155,  154,  555,  347,  556 }, // 443
  {  445,  446,  447,  448,   98,  534,  101,  492,  697,  702 }, // 444
  {  444,  446,  447,  449,  133,  559,  132,  469,  702,  703 }, // 445
  {  444,  445,  448,  449,   51,  578,   53,  434,  697,  703 }, // 446
  {  444,  448,  445,  449,  133,  353,  351,  536,  257,  534 }, // 447
  {  444,  447,  446,  449,  161,  578,  255,  577,   98,  257 }, // 448
  {  445,  447,  446,  448,   51,  161,  160,  558,  353,  559 }, // 449
  {  451,  452,  453,  454,  104,  537,  107,  498,  700,  704 }, // 450
  {  450,  452,  453,  455,  139,  562,  138,  475,  704,  705 }, // 451
  {  450,  451,  454,  455,   57,  581,   59,  440,  700,  705 }, // 452
  {  450,  454,  451,  455,  139,  359,  357,  539,  263,  537 }, // 453
  {  450,  453,  452,  455,  167,  581,  261,  580,  104,  263 }, // 454
  {  451,  453,  452,  454,   57,  167,  166,  561,  359,  562 }, // 455
  {  457,  458,  459,  460,  109,  540,  113,  504,  706,  707 }, // 456
  {  456,  458,  459,  461,  122,  553,  120,  433,  698,  706 }, // 457
  {  456,  457,  460,  461,   50,  584,   53,  470,  698,  707 }, // 458
  {  456,  460,  457,  461,  122,  365,  363,  542,  269,  540 }, // 459
  {  456,  459,  458,  461,  173,  584,  267,  583,  109,  269 }, // 460
  {  457,  459,  458,  460,   50,  173,  172,  552,  365,  553 }, // 461
  {  463,  464,  465,  466,  115,  543,  119,  510,  708,  709 }, // 462
  {  462,  464,  465,  467,  128,  556,  126,  439,  701,  708 }, // 463
  {  462,  463,  466,  467,   56,  587,   59,  476,  701,  709 }, // 464
  {  462,  466,  463,  467,  128,  371,  369,  545,  275,  543 }, // 465
  {  462,  465,  464,  467,  179,  587,  273,  586,  115,  275 }, // 466
  {  463,  465,  464,  466,   56,  179,  178,  555,  371,  556 }, // 467
  {  469,  470,  471,  472,  110,  546,  113,  516,  707,  710 }, // 468
  {  468,  470,  471,  473,  134,  559,  132,  445,  703,  710 }, // 469
  {  468,  469,  472,  473,   52,  584,   53,  458,  703,  707 }, // 470
  {  468,  472,  469,  473,  134,  377,  375,  548,  281,  546 }, // 471
  {  468,  471,  470,  473,  185,  584,  279,  583,  110,  281 }, // 472
  {  469,  471,  470,  472,   52,  185,  184,  558,  377,  559 }, // 473
  {  475,  476,  477,  478,  116,  549,  119,  522,  709,  711 }, // 474
  {  474,  476,  477,  479,  140,  562,  138,  451,  705,  711 }, // 475
  {  474,  475,  478,  479,   58,  587,   59,  464,  705,  709 }, // 476
  {  474,  478,  475,  479,  140,  383,  381,  551,  287,  549 }, // 477
  {  474,  477,  476,  479,  191,  587,  285,  586,  116,  287 }, // 478
  {  475,  477,  476,  478,   58,  191,  190,  561,  383,  562 }, // 479
  {  481,  482,  483,  484,   99,  528,  101,  432,  696,  712 }, // 480
  {  480,  482,  483,  485,  123,  565,  120,  505,  696,  713 }, // 481
  {  480,  481,  484,  485,   61,  590,   65,  494,  712,  713 }, // 482
  {  480,  484,  481,  485,  123,  389,  387,  530,  293,  528 }, // 483
  {  480,  483,  482,  485,  197,  590,  291,  589,   99,  293 }, // 484
  {  481,  483,  482,  484,   61,  197,  196,  564,  389,  565 }, // 485
  {  487,  488,  489,  490,  105,  531,  107,  438,  699,  714 }, // 486
  {  486,  488,  489,  491,  129,  568,  126,  511,  699,  715 }, // 487
  {  486,  487,  490,  491,   67,  593,   71,  500,  714,  715 }, // 488
  {  486,  490,  487,  491,  129,  395,  393,  533,  299,  531 }, // 489
  {  486,  489,  488,  491,  203,  593,  297,  592,  105,  299 }, // 490
  {  487,  489,  488,  490,   67,  203,  202,  567,  395,  568 }, // 491
  {  493,  494,  495,  496,  100,  534,  101,  444,  702,  712 }, // 492
  {  492,  494,  495,  497,  135,  571,  132,  517,  702,  716 }, // 493
  {  492,  493,  496,  497,   63,  590,   65,  482,  712,  716 }, // 494
  {  492,  496,  493,  497,  135,  401,  399,  536,  305,  534 }, // 495
  {  492,  495,  494,  497,  209,  590,  303,  589,  100,  305 }, // 496
  {  493,  495,  494,  496,   63,  209,  208,  570,  401,  571 }, // 497
  {  499,  500,  501,  502,  106,  537,  107,  450,  704,  714 }, // 498
  {  498,  500,  501,  503,  141,  574,  138,  523,  704,  717 }, // 499
  {  498,  499,  502,  503,   69,  593,   71,  488,  714,  717 }, // 500
  {  498,  502,  499,  503,  141,  407,  405,  539,  311,  537 }, // 501
  {  498,  501,  500,  503,  215,  593,  309,  592,  106,  311 }, // 502
  {  499,  501,  500,  502,   69,  215,  214,  573,  407,  574 }, // 503
  {  505,  506,  507,  508,  111,  540,  113,  456,  706,  718 }, // 504
  {  504,  506,  507,  509,  124,  565,  120,  481,  706,  713 }, // 505
  {  504,  505,  508,  509,   62,  596,   65,  518,  713,  718 }, // 506
  {  504,  508,  505,  509,  124,  413,  411,  542,  317,  540 }, // 507
  {  504,  507,  506,  509,  221,  596,  315,  595,  111,  317 }, // 508
  {  505,  507,  506,  508,   62,  221,  220,  564,  413,  565 }, // 509
  {  511,  512,  513,  514,  117,  543,  119,  462,  708,  719 }, // 510
  {  510,  512,  513,  515,  130,  568,  126,  487,  708,  715 }, // 511
  {  510,  511,  514,  515,   68,  599,   71,  524,  715,  719 }, // 512
  {  510,  514,  511,  515,  130,  419,  417,  545,  323,  543 }, // 513
  {  510,  513,  512,  515,  227,  599,  321,  598,  117,  323 }, // 514
  {  511,  513,  512,  514,   68,  227,  226,  567,  419,  568 }, // 515
  {  517,  518,  519,  520,  112,  546,  113,  468,  710,  718 }, // 516
  {  516,  518,  519,  521,  136,  571,  132,  493,  710,  716 }, // 517
  {  516,  517,  520,  521,   64,  596,   65,  506,  716,  718 }, // 518
  {  516,  520,  517,  521,  136,  425,  423,  548,  329,  546 }, // 519
  {  516,  519,  518,  521,  233,  596,  327,  595,  112,  329 }, // 520
  {  517,  519,  518,  520,   64,  233,  232,  570,  425,  571 }, // 521
  {  523,  524,  525,  526,  118,  549,  119,  474,  711,  719 }, // 522
  {  522,  524,  525,  527,  142,  574,  138,  499,  711,  717 }, // 523
  {  522,  523,  526,  527,   70,  599,   71,  512,  717,  719 }, // 524
  {  522,  526,  523,  527,  142,  431,  429,  551,  335,  549 }, // 525
  {  522,  525,  524,  527,  239,  599,  333,  598,  118,  335 }, // 526
  {  523,  525,  524,  526,   70,  239,  238,  573,  431,  574 }, // 527
  {  529,  530,  245,  435,   97,  432,   99,  480,  293,  483 }, // 528
  {  528,  530,  245,  339,   73,  242,   75,  290,  293,  387 }, // 529
  {  528,  529,  339,  435,  121,  337,  123,  385,  387,  483 }, // 530
  {  532,  533,  251,  441,  103,  438,  105,  486,  299,  489 }, // 531
  {  531,  533,  251,  345,   74,  248,   76,  296,  299,  393 }, // 532
  {  531,  532,  345,  441,  127,  343,  129,  391,  393,  489 }, // 533
  {  535,  536,  257,  447,   98,  444,  100,  492,  305,  495 }, // 534
  {  534,  536,  257,  351,   79,  254,   81,  302,  305,  399 }, // 535
  {  534,  535,  351,  447,  133,  349,  135,  397,  399,  495 }, // 536
  {  538,  539,  263,  453,  104,  450,  106,  498,  311,  501 }, // 537
  {  537,  539,  263,  357,   80,  260,   82,  308,  311,  405 }, // 538
  {  537,  538,  357,  453,  139,  355,  141,  403,  405,  501 }, // 539
  {  541,  542,  269,  459,  109,  456,  111,  504,  317,  507 }, // 540
  {  540,  542,  269,  363,   85,  266,   87,  314,  317,  411 }, // 541
  {  540,  541,  363,  459,  122,  361,  124,  409,  411,  507 }, // 542
  {  544,  545,  275,  465,  115,  462,  117,  510,  323,  513 }, // 543
  {  543,  545,  275,  369,   86,  272,   88,  320,  323,  417 }, // 544
  {  543,  544,  369,  465,  128,  367,  130,  415,  417,  513 }, // 545
  {  547,  548,  281,  471,  110,  468,  112,  516,  329,  519 }, // 546
  {  546,  548,  281,  375,   91,  278,   93,  326,  329,  423 }, // 547
  {  546,  547,  375,  471,  134,  373,  136,  421,  423,  519 }, // 548
  {  550,  551,  287,  477,  116,  474,  118,  522,  335,  525 }, // 549
  {  549,  551,  287,  381,   92,  284,   94,  332,  335,  429 }, // 550
  {  549,  550,  381,  477,  140,  379,  142,  427,  429,  525 }, // 551
  {  553,  554,  148,  437,   49,  146,   50,  170,  172,  461 }, // 552
  {  552,  554,  341,  437,  121,  433,  122,  457,  365,  461 }, // 553
  {  552,  553,  148,  341,   25,  338,   27,  362,  172,  365 }, // 554
  {  556,  557,  154,  443,   55,  152,   56,  176,  178,  467 }, // 555
  {  555,  557,  347,  443,  127,  439,  128,  463,  371,  467 }, // 556
  {  555,  556,  154,  347,   26,  344,   28,  368,  178,  371 }, // 557
  {  559,  560,  160,  449,   51,  158,   52,  182,  184,  473 }, // 558
  {  558,  560,  353,  449,  133,  445,  134,  469,  377,  473 }, // 559
  {  558,  559,  160,  353,   31,  350,   33,  374,  184,  377 }, // 560
  {  562,  563,  166,  455,   57,  164,   58,  188,  190,  479 }, // 561
  {  561,  563,  359,  455,  139,  451,  140,  475,  383,  479 }, // 562
  {  561,  562,  166,  359,   32,  356,   34,  380,  190,  383 }, // 563
  {  565,  566,  196,  485,   61,  194,   62,  218,  220,  509 }, // 564
  {  564,  566,  389,  485,  123,  481,  124,  505,  413,  509 }, // 565
  {  564,  565,  196,  389,   37,  386,   39,  410,  220,  413 }, // 566
  {  568,  569,  202,  491,   67,  200,   68,  224,  226,  515 }, // 567
  {  567,  569,  395,  491,  129,  487,  130,  511,  419,  515 }, // 568
  {  567,  568,  202,  395,   38,  392,   40,  416,  226,  419 }, // 569
  {  571,  572,  208,  497,   63,  206,   64,  230,  232,  521 }, // 570
  {  570,  572,  401,  497,  135,  493,  136,  517,  425,  521 }, // 571
  {  570,  571,  208,  401,   43,  398,   45,  422,  232,  425 }, // 572
  {  574,  575,  214,  503,   69,  212,   70,  236,  238,  527 }, // 573
  {  573,  575,  407,  503,  141,  499,  142,  523,  431,  527 }, // 574
  {  573,  574,  214,  407,   44,  404,   46,  428,  238,  431 }, // 575
  {  577,  578,  149,  243,    1,  145,    2,  157,  161,  255 }, // 576
  {  576,  578,  243,  436,   97,  241,   98,  253,  255,  448 }, // 577
  {  576,  577,  149,  436,   49,  434,   51,  446,  161,  448 }, // 578
  {  580,  581,  155,  249,    3,  151,    4,  163,  167,  261 }, // 579
  {  579,  581,  249,  442,  103,  247,  104,  259,  261,  454 }, // 580
  {  579,  580,  155,  442,   55,  440,   57,  452,  167,  454 }, // 581
  {  583,  584,  173,  267,    7,  169,    8,  181,  185,  279 }, // 582
  {  582,  584,  267,  460,  109,  265,  110,  277,  279,  472 }, // 583
  {  582,  583,  173,  460,   50,  458,   52,  470,  185,  472 }, // 584
  {  586,  587,  179,  273,    9,  175,   10,  187,  191,  285 }, // 585
  {  585,  587,  273,  466,  115,  271,  116,  283,  285,  478 }, // 586
  {  585,  586,  179,  466,   56,  464,   58,  476,  191,  478 }, // 587
  {  589,  590,  197,  291,   13,  193,   14,  205,  209,  303 }, // 588
  {  588,  590,  291,  484,   99,  289,  100,  301,  303,  496 }, // 589
  {  588,  589,  197,  484,   61,  482,   63,  494,  209,  496 }, // 590
  {  592,  593,  203,  297,   15,  199,   16,  211,  215,  309 }, // 591
  {  591,  593,  297,  490,  105,  295,  106,  307,  309,  502 }, // 592
  {  591,  592,  203,  490,   67,  488,   69,  500,  215,  502 }, // 593
  {  595,  596,  221,  315,   19,  217,   20,  229,  233,  327 }, // 594
  {  594,  596,  315,  508,  111,  313,  112,  325,  327,  520 }, // 595
  {  594,  595,  221,  508,   62,  506,   64,  518,  233,  520 }, // 596
  {  598,  599,  227,  321,   21,  223,   22,  235,  239,  333 }, // 597
  {  597,  599,  321,  514,  117,  319,  118,  331,  333,  526 }, // 598
  {  597,  598,  227,  514,   68,  512,   70,  524,  239,  526 }, // 599
  {  601,  602,  147,  340,   25,  144,   26,  150,  153,  346 }, // 600
  {  600,  602,  244,  340,   73,  336,   74,  342,  250,  346 }, // 601
  {  600,  601,  147,  244,    1,  240,    3,  246,  153,  250 }, // 602
  {  604,  605,  159,  352,   31,  156,   32,  162,  165,  358 }, // 603
  {  603,  605,  256,  352,   79,  348,   80,  354,  262,  358 }, // 604
  {  603,  604,  159,  256,    2,  252,    4,  258,  165,  262 }, // 605
  {  607,  608,  171,  364,   27,  168,   28,  174,  177,  370 }, // 606
  {  606,  608,  268,  364,   85,  360,   86,  366,  274,  370 }, // 607
  {  606,  607,  171,  268,    7,  264,    9,  270,  177,  274 }, // 608
  {  610,  611,  183,  376,   33,  180,   34,  186,  189,  382 }, // 609
  {  609,  611,  280,  376,   91,  372,   92,  378,  286,  382 }, // 610
  {  609,  610,  183,  280,    8,  276,   10,  282,  189,  286 }, // 611
  {  613,  614,  195,  388,   37,  192,   38,  198,  201,  394 }, // 612
  {  612,  614,  292,  388,   75,  384,   76,  390,  298,  394 }, // 613
  {  612,  613,  195,  292,   13,  288,   15,  294,  201,  298 }, // 614
  {  616,  617,  207,  400,   43,  204,   44,  210,  213,  406 }, // 615
  {  615,  617,  304,  400,   81,  396,   82,  402,  310,  406 }, // 616
  {  615,  616,  207,  304,   14,  300,   16,  306,  213,  310 }, // 617
  {  619,  620,  219,  412,   39,  216,   40,  222,  225,  418 }, // 618
  {  618,  620,  316,  412,   87,  408,   88,  414,  322,  418 }, // 619
  {  618,  619,  219,  316,   19,  312,   21,  318,  225,  322 }, // 620
  {  622,  623,  231,  424,   45,  228,   46,  234,  237,  430 }, // 621
  {  621,  623,  328,  424,   93,  420,   94,  426,  334,  430 }, // 622
  {  621,  622,  231,  328,   20,  324,   22,  330,  237,  334 }, // 623
  {  144,  625,  145,  626,    0,  629,  151,  628,  150,  627 }, // 624
  {  144,  624,  146,  626,  170,  633,  168,  632,   24,  627 }, // 625
  {  145,  624,  146,  625,   48,  633,  158,  630,  157,  629 }, // 626
  {  150,  624,  152,  628,  176,  634,  174,  632,   24,  625 }, // 627
  {  151,  624,  152,  627,   54,  634,  164,  631,  163,  629 }, // 628
  {  156,  630,  157,  626,    0,  624,  163,  628,  162,  631 }, // 629
  {  156,  629,  158,  626,  182,  633,  180,  635,   30,  631 }, // 630
  {  162,  629,  164,  628,  188,  634,  186,  635,   30,  630 }, // 631
  {  168,  625,  169,  633,    6,  635,  175,  634,  174,  627 }, // 632
  {  169,  632,  170,  625,   48,  626,  182,  630,  181,  635 }, // 633
  {  175,  632,  176,  627,   54,  628,  188,  631,  187,  635 }, // 634
  {  180,  630,  181,  633,    6,  632,  187,  634,  186,  631 }, // 635
  {  192,  637,  193,  638,   12,  641,  199,  640,  198,  639 }, // 636
  {  192,  636,  194,  638,  218,  645,  216,  644,   36,  639 }, // 637
  {  193,  636,  194,  637,   60,  645,  206,  642,  205,  641 }, // 638
  {  198,  636,  200,  640,  224,  646,  222,  644,   36,  637 }, // 639
  {  199,  636,  200,  639,   66,  646,  212,  643,  211,  641 }, // 640
  {  204,  642,  205,  638,   12,  636,  211,  640,  210,  643 }, // 641
  {  204,  641,  206,  638,  230,  645,  228,  647,   42,  643 }, // 642
  {  210,  641,  212,  640,  236,  646,  234,  647,   42,  642 }, // 643
  {  216,  637,  217,  645,   18,  647,  223,  646,  222,  639 }, // 644
  {  217,  644,  218,  637,   60,  638,  230,  642,  229,  647 }, // 645
  {  223,  644,  224,  639,   66,  640,  236,  643,  235,  647 }, // 646
  {  228,  642,  229,  645,   18,  644,  235,  646,  234,  643 }, // 647
  {  240,  649,  241,  650,  253,  654,  252,  653,    5,  651 }, // 648
  {  240,  648,  242,  650,   77,  665,  248,  652,  246,  651 }, // 649
  {  241,  648,  242,  649,  290,  665,  289,  664,   96,  654 }, // 650
  {  246,  649,  247,  652,  259,  655,  258,  653,    5,  648 }, // 651
  {  247,  651,  248,  649,  296,  665,  295,  666,  102,  655 }, // 652
  {  252,  648,  254,  654,   83,  667,  260,  655,  258,  651 }, // 653
  {  253,  648,  254,  653,  302,  667,  301,  664,   96,  650 }, // 654
  {  259,  651,  260,  653,  308,  667,  307,  666,  102,  652 }, // 655
  {  264,  657,  265,  658,  277,  662,  276,  661,   11,  659 }, // 656
  {  264,  656,  266,  658,   89,  669,  272,  660,  270,  659 }, // 657
  {  265,  656,  266,  657,  314,  669,  313,  668,  108,  662 }, // 658
  {  270,  657,  271,  660,  283,  663,  282,  661,   11,  656 }, // 659
  {  271,  659,  272,  657,  320,  669,  319,  670,  114,  663 }, // 660
  {  276,  656,  278,  662,   95,  671,  284,  663,  282,  659 }, // 661
  {  277,  656,  278,  661,  326,  671,  325,  668,  108,  658 }, // 662
  {  283,  659,  284,  661,  332,  671,  331,  670,  114,  660 }, // 663
  {  288,  665,  289,  650,  301,  654,  300,  667,   17,  666 }, // 664
  {  288,  664,  290,  650,   77,  649,  296,  652,  294,  666 }, // 665
  {  294,  665,  295,  652,  307,  655,  306,  667,   17,  664 }, // 666
  {  300,  664,  302,  654,   83,  653,  308,  655,  306,  666 }, // 667
  {  312,  669,  313,  658,  325,  662,  324,  671,   23,  670 }, // 668
  {  312,  668,  314,  658,   89,  657,  320,  660,  318,  670 }, // 669
  {  318,  669,  319,  660,  331,  663,  330,  671,   23,  668 }, // 670
  {  324,  668,  326,  662,   95,  661,  332,  663,  330,  670 }, // 671
  {  336,  673,  337,  674,  385,  689,  384,  688,   72,  675 }, // 672
  {  336,  672,  338,  674,   29,  683,  344,  676,  342,  675 }, // 673
  {  337,  672,  338,  673,  362,  683,  361,  682,  125,  689 }, // 674
  {  342,  673,  343,  676,  391,  690,  390,  688,   72,  672 }, // 675
  {  343,  675,  344,  673,  368,  683,  367,  684,  131,  690 }, // 676
  {  348,  678,  349,  679,  397,  692,  396,  691,   78,  680 }, // 677
  {  348,  677,  350,  679,   35,  686,  356,  681,  354,  680 }, // 678
  {  349,  677,  350,  678,  374,  686,  373,  685,  137,  692 }, // 679
  {  354,  678,  355,  681,  403,  693,  402,  691,   78,  677 }, // 680
  {  355,  680,  356,  678,  380,  686,  379,  687,  143,  693 }, // 681
  {  360,  683,  361,  674,  409,  689,  408,  694,   84,  684 }, // 682
  {  360,  682,  362,  674,   29,  673,  368,  676,  366,  684 }, // 683
  {  366,  683,  367,  676,  415,  690,  414,  694,   84,  682 }, // 684
  {  372,  686,  373,  679,  421,  692,  420,  695,   90,  687 }, // 685
  {  372,  685,  374,  679,   35,  678,  380,  681,  378,  687 }, // 686
  {  378,  686,  379,  681,  427,  693,  426,  695,   90,  685 }, // 687
  {  384,  672,  386,  689,   41,  694,  392,  690,  390,  675 }, // 688
  {  385,  672,  386,  688,  410,  694,  409,  682,  125,  674 }, // 689
  {  391,  675,  392,  688,  416,  694,  415,  684,  131,  676 }, // 690
  {  396,  677,  398,  692,   47,  695,  404,  693,  402,  680 }, // 691
  {  397,  677,  398,  691,  422,  695,  421,  685,  137,  679 }, // 692
  {  403,  680,  404,  691,  428,  695,  427,  687,  143,  681 }, // 693
  {  408,  682,  410,  689,   41,  688,  416,  690,  414,  684 }, // 694
  {  420,  685,  422,  692,   47,  691,  428,  693,  426,  687 }, // 695
  {  432,  697,  433,  698,  120,  706,  481,  713,  480,  712 }, // 696
  {  432,  696,  434,  698,  446,  703,  444,  702,  101,  712 }, // 697
  {  433,  696,  434,  697,   53,  703,  458,  707,  457,  706 }, // 698
  {  438,  700,  439,  701,  126,  708,  487,  715,  486,  714 }, // 699
  {  438,  699,  440,  701,  452,  705,  450,  704,  107,  714 }, // 700
  {  439,  699,  440,  700,   59,  705,  464,  709,  463,  708 }, // 701
  {  444,  697,  445,  703,  132,  710,  493,  716,  492,  712 }, // 702
  {  445,  702,  446,  697,   53,  698,  470,  707,  469,  710 }, // 703
  {  450,  700,  451,  705,  138,  711,  499,  717,  498,  714 }, // 704
  {  451,  704,  452,  700,   59,  701,  476,  709,  475,  711 }, // 705
  {  456,  707,  457,  698,  120,  696,  505,  713,  504,  718 }, // 706
  {  456,  706,  458,  698,  470,  703,  468,  710,  113,  718 }, // 707
  {  462,  709,  463,  701,  126,  699,  511,  715,  510,  719 }, // 708
  {  462,  708,  464,  701,  476,  705,  474,  711,  119,  719 }, // 709
  {  468,  707,  469,  703,  132,  702,  517,  716,  516,  718 }, // 710
  {  474,  709,  475,  705,  138,  704,  523,  717,  522,  719 }, // 711
  {  480,  696,  482,  713,  494,  716,  492,  702,  101,  697 }, // 712
  {  481,  696,  482,  712,   65,  716,  506,  718,  505,  706 }, // 713
  {  486,  699,  488,  715,  500,  717,  498,  704,  107,  700 }, // 714
  {  487,  699,  488,  714,   71,  717,  512,  719,  511,  708 }, // 715
  {  493,  702,  494,  712,   65,  713,  518,  718,  517,  710 }, // 716
  {  499,  704,  500,  714,   71,  715,  524,  719,  523,  711 }, // 717
  {  504,  706,  506,  713,  518,  716,  516,  710,  113,  707 }, // 718
  {  510,  708,  512,  715,  524,  717,  522,  711,  119,  709 }, // 719
};
int faceToVertK120[720][5] = { // Vertices for each face, in face order
  {    0,  329,  233,  232,  328 }, //   0
  {    0,  344,  472,  440,  328 }, //   1
  {    0,  345,  473,  448,  328 }, //   2
  {    0,  344,  480,  441,  329 }, //   3
  {    0,  345,  481,  449,  329 }, //   4
  {    0,  345,  249,  248,  344 }, //   5
  {    1,  331,  235,  234,  330 }, //   6
  {    1,  346,  474,  442,  330 }, //   7
  {    1,  347,  475,  450,  330 }, //   8
  {    1,  346,  482,  443,  331 }, //   9
  {    1,  347,  483,  451,  331 }, //  10
  {    1,  347,  251,  250,  346 }, //  11
  {    2,  333,  237,  236,  332 }, //  12
  {    2,  348,  476,  444,  332 }, //  13
  {    2,  349,  477,  452,  332 }, //  14
  {    2,  348,  484,  445,  333 }, //  15
  {    2,  349,  485,  453,  333 }, //  16
  {    2,  349,  253,  252,  348 }, //  17
  {    3,  335,  239,  238,  334 }, //  18
  {    3,  350,  478,  446,  334 }, //  19
  {    3,  351,  479,  454,  334 }, //  20
  {    3,  350,  486,  447,  335 }, //  21
  {    3,  351,  487,  455,  335 }, //  22
  {    3,  351,  255,  254,  350 }, //  23
  {    4,  314,  218,  216,  312 }, //  24
  {    4,  400,  584,  408,  312 }, //  25
  {    4,  401,  585,  416,  312 }, //  26
  {    4,  400,  592,  410,  314 }, //  27
  {    4,  401,  593,  418,  314 }, //  28
  {    4,  401,  305,  304,  400 }, //  29
  {    5,  315,  219,  217,  313 }, //  30
  {    5,  402,  586,  409,  313 }, //  31
  {    5,  403,  587,  417,  313 }, //  32
  {    5,  402,  594,  411,  315 }, //  33
  {    5,  403,  595,  419,  315 }, //  34
  {    5,  403,  307,  306,  402 }, //  35
  {    6,  318,  222,  220,  316 }, //  36
  {    6,  404,  588,  412,  316 }, //  37
  {    6,  405,  589,  420,  316 }, //  38
  {    6,  404,  596,  414,  318 }, //  39
  {    6,  405,  597,  422,  318 }, //  40
  {    6,  405,  309,  308,  404 }, //  41
  {    7,  319,  223,  221,  317 }, //  42
  {    7,  406,  590,  413,  317 }, //  43
  {    7,  407,  591,  421,  317 }, //  44
  {    7,  406,  598,  415,  319 }, //  45
  {    7,  407,  599,  423,  319 }, //  46
  {    7,  407,  311,  310,  406 }, //  47
  {    8,  338,  242,  240,  336 }, //  48
  {    8,  384,  552,  456,  336 }, //  49
  {    8,  386,  554,  464,  336 }, //  50
  {    8,  384,  560,  458,  338 }, //  51
  {    8,  386,  562,  466,  338 }, //  52
  {    8,  386,  290,  288,  384 }, //  53
  {    9,  339,  243,  241,  337 }, //  54
  {    9,  385,  553,  457,  337 }, //  55
  {    9,  387,  555,  465,  337 }, //  56
  {    9,  385,  561,  459,  339 }, //  57
  {    9,  387,  563,  467,  339 }, //  58
  {    9,  387,  291,  289,  385 }, //  59
  {   10,  342,  246,  244,  340 }, //  60
  {   10,  388,  556,  460,  340 }, //  61
  {   10,  390,  558,  468,  340 }, //  62
  {   10,  388,  564,  462,  342 }, //  63
  {   10,  390,  566,  470,  342 }, //  64
  {   10,  390,  294,  292,  388 }, //  65
  {   11,  343,  247,  245,  341 }, //  66
  {   11,  389,  557,  461,  341 }, //  67
  {   11,  391,  559,  469,  341 }, //  68
  {   11,  389,  565,  463,  343 }, //  69
  {   11,  391,  567,  471,  343 }, //  70
  {   11,  391,  295,  293,  389 }, //  71
  {   12,  324,  228,  224,  320 }, //  72
  {   12,  368,  520,  424,  320 }, //  73
  {   12,  369,  521,  432,  320 }, //  74
  {   12,  368,  528,  428,  324 }, //  75
  {   12,  369,  529,  436,  324 }, //  76
  {   12,  369,  273,  272,  368 }, //  77
  {   13,  325,  229,  225,  321 }, //  78
  {   13,  370,  522,  425,  321 }, //  79
  {   13,  371,  523,  433,  321 }, //  80
  {   13,  370,  530,  429,  325 }, //  81
  {   13,  371,  531,  437,  325 }, //  82
  {   13,  371,  275,  274,  370 }, //  83
  {   14,  326,  230,  226,  322 }, //  84
  {   14,  372,  524,  426,  322 }, //  85
  {   14,  373,  525,  434,  322 }, //  86
  {   14,  372,  532,  430,  326 }, //  87
  {   14,  373,  533,  438,  326 }, //  88
  {   14,  373,  277,  276,  372 }, //  89
  {   15,  327,  231,  227,  323 }, //  90
  {   15,  374,  526,  427,  323 }, //  91
  {   15,  375,  527,  435,  323 }, //  92
  {   15,  374,  534,  431,  327 }, //  93
  {   15,  375,  535,  439,  327 }, //  94
  {   15,  375,  279,  278,  374 }, //  95
  {   16,  356,  260,  256,  352 }, //  96
  {   16,  360,  504,  488,  352 }, //  97
  {   16,  362,  506,  496,  352 }, //  98
  {   16,  360,  512,  492,  356 }, //  99
  {   16,  362,  514,  500,  356 }, // 100
  {   16,  362,  266,  264,  360 }, // 101
  {   17,  357,  261,  257,  353 }, // 102
  {   17,  361,  505,  489,  353 }, // 103
  {   17,  363,  507,  497,  353 }, // 104
  {   17,  361,  513,  493,  357 }, // 105
  {   17,  363,  515,  501,  357 }, // 106
  {   17,  363,  267,  265,  361 }, // 107
  {   18,  358,  262,  258,  354 }, // 108
  {   18,  364,  508,  490,  354 }, // 109
  {   18,  366,  510,  498,  354 }, // 110
  {   18,  364,  516,  494,  358 }, // 111
  {   18,  366,  518,  502,  358 }, // 112
  {   18,  366,  270,  268,  364 }, // 113
  {   19,  359,  263,  259,  355 }, // 114
  {   19,  365,  509,  491,  355 }, // 115
  {   19,  367,  511,  499,  355 }, // 116
  {   19,  365,  517,  495,  359 }, // 117
  {   19,  367,  519,  503,  359 }, // 118
  {   19,  367,  271,  269,  365 }, // 119
  {   20,  380,  284,  280,  376 }, // 120
  {   20,  392,  568,  536,  376 }, // 121
  {   20,  396,  572,  544,  376 }, // 122
  {   20,  392,  576,  540,  380 }, // 123
  {   20,  396,  580,  548,  380 }, // 124
  {   20,  396,  300,  296,  392 }, // 125
  {   21,  381,  285,  281,  377 }, // 126
  {   21,  393,  569,  537,  377 }, // 127
  {   21,  397,  573,  545,  377 }, // 128
  {   21,  393,  577,  541,  381 }, // 129
  {   21,  397,  581,  549,  381 }, // 130
  {   21,  397,  301,  297,  393 }, // 131
  {   22,  382,  286,  282,  378 }, // 132
  {   22,  394,  570,  538,  378 }, // 133
  {   22,  398,  574,  546,  378 }, // 134
  {   22,  394,  578,  542,  382 }, // 135
  {   22,  398,  582,  550,  382 }, // 136
  {   22,  398,  302,  298,  394 }, // 137
  {   23,  383,  287,  283,  379 }, // 138
  {   23,  395,  571,  539,  379 }, // 139
  {   23,  399,  575,  547,  379 }, // 140
  {   23,  395,  579,  543,  383 }, // 141
  {   23,  399,  583,  551,  383 }, // 142
  {   23,  399,  303,  299,  395 }, // 143
  {   24,  408,  312,  216,  152 }, // 144
  {   24,  440,  328,  232,  152 }, // 145
  {   24,  456,  336,  240,  152 }, // 146
  {   24,  440,  472,  136,  408 }, // 147
  {   24,  456,  104,  584,  408 }, // 148
  {   24,  456,  552,  120,  440 }, // 149
  {   25,  416,  312,  216,  153 }, // 150
  {   25,  441,  329,  233,  153 }, // 151
  {   25,  457,  337,  241,  153 }, // 152
  {   25,  441,  480,  137,  416 }, // 153
  {   25,  457,  105,  585,  416 }, // 154
  {   25,  457,  553,  121,  441 }, // 155
  {   26,  409,  313,  217,  154 }, // 156
  {   26,  448,  328,  232,  154 }, // 157
  {   26,  458,  338,  242,  154 }, // 158
  {   26,  448,  473,  138,  409 }, // 159
  {   26,  458,  106,  586,  409 }, // 160
  {   26,  458,  560,  122,  448 }, // 161
  {   27,  417,  313,  217,  155 }, // 162
  {   27,  449,  329,  233,  155 }, // 163
  {   27,  459,  339,  243,  155 }, // 164
  {   27,  449,  481,  139,  417 }, // 165
  {   27,  459,  107,  587,  417 }, // 166
  {   27,  459,  561,  123,  449 }, // 167
  {   28,  410,  314,  218,  156 }, // 168
  {   28,  442,  330,  234,  156 }, // 169
  {   28,  464,  336,  240,  156 }, // 170
  {   28,  442,  474,  140,  410 }, // 171
  {   28,  464,  108,  592,  410 }, // 172
  {   28,  464,  554,  124,  442 }, // 173
  {   29,  418,  314,  218,  157 }, // 174
  {   29,  443,  331,  235,  157 }, // 175
  {   29,  465,  337,  241,  157 }, // 176
  {   29,  443,  482,  141,  418 }, // 177
  {   29,  465,  109,  593,  418 }, // 178
  {   29,  465,  555,  125,  443 }, // 179
  {   30,  411,  315,  219,  158 }, // 180
  {   30,  450,  330,  234,  158 }, // 181
  {   30,  466,  338,  242,  158 }, // 182
  {   30,  450,  475,  142,  411 }, // 183
  {   30,  466,  110,  594,  411 }, // 184
  {   30,  466,  562,  126,  450 }, // 185
  {   31,  419,  315,  219,  159 }, // 186
  {   31,  451,  331,  235,  159 }, // 187
  {   31,  467,  339,  243,  159 }, // 188
  {   31,  451,  483,  143,  419 }, // 189
  {   31,  467,  111,  595,  419 }, // 190
  {   31,  467,  563,  127,  451 }, // 191
  {   32,  412,  316,  220,  160 }, // 192
  {   32,  444,  332,  236,  160 }, // 193
  {   32,  460,  340,  244,  160 }, // 194
  {   32,  444,  476,  144,  412 }, // 195
  {   32,  460,  112,  588,  412 }, // 196
  {   32,  460,  556,  128,  444 }, // 197
  {   33,  420,  316,  220,  161 }, // 198
  {   33,  445,  333,  237,  161 }, // 199
  {   33,  461,  341,  245,  161 }, // 200
  {   33,  445,  484,  145,  420 }, // 201
  {   33,  461,  113,  589,  420 }, // 202
  {   33,  461,  557,  129,  445 }, // 203
  {   34,  413,  317,  221,  162 }, // 204
  {   34,  452,  332,  236,  162 }, // 205
  {   34,  462,  342,  246,  162 }, // 206
  {   34,  452,  477,  146,  413 }, // 207
  {   34,  462,  114,  590,  413 }, // 208
  {   34,  462,  564,  130,  452 }, // 209
  {   35,  421,  317,  221,  163 }, // 210
  {   35,  453,  333,  237,  163 }, // 211
  {   35,  463,  343,  247,  163 }, // 212
  {   35,  453,  485,  147,  421 }, // 213
  {   35,  463,  115,  591,  421 }, // 214
  {   35,  463,  565,  131,  453 }, // 215
  {   36,  414,  318,  222,  164 }, // 216
  {   36,  446,  334,  238,  164 }, // 217
  {   36,  468,  340,  244,  164 }, // 218
  {   36,  446,  478,  148,  414 }, // 219
  {   36,  468,  116,  596,  414 }, // 220
  {   36,  468,  558,  132,  446 }, // 221
  {   37,  422,  318,  222,  165 }, // 222
  {   37,  447,  335,  239,  165 }, // 223
  {   37,  469,  341,  245,  165 }, // 224
  {   37,  447,  486,  149,  422 }, // 225
  {   37,  469,  117,  597,  422 }, // 226
  {   37,  469,  559,  133,  447 }, // 227
  {   38,  415,  319,  223,  166 }, // 228
  {   38,  454,  334,  238,  166 }, // 229
  {   38,  470,  342,  246,  166 }, // 230
  {   38,  454,  479,  150,  415 }, // 231
  {   38,  470,  118,  598,  415 }, // 232
  {   38,  470,  566,  134,  454 }, // 233
  {   39,  423,  319,  223,  167 }, // 234
  {   39,  455,  335,  239,  167 }, // 235
  {   39,  471,  343,  247,  167 }, // 236
  {   39,  455,  487,  151,  423 }, // 237
  {   39,  471,  119,  599,  423 }, // 238
  {   39,  471,  567,  135,  455 }, // 239
  {   40,  472,  344,  248,  168 }, // 240
  {   40,  488,  352,  256,  168 }, // 241
  {   40,  520,  368,  272,  168 }, // 242
  {   40,  488,  120,  440,  472 }, // 243
  {   40,  520,  424,  136,  472 }, // 244
  {   40,  520,   88,  504,  488 }, // 245
  {   41,  480,  344,  248,  169 }, // 246
  {   41,  489,  353,  257,  169 }, // 247
  {   41,  521,  369,  273,  169 }, // 248
  {   41,  489,  121,  441,  480 }, // 249
  {   41,  521,  432,  137,  480 }, // 250
  {   41,  521,   89,  505,  489 }, // 251
  {   42,  473,  345,  249,  170 }, // 252
  {   42,  496,  352,  256,  170 }, // 253
  {   42,  522,  370,  274,  170 }, // 254
  {   42,  496,  122,  448,  473 }, // 255
  {   42,  522,  425,  138,  473 }, // 256
  {   42,  522,   90,  506,  496 }, // 257
  {   43,  481,  345,  249,  171 }, // 258
  {   43,  497,  353,  257,  171 }, // 259
  {   43,  523,  371,  275,  171 }, // 260
  {   43,  497,  123,  449,  481 }, // 261
  {   43,  523,  433,  139,  481 }, // 262
  {   43,  523,   91,  507,  497 }, // 263
  {   44,  474,  346,  250,  172 }, // 264
  {   44,  490,  354,  258,  172 }, // 265
  {   44,  524,  372,  276,  172 }, // 266
  {   44,  490,  124,  442,  474 }, // 267
  {   44,  524,  426,  140,  474 }, // 268
  {   44,  524,   92,  508,  490 }, // 269
  {   45,  482,  346,  250,  173 }, // 270
  {   45,  491,  355,  259,  173 }, // 271
  {   45,  525,  373,  277,  173 }, // 272
  {   45,  491,  125,  443,  482 }, // 273
  {   45,  525,  434,  141,  482 }, // 274
  {   45,  525,   93,  509,  491 }, // 275
  {   46,  475,  347,  251,  174 }, // 276
  {   46,  498,  354,  258,  174 }, // 277
  {   46,  526,  374,  278,  174 }, // 278
  {   46,  498,  126,  450,  475 }, // 279
  {   46,  526,  427,  142,  475 }, // 280
  {   46,  526,   94,  510,  498 }, // 281
  {   47,  483,  347,  251,  175 }, // 282
  {   47,  499,  355,  259,  175 }, // 283
  {   47,  527,  375,  279,  175 }, // 284
  {   47,  499,  127,  451,  483 }, // 285
  {   47,  527,  435,  143,  483 }, // 286
  {   47,  527,   95,  511,  499 }, // 287
  {   48,  476,  348,  252,  176 }, // 288
  {   48,  492,  356,  260,  176 }, // 289
  {   48,  528,  368,  272,  176 }, // 290
  {   48,  492,  128,  444,  476 }, // 291
  {   48,  528,  428,  144,  476 }, // 292
  {   48,  528,   96,  512,  492 }, // 293
  {   49,  484,  348,  252,  177 }, // 294
  {   49,  493,  357,  261,  177 }, // 295
  {   49,  529,  369,  273,  177 }, // 296
  {   49,  493,  129,  445,  484 }, // 297
  {   49,  529,  436,  145,  484 }, // 298
  {   49,  529,   97,  513,  493 }, // 299
  {   50,  477,  349,  253,  178 }, // 300
  {   50,  500,  356,  260,  178 }, // 301
  {   50,  530,  370,  274,  178 }, // 302
  {   50,  500,  130,  452,  477 }, // 303
  {   50,  530,  429,  146,  477 }, // 304
  {   50,  530,   98,  514,  500 }, // 305
  {   51,  485,  349,  253,  179 }, // 306
  {   51,  501,  357,  261,  179 }, // 307
  {   51,  531,  371,  275,  179 }, // 308
  {   51,  501,  131,  453,  485 }, // 309
  {   51,  531,  437,  147,  485 }, // 310
  {   51,  531,   99,  515,  501 }, // 311
  {   52,  478,  350,  254,  180 }, // 312
  {   52,  494,  358,  262,  180 }, // 313
  {   52,  532,  372,  276,  180 }, // 314
  {   52,  494,  132,  446,  478 }, // 315
  {   52,  532,  430,  148,  478 }, // 316
  {   52,  532,  100,  516,  494 }, // 317
  {   53,  486,  350,  254,  181 }, // 318
  {   53,  495,  359,  263,  181 }, // 319
  {   53,  533,  373,  277,  181 }, // 320
  {   53,  495,  133,  447,  486 }, // 321
  {   53,  533,  438,  149,  486 }, // 322
  {   53,  533,  101,  517,  495 }, // 323
  {   54,  479,  351,  255,  182 }, // 324
  {   54,  502,  358,  262,  182 }, // 325
  {   54,  534,  374,  278,  182 }, // 326
  {   54,  502,  134,  454,  479 }, // 327
  {   54,  534,  431,  150,  479 }, // 328
  {   54,  534,  102,  518,  502 }, // 329
  {   55,  487,  351,  255,  183 }, // 330
  {   55,  503,  359,  263,  183 }, // 331
  {   55,  535,  375,  279,  183 }, // 332
  {   55,  503,  135,  455,  487 }, // 333
  {   55,  535,  439,  151,  487 }, // 334
  {   55,  535,  103,  519,  503 }, // 335
  {   56,  424,  320,  224,  184 }, // 336
  {   56,  568,  392,  296,  184 }, // 337
  {   56,  584,  400,  304,  184 }, // 338
  {   56,  568,   88,  520,  424 }, // 339
  {   56,  584,  408,  136,  424 }, // 340
  {   56,  584,  104,  536,  568 }, // 341
  {   57,  432,  320,  224,  185 }, // 342
  {   57,  569,  393,  297,  185 }, // 343
  {   57,  585,  401,  305,  185 }, // 344
  {   57,  569,   89,  521,  432 }, // 345
  {   57,  585,  416,  137,  432 }, // 346
  {   57,  585,  105,  537,  569 }, // 347
  {   58,  425,  321,  225,  186 }, // 348
  {   58,  570,  394,  298,  186 }, // 349
  {   58,  586,  402,  306,  186 }, // 350
  {   58,  570,   90,  522,  425 }, // 351
  {   58,  586,  409,  138,  425 }, // 352
  {   58,  586,  106,  538,  570 }, // 353
  {   59,  433,  321,  225,  187 }, // 354
  {   59,  571,  395,  299,  187 }, // 355
  {   59,  587,  403,  307,  187 }, // 356
  {   59,  571,   91,  523,  433 }, // 357
  {   59,  587,  417,  139,  433 }, // 358
  {   59,  587,  107,  539,  571 }, // 359
  {   60,  426,  322,  226,  188 }, // 360
  {   60,  572,  396,  300,  188 }, // 361
  {   60,  592,  400,  304,  188 }, // 362
  {   60,  572,   92,  524,  426 }, // 363
  {   60,  592,  410,  140,  426 }, // 364
  {   60,  592,  108,  544,  572 }, // 365
  {   61,  434,  322,  226,  189 }, // 366
  {   61,  573,  397,  301,  189 }, // 367
  {   61,  593,  401,  305,  189 }, // 368
  {   61,  573,   93,  525,  434 }, // 369
  {   61,  593,  418,  141,  434 }, // 370
  {   61,  593,  109,  545,  573 }, // 371
  {   62,  427,  323,  227,  190 }, // 372
  {   62,  574,  398,  302,  190 }, // 373
  {   62,  594,  402,  306,  190 }, // 374
  {   62,  574,   94,  526,  427 }, // 375
  {   62,  594,  411,  142,  427 }, // 376
  {   62,  594,  110,  546,  574 }, // 377
  {   63,  435,  323,  227,  191 }, // 378
  {   63,  575,  399,  303,  191 }, // 379
  {   63,  595,  403,  307,  191 }, // 380
  {   63,  575,   95,  527,  435 }, // 381
  {   63,  595,  419,  143,  435 }, // 382
  {   63,  595,  111,  547,  575 }, // 383
  {   64,  428,  324,  228,  192 }, // 384
  {   64,  576,  392,  296,  192 }, // 385
  {   64,  588,  404,  308,  192 }, // 386
  {   64,  576,   96,  528,  428 }, // 387
  {   64,  588,  412,  144,  428 }, // 388
  {   64,  588,  112,  540,  576 }, // 389
  {   65,  436,  324,  228,  193 }, // 390
  {   65,  577,  393,  297,  193 }, // 391
  {   65,  589,  405,  309,  193 }, // 392
  {   65,  577,   97,  529,  436 }, // 393
  {   65,  589,  420,  145,  436 }, // 394
  {   65,  589,  113,  541,  577 }, // 395
  {   66,  429,  325,  229,  194 }, // 396
  {   66,  578,  394,  298,  194 }, // 397
  {   66,  590,  406,  310,  194 }, // 398
  {   66,  578,   98,  530,  429 }, // 399
  {   66,  590,  413,  146,  429 }, // 400
  {   66,  590,  114,  542,  578 }, // 401
  {   67,  437,  325,  229,  195 }, // 402
  {   67,  579,  395,  299,  195 }, // 403
  {   67,  591,  407,  311,  195 }, // 404
  {   67,  579,   99,  531,  437 }, // 405
  {   67,  591,  421,  147,  437 }, // 406
  {   67,  591,  115,  543,  579 }, // 407
  {   68,  430,  326,  230,  196 }, // 408
  {   68,  580,  396,  300,  196 }, // 409
  {   68,  596,  404,  308,  196 }, // 410
  {   68,  580,  100,  532,  430 }, // 411
  {   68,  596,  414,  148,  430 }, // 412
  {   68,  596,  116,  548,  580 }, // 413
  {   69,  438,  326,  230,  197 }, // 414
  {   69,  581,  397,  301,  197 }, // 415
  {   69,  597,  405,  309,  197 }, // 416
  {   69,  581,  101,  533,  438 }, // 417
  {   69,  597,  422,  149,  438 }, // 418
  {   69,  597,  117,  549,  581 }, // 419
  {   70,  431,  327,  231,  198 }, // 420
  {   70,  582,  398,  302,  198 }, // 421
  {   70,  598,  406,  310,  198 }, // 422
  {   70,  582,  102,  534,  431 }, // 423
  {   70,  598,  415,  150,  431 }, // 424
  {   70,  598,  118,  550,  582 }, // 425
  {   71,  439,  327,  231,  199 }, // 426
  {   71,  583,  399,  303,  199 }, // 427
  {   71,  599,  407,  311,  199 }, // 428
  {   71,  583,  103,  535,  439 }, // 429
  {   71,  599,  423,  151,  439 }, // 430
  {   71,  599,  119,  551,  583 }, // 431
  {   72,  504,  360,  264,  200 }, // 432
  {   72,  536,  376,  280,  200 }, // 433
  {   72,  552,  384,  288,  200 }, // 434
  {   72,  536,  568,   88,  504 }, // 435
  {   72,  552,  120,  488,  504 }, // 436
  {   72,  552,  456,  104,  536 }, // 437
  {   73,  505,  361,  265,  201 }, // 438
  {   73,  537,  377,  281,  201 }, // 439
  {   73,  553,  385,  289,  201 }, // 440
  {   73,  537,  569,   89,  505 }, // 441
  {   73,  553,  121,  489,  505 }, // 442
  {   73,  553,  457,  105,  537 }, // 443
  {   74,  506,  362,  266,  202 }, // 444
  {   74,  538,  378,  282,  202 }, // 445
  {   74,  560,  384,  288,  202 }, // 446
  {   74,  538,  570,   90,  506 }, // 447
  {   74,  560,  122,  496,  506 }, // 448
  {   74,  560,  458,  106,  538 }, // 449
  {   75,  507,  363,  267,  203 }, // 450
  {   75,  539,  379,  283,  203 }, // 451
  {   75,  561,  385,  289,  203 }, // 452
  {   75,  539,  571,   91,  507 }, // 453
  {   75,  561,  123,  497,  507 }, // 454
  {   75,  561,  459,  107,  539 }, // 455
  {   76,  508,  364,  268,  204 }, // 456
  {   76,  544,  376,  280,  204 }, // 457
  {   76,  554,  386,  290,  204 }, // 458
  {   76,  544,  572,   92,  508 }, // 459
  {   76,  554,  124,  490,  508 }, // 460
  {   76,  554,  464,  108,  544 }, // 461
  {   77,  509,  365,  269,  205 }, // 462
  {   77,  545,  377,  281,  205 }, // 463
  {   77,  555,  387,  291,  205 }, // 464
  {   77,  545,  573,   93,  509 }, // 465
  {   77,  555,  125,  491,  509 }, // 466
  {   77,  555,  465,  109,  545 }, // 467
  {   78,  510,  366,  270,  206 }, // 468
  {   78,  546,  378,  282,  206 }, // 469
  {   78,  562,  386,  290,  206 }, // 470
  {   78,  546,  574,   94,  510 }, // 471
  {   78,  562,  126,  498,  510 }, // 472
  {   78,  562,  466,  110,  546 }, // 473
  {   79,  511,  367,  271,  207 }, // 474
  {   79,  547,  379,  283,  207 }, // 475
  {   79,  563,  387,  291,  207 }, // 476
  {   79,  547,  575,   95,  511 }, // 477
  {   79,  563,  127,  499,  511 }, // 478
  {   79,  563,  467,  111,  547 }, // 479
  {   80,  512,  360,  264,  208 }, // 480
  {   80,  540,  380,  284,  208 }, // 481
  {   80,  556,  388,  292,  208 }, // 482
  {   80,  540,  576,   96,  512 }, // 483
  {   80,  556,  128,  492,  512 }, // 484
  {   80,  556,  460,  112,  540 }, // 485
  {   81,  513,  361,  265,  209 }, // 486
  {   81,  541,  381,  285,  209 }, // 487
  {   81,  557,  389,  293,  209 }, // 488
  {   81,  541,  577,   97,  513 }, // 489
  {   81,  557,  129,  493,  513 }, // 490
  {   81,  557,  461,  113,  541 }, // 491
  {   82,  514,  362,  266,  210 }, // 492
  {   82,  542,  382,  286,  210 }, // 493
  {   82,  564,  388,  292,  210 }, // 494
  {   82,  542,  578,   98,  514 }, // 495
  {   82,  564,  130,  500,  514 }, // 496
  {   82,  564,  462,  114,  542 }, // 497
  {   83,  515,  363,  267,  211 }, // 498
  {   83,  543,  383,  287,  211 }, // 499
  {   83,  565,  389,  293,  211 }, // 500
  {   83,  543,  579,   99,  515 }, // 501
  {   83,  565,  131,  501,  515 }, // 502
  {   83,  565,  463,  115,  543 }, // 503
  {   84,  516,  364,  268,  212 }, // 504
  {   84,  548,  380,  284,  212 }, // 505
  {   84,  558,  390,  294,  212 }, // 506
  {   84,  548,  580,  100,  516 }, // 507
  {   84,  558,  132,  494,  516 }, // 508
  {   84,  558,  468,  116,  548 }, // 509
  {   85,  517,  365,  269,  213 }, // 510
  {   85,  549,  381,  285,  213 }, // 511
  {   85,  559,  391,  295,  213 }, // 512
  {   85,  549,  581,  101,  517 }, // 513
  {   85,  559,  133,  495,  517 }, // 514
  {   85,  559,  469,  117,  549 }, // 515
  {   86,  518,  366,  270,  214 }, // 516
  {   86,  550,  382,  286,  214 }, // 517
  {   86,  566,  390,  294,  214 }, // 518
  {   86,  550,  582,  102,  518 }, // 519
  {   86,  566,  134,  502,  518 }, // 520
  {   86,  566,  470,  118,  550 }, // 521
  {   87,  519,  367,  271,  215 }, // 522
  {   87,  551,  383,  287,  215 }, // 523
  {   87,  567,  391,  295,  215 }, // 524
  {   87,  551,  583,  103,  519 }, // 525
  {   87,  567,  135,  503,  519 }, // 526
  {   87,  567,  471,  119,  551 }, // 527
  {   88,  504,  360,  512,   96 }, // 528
  {   88,  520,  368,  528,   96 }, // 529
  {   88,  568,  392,  576,   96 }, // 530
  {   89,  505,  361,  513,   97 }, // 531
  {   89,  521,  369,  529,   97 }, // 532
  {   89,  569,  393,  577,   97 }, // 533
  {   90,  506,  362,  514,   98 }, // 534
  {   90,  522,  370,  530,   98 }, // 535
  {   90,  570,  394,  578,   98 }, // 536
  {   91,  507,  363,  515,   99 }, // 537
  {   91,  523,  371,  531,   99 }, // 538
  {   91,  571,  395,  579,   99 }, // 539
  {   92,  508,  364,  516,  100 }, // 540
  {   92,  524,  372,  532,  100 }, // 541
  {   92,  572,  396,  580,  100 }, // 542
  {   93,  509,  365,  517,  101 }, // 543
  {   93,  525,  373,  533,  101 }, // 544
  {   93,  573,  397,  581,  101 }, // 545
  {   94,  510,  366,  518,  102 }, // 546
  {   94,  526,  374,  534,  102 }, // 547
  {   94,  574,  398,  582,  102 }, // 548
  {   95,  511,  367,  519,  103 }, // 549
  {   95,  527,  375,  535,  103 }, // 550
  {   95,  575,  399,  583,  103 }, // 551
  {  104,  456,  336,  464,  108 }, // 552
  {  104,  536,  376,  544,  108 }, // 553
  {  104,  584,  400,  592,  108 }, // 554
  {  105,  457,  337,  465,  109 }, // 555
  {  105,  537,  377,  545,  109 }, // 556
  {  105,  585,  401,  593,  109 }, // 557
  {  106,  458,  338,  466,  110 }, // 558
  {  106,  538,  378,  546,  110 }, // 559
  {  106,  586,  402,  594,  110 }, // 560
  {  107,  459,  339,  467,  111 }, // 561
  {  107,  539,  379,  547,  111 }, // 562
  {  107,  587,  403,  595,  111 }, // 563
  {  112,  460,  340,  468,  116 }, // 564
  {  112,  540,  380,  548,  116 }, // 565
  {  112,  588,  404,  596,  116 }, // 566
  {  113,  461,  341,  469,  117 }, // 567
  {  113,  541,  381,  549,  117 }, // 568
  {  113,  589,  405,  597,  117 }, // 569
  {  114,  462,  342,  470,  118 }, // 570
  {  114,  542,  382,  550,  118 }, // 571
  {  114,  590,  406,  598,  118 }, // 572
  {  115,  463,  343,  471,  119 }, // 573
  {  115,  543,  383,  551,  119 }, // 574
  {  115,  591,  407,  599,  119 }, // 575
  {  120,  440,  328,  448,  122 }, // 576
  {  120,  488,  352,  496,  122 }, // 577
  {  120,  552,  384,  560,  122 }, // 578
  {  121,  441,  329,  449,  123 }, // 579
  {  121,  489,  353,  497,  123 }, // 580
  {  121,  553,  385,  561,  123 }, // 581
  {  124,  442,  330,  450,  126 }, // 582
  {  124,  490,  354,  498,  126 }, // 583
  {  124,  554,  386,  562,  126 }, // 584
  {  125,  443,  331,  451,  127 }, // 585
  {  125,  491,  355,  499,  127 }, // 586
  {  125,  555,  387,  563,  127 }, // 587
  {  128,  444,  332,  452,  130 }, // 588
  {  128,  492,  356,  500,  130 }, // 589
  {  128,  556,  388,  564,  130 }, // 590
  {  129,  445,  333,  453,  131 }, // 591
  {  129,  493,  357,  501,  131 }, // 592
  {  129,  557,  389,  565,  131 }, // 593
  {  132,  446,  334,  454,  134 }, // 594
  {  132,  494,  358,  502,  134 }, // 595
  {  132,  558,  390,  566,  134 }, // 596
  {  133,  447,  335,  455,  135 }, // 597
  {  133,  495,  359,  503,  135 }, // 598
  {  133,  559,  391,  567,  135 }, // 599
  {  136,  408,  312,  416,  137 }, // 600
  {  136,  424,  320,  432,  137 }, // 601
  {  136,  472,  344,  480,  137 }, // 602
  {  138,  409,  313,  417,  139 }, // 603
  {  138,  425,  321,  433,  139 }, // 604
  {  138,  473,  345,  481,  139 }, // 605
  {  140,  410,  314,  418,  141 }, // 606
  {  140,  426,  322,  434,  141 }, // 607
  {  140,  474,  346,  482,  141 }, // 608
  {  142,  411,  315,  419,  143 }, // 609
  {  142,  427,  323,  435,  143 }, // 610
  {  142,  475,  347,  483,  143 }, // 611
  {  144,  412,  316,  420,  145 }, // 612
  {  144,  428,  324,  436,  145 }, // 613
  {  144,  476,  348,  484,  145 }, // 614
  {  146,  413,  317,  421,  147 }, // 615
  {  146,  429,  325,  437,  147 }, // 616
  {  146,  477,  349,  485,  147 }, // 617
  {  148,  414,  318,  422,  149 }, // 618
  {  148,  430,  326,  438,  149 }, // 619
  {  148,  478,  350,  486,  149 }, // 620
  {  150,  415,  319,  423,  151 }, // 621
  {  150,  431,  327,  439,  151 }, // 622
  {  150,  479,  351,  487,  151 }, // 623
  {  152,  232,  233,  153,  216 }, // 624
  {  152,  240,  156,  218,  216 }, // 625
  {  152,  240,  242,  154,  232 }, // 626
  {  153,  241,  157,  218,  216 }, // 627
  {  153,  241,  243,  155,  233 }, // 628
  {  154,  232,  233,  155,  217 }, // 629
  {  154,  242,  158,  219,  217 }, // 630
  {  155,  243,  159,  219,  217 }, // 631
  {  156,  234,  235,  157,  218 }, // 632
  {  156,  240,  242,  158,  234 }, // 633
  {  157,  241,  243,  159,  235 }, // 634
  {  158,  234,  235,  159,  219 }, // 635
  {  160,  236,  237,  161,  220 }, // 636
  {  160,  244,  164,  222,  220 }, // 637
  {  160,  244,  246,  162,  236 }, // 638
  {  161,  245,  165,  222,  220 }, // 639
  {  161,  245,  247,  163,  237 }, // 640
  {  162,  236,  237,  163,  221 }, // 641
  {  162,  246,  166,  223,  221 }, // 642
  {  163,  247,  167,  223,  221 }, // 643
  {  164,  238,  239,  165,  222 }, // 644
  {  164,  244,  246,  166,  238 }, // 645
  {  165,  245,  247,  167,  239 }, // 646
  {  166,  238,  239,  167,  223 }, // 647
  {  168,  256,  170,  249,  248 }, // 648
  {  168,  272,  273,  169,  248 }, // 649
  {  168,  272,  176,  260,  256 }, // 650
  {  169,  257,  171,  249,  248 }, // 651
  {  169,  273,  177,  261,  257 }, // 652
  {  170,  274,  275,  171,  249 }, // 653
  {  170,  274,  178,  260,  256 }, // 654
  {  171,  275,  179,  261,  257 }, // 655
  {  172,  258,  174,  251,  250 }, // 656
  {  172,  276,  277,  173,  250 }, // 657
  {  172,  276,  180,  262,  258 }, // 658
  {  173,  259,  175,  251,  250 }, // 659
  {  173,  277,  181,  263,  259 }, // 660
  {  174,  278,  279,  175,  251 }, // 661
  {  174,  278,  182,  262,  258 }, // 662
  {  175,  279,  183,  263,  259 }, // 663
  {  176,  260,  178,  253,  252 }, // 664
  {  176,  272,  273,  177,  252 }, // 665
  {  177,  261,  179,  253,  252 }, // 666
  {  178,  274,  275,  179,  253 }, // 667
  {  180,  262,  182,  255,  254 }, // 668
  {  180,  276,  277,  181,  254 }, // 669
  {  181,  263,  183,  255,  254 }, // 670
  {  182,  278,  279,  183,  255 }, // 671
  {  184,  296,  192,  228,  224 }, // 672
  {  184,  304,  305,  185,  224 }, // 673
  {  184,  304,  188,  300,  296 }, // 674
  {  185,  297,  193,  228,  224 }, // 675
  {  185,  305,  189,  301,  297 }, // 676
  {  186,  298,  194,  229,  225 }, // 677
  {  186,  306,  307,  187,  225 }, // 678
  {  186,  306,  190,  302,  298 }, // 679
  {  187,  299,  195,  229,  225 }, // 680
  {  187,  307,  191,  303,  299 }, // 681
  {  188,  300,  196,  230,  226 }, // 682
  {  188,  304,  305,  189,  226 }, // 683
  {  189,  301,  197,  230,  226 }, // 684
  {  190,  302,  198,  231,  227 }, // 685
  {  190,  306,  307,  191,  227 }, // 686
  {  191,  303,  199,  231,  227 }, // 687
  {  192,  308,  309,  193,  228 }, // 688
  {  192,  308,  196,  300,  296 }, // 689
  {  193,  309,  197,  301,  297 }, // 690
  {  194,  310,  311,  195,  229 }, // 691
  {  194,  310,  198,  302,  298 }, // 692
  {  195,  311,  199,  303,  299 }, // 693
  {  196,  308,  309,  197,  230 }, // 694
  {  198,  310,  311,  199,  231 }, // 695
  {  200,  280,  284,  208,  264 }, // 696
  {  200,  288,  202,  266,  264 }, // 697
  {  200,  288,  290,  204,  280 }, // 698
  {  201,  281,  285,  209,  265 }, // 699
  {  201,  289,  203,  267,  265 }, // 700
  {  201,  289,  291,  205,  281 }, // 701
  {  202,  282,  286,  210,  266 }, // 702
  {  202,  288,  290,  206,  282 }, // 703
  {  203,  283,  287,  211,  267 }, // 704
  {  203,  289,  291,  207,  283 }, // 705
  {  204,  280,  284,  212,  268 }, // 706
  {  204,  290,  206,  270,  268 }, // 707
  {  205,  281,  285,  213,  269 }, // 708
  {  205,  291,  207,  271,  269 }, // 709
  {  206,  282,  286,  214,  270 }, // 710
  {  207,  283,  287,  215,  271 }, // 711
  {  208,  292,  210,  266,  264 }, // 712
  {  208,  292,  294,  212,  284 }, // 713
  {  209,  293,  211,  267,  265 }, // 714
  {  209,  293,  295,  213,  285 }, // 715
  {  210,  292,  294,  214,  286 }, // 716
  {  211,  293,  295,  215,  287 }, // 717
  {  212,  294,  214,  270,  268 }, // 718
  {  213,  295,  215,  271,  269 }, // 719
};
////////// The Edge Length of K120 is     0.270091
////////// The face Radius of K120 is     0.229753
int cellK120[120][12] = { // Faces bordering each cell, in cell order
  {    0,    1,    3,  151,  624,  145,  602,  147,  153,  150,  144,  600 }, //   0
  {    0,    2,    4,  163,  629,  157,  605,  159,  165,  162,  156,  603 }, //   1
  {    1,    2,    5,  240,  243,  576,  252,  255,  648,  241,  577,  253 }, //   2
  {    3,    4,    5,  246,  249,  579,  258,  261,  651,  247,  580,  259 }, //   3
  {    6,    7,    9,  175,  632,  169,  608,  171,  177,  174,  168,  606 }, //   4
  {    6,    8,   10,  187,  635,  181,  611,  183,  189,  186,  180,  609 }, //   5
  {    7,    8,   11,  264,  267,  582,  276,  279,  656,  265,  583,  277 }, //   6
  {    9,   10,   11,  270,  273,  585,  282,  285,  659,  271,  586,  283 }, //   7
  {   12,   13,   15,  199,  636,  193,  614,  195,  201,  198,  192,  612 }, //   8
  {   12,   14,   16,  211,  641,  205,  617,  207,  213,  210,  204,  615 }, //   9
  {   13,   14,   17,  288,  291,  588,  300,  303,  664,  289,  589,  301 }, //  10
  {   15,   16,   17,  294,  297,  591,  306,  309,  666,  295,  592,  307 }, //  11
  {   18,   19,   21,  223,  644,  217,  620,  219,  225,  222,  216,  618 }, //  12
  {   18,   20,   22,  235,  647,  229,  623,  231,  237,  234,  228,  621 }, //  13
  {   19,   20,   23,  312,  315,  594,  324,  327,  668,  313,  595,  325 }, //  14
  {   21,   22,   23,  318,  321,  597,  330,  333,  670,  319,  598,  331 }, //  15
  {   24,   25,   27,  168,  625,  144,  554,  148,  172,  170,  146,  552 }, //  16
  {   24,   26,   28,  174,  627,  150,  557,  154,  178,  176,  152,  555 }, //  17
  {   25,   26,   29,  338,  340,  600,  344,  346,  673,  336,  601,  342 }, //  18
  {   27,   28,   29,  362,  364,  606,  368,  370,  683,  360,  607,  366 }, //  19
  {   30,   31,   33,  180,  630,  156,  560,  160,  184,  182,  158,  558 }, //  20
  {   30,   32,   34,  186,  631,  162,  563,  166,  190,  188,  164,  561 }, //  21
  {   31,   32,   35,  350,  352,  603,  356,  358,  678,  348,  604,  354 }, //  22
  {   33,   34,   35,  374,  376,  609,  380,  382,  686,  372,  610,  378 }, //  23
  {   36,   37,   39,  216,  637,  192,  566,  196,  220,  218,  194,  564 }, //  24
  {   36,   38,   40,  222,  639,  198,  569,  202,  226,  224,  200,  567 }, //  25
  {   37,   38,   41,  386,  388,  612,  392,  394,  688,  384,  613,  390 }, //  26
  {   39,   40,   41,  410,  412,  618,  416,  418,  694,  408,  619,  414 }, //  27
  {   42,   43,   45,  228,  642,  204,  572,  208,  232,  230,  206,  570 }, //  28
  {   42,   44,   46,  234,  643,  210,  575,  214,  238,  236,  212,  573 }, //  29
  {   43,   44,   47,  398,  400,  615,  404,  406,  691,  396,  616,  402 }, //  30
  {   45,   46,   47,  422,  424,  621,  428,  430,  695,  420,  622,  426 }, //  31
  {   48,   49,   51,  158,  626,  146,  578,  149,  161,  157,  145,  576 }, //  32
  {   48,   50,   52,  182,  633,  170,  584,  173,  185,  181,  169,  582 }, //  33
  {   49,   50,   53,  434,  437,  552,  458,  461,  698,  433,  553,  457 }, //  34
  {   51,   52,   53,  446,  449,  558,  470,  473,  703,  445,  559,  469 }, //  35
  {   54,   55,   57,  164,  628,  152,  581,  155,  167,  163,  151,  579 }, //  36
  {   54,   56,   58,  188,  634,  176,  587,  179,  191,  187,  175,  585 }, //  37
  {   55,   56,   59,  440,  443,  555,  464,  467,  701,  439,  556,  463 }, //  38
  {   57,   58,   59,  452,  455,  561,  476,  479,  705,  451,  562,  475 }, //  39
  {   60,   61,   63,  206,  638,  194,  590,  197,  209,  205,  193,  588 }, //  40
  {   60,   62,   64,  230,  645,  218,  596,  221,  233,  229,  217,  594 }, //  41
  {   61,   62,   65,  482,  485,  564,  506,  509,  713,  481,  565,  505 }, //  42
  {   63,   64,   65,  494,  497,  570,  518,  521,  716,  493,  571,  517 }, //  43
  {   66,   67,   69,  212,  640,  200,  593,  203,  215,  211,  199,  591 }, //  44
  {   66,   68,   70,  236,  646,  224,  599,  227,  239,  235,  223,  597 }, //  45
  {   67,   68,   71,  488,  491,  567,  512,  515,  715,  487,  568,  511 }, //  46
  {   69,   70,   71,  500,  503,  573,  524,  527,  717,  499,  574,  523 }, //  47
  {   72,   73,   75,  384,  672,  336,  529,  339,  387,  385,  337,  530 }, //  48
  {   72,   74,   76,  390,  675,  342,  532,  345,  393,  391,  343,  533 }, //  49
  {   73,   74,   77,  242,  244,  601,  248,  250,  649,  240,  602,  246 }, //  50
  {   75,   76,   77,  290,  292,  613,  296,  298,  665,  288,  614,  294 }, //  51
  {   78,   79,   81,  396,  677,  348,  535,  351,  399,  397,  349,  536 }, //  52
  {   78,   80,   82,  402,  680,  354,  538,  357,  405,  403,  355,  539 }, //  53
  {   79,   80,   83,  254,  256,  604,  260,  262,  653,  252,  605,  258 }, //  54
  {   81,   82,   83,  302,  304,  616,  308,  310,  667,  300,  617,  306 }, //  55
  {   84,   85,   87,  408,  682,  360,  541,  363,  411,  409,  361,  542 }, //  56
  {   84,   86,   88,  414,  684,  366,  544,  369,  417,  415,  367,  545 }, //  57
  {   85,   86,   89,  266,  268,  607,  272,  274,  657,  264,  608,  270 }, //  58
  {   87,   88,   89,  314,  316,  619,  320,  322,  669,  312,  620,  318 }, //  59
  {   90,   91,   93,  420,  685,  372,  547,  375,  423,  421,  373,  548 }, //  60
  {   90,   92,   94,  426,  687,  378,  550,  381,  429,  427,  379,  551 }, //  61
  {   91,   92,   95,  278,  280,  610,  284,  286,  661,  276,  611,  282 }, //  62
  {   93,   94,   95,  326,  328,  622,  332,  334,  671,  324,  623,  330 }, //  63
  {   96,   97,   99,  289,  650,  241,  528,  245,  293,  290,  242,  529 }, //  64
  {   96,   98,  100,  301,  654,  253,  534,  257,  305,  302,  254,  535 }, //  65
  {   97,   98,  101,  432,  436,  577,  444,  448,  697,  434,  578,  446 }, //  66
  {   99,  100,  101,  480,  484,  589,  492,  496,  712,  482,  590,  494 }, //  67
  {  102,  103,  105,  295,  652,  247,  531,  251,  299,  296,  248,  532 }, //  68
  {  102,  104,  106,  307,  655,  259,  537,  263,  311,  308,  260,  538 }, //  69
  {  103,  104,  107,  438,  442,  580,  450,  454,  700,  440,  581,  452 }, //  70
  {  105,  106,  107,  486,  490,  592,  498,  502,  714,  488,  593,  500 }, //  71
  {  108,  109,  111,  313,  658,  265,  540,  269,  317,  314,  266,  541 }, //  72
  {  108,  110,  112,  325,  662,  277,  546,  281,  329,  326,  278,  547 }, //  73
  {  109,  110,  113,  456,  460,  583,  468,  472,  707,  458,  584,  470 }, //  74
  {  111,  112,  113,  504,  508,  595,  516,  520,  718,  506,  596,  518 }, //  75
  {  114,  115,  117,  319,  660,  271,  543,  275,  323,  320,  272,  544 }, //  76
  {  114,  116,  118,  331,  663,  283,  549,  287,  335,  332,  284,  550 }, //  77
  {  115,  116,  119,  462,  466,  586,  474,  478,  709,  464,  587,  476 }, //  78
  {  117,  118,  119,  510,  514,  598,  522,  526,  719,  512,  599,  524 }, //  79
  {  120,  121,  123,  481,  696,  433,  530,  435,  483,  480,  432,  528 }, //  80
  {  120,  122,  124,  505,  706,  457,  542,  459,  507,  504,  456,  540 }, //  81
  {  121,  122,  125,  337,  341,  553,  361,  365,  674,  338,  554,  362 }, //  82
  {  123,  124,  125,  385,  389,  565,  409,  413,  689,  386,  566,  410 }, //  83
  {  126,  127,  129,  487,  699,  439,  533,  441,  489,  486,  438,  531 }, //  84
  {  126,  128,  130,  511,  708,  463,  545,  465,  513,  510,  462,  543 }, //  85
  {  127,  128,  131,  343,  347,  556,  367,  371,  676,  344,  557,  368 }, //  86
  {  129,  130,  131,  391,  395,  568,  415,  419,  690,  392,  569,  416 }, //  87
  {  132,  133,  135,  493,  702,  445,  536,  447,  495,  492,  444,  534 }, //  88
  {  132,  134,  136,  517,  710,  469,  548,  471,  519,  516,  468,  546 }, //  89
  {  133,  134,  137,  349,  353,  559,  373,  377,  679,  350,  560,  374 }, //  90
  {  135,  136,  137,  397,  401,  571,  421,  425,  692,  398,  572,  422 }, //  91
  {  138,  139,  141,  499,  704,  451,  539,  453,  501,  498,  450,  537 }, //  92
  {  138,  140,  142,  523,  711,  475,  551,  477,  525,  522,  474,  549 }, //  93
  {  139,  140,  143,  355,  359,  562,  379,  383,  681,  356,  563,  380 }, //  94
  {  141,  142,  143,  403,  407,  574,  427,  431,  693,  404,  575,  428 }, //  95
  {  147,  148,  149,  243,  244,  340,  437,  341,  436,  245,  339,  435 }, //  96
  {  153,  154,  155,  249,  250,  346,  443,  347,  442,  251,  345,  441 }, //  97
  {  159,  160,  161,  255,  256,  352,  449,  353,  448,  257,  351,  447 }, //  98
  {  165,  166,  167,  261,  262,  358,  455,  359,  454,  263,  357,  453 }, //  99
  {  171,  172,  173,  267,  268,  364,  461,  365,  460,  269,  363,  459 }, // 100
  {  177,  178,  179,  273,  274,  370,  467,  371,  466,  275,  369,  465 }, // 101
  {  183,  184,  185,  279,  280,  376,  473,  377,  472,  281,  375,  471 }, // 102
  {  189,  190,  191,  285,  286,  382,  479,  383,  478,  287,  381,  477 }, // 103
  {  195,  196,  197,  291,  292,  388,  485,  389,  484,  293,  387,  483 }, // 104
  {  201,  202,  203,  297,  298,  394,  491,  395,  490,  299,  393,  489 }, // 105
  {  207,  208,  209,  303,  304,  400,  497,  401,  496,  305,  399,  495 }, // 106
  {  213,  214,  215,  309,  310,  406,  503,  407,  502,  311,  405,  501 }, // 107
  {  219,  220,  221,  315,  316,  412,  509,  413,  508,  317,  411,  507 }, // 108
  {  225,  226,  227,  321,  322,  418,  515,  419,  514,  323,  417,  513 }, // 109
  {  231,  232,  233,  327,  328,  424,  521,  425,  520,  329,  423,  519 }, // 110
  {  237,  238,  239,  333,  334,  430,  527,  431,  526,  335,  429,  525 }, // 111
  {  624,  625,  626,  629,  628,  627,  633,  632,  630,  631,  634,  635 }, // 112
  {  636,  637,  638,  641,  640,  639,  645,  644,  642,  643,  646,  647 }, // 113
  {  648,  649,  650,  654,  653,  651,  665,  652,  664,  667,  655,  666 }, // 114
  {  656,  657,  658,  662,  661,  659,  669,  660,  668,  671,  663,  670 }, // 115
  {  672,  673,  674,  689,  688,  675,  683,  676,  682,  694,  690,  684 }, // 116
  {  677,  678,  679,  692,  691,  680,  686,  681,  685,  695,  693,  687 }, // 117
  {  696,  697,  698,  706,  713,  712,  703,  702,  707,  718,  716,  710 }, // 118
  {  699,  700,  701,  708,  715,  714,  705,  704,  709,  719,  717,  711 }, // 119
};
int faceToCellK120[720][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    0,    2 }, //   1
  {    1,    2 }, //   2
  {    0,    3 }, //   3
  {    1,    3 }, //   4
  {    2,    3 }, //   5
  {    4,    5 }, //   6
  {    4,    6 }, //   7
  {    5,    6 }, //   8
  {    4,    7 }, //   9
  {    5,    7 }, //  10
  {    6,    7 }, //  11
  {    8,    9 }, //  12
  {    8,   10 }, //  13
  {    9,   10 }, //  14
  {    8,   11 }, //  15
  {    9,   11 }, //  16
  {   10,   11 }, //  17
  {   12,   13 }, //  18
  {   12,   14 }, //  19
  {   13,   14 }, //  20
  {   12,   15 }, //  21
  {   13,   15 }, //  22
  {   14,   15 }, //  23
  {   16,   17 }, //  24
  {   16,   18 }, //  25
  {   17,   18 }, //  26
  {   16,   19 }, //  27
  {   17,   19 }, //  28
  {   18,   19 }, //  29
  {   20,   21 }, //  30
  {   20,   22 }, //  31
  {   21,   22 }, //  32
  {   20,   23 }, //  33
  {   21,   23 }, //  34
  {   22,   23 }, //  35
  {   24,   25 }, //  36
  {   24,   26 }, //  37
  {   25,   26 }, //  38
  {   24,   27 }, //  39
  {   25,   27 }, //  40
  {   26,   27 }, //  41
  {   28,   29 }, //  42
  {   28,   30 }, //  43
  {   29,   30 }, //  44
  {   28,   31 }, //  45
  {   29,   31 }, //  46
  {   30,   31 }, //  47
  {   32,   33 }, //  48
  {   32,   34 }, //  49
  {   33,   34 }, //  50
  {   32,   35 }, //  51
  {   33,   35 }, //  52
  {   34,   35 }, //  53
  {   36,   37 }, //  54
  {   36,   38 }, //  55
  {   37,   38 }, //  56
  {   36,   39 }, //  57
  {   37,   39 }, //  58
  {   38,   39 }, //  59
  {   40,   41 }, //  60
  {   40,   42 }, //  61
  {   41,   42 }, //  62
  {   40,   43 }, //  63
  {   41,   43 }, //  64
  {   42,   43 }, //  65
  {   44,   45 }, //  66
  {   44,   46 }, //  67
  {   45,   46 }, //  68
  {   44,   47 }, //  69
  {   45,   47 }, //  70
  {   46,   47 }, //  71
  {   48,   49 }, //  72
  {   48,   50 }, //  73
  {   49,   50 }, //  74
  {   48,   51 }, //  75
  {   49,   51 }, //  76
  {   50,   51 }, //  77
  {   52,   53 }, //  78
  {   52,   54 }, //  79
  {   53,   54 }, //  80
  {   52,   55 }, //  81
  {   53,   55 }, //  82
  {   54,   55 }, //  83
  {   56,   57 }, //  84
  {   56,   58 }, //  85
  {   57,   58 }, //  86
  {   56,   59 }, //  87
  {   57,   59 }, //  88
  {   58,   59 }, //  89
  {   60,   61 }, //  90
  {   60,   62 }, //  91
  {   61,   62 }, //  92
  {   60,   63 }, //  93
  {   61,   63 }, //  94
  {   62,   63 }, //  95
  {   64,   65 }, //  96
  {   64,   66 }, //  97
  {   65,   66 }, //  98
  {   64,   67 }, //  99
  {   65,   67 }, // 100
  {   66,   67 }, // 101
  {   68,   69 }, // 102
  {   68,   70 }, // 103
  {   69,   70 }, // 104
  {   68,   71 }, // 105
  {   69,   71 }, // 106
  {   70,   71 }, // 107
  {   72,   73 }, // 108
  {   72,   74 }, // 109
  {   73,   74 }, // 110
  {   72,   75 }, // 111
  {   73,   75 }, // 112
  {   74,   75 }, // 113
  {   76,   77 }, // 114
  {   76,   78 }, // 115
  {   77,   78 }, // 116
  {   76,   79 }, // 117
  {   77,   79 }, // 118
  {   78,   79 }, // 119
  {   80,   81 }, // 120
  {   80,   82 }, // 121
  {   81,   82 }, // 122
  {   80,   83 }, // 123
  {   81,   83 }, // 124
  {   82,   83 }, // 125
  {   84,   85 }, // 126
  {   84,   86 }, // 127
  {   85,   86 }, // 128
  {   84,   87 }, // 129
  {   85,   87 }, // 130
  {   86,   87 }, // 131
  {   88,   89 }, // 132
  {   88,   90 }, // 133
  {   89,   90 }, // 134
  {   88,   91 }, // 135
  {   89,   91 }, // 136
  {   90,   91 }, // 137
  {   92,   93 }, // 138
  {   92,   94 }, // 139
  {   93,   94 }, // 140
  {   92,   95 }, // 141
  {   93,   95 }, // 142
  {   94,   95 }, // 143
  {    0,   16 }, // 144
  {    0,   32 }, // 145
  {   16,   32 }, // 146
  {    0,   96 }, // 147
  {   16,   96 }, // 148
  {   32,   96 }, // 149
  {    0,   17 }, // 150
  {    0,   36 }, // 151
  {   17,   36 }, // 152
  {    0,   97 }, // 153
  {   17,   97 }, // 154
  {   36,   97 }, // 155
  {    1,   20 }, // 156
  {    1,   32 }, // 157
  {   20,   32 }, // 158
  {    1,   98 }, // 159
  {   20,   98 }, // 160
  {   32,   98 }, // 161
  {    1,   21 }, // 162
  {    1,   36 }, // 163
  {   21,   36 }, // 164
  {    1,   99 }, // 165
  {   21,   99 }, // 166
  {   36,   99 }, // 167
  {    4,   16 }, // 168
  {    4,   33 }, // 169
  {   16,   33 }, // 170
  {    4,  100 }, // 171
  {   16,  100 }, // 172
  {   33,  100 }, // 173
  {    4,   17 }, // 174
  {    4,   37 }, // 175
  {   17,   37 }, // 176
  {    4,  101 }, // 177
  {   17,  101 }, // 178
  {   37,  101 }, // 179
  {    5,   20 }, // 180
  {    5,   33 }, // 181
  {   20,   33 }, // 182
  {    5,  102 }, // 183
  {   20,  102 }, // 184
  {   33,  102 }, // 185
  {    5,   21 }, // 186
  {    5,   37 }, // 187
  {   21,   37 }, // 188
  {    5,  103 }, // 189
  {   21,  103 }, // 190
  {   37,  103 }, // 191
  {    8,   24 }, // 192
  {    8,   40 }, // 193
  {   24,   40 }, // 194
  {    8,  104 }, // 195
  {   24,  104 }, // 196
  {   40,  104 }, // 197
  {    8,   25 }, // 198
  {    8,   44 }, // 199
  {   25,   44 }, // 200
  {    8,  105 }, // 201
  {   25,  105 }, // 202
  {   44,  105 }, // 203
  {    9,   28 }, // 204
  {    9,   40 }, // 205
  {   28,   40 }, // 206
  {    9,  106 }, // 207
  {   28,  106 }, // 208
  {   40,  106 }, // 209
  {    9,   29 }, // 210
  {    9,   44 }, // 211
  {   29,   44 }, // 212
  {    9,  107 }, // 213
  {   29,  107 }, // 214
  {   44,  107 }, // 215
  {   12,   24 }, // 216
  {   12,   41 }, // 217
  {   24,   41 }, // 218
  {   12,  108 }, // 219
  {   24,  108 }, // 220
  {   41,  108 }, // 221
  {   12,   25 }, // 222
  {   12,   45 }, // 223
  {   25,   45 }, // 224
  {   12,  109 }, // 225
  {   25,  109 }, // 226
  {   45,  109 }, // 227
  {   13,   28 }, // 228
  {   13,   41 }, // 229
  {   28,   41 }, // 230
  {   13,  110 }, // 231
  {   28,  110 }, // 232
  {   41,  110 }, // 233
  {   13,   29 }, // 234
  {   13,   45 }, // 235
  {   29,   45 }, // 236
  {   13,  111 }, // 237
  {   29,  111 }, // 238
  {   45,  111 }, // 239
  {    2,   50 }, // 240
  {    2,   64 }, // 241
  {   50,   64 }, // 242
  {    2,   96 }, // 243
  {   50,   96 }, // 244
  {   64,   96 }, // 245
  {    3,   50 }, // 246
  {    3,   68 }, // 247
  {   50,   68 }, // 248
  {    3,   97 }, // 249
  {   50,   97 }, // 250
  {   68,   97 }, // 251
  {    2,   54 }, // 252
  {    2,   65 }, // 253
  {   54,   65 }, // 254
  {    2,   98 }, // 255
  {   54,   98 }, // 256
  {   65,   98 }, // 257
  {    3,   54 }, // 258
  {    3,   69 }, // 259
  {   54,   69 }, // 260
  {    3,   99 }, // 261
  {   54,   99 }, // 262
  {   69,   99 }, // 263
  {    6,   58 }, // 264
  {    6,   72 }, // 265
  {   58,   72 }, // 266
  {    6,  100 }, // 267
  {   58,  100 }, // 268
  {   72,  100 }, // 269
  {    7,   58 }, // 270
  {    7,   76 }, // 271
  {   58,   76 }, // 272
  {    7,  101 }, // 273
  {   58,  101 }, // 274
  {   76,  101 }, // 275
  {    6,   62 }, // 276
  {    6,   73 }, // 277
  {   62,   73 }, // 278
  {    6,  102 }, // 279
  {   62,  102 }, // 280
  {   73,  102 }, // 281
  {    7,   62 }, // 282
  {    7,   77 }, // 283
  {   62,   77 }, // 284
  {    7,  103 }, // 285
  {   62,  103 }, // 286
  {   77,  103 }, // 287
  {   10,   51 }, // 288
  {   10,   64 }, // 289
  {   51,   64 }, // 290
  {   10,  104 }, // 291
  {   51,  104 }, // 292
  {   64,  104 }, // 293
  {   11,   51 }, // 294
  {   11,   68 }, // 295
  {   51,   68 }, // 296
  {   11,  105 }, // 297
  {   51,  105 }, // 298
  {   68,  105 }, // 299
  {   10,   55 }, // 300
  {   10,   65 }, // 301
  {   55,   65 }, // 302
  {   10,  106 }, // 303
  {   55,  106 }, // 304
  {   65,  106 }, // 305
  {   11,   55 }, // 306
  {   11,   69 }, // 307
  {   55,   69 }, // 308
  {   11,  107 }, // 309
  {   55,  107 }, // 310
  {   69,  107 }, // 311
  {   14,   59 }, // 312
  {   14,   72 }, // 313
  {   59,   72 }, // 314
  {   14,  108 }, // 315
  {   59,  108 }, // 316
  {   72,  108 }, // 317
  {   15,   59 }, // 318
  {   15,   76 }, // 319
  {   59,   76 }, // 320
  {   15,  109 }, // 321
  {   59,  109 }, // 322
  {   76,  109 }, // 323
  {   14,   63 }, // 324
  {   14,   73 }, // 325
  {   63,   73 }, // 326
  {   14,  110 }, // 327
  {   63,  110 }, // 328
  {   73,  110 }, // 329
  {   15,   63 }, // 330
  {   15,   77 }, // 331
  {   63,   77 }, // 332
  {   15,  111 }, // 333
  {   63,  111 }, // 334
  {   77,  111 }, // 335
  {   18,   48 }, // 336
  {   48,   82 }, // 337
  {   18,   82 }, // 338
  {   48,   96 }, // 339
  {   18,   96 }, // 340
  {   82,   96 }, // 341
  {   18,   49 }, // 342
  {   49,   86 }, // 343
  {   18,   86 }, // 344
  {   49,   97 }, // 345
  {   18,   97 }, // 346
  {   86,   97 }, // 347
  {   22,   52 }, // 348
  {   52,   90 }, // 349
  {   22,   90 }, // 350
  {   52,   98 }, // 351
  {   22,   98 }, // 352
  {   90,   98 }, // 353
  {   22,   53 }, // 354
  {   53,   94 }, // 355
  {   22,   94 }, // 356
  {   53,   99 }, // 357
  {   22,   99 }, // 358
  {   94,   99 }, // 359
  {   19,   56 }, // 360
  {   56,   82 }, // 361
  {   19,   82 }, // 362
  {   56,  100 }, // 363
  {   19,  100 }, // 364
  {   82,  100 }, // 365
  {   19,   57 }, // 366
  {   57,   86 }, // 367
  {   19,   86 }, // 368
  {   57,  101 }, // 369
  {   19,  101 }, // 370
  {   86,  101 }, // 371
  {   23,   60 }, // 372
  {   60,   90 }, // 373
  {   23,   90 }, // 374
  {   60,  102 }, // 375
  {   23,  102 }, // 376
  {   90,  102 }, // 377
  {   23,   61 }, // 378
  {   61,   94 }, // 379
  {   23,   94 }, // 380
  {   61,  103 }, // 381
  {   23,  103 }, // 382
  {   94,  103 }, // 383
  {   26,   48 }, // 384
  {   48,   83 }, // 385
  {   26,   83 }, // 386
  {   48,  104 }, // 387
  {   26,  104 }, // 388
  {   83,  104 }, // 389
  {   26,   49 }, // 390
  {   49,   87 }, // 391
  {   26,   87 }, // 392
  {   49,  105 }, // 393
  {   26,  105 }, // 394
  {   87,  105 }, // 395
  {   30,   52 }, // 396
  {   52,   91 }, // 397
  {   30,   91 }, // 398
  {   52,  106 }, // 399
  {   30,  106 }, // 400
  {   91,  106 }, // 401
  {   30,   53 }, // 402
  {   53,   95 }, // 403
  {   30,   95 }, // 404
  {   53,  107 }, // 405
  {   30,  107 }, // 406
  {   95,  107 }, // 407
  {   27,   56 }, // 408
  {   56,   83 }, // 409
  {   27,   83 }, // 410
  {   56,  108 }, // 411
  {   27,  108 }, // 412
  {   83,  108 }, // 413
  {   27,   57 }, // 414
  {   57,   87 }, // 415
  {   27,   87 }, // 416
  {   57,  109 }, // 417
  {   27,  109 }, // 418
  {   87,  109 }, // 419
  {   31,   60 }, // 420
  {   60,   91 }, // 421
  {   31,   91 }, // 422
  {   60,  110 }, // 423
  {   31,  110 }, // 424
  {   91,  110 }, // 425
  {   31,   61 }, // 426
  {   61,   95 }, // 427
  {   31,   95 }, // 428
  {   61,  111 }, // 429
  {   31,  111 }, // 430
  {   95,  111 }, // 431
  {   66,   80 }, // 432
  {   34,   80 }, // 433
  {   34,   66 }, // 434
  {   80,   96 }, // 435
  {   66,   96 }, // 436
  {   34,   96 }, // 437
  {   70,   84 }, // 438
  {   38,   84 }, // 439
  {   38,   70 }, // 440
  {   84,   97 }, // 441
  {   70,   97 }, // 442
  {   38,   97 }, // 443
  {   66,   88 }, // 444
  {   35,   88 }, // 445
  {   35,   66 }, // 446
  {   88,   98 }, // 447
  {   66,   98 }, // 448
  {   35,   98 }, // 449
  {   70,   92 }, // 450
  {   39,   92 }, // 451
  {   39,   70 }, // 452
  {   92,   99 }, // 453
  {   70,   99 }, // 454
  {   39,   99 }, // 455
  {   74,   81 }, // 456
  {   34,   81 }, // 457
  {   34,   74 }, // 458
  {   81,  100 }, // 459
  {   74,  100 }, // 460
  {   34,  100 }, // 461
  {   78,   85 }, // 462
  {   38,   85 }, // 463
  {   38,   78 }, // 464
  {   85,  101 }, // 465
  {   78,  101 }, // 466
  {   38,  101 }, // 467
  {   74,   89 }, // 468
  {   35,   89 }, // 469
  {   35,   74 }, // 470
  {   89,  102 }, // 471
  {   74,  102 }, // 472
  {   35,  102 }, // 473
  {   78,   93 }, // 474
  {   39,   93 }, // 475
  {   39,   78 }, // 476
  {   93,  103 }, // 477
  {   78,  103 }, // 478
  {   39,  103 }, // 479
  {   67,   80 }, // 480
  {   42,   80 }, // 481
  {   42,   67 }, // 482
  {   80,  104 }, // 483
  {   67,  104 }, // 484
  {   42,  104 }, // 485
  {   71,   84 }, // 486
  {   46,   84 }, // 487
  {   46,   71 }, // 488
  {   84,  105 }, // 489
  {   71,  105 }, // 490
  {   46,  105 }, // 491
  {   67,   88 }, // 492
  {   43,   88 }, // 493
  {   43,   67 }, // 494
  {   88,  106 }, // 495
  {   67,  106 }, // 496
  {   43,  106 }, // 497
  {   71,   92 }, // 498
  {   47,   92 }, // 499
  {   47,   71 }, // 500
  {   92,  107 }, // 501
  {   71,  107 }, // 502
  {   47,  107 }, // 503
  {   75,   81 }, // 504
  {   42,   81 }, // 505
  {   42,   75 }, // 506
  {   81,  108 }, // 507
  {   75,  108 }, // 508
  {   42,  108 }, // 509
  {   79,   85 }, // 510
  {   46,   85 }, // 511
  {   46,   79 }, // 512
  {   85,  109 }, // 513
  {   79,  109 }, // 514
  {   46,  109 }, // 515
  {   75,   89 }, // 516
  {   43,   89 }, // 517
  {   43,   75 }, // 518
  {   89,  110 }, // 519
  {   75,  110 }, // 520
  {   43,  110 }, // 521
  {   79,   93 }, // 522
  {   47,   93 }, // 523
  {   47,   79 }, // 524
  {   93,  111 }, // 525
  {   79,  111 }, // 526
  {   47,  111 }, // 527
  {   64,   80 }, // 528
  {   48,   64 }, // 529
  {   48,   80 }, // 530
  {   68,   84 }, // 531
  {   49,   68 }, // 532
  {   49,   84 }, // 533
  {   65,   88 }, // 534
  {   52,   65 }, // 535
  {   52,   88 }, // 536
  {   69,   92 }, // 537
  {   53,   69 }, // 538
  {   53,   92 }, // 539
  {   72,   81 }, // 540
  {   56,   72 }, // 541
  {   56,   81 }, // 542
  {   76,   85 }, // 543
  {   57,   76 }, // 544
  {   57,   85 }, // 545
  {   73,   89 }, // 546
  {   60,   73 }, // 547
  {   60,   89 }, // 548
  {   77,   93 }, // 549
  {   61,   77 }, // 550
  {   61,   93 }, // 551
  {   16,   34 }, // 552
  {   34,   82 }, // 553
  {   16,   82 }, // 554
  {   17,   38 }, // 555
  {   38,   86 }, // 556
  {   17,   86 }, // 557
  {   20,   35 }, // 558
  {   35,   90 }, // 559
  {   20,   90 }, // 560
  {   21,   39 }, // 561
  {   39,   94 }, // 562
  {   21,   94 }, // 563
  {   24,   42 }, // 564
  {   42,   83 }, // 565
  {   24,   83 }, // 566
  {   25,   46 }, // 567
  {   46,   87 }, // 568
  {   25,   87 }, // 569
  {   28,   43 }, // 570
  {   43,   91 }, // 571
  {   28,   91 }, // 572
  {   29,   47 }, // 573
  {   47,   95 }, // 574
  {   29,   95 }, // 575
  {    2,   32 }, // 576
  {    2,   66 }, // 577
  {   32,   66 }, // 578
  {    3,   36 }, // 579
  {    3,   70 }, // 580
  {   36,   70 }, // 581
  {    6,   33 }, // 582
  {    6,   74 }, // 583
  {   33,   74 }, // 584
  {    7,   37 }, // 585
  {    7,   78 }, // 586
  {   37,   78 }, // 587
  {   10,   40 }, // 588
  {   10,   67 }, // 589
  {   40,   67 }, // 590
  {   11,   44 }, // 591
  {   11,   71 }, // 592
  {   44,   71 }, // 593
  {   14,   41 }, // 594
  {   14,   75 }, // 595
  {   41,   75 }, // 596
  {   15,   45 }, // 597
  {   15,   79 }, // 598
  {   45,   79 }, // 599
  {    0,   18 }, // 600
  {   18,   50 }, // 601
  {    0,   50 }, // 602
  {    1,   22 }, // 603
  {   22,   54 }, // 604
  {    1,   54 }, // 605
  {    4,   19 }, // 606
  {   19,   58 }, // 607
  {    4,   58 }, // 608
  {    5,   23 }, // 609
  {   23,   62 }, // 610
  {    5,   62 }, // 611
  {    8,   26 }, // 612
  {   26,   51 }, // 613
  {    8,   51 }, // 614
  {    9,   30 }, // 615
  {   30,   55 }, // 616
  {    9,   55 }, // 617
  {   12,   27 }, // 618
  {   27,   59 }, // 619
  {   12,   59 }, // 620
  {   13,   31 }, // 621
  {   31,   63 }, // 622
  {   13,   63 }, // 623
  {    0,  112 }, // 624
  {   16,  112 }, // 625
  {   32,  112 }, // 626
  {   17,  112 }, // 627
  {   36,  112 }, // 628
  {    1,  112 }, // 629
  {   20,  112 }, // 630
  {   21,  112 }, // 631
  {    4,  112 }, // 632
  {   33,  112 }, // 633
  {   37,  112 }, // 634
  {    5,  112 }, // 635
  {    8,  113 }, // 636
  {   24,  113 }, // 637
  {   40,  113 }, // 638
  {   25,  113 }, // 639
  {   44,  113 }, // 640
  {    9,  113 }, // 641
  {   28,  113 }, // 642
  {   29,  113 }, // 643
  {   12,  113 }, // 644
  {   41,  113 }, // 645
  {   45,  113 }, // 646
  {   13,  113 }, // 647
  {    2,  114 }, // 648
  {   50,  114 }, // 649
  {   64,  114 }, // 650
  {    3,  114 }, // 651
  {   68,  114 }, // 652
  {   54,  114 }, // 653
  {   65,  114 }, // 654
  {   69,  114 }, // 655
  {    6,  115 }, // 656
  {   58,  115 }, // 657
  {   72,  115 }, // 658
  {    7,  115 }, // 659
  {   76,  115 }, // 660
  {   62,  115 }, // 661
  {   73,  115 }, // 662
  {   77,  115 }, // 663
  {   10,  114 }, // 664
  {   51,  114 }, // 665
  {   11,  114 }, // 666
  {   55,  114 }, // 667
  {   14,  115 }, // 668
  {   59,  115 }, // 669
  {   15,  115 }, // 670
  {   63,  115 }, // 671
  {   48,  116 }, // 672
  {   18,  116 }, // 673
  {   82,  116 }, // 674
  {   49,  116 }, // 675
  {   86,  116 }, // 676
  {   52,  117 }, // 677
  {   22,  117 }, // 678
  {   90,  117 }, // 679
  {   53,  117 }, // 680
  {   94,  117 }, // 681
  {   56,  116 }, // 682
  {   19,  116 }, // 683
  {   57,  116 }, // 684
  {   60,  117 }, // 685
  {   23,  117 }, // 686
  {   61,  117 }, // 687
  {   26,  116 }, // 688
  {   83,  116 }, // 689
  {   87,  116 }, // 690
  {   30,  117 }, // 691
  {   91,  117 }, // 692
  {   95,  117 }, // 693
  {   27,  116 }, // 694
  {   31,  117 }, // 695
  {   80,  118 }, // 696
  {   66,  118 }, // 697
  {   34,  118 }, // 698
  {   84,  119 }, // 699
  {   70,  119 }, // 700
  {   38,  119 }, // 701
  {   88,  118 }, // 702
  {   35,  118 }, // 703
  {   92,  119 }, // 704
  {   39,  119 }, // 705
  {   81,  118 }, // 706
  {   74,  118 }, // 707
  {   85,  119 }, // 708
  {   78,  119 }, // 709
  {   89,  118 }, // 710
  {   93,  119 }, // 711
  {   67,  118 }, // 712
  {   42,  118 }, // 713
  {   71,  119 }, // 714
  {   46,  119 }, // 715
  {   43,  118 }, // 716
  {   47,  119 }, // 717
  {   75,  118 }, // 718
  {   79,  119 }, // 719
};
int cellToEdgeK120[120][30] = { // Edges on each cell, in cell order
  {    0,    1,    2,   96,   97,   98,  100,  101,  102,  520,  521,  523,  524,  526,  576,  577,  579,  580,  769,  792,  793,  794,  912,  913,  944,  946,  976,  977, 1136, 1137 }, //   0
  {    0,    1,    3,  104,  105,  106,  108,  109,  110,  527,  528,  530,  531,  533,  582,  583,  585,  586,  771,  792,  793,  794,  914,  915,  945,  947,  978,  979, 1144, 1145 }, //   1
  {    0,    2,    3,  160,  161,  162,  168,  169,  170,  464,  465,  466,  472,  473,  624,  625,  630,  631,  816,  817,  818,  829,  944,  945,  976,  978,  992,  993, 1136, 1144 }, //   2
  {    1,    2,    3,  164,  165,  166,  172,  173,  174,  468,  469,  470,  475,  476,  627,  628,  633,  634,  816,  817,  818,  831,  946,  947,  977,  979,  994,  995, 1137, 1145 }, //   3
  {    4,    5,    6,  112,  113,  114,  116,  117,  118,  534,  535,  537,  538,  540,  588,  589,  591,  592,  772,  795,  796,  797,  916,  917,  948,  950,  980,  981, 1138, 1139 }, //   4
  {    4,    5,    7,  120,  121,  122,  124,  125,  126,  541,  542,  544,  545,  547,  594,  595,  597,  598,  773,  795,  796,  797,  918,  919,  949,  951,  982,  983, 1146, 1147 }, //   5
  {    4,    6,    7,  176,  177,  178,  184,  185,  186,  478,  479,  480,  486,  487,  636,  637,  642,  643,  819,  820,  821,  833,  948,  949,  980,  982,  996,  997, 1138, 1146 }, //   6
  {    5,    6,    7,  180,  181,  182,  188,  189,  190,  482,  483,  484,  489,  490,  639,  640,  645,  646,  819,  820,  821,  835,  950,  951,  981,  983,  998,  999, 1139, 1147 }, //   7
  {    8,    9,   10,  128,  129,  130,  132,  133,  134,  548,  549,  551,  552,  554,  600,  601,  603,  604,  775,  798,  799,  800,  920,  921,  952,  954,  984,  985, 1140, 1141 }, //   8
  {    8,    9,   11,  136,  137,  138,  140,  141,  142,  555,  556,  558,  559,  561,  606,  607,  609,  610,  777,  798,  799,  800,  922,  923,  953,  955,  986,  987, 1148, 1149 }, //   9
  {    8,   10,   11,  192,  193,  194,  200,  201,  202,  492,  493,  494,  500,  501,  648,  649,  654,  655,  822,  823,  824,  836,  952,  953,  984,  986, 1000, 1001, 1140, 1148 }, //  10
  {    9,   10,   11,  196,  197,  198,  204,  205,  206,  496,  497,  498,  503,  504,  651,  652,  657,  658,  822,  823,  824,  837,  954,  955,  985,  987, 1002, 1003, 1141, 1149 }, //  11
  {   12,   13,   14,  144,  145,  146,  148,  149,  150,  562,  563,  565,  566,  568,  612,  613,  615,  616,  778,  801,  802,  803,  924,  925,  956,  958,  988,  989, 1142, 1143 }, //  12
  {   12,   13,   15,  152,  153,  154,  156,  157,  158,  569,  570,  572,  573,  575,  618,  619,  621,  622,  779,  801,  802,  803,  926,  927,  957,  959,  990,  991, 1150, 1151 }, //  13
  {   12,   14,   15,  208,  209,  210,  216,  217,  218,  506,  507,  508,  514,  515,  660,  661,  666,  667,  825,  826,  827,  838,  956,  957,  988,  990, 1004, 1005, 1142, 1150 }, //  14
  {   13,   14,   15,  212,  213,  214,  220,  221,  222,  510,  511,  512,  517,  518,  663,  664,  669,  670,  825,  826,  827,  839,  958,  959,  989,  991, 1006, 1007, 1143, 1151 }, //  15
  {   16,   17,   18,   96,   97,   99,  112,  113,  115,  408,  409,  411,  424,  426,  576,  578,  588,  590,  768,  769,  772,  805,  912,  916,  960,  961, 1088, 1089, 1104, 1106 }, //  16
  {   16,   17,   19,  100,  101,  103,  116,  117,  119,  412,  413,  415,  427,  429,  579,  581,  591,  593,  768,  769,  772,  807,  913,  917,  962,  963, 1090, 1091, 1112, 1114 }, //  17
  {   16,   18,   19,  224,  225,  227,  228,  229,  231,  520,  521,  522,  524,  525,  672,  674,  675,  677,  781,  900,  901,  902,  912,  913,  928,  929, 1088, 1090, 1104, 1112 }, //  18
  {   17,   18,   19,  240,  241,  243,  244,  245,  247,  534,  535,  536,  538,  539,  684,  686,  687,  689,  785,  900,  901,  902,  916,  917,  932,  933, 1089, 1091, 1106, 1114 }, //  19
  {   20,   21,   22,  104,  105,  107,  120,  121,  123,  416,  417,  419,  430,  432,  582,  584,  594,  596,  770,  771,  773,  808,  914,  918,  964,  965, 1092, 1093, 1105, 1107 }, //  20
  {   20,   21,   23,  108,  109,  111,  124,  125,  127,  420,  421,  423,  433,  435,  585,  587,  597,  599,  770,  771,  773,  809,  915,  919,  966,  967, 1094, 1095, 1113, 1115 }, //  21
  {   20,   22,   23,  232,  233,  235,  236,  237,  239,  527,  528,  529,  531,  532,  678,  680,  681,  683,  783,  903,  904,  905,  914,  915,  930,  931, 1092, 1094, 1105, 1113 }, //  22
  {   21,   22,   23,  248,  249,  251,  252,  253,  255,  541,  542,  543,  545,  546,  690,  692,  693,  695,  787,  903,  904,  905,  918,  919,  934,  935, 1093, 1095, 1107, 1115 }, //  23
  {   24,   25,   26,  128,  129,  131,  144,  145,  147,  436,  437,  439,  452,  454,  600,  602,  612,  614,  774,  775,  778,  811,  920,  924,  968,  969, 1096, 1097, 1108, 1110 }, //  24
  {   24,   25,   27,  132,  133,  135,  148,  149,  151,  440,  441,  443,  455,  457,  603,  605,  615,  617,  774,  775,  778,  813,  921,  925,  970,  971, 1098, 1099, 1116, 1118 }, //  25
  {   24,   26,   27,  256,  257,  259,  260,  261,  263,  548,  549,  550,  552,  553,  696,  698,  699,  701,  788,  906,  907,  908,  920,  921,  936,  937, 1096, 1098, 1108, 1116 }, //  26
  {   25,   26,   27,  272,  273,  275,  276,  277,  279,  562,  563,  564,  566,  567,  708,  710,  711,  713,  790,  906,  907,  908,  924,  925,  940,  941, 1097, 1099, 1110, 1118 }, //  27
  {   28,   29,   30,  136,  137,  139,  152,  153,  155,  444,  445,  447,  458,  460,  606,  608,  618,  620,  776,  777,  779,  814,  922,  926,  972,  973, 1100, 1101, 1109, 1111 }, //  28
  {   28,   29,   31,  140,  141,  143,  156,  157,  159,  448,  449,  451,  461,  463,  609,  611,  621,  623,  776,  777,  779,  815,  923,  927,  974,  975, 1102, 1103, 1117, 1119 }, //  29
  {   28,   30,   31,  264,  265,  267,  268,  269,  271,  555,  556,  557,  559,  560,  702,  704,  705,  707,  789,  909,  910,  911,  922,  923,  938,  939, 1100, 1102, 1109, 1117 }, //  30
  {   29,   30,   31,  280,  281,  283,  284,  285,  287,  569,  570,  571,  573,  574,  714,  716,  717,  719,  791,  909,  910,  911,  926,  927,  942,  943, 1101, 1103, 1111, 1119 }, //  31
  {   32,   33,   34,   96,   98,   99,  104,  106,  107,  464,  465,  467,  472,  474,  577,  578,  583,  584,  793,  804,  805,  808,  944,  945,  960,  964, 1056, 1057, 1152, 1154 }, //  32
  {   32,   33,   35,  112,  114,  115,  120,  122,  123,  478,  479,  481,  486,  488,  589,  590,  595,  596,  796,  804,  805,  808,  948,  949,  961,  965, 1060, 1061, 1160, 1162 }, //  33
  {   32,   34,   35,  288,  290,  291,  304,  306,  307,  408,  409,  410,  424,  425,  721,  722,  733,  734,  865,  876,  877,  880,  960,  961, 1040, 1041, 1056, 1060, 1152, 1160 }, //  34
  {   33,   34,   35,  296,  298,  299,  312,  314,  315,  416,  417,  418,  430,  431,  727,  728,  739,  740,  869,  876,  877,  880,  964,  965, 1044, 1045, 1057, 1061, 1154, 1162 }, //  35
  {   36,   37,   38,  100,  102,  103,  108,  110,  111,  468,  469,  471,  475,  477,  580,  581,  586,  587,  794,  806,  807,  809,  946,  947,  962,  966, 1058, 1059, 1153, 1155 }, //  36
  {   36,   37,   39,  116,  118,  119,  124,  126,  127,  482,  483,  485,  489,  491,  592,  593,  598,  599,  797,  806,  807,  809,  950,  951,  963,  967, 1062, 1063, 1161, 1163 }, //  37
  {   36,   38,   39,  292,  294,  295,  308,  310,  311,  412,  413,  414,  427,  428,  724,  725,  736,  737,  867,  878,  879,  881,  962,  963, 1042, 1043, 1058, 1062, 1153, 1161 }, //  38
  {   37,   38,   39,  300,  302,  303,  316,  318,  319,  420,  421,  422,  433,  434,  730,  731,  742,  743,  871,  878,  879,  881,  966,  967, 1046, 1047, 1059, 1063, 1155, 1163 }, //  39
  {   40,   41,   42,  128,  130,  131,  136,  138,  139,  492,  493,  495,  500,  502,  601,  602,  607,  608,  799,  810,  811,  814,  952,  953,  968,  972, 1064, 1065, 1156, 1158 }, //  40
  {   40,   41,   43,  144,  146,  147,  152,  154,  155,  506,  507,  509,  514,  516,  613,  614,  619,  620,  802,  810,  811,  814,  956,  957,  969,  973, 1068, 1069, 1164, 1166 }, //  41
  {   40,   42,   43,  320,  322,  323,  336,  338,  339,  436,  437,  438,  452,  453,  745,  746,  757,  758,  872,  882,  883,  886,  968,  969, 1048, 1049, 1064, 1068, 1156, 1164 }, //  42
  {   41,   42,   43,  328,  330,  331,  344,  346,  347,  444,  445,  446,  458,  459,  751,  752,  763,  764,  874,  882,  883,  886,  972,  973, 1052, 1053, 1065, 1069, 1158, 1166 }, //  43
  {   44,   45,   46,  132,  134,  135,  140,  142,  143,  496,  497,  499,  503,  505,  604,  605,  610,  611,  800,  812,  813,  815,  954,  955,  970,  974, 1066, 1067, 1157, 1159 }, //  44
  {   44,   45,   47,  148,  150,  151,  156,  158,  159,  510,  511,  513,  517,  519,  616,  617,  622,  623,  803,  812,  813,  815,  958,  959,  971,  975, 1070, 1071, 1165, 1167 }, //  45
  {   44,   46,   47,  324,  326,  327,  340,  342,  343,  440,  441,  442,  455,  456,  748,  749,  760,  761,  873,  884,  885,  887,  970,  971, 1050, 1051, 1066, 1070, 1157, 1165 }, //  46
  {   45,   46,   47,  332,  334,  335,  348,  350,  351,  448,  449,  450,  461,  462,  754,  755,  766,  767,  875,  884,  885,  887,  974,  975, 1054, 1055, 1067, 1071, 1159, 1167 }, //  47
  {   48,   49,   50,  224,  225,  226,  256,  257,  258,  352,  354,  355,  385,  386,  672,  673,  696,  697,  780,  781,  788,  889,  928,  936, 1024, 1025, 1072, 1073, 1120, 1124 }, //  48
  {   48,   49,   51,  228,  229,  230,  260,  261,  262,  356,  358,  359,  388,  389,  675,  676,  699,  700,  780,  781,  788,  891,  929,  937, 1026, 1027, 1074, 1075, 1128, 1132 }, //  49
  {   48,   50,   51,  160,  161,  163,  164,  165,  167,  520,  522,  523,  525,  526,  624,  626,  627,  629,  817,  852,  853,  854,  928,  929,  976,  977, 1024, 1026, 1120, 1128 }, //  50
  {   49,   50,   51,  192,  193,  195,  196,  197,  199,  548,  550,  551,  553,  554,  648,  650,  651,  653,  823,  852,  853,  854,  936,  937,  984,  985, 1025, 1027, 1124, 1132 }, //  51
  {   52,   53,   54,  232,  233,  234,  264,  265,  266,  360,  362,  363,  391,  392,  678,  679,  702,  703,  782,  783,  789,  893,  930,  938, 1028, 1029, 1076, 1077, 1121, 1125 }, //  52
  {   52,   53,   55,  236,  237,  238,  268,  269,  270,  364,  366,  367,  394,  395,  681,  682,  705,  706,  782,  783,  789,  895,  931,  939, 1030, 1031, 1078, 1079, 1129, 1133 }, //  53
  {   52,   54,   55,  168,  169,  171,  172,  173,  175,  527,  529,  530,  532,  533,  630,  632,  633,  635,  818,  855,  856,  857,  930,  931,  978,  979, 1028, 1030, 1121, 1129 }, //  54
  {   53,   54,   55,  200,  201,  203,  204,  205,  207,  555,  557,  558,  560,  561,  654,  656,  657,  659,  824,  855,  856,  857,  938,  939,  986,  987, 1029, 1031, 1125, 1133 }, //  55
  {   56,   57,   58,  240,  241,  242,  272,  273,  274,  368,  370,  371,  397,  398,  684,  685,  708,  709,  784,  785,  790,  896,  932,  940, 1032, 1033, 1080, 1081, 1122, 1126 }, //  56
  {   56,   57,   59,  244,  245,  246,  276,  277,  278,  372,  374,  375,  400,  401,  687,  688,  711,  712,  784,  785,  790,  897,  933,  941, 1034, 1035, 1082, 1083, 1130, 1134 }, //  57
  {   56,   58,   59,  176,  177,  179,  180,  181,  183,  534,  536,  537,  539,  540,  636,  638,  639,  641,  820,  858,  859,  860,  932,  933,  980,  981, 1032, 1034, 1122, 1130 }, //  58
  {   57,   58,   59,  208,  209,  211,  212,  213,  215,  562,  564,  565,  567,  568,  660,  662,  663,  665,  826,  858,  859,  860,  940,  941,  988,  989, 1033, 1035, 1126, 1134 }, //  59
  {   60,   61,   62,  248,  249,  250,  280,  281,  282,  376,  378,  379,  403,  404,  690,  691,  714,  715,  786,  787,  791,  898,  934,  942, 1036, 1037, 1084, 1085, 1123, 1127 }, //  60
  {   60,   61,   63,  252,  253,  254,  284,  285,  286,  380,  382,  383,  406,  407,  693,  694,  717,  718,  786,  787,  791,  899,  935,  943, 1038, 1039, 1086, 1087, 1131, 1135 }, //  61
  {   60,   62,   63,  184,  185,  187,  188,  189,  191,  541,  543,  544,  546,  547,  642,  644,  645,  647,  821,  861,  862,  863,  934,  935,  982,  983, 1036, 1038, 1123, 1131 }, //  62
  {   61,   62,   63,  216,  217,  219,  220,  221,  223,  569,  571,  572,  574,  575,  666,  668,  669,  671,  827,  861,  862,  863,  942,  943,  990,  991, 1037, 1039, 1127, 1135 }, //  63
  {   64,   65,   66,  160,  162,  163,  192,  194,  195,  352,  353,  354,  384,  385,  625,  626,  649,  650,  828,  829,  836,  853,  992, 1000, 1008, 1009, 1024, 1025, 1168, 1172 }, //  64
  {   64,   65,   67,  168,  170,  171,  200,  202,  203,  360,  361,  362,  390,  391,  631,  632,  655,  656,  828,  829,  836,  856,  993, 1001, 1012, 1013, 1028, 1029, 1176, 1180 }, //  65
  {   64,   66,   67,  288,  289,  291,  296,  297,  299,  464,  466,  467,  473,  474,  720,  722,  726,  728,  840,  841,  844,  877,  992,  993, 1008, 1012, 1056, 1057, 1168, 1176 }, //  66
  {   65,   66,   67,  320,  321,  323,  328,  329,  331,  492,  494,  495,  501,  502,  744,  746,  750,  752,  840,  841,  844,  883, 1000, 1001, 1009, 1013, 1064, 1065, 1172, 1180 }, //  67
  {   68,   69,   70,  164,  166,  167,  196,  198,  199,  356,  357,  358,  387,  388,  628,  629,  652,  653,  830,  831,  837,  854,  994, 1002, 1010, 1011, 1026, 1027, 1169, 1173 }, //  68
  {   68,   69,   71,  172,  174,  175,  204,  206,  207,  364,  365,  366,  393,  394,  634,  635,  658,  659,  830,  831,  837,  857,  995, 1003, 1014, 1015, 1030, 1031, 1177, 1181 }, //  69
  {   68,   70,   71,  292,  293,  295,  300,  301,  303,  468,  470,  471,  476,  477,  723,  725,  729,  731,  842,  843,  845,  879,  994,  995, 1010, 1014, 1058, 1059, 1169, 1177 }, //  70
  {   69,   70,   71,  324,  325,  327,  332,  333,  335,  496,  498,  499,  504,  505,  747,  749,  753,  755,  842,  843,  845,  885, 1002, 1003, 1011, 1015, 1066, 1067, 1173, 1181 }, //  71
  {   72,   73,   74,  176,  178,  179,  208,  210,  211,  368,  369,  370,  396,  397,  637,  638,  661,  662,  832,  833,  838,  859,  996, 1004, 1016, 1017, 1032, 1033, 1170, 1174 }, //  72
  {   72,   73,   75,  184,  186,  187,  216,  218,  219,  376,  377,  378,  402,  403,  643,  644,  667,  668,  832,  833,  838,  862,  997, 1005, 1020, 1021, 1036, 1037, 1178, 1182 }, //  73
  {   72,   74,   75,  304,  305,  307,  312,  313,  315,  478,  480,  481,  487,  488,  732,  734,  738,  740,  846,  847,  850,  880,  996,  997, 1016, 1020, 1060, 1061, 1170, 1178 }, //  74
  {   73,   74,   75,  336,  337,  339,  344,  345,  347,  506,  508,  509,  515,  516,  756,  758,  762,  764,  846,  847,  850,  886, 1004, 1005, 1017, 1021, 1068, 1069, 1174, 1182 }, //  75
  {   76,   77,   78,  180,  182,  183,  212,  214,  215,  372,  373,  374,  399,  400,  640,  641,  664,  665,  834,  835,  839,  860,  998, 1006, 1018, 1019, 1034, 1035, 1171, 1175 }, //  76
  {   76,   77,   79,  188,  190,  191,  220,  222,  223,  380,  381,  382,  405,  406,  646,  647,  670,  671,  834,  835,  839,  863,  999, 1007, 1022, 1023, 1038, 1039, 1179, 1183 }, //  77
  {   76,   78,   79,  308,  309,  311,  316,  317,  319,  482,  484,  485,  490,  491,  735,  737,  741,  743,  848,  849,  851,  881,  998,  999, 1018, 1022, 1062, 1063, 1171, 1179 }, //  78
  {   77,   78,   79,  340,  341,  343,  348,  349,  351,  510,  512,  513,  518,  519,  759,  761,  765,  767,  848,  849,  851,  887, 1006, 1007, 1019, 1023, 1070, 1071, 1175, 1183 }, //  79
  {   80,   81,   82,  288,  289,  290,  320,  321,  322,  352,  353,  355,  384,  386,  720,  721,  744,  745,  841,  864,  865,  872, 1008, 1009, 1040, 1048, 1072, 1073, 1184, 1188 }, //  80
  {   80,   81,   83,  304,  305,  306,  336,  337,  338,  368,  369,  371,  396,  398,  732,  733,  756,  757,  847,  864,  865,  872, 1016, 1017, 1041, 1049, 1080, 1081, 1192, 1196 }, //  81
  {   80,   82,   83,  224,  226,  227,  240,  242,  243,  408,  410,  411,  425,  426,  673,  674,  685,  686,  888,  889,  896,  901, 1040, 1041, 1072, 1080, 1088, 1089, 1184, 1192 }, //  82
  {   81,   82,   83,  256,  258,  259,  272,  274,  275,  436,  438,  439,  453,  454,  697,  698,  709,  710,  888,  889,  896,  907, 1048, 1049, 1073, 1081, 1096, 1097, 1188, 1196 }, //  83
  {   84,   85,   86,  292,  293,  294,  324,  325,  326,  356,  357,  359,  387,  389,  723,  724,  747,  748,  843,  866,  867,  873, 1010, 1011, 1042, 1050, 1074, 1075, 1185, 1189 }, //  84
  {   84,   85,   87,  308,  309,  310,  340,  341,  342,  372,  373,  375,  399,  401,  735,  736,  759,  760,  849,  866,  867,  873, 1018, 1019, 1043, 1051, 1082, 1083, 1193, 1197 }, //  85
  {   84,   86,   87,  228,  230,  231,  244,  246,  247,  412,  414,  415,  428,  429,  676,  677,  688,  689,  890,  891,  897,  902, 1042, 1043, 1074, 1082, 1090, 1091, 1185, 1193 }, //  86
  {   85,   86,   87,  260,  262,  263,  276,  278,  279,  440,  442,  443,  456,  457,  700,  701,  712,  713,  890,  891,  897,  908, 1050, 1051, 1075, 1083, 1098, 1099, 1189, 1197 }, //  87
  {   88,   89,   90,  296,  297,  298,  328,  329,  330,  360,  361,  363,  390,  392,  726,  727,  750,  751,  844,  868,  869,  874, 1012, 1013, 1044, 1052, 1076, 1077, 1186, 1190 }, //  88
  {   88,   89,   91,  312,  313,  314,  344,  345,  346,  376,  377,  379,  402,  404,  738,  739,  762,  763,  850,  868,  869,  874, 1020, 1021, 1045, 1053, 1084, 1085, 1194, 1198 }, //  89
  {   88,   90,   91,  232,  234,  235,  248,  250,  251,  416,  418,  419,  431,  432,  679,  680,  691,  692,  892,  893,  898,  904, 1044, 1045, 1076, 1084, 1092, 1093, 1186, 1194 }, //  90
  {   89,   90,   91,  264,  266,  267,  280,  282,  283,  444,  446,  447,  459,  460,  703,  704,  715,  716,  892,  893,  898,  910, 1052, 1053, 1077, 1085, 1100, 1101, 1190, 1198 }, //  91
  {   92,   93,   94,  300,  301,  302,  332,  333,  334,  364,  365,  367,  393,  395,  729,  730,  753,  754,  845,  870,  871,  875, 1014, 1015, 1046, 1054, 1078, 1079, 1187, 1191 }, //  92
  {   92,   93,   95,  316,  317,  318,  348,  349,  350,  380,  381,  383,  405,  407,  741,  742,  765,  766,  851,  870,  871,  875, 1022, 1023, 1047, 1055, 1086, 1087, 1195, 1199 }, //  93
  {   92,   94,   95,  236,  238,  239,  252,  254,  255,  420,  422,  423,  434,  435,  682,  683,  694,  695,  894,  895,  899,  905, 1046, 1047, 1078, 1086, 1094, 1095, 1187, 1195 }, //  94
  {   93,   94,   95,  268,  270,  271,  284,  286,  287,  448,  450,  451,  462,  463,  706,  707,  718,  719,  894,  895,  899,  911, 1054, 1055, 1079, 1087, 1102, 1103, 1191, 1199 }, //  95
  {   97,   98,   99,  161,  162,  163,  225,  226,  227,  289,  290,  291,  353,  354,  355,  409,  410,  411,  465,  466,  467,  521,  522,  523, 1104, 1120, 1136, 1152, 1168, 1184 }, //  96
  {  101,  102,  103,  165,  166,  167,  229,  230,  231,  293,  294,  295,  357,  358,  359,  413,  414,  415,  469,  470,  471,  524,  525,  526, 1112, 1128, 1137, 1153, 1169, 1185 }, //  97
  {  105,  106,  107,  169,  170,  171,  233,  234,  235,  297,  298,  299,  361,  362,  363,  417,  418,  419,  472,  473,  474,  528,  529,  530, 1105, 1121, 1144, 1154, 1176, 1186 }, //  98
  {  109,  110,  111,  173,  174,  175,  237,  238,  239,  301,  302,  303,  365,  366,  367,  421,  422,  423,  475,  476,  477,  531,  532,  533, 1113, 1129, 1145, 1155, 1177, 1187 }, //  99
  {  113,  114,  115,  177,  178,  179,  241,  242,  243,  305,  306,  307,  369,  370,  371,  424,  425,  426,  479,  480,  481,  535,  536,  537, 1106, 1122, 1138, 1160, 1170, 1192 }, // 100
  {  117,  118,  119,  181,  182,  183,  245,  246,  247,  309,  310,  311,  373,  374,  375,  427,  428,  429,  483,  484,  485,  538,  539,  540, 1114, 1130, 1139, 1161, 1171, 1193 }, // 101
  {  121,  122,  123,  185,  186,  187,  249,  250,  251,  313,  314,  315,  377,  378,  379,  430,  431,  432,  486,  487,  488,  542,  543,  544, 1107, 1123, 1146, 1162, 1178, 1194 }, // 102
  {  125,  126,  127,  189,  190,  191,  253,  254,  255,  317,  318,  319,  381,  382,  383,  433,  434,  435,  489,  490,  491,  545,  546,  547, 1115, 1131, 1147, 1163, 1179, 1195 }, // 103
  {  129,  130,  131,  193,  194,  195,  257,  258,  259,  321,  322,  323,  384,  385,  386,  437,  438,  439,  493,  494,  495,  549,  550,  551, 1108, 1124, 1140, 1156, 1172, 1188 }, // 104
  {  133,  134,  135,  197,  198,  199,  261,  262,  263,  325,  326,  327,  387,  388,  389,  441,  442,  443,  497,  498,  499,  552,  553,  554, 1116, 1132, 1141, 1157, 1173, 1189 }, // 105
  {  137,  138,  139,  201,  202,  203,  265,  266,  267,  329,  330,  331,  390,  391,  392,  445,  446,  447,  500,  501,  502,  556,  557,  558, 1109, 1125, 1148, 1158, 1180, 1190 }, // 106
  {  141,  142,  143,  205,  206,  207,  269,  270,  271,  333,  334,  335,  393,  394,  395,  449,  450,  451,  503,  504,  505,  559,  560,  561, 1117, 1133, 1149, 1159, 1181, 1191 }, // 107
  {  145,  146,  147,  209,  210,  211,  273,  274,  275,  337,  338,  339,  396,  397,  398,  452,  453,  454,  507,  508,  509,  563,  564,  565, 1110, 1126, 1142, 1164, 1174, 1196 }, // 108
  {  149,  150,  151,  213,  214,  215,  277,  278,  279,  341,  342,  343,  399,  400,  401,  455,  456,  457,  511,  512,  513,  566,  567,  568, 1118, 1134, 1143, 1165, 1175, 1197 }, // 109
  {  153,  154,  155,  217,  218,  219,  281,  282,  283,  345,  346,  347,  402,  403,  404,  458,  459,  460,  514,  515,  516,  570,  571,  572, 1111, 1127, 1150, 1166, 1182, 1198 }, // 110
  {  157,  158,  159,  221,  222,  223,  285,  286,  287,  349,  350,  351,  405,  406,  407,  461,  462,  463,  517,  518,  519,  573,  574,  575, 1119, 1135, 1151, 1167, 1183, 1199 }, // 111
  {  576,  577,  578,  579,  580,  581,  582,  583,  584,  585,  586,  587,  588,  589,  590,  591,  592,  593,  594,  595,  596,  597,  598,  599,  768,  770,  792,  795,  804,  806 }, // 112
  {  600,  601,  602,  603,  604,  605,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,  616,  617,  618,  619,  620,  621,  622,  623,  774,  776,  798,  801,  810,  812 }, // 113
  {  624,  625,  626,  627,  628,  629,  630,  631,  632,  633,  634,  635,  648,  649,  650,  651,  652,  653,  654,  655,  656,  657,  658,  659,  816,  822,  828,  830,  852,  855 }, // 114
  {  636,  637,  638,  639,  640,  641,  642,  643,  644,  645,  646,  647,  660,  661,  662,  663,  664,  665,  666,  667,  668,  669,  670,  671,  819,  825,  832,  834,  858,  861 }, // 115
  {  672,  673,  674,  675,  676,  677,  684,  685,  686,  687,  688,  689,  696,  697,  698,  699,  700,  701,  708,  709,  710,  711,  712,  713,  780,  784,  888,  890,  900,  906 }, // 116
  {  678,  679,  680,  681,  682,  683,  690,  691,  692,  693,  694,  695,  702,  703,  704,  705,  706,  707,  714,  715,  716,  717,  718,  719,  782,  786,  892,  894,  903,  909 }, // 117
  {  720,  721,  722,  726,  727,  728,  732,  733,  734,  738,  739,  740,  744,  745,  746,  750,  751,  752,  756,  757,  758,  762,  763,  764,  840,  846,  864,  868,  876,  882 }, // 118
  {  723,  724,  725,  729,  730,  731,  735,  736,  737,  741,  742,  743,  747,  748,  749,  753,  754,  755,  759,  760,  761,  765,  766,  767,  842,  848,  866,  870,  878,  884 }, // 119
};
int cellToVertK120[120][20] = { // Vertices on each cell, in cell order
  {    0,   24,   25,  136,  137,  152,  153,  216,  232,  233,  312,  328,  329,  344,  408,  416,  440,  441,  472,  480 }, //   0
  {    0,   26,   27,  138,  139,  154,  155,  217,  232,  233,  313,  328,  329,  345,  409,  417,  448,  449,  473,  481 }, //   1
  {    0,   40,   42,  120,  122,  168,  170,  248,  249,  256,  328,  344,  345,  352,  440,  448,  472,  473,  488,  496 }, //   2
  {    0,   41,   43,  121,  123,  169,  171,  248,  249,  257,  329,  344,  345,  353,  441,  449,  480,  481,  489,  497 }, //   3
  {    1,   28,   29,  140,  141,  156,  157,  218,  234,  235,  314,  330,  331,  346,  410,  418,  442,  443,  474,  482 }, //   4
  {    1,   30,   31,  142,  143,  158,  159,  219,  234,  235,  315,  330,  331,  347,  411,  419,  450,  451,  475,  483 }, //   5
  {    1,   44,   46,  124,  126,  172,  174,  250,  251,  258,  330,  346,  347,  354,  442,  450,  474,  475,  490,  498 }, //   6
  {    1,   45,   47,  125,  127,  173,  175,  250,  251,  259,  331,  346,  347,  355,  443,  451,  482,  483,  491,  499 }, //   7
  {    2,   32,   33,  144,  145,  160,  161,  220,  236,  237,  316,  332,  333,  348,  412,  420,  444,  445,  476,  484 }, //   8
  {    2,   34,   35,  146,  147,  162,  163,  221,  236,  237,  317,  332,  333,  349,  413,  421,  452,  453,  477,  485 }, //   9
  {    2,   48,   50,  128,  130,  176,  178,  252,  253,  260,  332,  348,  349,  356,  444,  452,  476,  477,  492,  500 }, //  10
  {    2,   49,   51,  129,  131,  177,  179,  252,  253,  261,  333,  348,  349,  357,  445,  453,  484,  485,  493,  501 }, //  11
  {    3,   36,   37,  148,  149,  164,  165,  222,  238,  239,  318,  334,  335,  350,  414,  422,  446,  447,  478,  486 }, //  12
  {    3,   38,   39,  150,  151,  166,  167,  223,  238,  239,  319,  334,  335,  351,  415,  423,  454,  455,  479,  487 }, //  13
  {    3,   52,   54,  132,  134,  180,  182,  254,  255,  262,  334,  350,  351,  358,  446,  454,  478,  479,  494,  502 }, //  14
  {    3,   53,   55,  133,  135,  181,  183,  254,  255,  263,  335,  350,  351,  359,  447,  455,  486,  487,  495,  503 }, //  15
  {    4,   24,   28,  104,  108,  152,  156,  216,  218,  240,  312,  314,  336,  400,  408,  410,  456,  464,  584,  592 }, //  16
  {    4,   25,   29,  105,  109,  153,  157,  216,  218,  241,  312,  314,  337,  401,  416,  418,  457,  465,  585,  593 }, //  17
  {    4,   56,   57,  136,  137,  184,  185,  224,  304,  305,  312,  320,  400,  401,  408,  416,  424,  432,  584,  585 }, //  18
  {    4,   60,   61,  140,  141,  188,  189,  226,  304,  305,  314,  322,  400,  401,  410,  418,  426,  434,  592,  593 }, //  19
  {    5,   26,   30,  106,  110,  154,  158,  217,  219,  242,  313,  315,  338,  402,  409,  411,  458,  466,  586,  594 }, //  20
  {    5,   27,   31,  107,  111,  155,  159,  217,  219,  243,  313,  315,  339,  403,  417,  419,  459,  467,  587,  595 }, //  21
  {    5,   58,   59,  138,  139,  186,  187,  225,  306,  307,  313,  321,  402,  403,  409,  417,  425,  433,  586,  587 }, //  22
  {    5,   62,   63,  142,  143,  190,  191,  227,  306,  307,  315,  323,  402,  403,  411,  419,  427,  435,  594,  595 }, //  23
  {    6,   32,   36,  112,  116,  160,  164,  220,  222,  244,  316,  318,  340,  404,  412,  414,  460,  468,  588,  596 }, //  24
  {    6,   33,   37,  113,  117,  161,  165,  220,  222,  245,  316,  318,  341,  405,  420,  422,  461,  469,  589,  597 }, //  25
  {    6,   64,   65,  144,  145,  192,  193,  228,  308,  309,  316,  324,  404,  405,  412,  420,  428,  436,  588,  589 }, //  26
  {    6,   68,   69,  148,  149,  196,  197,  230,  308,  309,  318,  326,  404,  405,  414,  422,  430,  438,  596,  597 }, //  27
  {    7,   34,   38,  114,  118,  162,  166,  221,  223,  246,  317,  319,  342,  406,  413,  415,  462,  470,  590,  598 }, //  28
  {    7,   35,   39,  115,  119,  163,  167,  221,  223,  247,  317,  319,  343,  407,  421,  423,  463,  471,  591,  599 }, //  29
  {    7,   66,   67,  146,  147,  194,  195,  229,  310,  311,  317,  325,  406,  407,  413,  421,  429,  437,  590,  591 }, //  30
  {    7,   70,   71,  150,  151,  198,  199,  231,  310,  311,  319,  327,  406,  407,  415,  423,  431,  439,  598,  599 }, //  31
  {    8,   24,   26,  120,  122,  152,  154,  232,  240,  242,  328,  336,  338,  384,  440,  448,  456,  458,  552,  560 }, //  32
  {    8,   28,   30,  124,  126,  156,  158,  234,  240,  242,  330,  336,  338,  386,  442,  450,  464,  466,  554,  562 }, //  33
  {    8,   72,   76,  104,  108,  200,  204,  280,  288,  290,  336,  376,  384,  386,  456,  464,  536,  544,  552,  554 }, //  34
  {    8,   74,   78,  106,  110,  202,  206,  282,  288,  290,  338,  378,  384,  386,  458,  466,  538,  546,  560,  562 }, //  35
  {    9,   25,   27,  121,  123,  153,  155,  233,  241,  243,  329,  337,  339,  385,  441,  449,  457,  459,  553,  561 }, //  36
  {    9,   29,   31,  125,  127,  157,  159,  235,  241,  243,  331,  337,  339,  387,  443,  451,  465,  467,  555,  563 }, //  37
  {    9,   73,   77,  105,  109,  201,  205,  281,  289,  291,  337,  377,  385,  387,  457,  465,  537,  545,  553,  555 }, //  38
  {    9,   75,   79,  107,  111,  203,  207,  283,  289,  291,  339,  379,  385,  387,  459,  467,  539,  547,  561,  563 }, //  39
  {   10,   32,   34,  128,  130,  160,  162,  236,  244,  246,  332,  340,  342,  388,  444,  452,  460,  462,  556,  564 }, //  40
  {   10,   36,   38,  132,  134,  164,  166,  238,  244,  246,  334,  340,  342,  390,  446,  454,  468,  470,  558,  566 }, //  41
  {   10,   80,   84,  112,  116,  208,  212,  284,  292,  294,  340,  380,  388,  390,  460,  468,  540,  548,  556,  558 }, //  42
  {   10,   82,   86,  114,  118,  210,  214,  286,  292,  294,  342,  382,  388,  390,  462,  470,  542,  550,  564,  566 }, //  43
  {   11,   33,   35,  129,  131,  161,  163,  237,  245,  247,  333,  341,  343,  389,  445,  453,  461,  463,  557,  565 }, //  44
  {   11,   37,   39,  133,  135,  165,  167,  239,  245,  247,  335,  341,  343,  391,  447,  455,  469,  471,  559,  567 }, //  45
  {   11,   81,   85,  113,  117,  209,  213,  285,  293,  295,  341,  381,  389,  391,  461,  469,  541,  549,  557,  559 }, //  46
  {   11,   83,   87,  115,  119,  211,  215,  287,  293,  295,  343,  383,  389,  391,  463,  471,  543,  551,  565,  567 }, //  47
  {   12,   56,   64,   88,   96,  184,  192,  224,  228,  296,  320,  324,  368,  392,  424,  428,  520,  528,  568,  576 }, //  48
  {   12,   57,   65,   89,   97,  185,  193,  224,  228,  297,  320,  324,  369,  393,  432,  436,  521,  529,  569,  577 }, //  49
  {   12,   40,   41,  136,  137,  168,  169,  248,  272,  273,  320,  344,  368,  369,  424,  432,  472,  480,  520,  521 }, //  50
  {   12,   48,   49,  144,  145,  176,  177,  252,  272,  273,  324,  348,  368,  369,  428,  436,  476,  484,  528,  529 }, //  51
  {   13,   58,   66,   90,   98,  186,  194,  225,  229,  298,  321,  325,  370,  394,  425,  429,  522,  530,  570,  578 }, //  52
  {   13,   59,   67,   91,   99,  187,  195,  225,  229,  299,  321,  325,  371,  395,  433,  437,  523,  531,  571,  579 }, //  53
  {   13,   42,   43,  138,  139,  170,  171,  249,  274,  275,  321,  345,  370,  371,  425,  433,  473,  481,  522,  523 }, //  54
  {   13,   50,   51,  146,  147,  178,  179,  253,  274,  275,  325,  349,  370,  371,  429,  437,  477,  485,  530,  531 }, //  55
  {   14,   60,   68,   92,  100,  188,  196,  226,  230,  300,  322,  326,  372,  396,  426,  430,  524,  532,  572,  580 }, //  56
  {   14,   61,   69,   93,  101,  189,  197,  226,  230,  301,  322,  326,  373,  397,  434,  438,  525,  533,  573,  581 }, //  57
  {   14,   44,   45,  140,  141,  172,  173,  250,  276,  277,  322,  346,  372,  373,  426,  434,  474,  482,  524,  525 }, //  58
  {   14,   52,   53,  148,  149,  180,  181,  254,  276,  277,  326,  350,  372,  373,  430,  438,  478,  486,  532,  533 }, //  59
  {   15,   62,   70,   94,  102,  190,  198,  227,  231,  302,  323,  327,  374,  398,  427,  431,  526,  534,  574,  582 }, //  60
  {   15,   63,   71,   95,  103,  191,  199,  227,  231,  303,  323,  327,  375,  399,  435,  439,  527,  535,  575,  583 }, //  61
  {   15,   46,   47,  142,  143,  174,  175,  251,  278,  279,  323,  347,  374,  375,  427,  435,  475,  483,  526,  527 }, //  62
  {   15,   54,   55,  150,  151,  182,  183,  255,  278,  279,  327,  351,  374,  375,  431,  439,  479,  487,  534,  535 }, //  63
  {   16,   40,   48,   88,   96,  168,  176,  256,  260,  272,  352,  356,  360,  368,  488,  492,  504,  512,  520,  528 }, //  64
  {   16,   42,   50,   90,   98,  170,  178,  256,  260,  274,  352,  356,  362,  370,  496,  500,  506,  514,  522,  530 }, //  65
  {   16,   72,   74,  120,  122,  200,  202,  264,  266,  288,  352,  360,  362,  384,  488,  496,  504,  506,  552,  560 }, //  66
  {   16,   80,   82,  128,  130,  208,  210,  264,  266,  292,  356,  360,  362,  388,  492,  500,  512,  514,  556,  564 }, //  67
  {   17,   41,   49,   89,   97,  169,  177,  257,  261,  273,  353,  357,  361,  369,  489,  493,  505,  513,  521,  529 }, //  68
  {   17,   43,   51,   91,   99,  171,  179,  257,  261,  275,  353,  357,  363,  371,  497,  501,  507,  515,  523,  531 }, //  69
  {   17,   73,   75,  121,  123,  201,  203,  265,  267,  289,  353,  361,  363,  385,  489,  497,  505,  507,  553,  561 }, //  70
  {   17,   81,   83,  129,  131,  209,  211,  265,  267,  293,  357,  361,  363,  389,  493,  501,  513,  515,  557,  565 }, //  71
  {   18,   44,   52,   92,  100,  172,  180,  258,  262,  276,  354,  358,  364,  372,  490,  494,  508,  516,  524,  532 }, //  72
  {   18,   46,   54,   94,  102,  174,  182,  258,  262,  278,  354,  358,  366,  374,  498,  502,  510,  518,  526,  534 }, //  73
  {   18,   76,   78,  124,  126,  204,  206,  268,  270,  290,  354,  364,  366,  386,  490,  498,  508,  510,  554,  562 }, //  74
  {   18,   84,   86,  132,  134,  212,  214,  268,  270,  294,  358,  364,  366,  390,  494,  502,  516,  518,  558,  566 }, //  75
  {   19,   45,   53,   93,  101,  173,  181,  259,  263,  277,  355,  359,  365,  373,  491,  495,  509,  517,  525,  533 }, //  76
  {   19,   47,   55,   95,  103,  175,  183,  259,  263,  279,  355,  359,  367,  375,  499,  503,  511,  519,  527,  535 }, //  77
  {   19,   77,   79,  125,  127,  205,  207,  269,  271,  291,  355,  365,  367,  387,  491,  499,  509,  511,  555,  563 }, //  78
  {   19,   85,   87,  133,  135,  213,  215,  269,  271,  295,  359,  365,  367,  391,  495,  503,  517,  519,  559,  567 }, //  79
  {   20,   72,   80,   88,   96,  200,  208,  264,  280,  284,  360,  376,  380,  392,  504,  512,  536,  540,  568,  576 }, //  80
  {   20,   76,   84,   92,  100,  204,  212,  268,  280,  284,  364,  376,  380,  396,  508,  516,  544,  548,  572,  580 }, //  81
  {   20,   56,   60,  104,  108,  184,  188,  296,  300,  304,  376,  392,  396,  400,  536,  544,  568,  572,  584,  592 }, //  82
  {   20,   64,   68,  112,  116,  192,  196,  296,  300,  308,  380,  392,  396,  404,  540,  548,  576,  580,  588,  596 }, //  83
  {   21,   73,   81,   89,   97,  201,  209,  265,  281,  285,  361,  377,  381,  393,  505,  513,  537,  541,  569,  577 }, //  84
  {   21,   77,   85,   93,  101,  205,  213,  269,  281,  285,  365,  377,  381,  397,  509,  517,  545,  549,  573,  581 }, //  85
  {   21,   57,   61,  105,  109,  185,  189,  297,  301,  305,  377,  393,  397,  401,  537,  545,  569,  573,  585,  593 }, //  86
  {   21,   65,   69,  113,  117,  193,  197,  297,  301,  309,  381,  393,  397,  405,  541,  549,  577,  581,  589,  597 }, //  87
  {   22,   74,   82,   90,   98,  202,  210,  266,  282,  286,  362,  378,  382,  394,  506,  514,  538,  542,  570,  578 }, //  88
  {   22,   78,   86,   94,  102,  206,  214,  270,  282,  286,  366,  378,  382,  398,  510,  518,  546,  550,  574,  582 }, //  89
  {   22,   58,   62,  106,  110,  186,  190,  298,  302,  306,  378,  394,  398,  402,  538,  546,  570,  574,  586,  594 }, //  90
  {   22,   66,   70,  114,  118,  194,  198,  298,  302,  310,  382,  394,  398,  406,  542,  550,  578,  582,  590,  598 }, //  91
  {   23,   75,   83,   91,   99,  203,  211,  267,  283,  287,  363,  379,  383,  395,  507,  515,  539,  543,  571,  579 }, //  92
  {   23,   79,   87,   95,  103,  207,  215,  271,  283,  287,  367,  379,  383,  399,  511,  519,  547,  551,  575,  583 }, //  93
  {   23,   59,   63,  107,  111,  187,  191,  299,  303,  307,  379,  395,  399,  403,  539,  547,  571,  575,  587,  595 }, //  94
  {   23,   67,   71,  115,  119,  195,  199,  299,  303,  311,  383,  395,  399,  407,  543,  551,  579,  583,  591,  599 }, //  95
  {   24,   40,   56,   72,   88,  104,  120,  136,  408,  424,  440,  456,  472,  488,  504,  520,  536,  552,  568,  584 }, //  96
  {   25,   41,   57,   73,   89,  105,  121,  137,  416,  432,  441,  457,  480,  489,  505,  521,  537,  553,  569,  585 }, //  97
  {   26,   42,   58,   74,   90,  106,  122,  138,  409,  425,  448,  458,  473,  496,  506,  522,  538,  560,  570,  586 }, //  98
  {   27,   43,   59,   75,   91,  107,  123,  139,  417,  433,  449,  459,  481,  497,  507,  523,  539,  561,  571,  587 }, //  99
  {   28,   44,   60,   76,   92,  108,  124,  140,  410,  426,  442,  464,  474,  490,  508,  524,  544,  554,  572,  592 }, // 100
  {   29,   45,   61,   77,   93,  109,  125,  141,  418,  434,  443,  465,  482,  491,  509,  525,  545,  555,  573,  593 }, // 101
  {   30,   46,   62,   78,   94,  110,  126,  142,  411,  427,  450,  466,  475,  498,  510,  526,  546,  562,  574,  594 }, // 102
  {   31,   47,   63,   79,   95,  111,  127,  143,  419,  435,  451,  467,  483,  499,  511,  527,  547,  563,  575,  595 }, // 103
  {   32,   48,   64,   80,   96,  112,  128,  144,  412,  428,  444,  460,  476,  492,  512,  528,  540,  556,  576,  588 }, // 104
  {   33,   49,   65,   81,   97,  113,  129,  145,  420,  436,  445,  461,  484,  493,  513,  529,  541,  557,  577,  589 }, // 105
  {   34,   50,   66,   82,   98,  114,  130,  146,  413,  429,  452,  462,  477,  500,  514,  530,  542,  564,  578,  590 }, // 106
  {   35,   51,   67,   83,   99,  115,  131,  147,  421,  437,  453,  463,  485,  501,  515,  531,  543,  565,  579,  591 }, // 107
  {   36,   52,   68,   84,  100,  116,  132,  148,  414,  430,  446,  468,  478,  494,  516,  532,  548,  558,  580,  596 }, // 108
  {   37,   53,   69,   85,  101,  117,  133,  149,  422,  438,  447,  469,  486,  495,  517,  533,  549,  559,  581,  597 }, // 109
  {   38,   54,   70,   86,  102,  118,  134,  150,  415,  431,  454,  470,  479,  502,  518,  534,  550,  566,  582,  598 }, // 110
  {   39,   55,   71,   87,  103,  119,  135,  151,  423,  439,  455,  471,  487,  503,  519,  535,  551,  567,  583,  599 }, // 111
  {  152,  153,  154,  155,  156,  157,  158,  159,  216,  217,  218,  219,  232,  233,  234,  235,  240,  241,  242,  243 }, // 112
  {  160,  161,  162,  163,  164,  165,  166,  167,  220,  221,  222,  223,  236,  237,  238,  239,  244,  245,  246,  247 }, // 113
  {  168,  169,  170,  171,  176,  177,  178,  179,  248,  249,  252,  253,  256,  257,  260,  261,  272,  273,  274,  275 }, // 114
  {  172,  173,  174,  175,  180,  181,  182,  183,  250,  251,  254,  255,  258,  259,  262,  263,  276,  277,  278,  279 }, // 115
  {  184,  185,  188,  189,  192,  193,  196,  197,  224,  226,  228,  230,  296,  297,  300,  301,  304,  305,  308,  309 }, // 116
  {  186,  187,  190,  191,  194,  195,  198,  199,  225,  227,  229,  231,  298,  299,  302,  303,  306,  307,  310,  311 }, // 117
  {  200,  202,  204,  206,  208,  210,  212,  214,  264,  266,  268,  270,  280,  282,  284,  286,  288,  290,  292,  294 }, // 118
  {  201,  203,  205,  207,  209,  211,  213,  215,  265,  267,  269,  271,  281,  283,  285,  287,  289,  291,  293,  295 }, // 119
};
float cellNormalK120[120][4] = { // Normals of cells, in cell order
  {    0.809017f,    0.500000f,    0.309017f,    0.000000f }, //   0
  {    0.809017f,    0.500000f,   -0.309017f,    0.000000f }, //   1
  {    0.500000f,    0.809017f,    0.000000f,    0.309017f }, //   2
  {    0.500000f,    0.809017f,    0.000000f,   -0.309017f }, //   3
  {    0.809017f,   -0.500000f,    0.309017f,    0.000000f }, //   4
  {    0.809017f,   -0.500000f,   -0.309017f,    0.000000f }, //   5
  {    0.500000f,   -0.809017f,    0.000000f,    0.309017f }, //   6
  {    0.500000f,   -0.809017f,    0.000000f,   -0.309017f }, //   7
  {   -0.809017f,    0.500000f,    0.309017f,    0.000000f }, //   8
  {   -0.809017f,    0.500000f,   -0.309017f,    0.000000f }, //   9
  {   -0.500000f,    0.809017f,    0.000000f,    0.309017f }, //  10
  {   -0.500000f,    0.809017f,    0.000000f,   -0.309017f }, //  11
  {   -0.809017f,   -0.500000f,    0.309017f,    0.000000f }, //  12
  {   -0.809017f,   -0.500000f,   -0.309017f,    0.000000f }, //  13
  {   -0.500000f,   -0.809017f,    0.000000f,    0.309017f }, //  14
  {   -0.500000f,   -0.809017f,    0.000000f,   -0.309017f }, //  15
  {    0.809017f,    0.000000f,    0.500000f,    0.309017f }, //  16
  {    0.809017f,    0.000000f,    0.500000f,   -0.309017f }, //  17
  {    0.500000f,    0.309017f,    0.809017f,    0.000000f }, //  18
  {    0.500000f,   -0.309017f,    0.809017f,    0.000000f }, //  19
  {    0.809017f,    0.000000f,   -0.500000f,    0.309017f }, //  20
  {    0.809017f,    0.000000f,   -0.500000f,   -0.309017f }, //  21
  {    0.500000f,    0.309017f,   -0.809017f,    0.000000f }, //  22
  {    0.500000f,   -0.309017f,   -0.809017f,    0.000000f }, //  23
  {   -0.809017f,    0.000000f,    0.500000f,    0.309017f }, //  24
  {   -0.809017f,    0.000000f,    0.500000f,   -0.309017f }, //  25
  {   -0.500000f,    0.309017f,    0.809017f,    0.000000f }, //  26
  {   -0.500000f,   -0.309017f,    0.809017f,    0.000000f }, //  27
  {   -0.809017f,    0.000000f,   -0.500000f,    0.309017f }, //  28
  {   -0.809017f,    0.000000f,   -0.500000f,   -0.309017f }, //  29
  {   -0.500000f,    0.309017f,   -0.809017f,    0.000000f }, //  30
  {   -0.500000f,   -0.309017f,   -0.809017f,    0.000000f }, //  31
  {    0.809017f,    0.309017f,    0.000000f,    0.500000f }, //  32
  {    0.809017f,   -0.309017f,    0.000000f,    0.500000f }, //  33
  {    0.500000f,    0.000000f,    0.309017f,    0.809017f }, //  34
  {    0.500000f,    0.000000f,   -0.309017f,    0.809017f }, //  35
  {    0.809017f,    0.309017f,    0.000000f,   -0.500000f }, //  36
  {    0.809017f,   -0.309017f,    0.000000f,   -0.500000f }, //  37
  {    0.500000f,    0.000000f,    0.309017f,   -0.809017f }, //  38
  {    0.500000f,    0.000000f,   -0.309017f,   -0.809017f }, //  39
  {   -0.809017f,    0.309017f,    0.000000f,    0.500000f }, //  40
  {   -0.809017f,   -0.309017f,    0.000000f,    0.500000f }, //  41
  {   -0.500000f,    0.000000f,    0.309017f,    0.809017f }, //  42
  {   -0.500000f,    0.000000f,   -0.309017f,    0.809017f }, //  43
  {   -0.809017f,    0.309017f,    0.000000f,   -0.500000f }, //  44
  {   -0.809017f,   -0.309017f,    0.000000f,   -0.500000f }, //  45
  {   -0.500000f,    0.000000f,    0.309017f,   -0.809017f }, //  46
  {   -0.500000f,    0.000000f,   -0.309017f,   -0.809017f }, //  47
  {    0.000000f,    0.500000f,    0.809017f,    0.309017f }, //  48
  {    0.000000f,    0.500000f,    0.809017f,   -0.309017f }, //  49
  {    0.309017f,    0.809017f,    0.500000f,    0.000000f }, //  50
  {   -0.309017f,    0.809017f,    0.500000f,    0.000000f }, //  51
  {    0.000000f,    0.500000f,   -0.809017f,    0.309017f }, //  52
  {    0.000000f,    0.500000f,   -0.809017f,   -0.309017f }, //  53
  {    0.309017f,    0.809017f,   -0.500000f,    0.000000f }, //  54
  {   -0.309017f,    0.809017f,   -0.500000f,    0.000000f }, //  55
  {    0.000000f,   -0.500000f,    0.809017f,    0.309017f }, //  56
  {    0.000000f,   -0.500000f,    0.809017f,   -0.309017f }, //  57
  {    0.309017f,   -0.809017f,    0.500000f,    0.000000f }, //  58
  {   -0.309017f,   -0.809017f,    0.500000f,    0.000000f }, //  59
  {    0.000000f,   -0.500000f,   -0.809017f,    0.309017f }, //  60
  {    0.000000f,   -0.500000f,   -0.809017f,   -0.309017f }, //  61
  {    0.309017f,   -0.809017f,   -0.500000f,    0.000000f }, //  62
  {   -0.309017f,   -0.809017f,   -0.500000f,    0.000000f }, //  63
  {    0.000000f,    0.809017f,    0.309017f,    0.500000f }, //  64
  {    0.000000f,    0.809017f,   -0.309017f,    0.500000f }, //  65
  {    0.309017f,    0.500000f,    0.000000f,    0.809017f }, //  66
  {   -0.309017f,    0.500000f,    0.000000f,    0.809017f }, //  67
  {    0.000000f,    0.809017f,    0.309017f,   -0.500000f }, //  68
  {    0.000000f,    0.809017f,   -0.309017f,   -0.500000f }, //  69
  {    0.309017f,    0.500000f,    0.000000f,   -0.809017f }, //  70
  {   -0.309017f,    0.500000f,    0.000000f,   -0.809017f }, //  71
  {    0.000000f,   -0.809017f,    0.309017f,    0.500000f }, //  72
  {    0.000000f,   -0.809017f,   -0.309017f,    0.500000f }, //  73
  {    0.309017f,   -0.500000f,    0.000000f,    0.809017f }, //  74
  {   -0.309017f,   -0.500000f,    0.000000f,    0.809017f }, //  75
  {    0.000000f,   -0.809017f,    0.309017f,   -0.500000f }, //  76
  {    0.000000f,   -0.809017f,   -0.309017f,   -0.500000f }, //  77
  {    0.309017f,   -0.500000f,    0.000000f,   -0.809017f }, //  78
  {   -0.309017f,   -0.500000f,    0.000000f,   -0.809017f }, //  79
  {    0.000000f,    0.309017f,    0.500000f,    0.809017f }, //  80
  {    0.000000f,   -0.309017f,    0.500000f,    0.809017f }, //  81
  {    0.309017f,    0.000000f,    0.809017f,    0.500000f }, //  82
  {   -0.309017f,    0.000000f,    0.809017f,    0.500000f }, //  83
  {    0.000000f,    0.309017f,    0.500000f,   -0.809017f }, //  84
  {    0.000000f,   -0.309017f,    0.500000f,   -0.809017f }, //  85
  {    0.309017f,    0.000000f,    0.809017f,   -0.500000f }, //  86
  {   -0.309017f,    0.000000f,    0.809017f,   -0.500000f }, //  87
  {    0.000000f,    0.309017f,   -0.500000f,    0.809017f }, //  88
  {    0.000000f,   -0.309017f,   -0.500000f,    0.809017f }, //  89
  {    0.309017f,    0.000000f,   -0.809017f,    0.500000f }, //  90
  {   -0.309017f,    0.000000f,   -0.809017f,    0.500000f }, //  91
  {    0.000000f,    0.309017f,   -0.500000f,   -0.809017f }, //  92
  {    0.000000f,   -0.309017f,   -0.500000f,   -0.809017f }, //  93
  {    0.309017f,    0.000000f,   -0.809017f,   -0.500000f }, //  94
  {   -0.309017f,    0.000000f,   -0.809017f,   -0.500000f }, //  95
  {    0.500000f,    0.500000f,    0.500000f,    0.500000f }, //  96
  {    0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //  97
  {    0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //  98
  {    0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  99
  {    0.500000f,   -0.500000f,    0.500000f,    0.500000f }, // 100
  {    0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, // 101
  {    0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, // 102
  {    0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, // 103
  {   -0.500000f,    0.500000f,    0.500000f,    0.500000f }, // 104
  {   -0.500000f,    0.500000f,    0.500000f,   -0.500000f }, // 105
  {   -0.500000f,    0.500000f,   -0.500000f,    0.500000f }, // 106
  {   -0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, // 107
  {   -0.500000f,   -0.500000f,    0.500000f,    0.500000f }, // 108
  {   -0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, // 109
  {   -0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, // 110
  {   -0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, // 111
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, // 112
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, // 113
  {    0.000000f,    1.000000f,    0.000000f,    0.000000f }, // 114
  {    0.000000f,   -1.000000f,    0.000000f,    0.000000f }, // 115
  {    0.000000f,    0.000000f,    1.000000f,    0.000000f }, // 116
  {    0.000000f,    0.000000f,   -1.000000f,    0.000000f }, // 117
  {    0.000000f,    0.000000f,    0.000000f,    1.000000f }, // 118
  {    0.000000f,    0.000000f,    0.000000f,   -1.000000f }, // 119
};
int cellToOppositeK120[120] = { // The opposite cell, in cell order
     13, //   0
     12, //   1
     15, //   2
     14, //   3
      9, //   4
      8, //   5
     11, //   6
     10, //   7
      5, //   8
      4, //   9
      7, //  10
      6, //  11
      1, //  12
      0, //  13
      3, //  14
      2, //  15
     29, //  16
     28, //  17
     31, //  18
     30, //  19
     25, //  20
     24, //  21
     27, //  22
     26, //  23
     21, //  24
     20, //  25
     23, //  26
     22, //  27
     17, //  28
     16, //  29
     19, //  30
     18, //  31
     45, //  32
     44, //  33
     47, //  34
     46, //  35
     41, //  36
     40, //  37
     43, //  38
     42, //  39
     37, //  40
     36, //  41
     39, //  42
     38, //  43
     33, //  44
     32, //  45
     35, //  46
     34, //  47
     61, //  48
     60, //  49
     63, //  50
     62, //  51
     57, //  52
     56, //  53
     59, //  54
     58, //  55
     53, //  56
     52, //  57
     55, //  58
     54, //  59
     49, //  60
     48, //  61
     51, //  62
     50, //  63
     77, //  64
     76, //  65
     79, //  66
     78, //  67
     73, //  68
     72, //  69
     75, //  70
     74, //  71
     69, //  72
     68, //  73
     71, //  74
     70, //  75
     65, //  76
     64, //  77
     67, //  78
     66, //  79
     93, //  80
     92, //  81
     95, //  82
     94, //  83
     89, //  84
     88, //  85
     91, //  86
     90, //  87
     85, //  88
     84, //  89
     87, //  90
     86, //  91
     81, //  92
     80, //  93
     83, //  94
     82, //  95
    111, //  96
    110, //  97
    109, //  98
    108, //  99
    107, // 100
    106, // 101
    105, // 102
    104, // 103
    103, // 104
    102, // 105
    101, // 106
    100, // 107
     99, // 108
     98, // 109
     97, // 110
     96, // 111
    113, // 112
    112, // 113
    115, // 114
    114, // 115
    117, // 116
    116, // 117
    119, // 118
    118, // 119
};
////////// The Radius of the whole K120 is 1. The radius of each cell is     0.378467
////////// The Distance from the origin to the centre of each cell of K120 is     0.925615
////////// The Sphere circumscribing each cell of K120 overlaps the origin by    -0.547148
FigInfo infoK120 = {
    4, // numDims;
  600, // numVerts;
 1200, // numEdges;
  720, // numFaces;
  120, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
   20, // numVertsPerCell;
    5, // numEdgesPerFace;
   30, // numEdgesPerCell;
   12, // numFacesPerCell;
    3, // numFacesPerVert;
    3, // numFacesPerEdge;
    0, // numCellsPerVert;
    3, // numCellsPerEdge;
    2, // numCellsPerFace;
   -0.447214f, // dihedralCosine;
    0.378467f, // cellRadius;
    0.925615f, // cellCentreRadius;
    0.973249f, // faceCentreRadius;
(float *)vertexK120, // The vertex matrix
(int *)edgeK120, // The edge Matrix
(int *)vertToEdgeK120, // The Matrix of vertices for each edge
(int *)faceK120, // The face to edge matrix
(int *)edgeToFaceK120, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK120, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK120, // The cell matrix
(float *)cellNormalK120, // The normal of a 4D cell
(int *)cellToEdgeK120, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK120, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
float vertexK600[120][4] = { // Coordinates of vertices, in vertex order
  {    0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   0
  {    0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   1
  {    0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //   2
  {    0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //   3
  {    0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //   4
  {    0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //   5
  {    0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //   6
  {    0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //   7
  {   -0.500000f,    0.500000f,    0.500000f,    0.500000f }, //   8
  {   -0.500000f,    0.500000f,    0.500000f,   -0.500000f }, //   9
  {   -0.500000f,    0.500000f,   -0.500000f,    0.500000f }, //  10
  {   -0.500000f,    0.500000f,   -0.500000f,   -0.500000f }, //  11
  {   -0.500000f,   -0.500000f,    0.500000f,    0.500000f }, //  12
  {   -0.500000f,   -0.500000f,    0.500000f,   -0.500000f }, //  13
  {   -0.500000f,   -0.500000f,   -0.500000f,    0.500000f }, //  14
  {   -0.500000f,   -0.500000f,   -0.500000f,   -0.500000f }, //  15
  {    0.000000f,    0.000000f,    0.000000f,    1.000000f }, //  16
  {    0.000000f,    0.000000f,    0.000000f,   -1.000000f }, //  17
  {    0.000000f,    0.000000f,    1.000000f,    0.000000f }, //  18
  {    0.000000f,    0.000000f,   -1.000000f,    0.000000f }, //  19
  {    0.000000f,    1.000000f,    0.000000f,    0.000000f }, //  20
  {    0.000000f,   -1.000000f,    0.000000f,    0.000000f }, //  21
  {    1.000000f,    0.000000f,    0.000000f,    0.000000f }, //  22
  {   -1.000000f,    0.000000f,    0.000000f,    0.000000f }, //  23
  {    0.809017f,    0.500000f,    0.309017f,    0.000000f }, //  24
  {    0.809017f,    0.500000f,   -0.309017f,    0.000000f }, //  25
  {    0.809017f,   -0.500000f,    0.309017f,    0.000000f }, //  26
  {    0.809017f,   -0.500000f,   -0.309017f,    0.000000f }, //  27
  {   -0.809017f,    0.500000f,    0.309017f,    0.000000f }, //  28
  {   -0.809017f,    0.500000f,   -0.309017f,    0.000000f }, //  29
  {   -0.809017f,   -0.500000f,    0.309017f,    0.000000f }, //  30
  {   -0.809017f,   -0.500000f,   -0.309017f,    0.000000f }, //  31
  {    0.500000f,    0.309017f,    0.809017f,    0.000000f }, //  32
  {    0.500000f,    0.309017f,   -0.809017f,    0.000000f }, //  33
  {    0.500000f,   -0.309017f,    0.809017f,    0.000000f }, //  34
  {    0.500000f,   -0.309017f,   -0.809017f,    0.000000f }, //  35
  {   -0.500000f,    0.309017f,    0.809017f,    0.000000f }, //  36
  {   -0.500000f,    0.309017f,   -0.809017f,    0.000000f }, //  37
  {   -0.500000f,   -0.309017f,    0.809017f,    0.000000f }, //  38
  {   -0.500000f,   -0.309017f,   -0.809017f,    0.000000f }, //  39
  {    0.809017f,    0.309017f,    0.000000f,    0.500000f }, //  40
  {    0.809017f,    0.309017f,    0.000000f,   -0.500000f }, //  41
  {    0.809017f,   -0.309017f,    0.000000f,    0.500000f }, //  42
  {    0.809017f,   -0.309017f,    0.000000f,   -0.500000f }, //  43
  {   -0.809017f,    0.309017f,    0.000000f,    0.500000f }, //  44
  {   -0.809017f,    0.309017f,    0.000000f,   -0.500000f }, //  45
  {   -0.809017f,   -0.309017f,    0.000000f,    0.500000f }, //  46
  {   -0.809017f,   -0.309017f,    0.000000f,   -0.500000f }, //  47
  {    0.809017f,    0.000000f,    0.500000f,    0.309017f }, //  48
  {    0.809017f,    0.000000f,    0.500000f,   -0.309017f }, //  49
  {    0.809017f,    0.000000f,   -0.500000f,    0.309017f }, //  50
  {    0.809017f,    0.000000f,   -0.500000f,   -0.309017f }, //  51
  {   -0.809017f,    0.000000f,    0.500000f,    0.309017f }, //  52
  {   -0.809017f,    0.000000f,    0.500000f,   -0.309017f }, //  53
  {   -0.809017f,    0.000000f,   -0.500000f,    0.309017f }, //  54
  {   -0.809017f,    0.000000f,   -0.500000f,   -0.309017f }, //  55
  {    0.309017f,    0.809017f,    0.500000f,    0.000000f }, //  56
  {    0.309017f,    0.809017f,   -0.500000f,    0.000000f }, //  57
  {    0.309017f,   -0.809017f,    0.500000f,    0.000000f }, //  58
  {    0.309017f,   -0.809017f,   -0.500000f,    0.000000f }, //  59
  {   -0.309017f,    0.809017f,    0.500000f,    0.000000f }, //  60
  {   -0.309017f,    0.809017f,   -0.500000f,    0.000000f }, //  61
  {   -0.309017f,   -0.809017f,    0.500000f,    0.000000f }, //  62
  {   -0.309017f,   -0.809017f,   -0.500000f,    0.000000f }, //  63
  {    0.500000f,    0.809017f,    0.000000f,    0.309017f }, //  64
  {    0.500000f,    0.809017f,    0.000000f,   -0.309017f }, //  65
  {    0.500000f,   -0.809017f,    0.000000f,    0.309017f }, //  66
  {    0.500000f,   -0.809017f,    0.000000f,   -0.309017f }, //  67
  {   -0.500000f,    0.809017f,    0.000000f,    0.309017f }, //  68
  {   -0.500000f,    0.809017f,    0.000000f,   -0.309017f }, //  69
  {   -0.500000f,   -0.809017f,    0.000000f,    0.309017f }, //  70
  {   -0.500000f,   -0.809017f,    0.000000f,   -0.309017f }, //  71
  {    0.000000f,    0.309017f,    0.500000f,    0.809017f }, //  72
  {    0.000000f,    0.309017f,    0.500000f,   -0.809017f }, //  73
  {    0.000000f,    0.309017f,   -0.500000f,    0.809017f }, //  74
  {    0.000000f,    0.309017f,   -0.500000f,   -0.809017f }, //  75
  {    0.000000f,   -0.309017f,    0.500000f,    0.809017f }, //  76
  {    0.000000f,   -0.309017f,    0.500000f,   -0.809017f }, //  77
  {    0.000000f,   -0.309017f,   -0.500000f,    0.809017f }, //  78
  {    0.000000f,   -0.309017f,   -0.500000f,   -0.809017f }, //  79
  {    0.000000f,    0.809017f,    0.309017f,    0.500000f }, //  80
  {    0.000000f,    0.809017f,    0.309017f,   -0.500000f }, //  81
  {    0.000000f,    0.809017f,   -0.309017f,    0.500000f }, //  82
  {    0.000000f,    0.809017f,   -0.309017f,   -0.500000f }, //  83
  {    0.000000f,   -0.809017f,    0.309017f,    0.500000f }, //  84
  {    0.000000f,   -0.809017f,    0.309017f,   -0.500000f }, //  85
  {    0.000000f,   -0.809017f,   -0.309017f,    0.500000f }, //  86
  {    0.000000f,   -0.809017f,   -0.309017f,   -0.500000f }, //  87
  {    0.500000f,    0.000000f,    0.309017f,    0.809017f }, //  88
  {    0.500000f,    0.000000f,    0.309017f,   -0.809017f }, //  89
  {    0.500000f,    0.000000f,   -0.309017f,    0.809017f }, //  90
  {    0.500000f,    0.000000f,   -0.309017f,   -0.809017f }, //  91
  {   -0.500000f,    0.000000f,    0.309017f,    0.809017f }, //  92
  {   -0.500000f,    0.000000f,    0.309017f,   -0.809017f }, //  93
  {   -0.500000f,    0.000000f,   -0.309017f,    0.809017f }, //  94
  {   -0.500000f,    0.000000f,   -0.309017f,   -0.809017f }, //  95
  {    0.309017f,    0.500000f,    0.000000f,    0.809017f }, //  96
  {    0.309017f,    0.500000f,    0.000000f,   -0.809017f }, //  97
  {    0.309017f,   -0.500000f,    0.000000f,    0.809017f }, //  98
  {    0.309017f,   -0.500000f,    0.000000f,   -0.809017f }, //  99
  {   -0.309017f,    0.500000f,    0.000000f,    0.809017f }, // 100
  {   -0.309017f,    0.500000f,    0.000000f,   -0.809017f }, // 101
  {   -0.309017f,   -0.500000f,    0.000000f,    0.809017f }, // 102
  {   -0.309017f,   -0.500000f,    0.000000f,   -0.809017f }, // 103
  {    0.000000f,    0.500000f,    0.809017f,    0.309017f }, // 104
  {    0.000000f,    0.500000f,    0.809017f,   -0.309017f }, // 105
  {    0.000000f,    0.500000f,   -0.809017f,    0.309017f }, // 106
  {    0.000000f,    0.500000f,   -0.809017f,   -0.309017f }, // 107
  {    0.000000f,   -0.500000f,    0.809017f,    0.309017f }, // 108
  {    0.000000f,   -0.500000f,    0.809017f,   -0.309017f }, // 109
  {    0.000000f,   -0.500000f,   -0.809017f,    0.309017f }, // 110
  {    0.000000f,   -0.500000f,   -0.809017f,   -0.309017f }, // 111
  {    0.309017f,    0.000000f,    0.809017f,    0.500000f }, // 112
  {    0.309017f,    0.000000f,    0.809017f,   -0.500000f }, // 113
  {    0.309017f,    0.000000f,   -0.809017f,    0.500000f }, // 114
  {    0.309017f,    0.000000f,   -0.809017f,   -0.500000f }, // 115
  {   -0.309017f,    0.000000f,    0.809017f,    0.500000f }, // 116
  {   -0.309017f,    0.000000f,    0.809017f,   -0.500000f }, // 117
  {   -0.309017f,    0.000000f,   -0.809017f,    0.500000f }, // 118
  {   -0.309017f,    0.000000f,   -0.809017f,   -0.500000f }, // 119
};
int edgeK600[720][2] = { // Vertex pairs defining each edge, in edge order
  {    0,   24 }, //   0
  {    0,   32 }, //   1
  {    0,   40 }, //   2
  {    0,   48 }, //   3
  {    0,   56 }, //   4
  {    0,   64 }, //   5
  {    0,   72 }, //   6
  {    0,   80 }, //   7
  {    0,   88 }, //   8
  {    0,   96 }, //   9
  {    0,  104 }, //  10
  {    0,  112 }, //  11
  {    1,   24 }, //  12
  {    1,   32 }, //  13
  {    1,   41 }, //  14
  {    1,   49 }, //  15
  {    1,   56 }, //  16
  {    1,   65 }, //  17
  {    1,   73 }, //  18
  {    1,   81 }, //  19
  {    1,   89 }, //  20
  {    1,   97 }, //  21
  {    1,  105 }, //  22
  {    1,  113 }, //  23
  {    2,   25 }, //  24
  {    2,   33 }, //  25
  {    2,   40 }, //  26
  {    2,   50 }, //  27
  {    2,   57 }, //  28
  {    2,   64 }, //  29
  {    2,   74 }, //  30
  {    2,   82 }, //  31
  {    2,   90 }, //  32
  {    2,   96 }, //  33
  {    2,  106 }, //  34
  {    2,  114 }, //  35
  {    3,   25 }, //  36
  {    3,   33 }, //  37
  {    3,   41 }, //  38
  {    3,   51 }, //  39
  {    3,   57 }, //  40
  {    3,   65 }, //  41
  {    3,   75 }, //  42
  {    3,   83 }, //  43
  {    3,   91 }, //  44
  {    3,   97 }, //  45
  {    3,  107 }, //  46
  {    3,  115 }, //  47
  {    4,   26 }, //  48
  {    4,   34 }, //  49
  {    4,   42 }, //  50
  {    4,   48 }, //  51
  {    4,   58 }, //  52
  {    4,   66 }, //  53
  {    4,   76 }, //  54
  {    4,   84 }, //  55
  {    4,   88 }, //  56
  {    4,   98 }, //  57
  {    4,  108 }, //  58
  {    4,  112 }, //  59
  {    5,   26 }, //  60
  {    5,   34 }, //  61
  {    5,   43 }, //  62
  {    5,   49 }, //  63
  {    5,   58 }, //  64
  {    5,   67 }, //  65
  {    5,   77 }, //  66
  {    5,   85 }, //  67
  {    5,   89 }, //  68
  {    5,   99 }, //  69
  {    5,  109 }, //  70
  {    5,  113 }, //  71
  {    6,   27 }, //  72
  {    6,   35 }, //  73
  {    6,   42 }, //  74
  {    6,   50 }, //  75
  {    6,   59 }, //  76
  {    6,   66 }, //  77
  {    6,   78 }, //  78
  {    6,   86 }, //  79
  {    6,   90 }, //  80
  {    6,   98 }, //  81
  {    6,  110 }, //  82
  {    6,  114 }, //  83
  {    7,   27 }, //  84
  {    7,   35 }, //  85
  {    7,   43 }, //  86
  {    7,   51 }, //  87
  {    7,   59 }, //  88
  {    7,   67 }, //  89
  {    7,   79 }, //  90
  {    7,   87 }, //  91
  {    7,   91 }, //  92
  {    7,   99 }, //  93
  {    7,  111 }, //  94
  {    7,  115 }, //  95
  {    8,   28 }, //  96
  {    8,   36 }, //  97
  {    8,   44 }, //  98
  {    8,   52 }, //  99
  {    8,   60 }, // 100
  {    8,   68 }, // 101
  {    8,   72 }, // 102
  {    8,   80 }, // 103
  {    8,   92 }, // 104
  {    8,  100 }, // 105
  {    8,  104 }, // 106
  {    8,  116 }, // 107
  {    9,   28 }, // 108
  {    9,   36 }, // 109
  {    9,   45 }, // 110
  {    9,   53 }, // 111
  {    9,   60 }, // 112
  {    9,   69 }, // 113
  {    9,   73 }, // 114
  {    9,   81 }, // 115
  {    9,   93 }, // 116
  {    9,  101 }, // 117
  {    9,  105 }, // 118
  {    9,  117 }, // 119
  {   10,   29 }, // 120
  {   10,   37 }, // 121
  {   10,   44 }, // 122
  {   10,   54 }, // 123
  {   10,   61 }, // 124
  {   10,   68 }, // 125
  {   10,   74 }, // 126
  {   10,   82 }, // 127
  {   10,   94 }, // 128
  {   10,  100 }, // 129
  {   10,  106 }, // 130
  {   10,  118 }, // 131
  {   11,   29 }, // 132
  {   11,   37 }, // 133
  {   11,   45 }, // 134
  {   11,   55 }, // 135
  {   11,   61 }, // 136
  {   11,   69 }, // 137
  {   11,   75 }, // 138
  {   11,   83 }, // 139
  {   11,   95 }, // 140
  {   11,  101 }, // 141
  {   11,  107 }, // 142
  {   11,  119 }, // 143
  {   12,   30 }, // 144
  {   12,   38 }, // 145
  {   12,   46 }, // 146
  {   12,   52 }, // 147
  {   12,   62 }, // 148
  {   12,   70 }, // 149
  {   12,   76 }, // 150
  {   12,   84 }, // 151
  {   12,   92 }, // 152
  {   12,  102 }, // 153
  {   12,  108 }, // 154
  {   12,  116 }, // 155
  {   13,   30 }, // 156
  {   13,   38 }, // 157
  {   13,   47 }, // 158
  {   13,   53 }, // 159
  {   13,   62 }, // 160
  {   13,   71 }, // 161
  {   13,   77 }, // 162
  {   13,   85 }, // 163
  {   13,   93 }, // 164
  {   13,  103 }, // 165
  {   13,  109 }, // 166
  {   13,  117 }, // 167
  {   14,   31 }, // 168
  {   14,   39 }, // 169
  {   14,   46 }, // 170
  {   14,   54 }, // 171
  {   14,   63 }, // 172
  {   14,   70 }, // 173
  {   14,   78 }, // 174
  {   14,   86 }, // 175
  {   14,   94 }, // 176
  {   14,  102 }, // 177
  {   14,  110 }, // 178
  {   14,  118 }, // 179
  {   15,   31 }, // 180
  {   15,   39 }, // 181
  {   15,   47 }, // 182
  {   15,   55 }, // 183
  {   15,   63 }, // 184
  {   15,   71 }, // 185
  {   15,   79 }, // 186
  {   15,   87 }, // 187
  {   15,   95 }, // 188
  {   15,  103 }, // 189
  {   15,  111 }, // 190
  {   15,  119 }, // 191
  {   16,   72 }, // 192
  {   16,   74 }, // 193
  {   16,   76 }, // 194
  {   16,   78 }, // 195
  {   16,   88 }, // 196
  {   16,   90 }, // 197
  {   16,   92 }, // 198
  {   16,   94 }, // 199
  {   16,   96 }, // 200
  {   16,   98 }, // 201
  {   16,  100 }, // 202
  {   16,  102 }, // 203
  {   17,   73 }, // 204
  {   17,   75 }, // 205
  {   17,   77 }, // 206
  {   17,   79 }, // 207
  {   17,   89 }, // 208
  {   17,   91 }, // 209
  {   17,   93 }, // 210
  {   17,   95 }, // 211
  {   17,   97 }, // 212
  {   17,   99 }, // 213
  {   17,  101 }, // 214
  {   17,  103 }, // 215
  {   18,   32 }, // 216
  {   18,   34 }, // 217
  {   18,   36 }, // 218
  {   18,   38 }, // 219
  {   18,  104 }, // 220
  {   18,  105 }, // 221
  {   18,  108 }, // 222
  {   18,  109 }, // 223
  {   18,  112 }, // 224
  {   18,  113 }, // 225
  {   18,  116 }, // 226
  {   18,  117 }, // 227
  {   19,   33 }, // 228
  {   19,   35 }, // 229
  {   19,   37 }, // 230
  {   19,   39 }, // 231
  {   19,  106 }, // 232
  {   19,  107 }, // 233
  {   19,  110 }, // 234
  {   19,  111 }, // 235
  {   19,  114 }, // 236
  {   19,  115 }, // 237
  {   19,  118 }, // 238
  {   19,  119 }, // 239
  {   20,   56 }, // 240
  {   20,   57 }, // 241
  {   20,   60 }, // 242
  {   20,   61 }, // 243
  {   20,   64 }, // 244
  {   20,   65 }, // 245
  {   20,   68 }, // 246
  {   20,   69 }, // 247
  {   20,   80 }, // 248
  {   20,   81 }, // 249
  {   20,   82 }, // 250
  {   20,   83 }, // 251
  {   21,   58 }, // 252
  {   21,   59 }, // 253
  {   21,   62 }, // 254
  {   21,   63 }, // 255
  {   21,   66 }, // 256
  {   21,   67 }, // 257
  {   21,   70 }, // 258
  {   21,   71 }, // 259
  {   21,   84 }, // 260
  {   21,   85 }, // 261
  {   21,   86 }, // 262
  {   21,   87 }, // 263
  {   22,   24 }, // 264
  {   22,   25 }, // 265
  {   22,   26 }, // 266
  {   22,   27 }, // 267
  {   22,   40 }, // 268
  {   22,   41 }, // 269
  {   22,   42 }, // 270
  {   22,   43 }, // 271
  {   22,   48 }, // 272
  {   22,   49 }, // 273
  {   22,   50 }, // 274
  {   22,   51 }, // 275
  {   23,   28 }, // 276
  {   23,   29 }, // 277
  {   23,   30 }, // 278
  {   23,   31 }, // 279
  {   23,   44 }, // 280
  {   23,   45 }, // 281
  {   23,   46 }, // 282
  {   23,   47 }, // 283
  {   23,   52 }, // 284
  {   23,   53 }, // 285
  {   23,   54 }, // 286
  {   23,   55 }, // 287
  {   24,   25 }, // 288
  {   24,   32 }, // 289
  {   24,   40 }, // 290
  {   24,   41 }, // 291
  {   24,   48 }, // 292
  {   24,   49 }, // 293
  {   24,   56 }, // 294
  {   24,   64 }, // 295
  {   24,   65 }, // 296
  {   25,   33 }, // 297
  {   25,   40 }, // 298
  {   25,   41 }, // 299
  {   25,   50 }, // 300
  {   25,   51 }, // 301
  {   25,   57 }, // 302
  {   25,   64 }, // 303
  {   25,   65 }, // 304
  {   26,   27 }, // 305
  {   26,   34 }, // 306
  {   26,   42 }, // 307
  {   26,   43 }, // 308
  {   26,   48 }, // 309
  {   26,   49 }, // 310
  {   26,   58 }, // 311
  {   26,   66 }, // 312
  {   26,   67 }, // 313
  {   27,   35 }, // 314
  {   27,   42 }, // 315
  {   27,   43 }, // 316
  {   27,   50 }, // 317
  {   27,   51 }, // 318
  {   27,   59 }, // 319
  {   27,   66 }, // 320
  {   27,   67 }, // 321
  {   28,   29 }, // 322
  {   28,   36 }, // 323
  {   28,   44 }, // 324
  {   28,   45 }, // 325
  {   28,   52 }, // 326
  {   28,   53 }, // 327
  {   28,   60 }, // 328
  {   28,   68 }, // 329
  {   28,   69 }, // 330
  {   29,   37 }, // 331
  {   29,   44 }, // 332
  {   29,   45 }, // 333
  {   29,   54 }, // 334
  {   29,   55 }, // 335
  {   29,   61 }, // 336
  {   29,   68 }, // 337
  {   29,   69 }, // 338
  {   30,   31 }, // 339
  {   30,   38 }, // 340
  {   30,   46 }, // 341
  {   30,   47 }, // 342
  {   30,   52 }, // 343
  {   30,   53 }, // 344
  {   30,   62 }, // 345
  {   30,   70 }, // 346
  {   30,   71 }, // 347
  {   31,   39 }, // 348
  {   31,   46 }, // 349
  {   31,   47 }, // 350
  {   31,   54 }, // 351
  {   31,   55 }, // 352
  {   31,   63 }, // 353
  {   31,   70 }, // 354
  {   31,   71 }, // 355
  {   32,   34 }, // 356
  {   32,   48 }, // 357
  {   32,   49 }, // 358
  {   32,   56 }, // 359
  {   32,  104 }, // 360
  {   32,  105 }, // 361
  {   32,  112 }, // 362
  {   32,  113 }, // 363
  {   33,   35 }, // 364
  {   33,   50 }, // 365
  {   33,   51 }, // 366
  {   33,   57 }, // 367
  {   33,  106 }, // 368
  {   33,  107 }, // 369
  {   33,  114 }, // 370
  {   33,  115 }, // 371
  {   34,   48 }, // 372
  {   34,   49 }, // 373
  {   34,   58 }, // 374
  {   34,  108 }, // 375
  {   34,  109 }, // 376
  {   34,  112 }, // 377
  {   34,  113 }, // 378
  {   35,   50 }, // 379
  {   35,   51 }, // 380
  {   35,   59 }, // 381
  {   35,  110 }, // 382
  {   35,  111 }, // 383
  {   35,  114 }, // 384
  {   35,  115 }, // 385
  {   36,   38 }, // 386
  {   36,   52 }, // 387
  {   36,   53 }, // 388
  {   36,   60 }, // 389
  {   36,  104 }, // 390
  {   36,  105 }, // 391
  {   36,  116 }, // 392
  {   36,  117 }, // 393
  {   37,   39 }, // 394
  {   37,   54 }, // 395
  {   37,   55 }, // 396
  {   37,   61 }, // 397
  {   37,  106 }, // 398
  {   37,  107 }, // 399
  {   37,  118 }, // 400
  {   37,  119 }, // 401
  {   38,   52 }, // 402
  {   38,   53 }, // 403
  {   38,   62 }, // 404
  {   38,  108 }, // 405
  {   38,  109 }, // 406
  {   38,  116 }, // 407
  {   38,  117 }, // 408
  {   39,   54 }, // 409
  {   39,   55 }, // 410
  {   39,   63 }, // 411
  {   39,  110 }, // 412
  {   39,  111 }, // 413
  {   39,  118 }, // 414
  {   39,  119 }, // 415
  {   40,   42 }, // 416
  {   40,   48 }, // 417
  {   40,   50 }, // 418
  {   40,   64 }, // 419
  {   40,   88 }, // 420
  {   40,   90 }, // 421
  {   40,   96 }, // 422
  {   41,   43 }, // 423
  {   41,   49 }, // 424
  {   41,   51 }, // 425
  {   41,   65 }, // 426
  {   41,   89 }, // 427
  {   41,   91 }, // 428
  {   41,   97 }, // 429
  {   42,   48 }, // 430
  {   42,   50 }, // 431
  {   42,   66 }, // 432
  {   42,   88 }, // 433
  {   42,   90 }, // 434
  {   42,   98 }, // 435
  {   43,   49 }, // 436
  {   43,   51 }, // 437
  {   43,   67 }, // 438
  {   43,   89 }, // 439
  {   43,   91 }, // 440
  {   43,   99 }, // 441
  {   44,   46 }, // 442
  {   44,   52 }, // 443
  {   44,   54 }, // 444
  {   44,   68 }, // 445
  {   44,   92 }, // 446
  {   44,   94 }, // 447
  {   44,  100 }, // 448
  {   45,   47 }, // 449
  {   45,   53 }, // 450
  {   45,   55 }, // 451
  {   45,   69 }, // 452
  {   45,   93 }, // 453
  {   45,   95 }, // 454
  {   45,  101 }, // 455
  {   46,   52 }, // 456
  {   46,   54 }, // 457
  {   46,   70 }, // 458
  {   46,   92 }, // 459
  {   46,   94 }, // 460
  {   46,  102 }, // 461
  {   47,   53 }, // 462
  {   47,   55 }, // 463
  {   47,   71 }, // 464
  {   47,   93 }, // 465
  {   47,   95 }, // 466
  {   47,  103 }, // 467
  {   48,   49 }, // 468
  {   48,   88 }, // 469
  {   48,  112 }, // 470
  {   49,   89 }, // 471
  {   49,  113 }, // 472
  {   50,   51 }, // 473
  {   50,   90 }, // 474
  {   50,  114 }, // 475
  {   51,   91 }, // 476
  {   51,  115 }, // 477
  {   52,   53 }, // 478
  {   52,   92 }, // 479
  {   52,  116 }, // 480
  {   53,   93 }, // 481
  {   53,  117 }, // 482
  {   54,   55 }, // 483
  {   54,   94 }, // 484
  {   54,  118 }, // 485
  {   55,   95 }, // 486
  {   55,  119 }, // 487
  {   56,   60 }, // 488
  {   56,   64 }, // 489
  {   56,   65 }, // 490
  {   56,   80 }, // 491
  {   56,   81 }, // 492
  {   56,  104 }, // 493
  {   56,  105 }, // 494
  {   57,   61 }, // 495
  {   57,   64 }, // 496
  {   57,   65 }, // 497
  {   57,   82 }, // 498
  {   57,   83 }, // 499
  {   57,  106 }, // 500
  {   57,  107 }, // 501
  {   58,   62 }, // 502
  {   58,   66 }, // 503
  {   58,   67 }, // 504
  {   58,   84 }, // 505
  {   58,   85 }, // 506
  {   58,  108 }, // 507
  {   58,  109 }, // 508
  {   59,   63 }, // 509
  {   59,   66 }, // 510
  {   59,   67 }, // 511
  {   59,   86 }, // 512
  {   59,   87 }, // 513
  {   59,  110 }, // 514
  {   59,  111 }, // 515
  {   60,   68 }, // 516
  {   60,   69 }, // 517
  {   60,   80 }, // 518
  {   60,   81 }, // 519
  {   60,  104 }, // 520
  {   60,  105 }, // 521
  {   61,   68 }, // 522
  {   61,   69 }, // 523
  {   61,   82 }, // 524
  {   61,   83 }, // 525
  {   61,  106 }, // 526
  {   61,  107 }, // 527
  {   62,   70 }, // 528
  {   62,   71 }, // 529
  {   62,   84 }, // 530
  {   62,   85 }, // 531
  {   62,  108 }, // 532
  {   62,  109 }, // 533
  {   63,   70 }, // 534
  {   63,   71 }, // 535
  {   63,   86 }, // 536
  {   63,   87 }, // 537
  {   63,  110 }, // 538
  {   63,  111 }, // 539
  {   64,   65 }, // 540
  {   64,   80 }, // 541
  {   64,   82 }, // 542
  {   64,   96 }, // 543
  {   65,   81 }, // 544
  {   65,   83 }, // 545
  {   65,   97 }, // 546
  {   66,   67 }, // 547
  {   66,   84 }, // 548
  {   66,   86 }, // 549
  {   66,   98 }, // 550
  {   67,   85 }, // 551
  {   67,   87 }, // 552
  {   67,   99 }, // 553
  {   68,   69 }, // 554
  {   68,   80 }, // 555
  {   68,   82 }, // 556
  {   68,  100 }, // 557
  {   69,   81 }, // 558
  {   69,   83 }, // 559
  {   69,  101 }, // 560
  {   70,   71 }, // 561
  {   70,   84 }, // 562
  {   70,   86 }, // 563
  {   70,  102 }, // 564
  {   71,   85 }, // 565
  {   71,   87 }, // 566
  {   71,  103 }, // 567
  {   72,   76 }, // 568
  {   72,   80 }, // 569
  {   72,   88 }, // 570
  {   72,   92 }, // 571
  {   72,   96 }, // 572
  {   72,  100 }, // 573
  {   72,  104 }, // 574
  {   72,  112 }, // 575
  {   72,  116 }, // 576
  {   73,   77 }, // 577
  {   73,   81 }, // 578
  {   73,   89 }, // 579
  {   73,   93 }, // 580
  {   73,   97 }, // 581
  {   73,  101 }, // 582
  {   73,  105 }, // 583
  {   73,  113 }, // 584
  {   73,  117 }, // 585
  {   74,   78 }, // 586
  {   74,   82 }, // 587
  {   74,   90 }, // 588
  {   74,   94 }, // 589
  {   74,   96 }, // 590
  {   74,  100 }, // 591
  {   74,  106 }, // 592
  {   74,  114 }, // 593
  {   74,  118 }, // 594
  {   75,   79 }, // 595
  {   75,   83 }, // 596
  {   75,   91 }, // 597
  {   75,   95 }, // 598
  {   75,   97 }, // 599
  {   75,  101 }, // 600
  {   75,  107 }, // 601
  {   75,  115 }, // 602
  {   75,  119 }, // 603
  {   76,   84 }, // 604
  {   76,   88 }, // 605
  {   76,   92 }, // 606
  {   76,   98 }, // 607
  {   76,  102 }, // 608
  {   76,  108 }, // 609
  {   76,  112 }, // 610
  {   76,  116 }, // 611
  {   77,   85 }, // 612
  {   77,   89 }, // 613
  {   77,   93 }, // 614
  {   77,   99 }, // 615
  {   77,  103 }, // 616
  {   77,  109 }, // 617
  {   77,  113 }, // 618
  {   77,  117 }, // 619
  {   78,   86 }, // 620
  {   78,   90 }, // 621
  {   78,   94 }, // 622
  {   78,   98 }, // 623
  {   78,  102 }, // 624
  {   78,  110 }, // 625
  {   78,  114 }, // 626
  {   78,  118 }, // 627
  {   79,   87 }, // 628
  {   79,   91 }, // 629
  {   79,   95 }, // 630
  {   79,   99 }, // 631
  {   79,  103 }, // 632
  {   79,  111 }, // 633
  {   79,  115 }, // 634
  {   79,  119 }, // 635
  {   80,   82 }, // 636
  {   80,   96 }, // 637
  {   80,  100 }, // 638
  {   80,  104 }, // 639
  {   81,   83 }, // 640
  {   81,   97 }, // 641
  {   81,  101 }, // 642
  {   81,  105 }, // 643
  {   82,   96 }, // 644
  {   82,  100 }, // 645
  {   82,  106 }, // 646
  {   83,   97 }, // 647
  {   83,  101 }, // 648
  {   83,  107 }, // 649
  {   84,   86 }, // 650
  {   84,   98 }, // 651
  {   84,  102 }, // 652
  {   84,  108 }, // 653
  {   85,   87 }, // 654
  {   85,   99 }, // 655
  {   85,  103 }, // 656
  {   85,  109 }, // 657
  {   86,   98 }, // 658
  {   86,  102 }, // 659
  {   86,  110 }, // 660
  {   87,   99 }, // 661
  {   87,  103 }, // 662
  {   87,  111 }, // 663
  {   88,   90 }, // 664
  {   88,   96 }, // 665
  {   88,   98 }, // 666
  {   88,  112 }, // 667
  {   89,   91 }, // 668
  {   89,   97 }, // 669
  {   89,   99 }, // 670
  {   89,  113 }, // 671
  {   90,   96 }, // 672
  {   90,   98 }, // 673
  {   90,  114 }, // 674
  {   91,   97 }, // 675
  {   91,   99 }, // 676
  {   91,  115 }, // 677
  {   92,   94 }, // 678
  {   92,  100 }, // 679
  {   92,  102 }, // 680
  {   92,  116 }, // 681
  {   93,   95 }, // 682
  {   93,  101 }, // 683
  {   93,  103 }, // 684
  {   93,  117 }, // 685
  {   94,  100 }, // 686
  {   94,  102 }, // 687
  {   94,  118 }, // 688
  {   95,  101 }, // 689
  {   95,  103 }, // 690
  {   95,  119 }, // 691
  {   96,  100 }, // 692
  {   97,  101 }, // 693
  {   98,  102 }, // 694
  {   99,  103 }, // 695
  {  104,  105 }, // 696
  {  104,  112 }, // 697
  {  104,  116 }, // 698
  {  105,  113 }, // 699
  {  105,  117 }, // 700
  {  106,  107 }, // 701
  {  106,  114 }, // 702
  {  106,  118 }, // 703
  {  107,  115 }, // 704
  {  107,  119 }, // 705
  {  108,  109 }, // 706
  {  108,  112 }, // 707
  {  108,  116 }, // 708
  {  109,  113 }, // 709
  {  109,  117 }, // 710
  {  110,  111 }, // 711
  {  110,  114 }, // 712
  {  110,  118 }, // 713
  {  111,  115 }, // 714
  {  111,  119 }, // 715
  {  112,  116 }, // 716
  {  113,  117 }, // 717
  {  114,  118 }, // 718
  {  115,  119 }, // 719
};
int vertToEdgeK600[120][12] = { // Edges connected to each vertex, in vertex order
  {    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11 }, //   0
  {   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23 }, //   1
  {   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35 }, //   2
  {   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47 }, //   3
  {   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59 }, //   4
  {   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71 }, //   5
  {   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83 }, //   6
  {   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95 }, //   7
  {   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,  107 }, //   8
  {  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119 }, //   9
  {  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131 }, //  10
  {  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143 }, //  11
  {  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155 }, //  12
  {  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167 }, //  13
  {  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179 }, //  14
  {  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191 }, //  15
  {  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203 }, //  16
  {  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215 }, //  17
  {  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227 }, //  18
  {  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239 }, //  19
  {  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251 }, //  20
  {  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263 }, //  21
  {  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275 }, //  22
  {  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287 }, //  23
  {    0,   12,  264,  288,  289,  290,  291,  292,  293,  294,  295,  296 }, //  24
  {   24,   36,  265,  288,  297,  298,  299,  300,  301,  302,  303,  304 }, //  25
  {   48,   60,  266,  305,  306,  307,  308,  309,  310,  311,  312,  313 }, //  26
  {   72,   84,  267,  305,  314,  315,  316,  317,  318,  319,  320,  321 }, //  27
  {   96,  108,  276,  322,  323,  324,  325,  326,  327,  328,  329,  330 }, //  28
  {  120,  132,  277,  322,  331,  332,  333,  334,  335,  336,  337,  338 }, //  29
  {  144,  156,  278,  339,  340,  341,  342,  343,  344,  345,  346,  347 }, //  30
  {  168,  180,  279,  339,  348,  349,  350,  351,  352,  353,  354,  355 }, //  31
  {    1,   13,  216,  289,  356,  357,  358,  359,  360,  361,  362,  363 }, //  32
  {   25,   37,  228,  297,  364,  365,  366,  367,  368,  369,  370,  371 }, //  33
  {   49,   61,  217,  306,  356,  372,  373,  374,  375,  376,  377,  378 }, //  34
  {   73,   85,  229,  314,  364,  379,  380,  381,  382,  383,  384,  385 }, //  35
  {   97,  109,  218,  323,  386,  387,  388,  389,  390,  391,  392,  393 }, //  36
  {  121,  133,  230,  331,  394,  395,  396,  397,  398,  399,  400,  401 }, //  37
  {  145,  157,  219,  340,  386,  402,  403,  404,  405,  406,  407,  408 }, //  38
  {  169,  181,  231,  348,  394,  409,  410,  411,  412,  413,  414,  415 }, //  39
  {    2,   26,  268,  290,  298,  416,  417,  418,  419,  420,  421,  422 }, //  40
  {   14,   38,  269,  291,  299,  423,  424,  425,  426,  427,  428,  429 }, //  41
  {   50,   74,  270,  307,  315,  416,  430,  431,  432,  433,  434,  435 }, //  42
  {   62,   86,  271,  308,  316,  423,  436,  437,  438,  439,  440,  441 }, //  43
  {   98,  122,  280,  324,  332,  442,  443,  444,  445,  446,  447,  448 }, //  44
  {  110,  134,  281,  325,  333,  449,  450,  451,  452,  453,  454,  455 }, //  45
  {  146,  170,  282,  341,  349,  442,  456,  457,  458,  459,  460,  461 }, //  46
  {  158,  182,  283,  342,  350,  449,  462,  463,  464,  465,  466,  467 }, //  47
  {    3,   51,  272,  292,  309,  357,  372,  417,  430,  468,  469,  470 }, //  48
  {   15,   63,  273,  293,  310,  358,  373,  424,  436,  468,  471,  472 }, //  49
  {   27,   75,  274,  300,  317,  365,  379,  418,  431,  473,  474,  475 }, //  50
  {   39,   87,  275,  301,  318,  366,  380,  425,  437,  473,  476,  477 }, //  51
  {   99,  147,  284,  326,  343,  387,  402,  443,  456,  478,  479,  480 }, //  52
  {  111,  159,  285,  327,  344,  388,  403,  450,  462,  478,  481,  482 }, //  53
  {  123,  171,  286,  334,  351,  395,  409,  444,  457,  483,  484,  485 }, //  54
  {  135,  183,  287,  335,  352,  396,  410,  451,  463,  483,  486,  487 }, //  55
  {    4,   16,  240,  294,  359,  488,  489,  490,  491,  492,  493,  494 }, //  56
  {   28,   40,  241,  302,  367,  495,  496,  497,  498,  499,  500,  501 }, //  57
  {   52,   64,  252,  311,  374,  502,  503,  504,  505,  506,  507,  508 }, //  58
  {   76,   88,  253,  319,  381,  509,  510,  511,  512,  513,  514,  515 }, //  59
  {  100,  112,  242,  328,  389,  488,  516,  517,  518,  519,  520,  521 }, //  60
  {  124,  136,  243,  336,  397,  495,  522,  523,  524,  525,  526,  527 }, //  61
  {  148,  160,  254,  345,  404,  502,  528,  529,  530,  531,  532,  533 }, //  62
  {  172,  184,  255,  353,  411,  509,  534,  535,  536,  537,  538,  539 }, //  63
  {    5,   29,  244,  295,  303,  419,  489,  496,  540,  541,  542,  543 }, //  64
  {   17,   41,  245,  296,  304,  426,  490,  497,  540,  544,  545,  546 }, //  65
  {   53,   77,  256,  312,  320,  432,  503,  510,  547,  548,  549,  550 }, //  66
  {   65,   89,  257,  313,  321,  438,  504,  511,  547,  551,  552,  553 }, //  67
  {  101,  125,  246,  329,  337,  445,  516,  522,  554,  555,  556,  557 }, //  68
  {  113,  137,  247,  330,  338,  452,  517,  523,  554,  558,  559,  560 }, //  69
  {  149,  173,  258,  346,  354,  458,  528,  534,  561,  562,  563,  564 }, //  70
  {  161,  185,  259,  347,  355,  464,  529,  535,  561,  565,  566,  567 }, //  71
  {    6,  102,  192,  568,  569,  570,  571,  572,  573,  574,  575,  576 }, //  72
  {   18,  114,  204,  577,  578,  579,  580,  581,  582,  583,  584,  585 }, //  73
  {   30,  126,  193,  586,  587,  588,  589,  590,  591,  592,  593,  594 }, //  74
  {   42,  138,  205,  595,  596,  597,  598,  599,  600,  601,  602,  603 }, //  75
  {   54,  150,  194,  568,  604,  605,  606,  607,  608,  609,  610,  611 }, //  76
  {   66,  162,  206,  577,  612,  613,  614,  615,  616,  617,  618,  619 }, //  77
  {   78,  174,  195,  586,  620,  621,  622,  623,  624,  625,  626,  627 }, //  78
  {   90,  186,  207,  595,  628,  629,  630,  631,  632,  633,  634,  635 }, //  79
  {    7,  103,  248,  491,  518,  541,  555,  569,  636,  637,  638,  639 }, //  80
  {   19,  115,  249,  492,  519,  544,  558,  578,  640,  641,  642,  643 }, //  81
  {   31,  127,  250,  498,  524,  542,  556,  587,  636,  644,  645,  646 }, //  82
  {   43,  139,  251,  499,  525,  545,  559,  596,  640,  647,  648,  649 }, //  83
  {   55,  151,  260,  505,  530,  548,  562,  604,  650,  651,  652,  653 }, //  84
  {   67,  163,  261,  506,  531,  551,  565,  612,  654,  655,  656,  657 }, //  85
  {   79,  175,  262,  512,  536,  549,  563,  620,  650,  658,  659,  660 }, //  86
  {   91,  187,  263,  513,  537,  552,  566,  628,  654,  661,  662,  663 }, //  87
  {    8,   56,  196,  420,  433,  469,  570,  605,  664,  665,  666,  667 }, //  88
  {   20,   68,  208,  427,  439,  471,  579,  613,  668,  669,  670,  671 }, //  89
  {   32,   80,  197,  421,  434,  474,  588,  621,  664,  672,  673,  674 }, //  90
  {   44,   92,  209,  428,  440,  476,  597,  629,  668,  675,  676,  677 }, //  91
  {  104,  152,  198,  446,  459,  479,  571,  606,  678,  679,  680,  681 }, //  92
  {  116,  164,  210,  453,  465,  481,  580,  614,  682,  683,  684,  685 }, //  93
  {  128,  176,  199,  447,  460,  484,  589,  622,  678,  686,  687,  688 }, //  94
  {  140,  188,  211,  454,  466,  486,  598,  630,  682,  689,  690,  691 }, //  95
  {    9,   33,  200,  422,  543,  572,  590,  637,  644,  665,  672,  692 }, //  96
  {   21,   45,  212,  429,  546,  581,  599,  641,  647,  669,  675,  693 }, //  97
  {   57,   81,  201,  435,  550,  607,  623,  651,  658,  666,  673,  694 }, //  98
  {   69,   93,  213,  441,  553,  615,  631,  655,  661,  670,  676,  695 }, //  99
  {  105,  129,  202,  448,  557,  573,  591,  638,  645,  679,  686,  692 }, // 100
  {  117,  141,  214,  455,  560,  582,  600,  642,  648,  683,  689,  693 }, // 101
  {  153,  177,  203,  461,  564,  608,  624,  652,  659,  680,  687,  694 }, // 102
  {  165,  189,  215,  467,  567,  616,  632,  656,  662,  684,  690,  695 }, // 103
  {   10,  106,  220,  360,  390,  493,  520,  574,  639,  696,  697,  698 }, // 104
  {   22,  118,  221,  361,  391,  494,  521,  583,  643,  696,  699,  700 }, // 105
  {   34,  130,  232,  368,  398,  500,  526,  592,  646,  701,  702,  703 }, // 106
  {   46,  142,  233,  369,  399,  501,  527,  601,  649,  701,  704,  705 }, // 107
  {   58,  154,  222,  375,  405,  507,  532,  609,  653,  706,  707,  708 }, // 108
  {   70,  166,  223,  376,  406,  508,  533,  617,  657,  706,  709,  710 }, // 109
  {   82,  178,  234,  382,  412,  514,  538,  625,  660,  711,  712,  713 }, // 110
  {   94,  190,  235,  383,  413,  515,  539,  633,  663,  711,  714,  715 }, // 111
  {   11,   59,  224,  362,  377,  470,  575,  610,  667,  697,  707,  716 }, // 112
  {   23,   71,  225,  363,  378,  472,  584,  618,  671,  699,  709,  717 }, // 113
  {   35,   83,  236,  370,  384,  475,  593,  626,  674,  702,  712,  718 }, // 114
  {   47,   95,  237,  371,  385,  477,  602,  634,  677,  704,  714,  719 }, // 115
  {  107,  155,  226,  392,  407,  480,  576,  611,  681,  698,  708,  716 }, // 116
  {  119,  167,  227,  393,  408,  482,  585,  619,  685,  700,  710,  717 }, // 117
  {  131,  179,  238,  400,  414,  485,  594,  627,  688,  703,  713,  718 }, // 118
  {  143,  191,  239,  401,  415,  487,  603,  635,  691,  705,  715,  719 }, // 119
};
int edgeToEdgeK600[720][22] = { // Edges connected to each edge (in edge order, of course)
  {    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,  264,  288,  289,  290,  291,  292,  293,  294,  295,  296 }, //   0
  {    0,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   13,  216,  289,  356,  357,  358,  359,  360,  361,  362,  363 }, //   1
  {    0,    1,    3,    4,    5,    6,    7,    8,    9,   10,   11,   26,  268,  290,  298,  416,  417,  418,  419,  420,  421,  422 }, //   2
  {    0,    1,    2,    4,    5,    6,    7,    8,    9,   10,   11,   51,  272,  292,  309,  357,  372,  417,  430,  468,  469,  470 }, //   3
  {    0,    1,    2,    3,    5,    6,    7,    8,    9,   10,   11,   16,  240,  294,  359,  488,  489,  490,  491,  492,  493,  494 }, //   4
  {    0,    1,    2,    3,    4,    6,    7,    8,    9,   10,   11,   29,  244,  295,  303,  419,  489,  496,  540,  541,  542,  543 }, //   5
  {    0,    1,    2,    3,    4,    5,    7,    8,    9,   10,   11,  102,  192,  568,  569,  570,  571,  572,  573,  574,  575,  576 }, //   6
  {    0,    1,    2,    3,    4,    5,    6,    8,    9,   10,   11,  103,  248,  491,  518,  541,  555,  569,  636,  637,  638,  639 }, //   7
  {    0,    1,    2,    3,    4,    5,    6,    7,    9,   10,   11,   56,  196,  420,  433,  469,  570,  605,  664,  665,  666,  667 }, //   8
  {    0,    1,    2,    3,    4,    5,    6,    7,    8,   10,   11,   33,  200,  422,  543,  572,  590,  637,  644,  665,  672,  692 }, //   9
  {    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   11,  106,  220,  360,  390,  493,  520,  574,  639,  696,  697,  698 }, //  10
  {    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   59,  224,  362,  377,  470,  575,  610,  667,  697,  707,  716 }, //  11
  {   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,    0,  264,  288,  289,  290,  291,  292,  293,  294,  295,  296 }, //  12
  {   12,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,    1,  216,  289,  356,  357,  358,  359,  360,  361,  362,  363 }, //  13
  {   12,   13,   15,   16,   17,   18,   19,   20,   21,   22,   23,   38,  269,  291,  299,  423,  424,  425,  426,  427,  428,  429 }, //  14
  {   12,   13,   14,   16,   17,   18,   19,   20,   21,   22,   23,   63,  273,  293,  310,  358,  373,  424,  436,  468,  471,  472 }, //  15
  {   12,   13,   14,   15,   17,   18,   19,   20,   21,   22,   23,    4,  240,  294,  359,  488,  489,  490,  491,  492,  493,  494 }, //  16
  {   12,   13,   14,   15,   16,   18,   19,   20,   21,   22,   23,   41,  245,  296,  304,  426,  490,  497,  540,  544,  545,  546 }, //  17
  {   12,   13,   14,   15,   16,   17,   19,   20,   21,   22,   23,  114,  204,  577,  578,  579,  580,  581,  582,  583,  584,  585 }, //  18
  {   12,   13,   14,   15,   16,   17,   18,   20,   21,   22,   23,  115,  249,  492,  519,  544,  558,  578,  640,  641,  642,  643 }, //  19
  {   12,   13,   14,   15,   16,   17,   18,   19,   21,   22,   23,   68,  208,  427,  439,  471,  579,  613,  668,  669,  670,  671 }, //  20
  {   12,   13,   14,   15,   16,   17,   18,   19,   20,   22,   23,   45,  212,  429,  546,  581,  599,  641,  647,  669,  675,  693 }, //  21
  {   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   23,  118,  221,  361,  391,  494,  521,  583,  643,  696,  699,  700 }, //  22
  {   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   71,  225,  363,  378,  472,  584,  618,  671,  699,  709,  717 }, //  23
  {   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,  265,  288,  297,  298,  299,  300,  301,  302,  303,  304 }, //  24
  {   24,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   37,  228,  297,  364,  365,  366,  367,  368,  369,  370,  371 }, //  25
  {   24,   25,   27,   28,   29,   30,   31,   32,   33,   34,   35,    2,  268,  290,  298,  416,  417,  418,  419,  420,  421,  422 }, //  26
  {   24,   25,   26,   28,   29,   30,   31,   32,   33,   34,   35,   75,  274,  300,  317,  365,  379,  418,  431,  473,  474,  475 }, //  27
  {   24,   25,   26,   27,   29,   30,   31,   32,   33,   34,   35,   40,  241,  302,  367,  495,  496,  497,  498,  499,  500,  501 }, //  28
  {   24,   25,   26,   27,   28,   30,   31,   32,   33,   34,   35,    5,  244,  295,  303,  419,  489,  496,  540,  541,  542,  543 }, //  29
  {   24,   25,   26,   27,   28,   29,   31,   32,   33,   34,   35,  126,  193,  586,  587,  588,  589,  590,  591,  592,  593,  594 }, //  30
  {   24,   25,   26,   27,   28,   29,   30,   32,   33,   34,   35,  127,  250,  498,  524,  542,  556,  587,  636,  644,  645,  646 }, //  31
  {   24,   25,   26,   27,   28,   29,   30,   31,   33,   34,   35,   80,  197,  421,  434,  474,  588,  621,  664,  672,  673,  674 }, //  32
  {   24,   25,   26,   27,   28,   29,   30,   31,   32,   34,   35,    9,  200,  422,  543,  572,  590,  637,  644,  665,  672,  692 }, //  33
  {   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   35,  130,  232,  368,  398,  500,  526,  592,  646,  701,  702,  703 }, //  34
  {   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   83,  236,  370,  384,  475,  593,  626,  674,  702,  712,  718 }, //  35
  {   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   24,  265,  288,  297,  298,  299,  300,  301,  302,  303,  304 }, //  36
  {   36,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   25,  228,  297,  364,  365,  366,  367,  368,  369,  370,  371 }, //  37
  {   36,   37,   39,   40,   41,   42,   43,   44,   45,   46,   47,   14,  269,  291,  299,  423,  424,  425,  426,  427,  428,  429 }, //  38
  {   36,   37,   38,   40,   41,   42,   43,   44,   45,   46,   47,   87,  275,  301,  318,  366,  380,  425,  437,  473,  476,  477 }, //  39
  {   36,   37,   38,   39,   41,   42,   43,   44,   45,   46,   47,   28,  241,  302,  367,  495,  496,  497,  498,  499,  500,  501 }, //  40
  {   36,   37,   38,   39,   40,   42,   43,   44,   45,   46,   47,   17,  245,  296,  304,  426,  490,  497,  540,  544,  545,  546 }, //  41
  {   36,   37,   38,   39,   40,   41,   43,   44,   45,   46,   47,  138,  205,  595,  596,  597,  598,  599,  600,  601,  602,  603 }, //  42
  {   36,   37,   38,   39,   40,   41,   42,   44,   45,   46,   47,  139,  251,  499,  525,  545,  559,  596,  640,  647,  648,  649 }, //  43
  {   36,   37,   38,   39,   40,   41,   42,   43,   45,   46,   47,   92,  209,  428,  440,  476,  597,  629,  668,  675,  676,  677 }, //  44
  {   36,   37,   38,   39,   40,   41,   42,   43,   44,   46,   47,   21,  212,  429,  546,  581,  599,  641,  647,  669,  675,  693 }, //  45
  {   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   47,  142,  233,  369,  399,  501,  527,  601,  649,  701,  704,  705 }, //  46
  {   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   95,  237,  371,  385,  477,  602,  634,  677,  704,  714,  719 }, //  47
  {   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,  266,  305,  306,  307,  308,  309,  310,  311,  312,  313 }, //  48
  {   48,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   61,  217,  306,  356,  372,  373,  374,  375,  376,  377,  378 }, //  49
  {   48,   49,   51,   52,   53,   54,   55,   56,   57,   58,   59,   74,  270,  307,  315,  416,  430,  431,  432,  433,  434,  435 }, //  50
  {   48,   49,   50,   52,   53,   54,   55,   56,   57,   58,   59,    3,  272,  292,  309,  357,  372,  417,  430,  468,  469,  470 }, //  51
  {   48,   49,   50,   51,   53,   54,   55,   56,   57,   58,   59,   64,  252,  311,  374,  502,  503,  504,  505,  506,  507,  508 }, //  52
  {   48,   49,   50,   51,   52,   54,   55,   56,   57,   58,   59,   77,  256,  312,  320,  432,  503,  510,  547,  548,  549,  550 }, //  53
  {   48,   49,   50,   51,   52,   53,   55,   56,   57,   58,   59,  150,  194,  568,  604,  605,  606,  607,  608,  609,  610,  611 }, //  54
  {   48,   49,   50,   51,   52,   53,   54,   56,   57,   58,   59,  151,  260,  505,  530,  548,  562,  604,  650,  651,  652,  653 }, //  55
  {   48,   49,   50,   51,   52,   53,   54,   55,   57,   58,   59,    8,  196,  420,  433,  469,  570,  605,  664,  665,  666,  667 }, //  56
  {   48,   49,   50,   51,   52,   53,   54,   55,   56,   58,   59,   81,  201,  435,  550,  607,  623,  651,  658,  666,  673,  694 }, //  57
  {   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   59,  154,  222,  375,  405,  507,  532,  609,  653,  706,  707,  708 }, //  58
  {   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   11,  224,  362,  377,  470,  575,  610,  667,  697,  707,  716 }, //  59
  {   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   48,  266,  305,  306,  307,  308,  309,  310,  311,  312,  313 }, //  60
  {   60,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   49,  217,  306,  356,  372,  373,  374,  375,  376,  377,  378 }, //  61
  {   60,   61,   63,   64,   65,   66,   67,   68,   69,   70,   71,   86,  271,  308,  316,  423,  436,  437,  438,  439,  440,  441 }, //  62
  {   60,   61,   62,   64,   65,   66,   67,   68,   69,   70,   71,   15,  273,  293,  310,  358,  373,  424,  436,  468,  471,  472 }, //  63
  {   60,   61,   62,   63,   65,   66,   67,   68,   69,   70,   71,   52,  252,  311,  374,  502,  503,  504,  505,  506,  507,  508 }, //  64
  {   60,   61,   62,   63,   64,   66,   67,   68,   69,   70,   71,   89,  257,  313,  321,  438,  504,  511,  547,  551,  552,  553 }, //  65
  {   60,   61,   62,   63,   64,   65,   67,   68,   69,   70,   71,  162,  206,  577,  612,  613,  614,  615,  616,  617,  618,  619 }, //  66
  {   60,   61,   62,   63,   64,   65,   66,   68,   69,   70,   71,  163,  261,  506,  531,  551,  565,  612,  654,  655,  656,  657 }, //  67
  {   60,   61,   62,   63,   64,   65,   66,   67,   69,   70,   71,   20,  208,  427,  439,  471,  579,  613,  668,  669,  670,  671 }, //  68
  {   60,   61,   62,   63,   64,   65,   66,   67,   68,   70,   71,   93,  213,  441,  553,  615,  631,  655,  661,  670,  676,  695 }, //  69
  {   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   71,  166,  223,  376,  406,  508,  533,  617,  657,  706,  709,  710 }, //  70
  {   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   23,  225,  363,  378,  472,  584,  618,  671,  699,  709,  717 }, //  71
  {   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,  267,  305,  314,  315,  316,  317,  318,  319,  320,  321 }, //  72
  {   72,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   85,  229,  314,  364,  379,  380,  381,  382,  383,  384,  385 }, //  73
  {   72,   73,   75,   76,   77,   78,   79,   80,   81,   82,   83,   50,  270,  307,  315,  416,  430,  431,  432,  433,  434,  435 }, //  74
  {   72,   73,   74,   76,   77,   78,   79,   80,   81,   82,   83,   27,  274,  300,  317,  365,  379,  418,  431,  473,  474,  475 }, //  75
  {   72,   73,   74,   75,   77,   78,   79,   80,   81,   82,   83,   88,  253,  319,  381,  509,  510,  511,  512,  513,  514,  515 }, //  76
  {   72,   73,   74,   75,   76,   78,   79,   80,   81,   82,   83,   53,  256,  312,  320,  432,  503,  510,  547,  548,  549,  550 }, //  77
  {   72,   73,   74,   75,   76,   77,   79,   80,   81,   82,   83,  174,  195,  586,  620,  621,  622,  623,  624,  625,  626,  627 }, //  78
  {   72,   73,   74,   75,   76,   77,   78,   80,   81,   82,   83,  175,  262,  512,  536,  549,  563,  620,  650,  658,  659,  660 }, //  79
  {   72,   73,   74,   75,   76,   77,   78,   79,   81,   82,   83,   32,  197,  421,  434,  474,  588,  621,  664,  672,  673,  674 }, //  80
  {   72,   73,   74,   75,   76,   77,   78,   79,   80,   82,   83,   57,  201,  435,  550,  607,  623,  651,  658,  666,  673,  694 }, //  81
  {   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   83,  178,  234,  382,  412,  514,  538,  625,  660,  711,  712,  713 }, //  82
  {   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   35,  236,  370,  384,  475,  593,  626,  674,  702,  712,  718 }, //  83
  {   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   72,  267,  305,  314,  315,  316,  317,  318,  319,  320,  321 }, //  84
  {   84,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   73,  229,  314,  364,  379,  380,  381,  382,  383,  384,  385 }, //  85
  {   84,   85,   87,   88,   89,   90,   91,   92,   93,   94,   95,   62,  271,  308,  316,  423,  436,  437,  438,  439,  440,  441 }, //  86
  {   84,   85,   86,   88,   89,   90,   91,   92,   93,   94,   95,   39,  275,  301,  318,  366,  380,  425,  437,  473,  476,  477 }, //  87
  {   84,   85,   86,   87,   89,   90,   91,   92,   93,   94,   95,   76,  253,  319,  381,  509,  510,  511,  512,  513,  514,  515 }, //  88
  {   84,   85,   86,   87,   88,   90,   91,   92,   93,   94,   95,   65,  257,  313,  321,  438,  504,  511,  547,  551,  552,  553 }, //  89
  {   84,   85,   86,   87,   88,   89,   91,   92,   93,   94,   95,  186,  207,  595,  628,  629,  630,  631,  632,  633,  634,  635 }, //  90
  {   84,   85,   86,   87,   88,   89,   90,   92,   93,   94,   95,  187,  263,  513,  537,  552,  566,  628,  654,  661,  662,  663 }, //  91
  {   84,   85,   86,   87,   88,   89,   90,   91,   93,   94,   95,   44,  209,  428,  440,  476,  597,  629,  668,  675,  676,  677 }, //  92
  {   84,   85,   86,   87,   88,   89,   90,   91,   92,   94,   95,   69,  213,  441,  553,  615,  631,  655,  661,  670,  676,  695 }, //  93
  {   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   95,  190,  235,  383,  413,  515,  539,  633,  663,  711,  714,  715 }, //  94
  {   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   47,  237,  371,  385,  477,  602,  634,  677,  704,  714,  719 }, //  95
  {   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  276,  322,  323,  324,  325,  326,  327,  328,  329,  330 }, //  96
  {   96,   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  109,  218,  323,  386,  387,  388,  389,  390,  391,  392,  393 }, //  97
  {   96,   97,   99,  100,  101,  102,  103,  104,  105,  106,  107,  122,  280,  324,  332,  442,  443,  444,  445,  446,  447,  448 }, //  98
  {   96,   97,   98,  100,  101,  102,  103,  104,  105,  106,  107,  147,  284,  326,  343,  387,  402,  443,  456,  478,  479,  480 }, //  99
  {   96,   97,   98,   99,  101,  102,  103,  104,  105,  106,  107,  112,  242,  328,  389,  488,  516,  517,  518,  519,  520,  521 }, // 100
  {   96,   97,   98,   99,  100,  102,  103,  104,  105,  106,  107,  125,  246,  329,  337,  445,  516,  522,  554,  555,  556,  557 }, // 101
  {   96,   97,   98,   99,  100,  101,  103,  104,  105,  106,  107,    6,  192,  568,  569,  570,  571,  572,  573,  574,  575,  576 }, // 102
  {   96,   97,   98,   99,  100,  101,  102,  104,  105,  106,  107,    7,  248,  491,  518,  541,  555,  569,  636,  637,  638,  639 }, // 103
  {   96,   97,   98,   99,  100,  101,  102,  103,  105,  106,  107,  152,  198,  446,  459,  479,  571,  606,  678,  679,  680,  681 }, // 104
  {   96,   97,   98,   99,  100,  101,  102,  103,  104,  106,  107,  129,  202,  448,  557,  573,  591,  638,  645,  679,  686,  692 }, // 105
  {   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,  107,   10,  220,  360,  390,  493,  520,  574,  639,  696,  697,  698 }, // 106
  {   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,  155,  226,  392,  407,  480,  576,  611,  681,  698,  708,  716 }, // 107
  {  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,   96,  276,  322,  323,  324,  325,  326,  327,  328,  329,  330 }, // 108
  {  108,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,   97,  218,  323,  386,  387,  388,  389,  390,  391,  392,  393 }, // 109
  {  108,  109,  111,  112,  113,  114,  115,  116,  117,  118,  119,  134,  281,  325,  333,  449,  450,  451,  452,  453,  454,  455 }, // 110
  {  108,  109,  110,  112,  113,  114,  115,  116,  117,  118,  119,  159,  285,  327,  344,  388,  403,  450,  462,  478,  481,  482 }, // 111
  {  108,  109,  110,  111,  113,  114,  115,  116,  117,  118,  119,  100,  242,  328,  389,  488,  516,  517,  518,  519,  520,  521 }, // 112
  {  108,  109,  110,  111,  112,  114,  115,  116,  117,  118,  119,  137,  247,  330,  338,  452,  517,  523,  554,  558,  559,  560 }, // 113
  {  108,  109,  110,  111,  112,  113,  115,  116,  117,  118,  119,   18,  204,  577,  578,  579,  580,  581,  582,  583,  584,  585 }, // 114
  {  108,  109,  110,  111,  112,  113,  114,  116,  117,  118,  119,   19,  249,  492,  519,  544,  558,  578,  640,  641,  642,  643 }, // 115
  {  108,  109,  110,  111,  112,  113,  114,  115,  117,  118,  119,  164,  210,  453,  465,  481,  580,  614,  682,  683,  684,  685 }, // 116
  {  108,  109,  110,  111,  112,  113,  114,  115,  116,  118,  119,  141,  214,  455,  560,  582,  600,  642,  648,  683,  689,  693 }, // 117
  {  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  119,   22,  221,  361,  391,  494,  521,  583,  643,  696,  699,  700 }, // 118
  {  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  167,  227,  393,  408,  482,  585,  619,  685,  700,  710,  717 }, // 119
  {  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  277,  322,  331,  332,  333,  334,  335,  336,  337,  338 }, // 120
  {  120,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  133,  230,  331,  394,  395,  396,  397,  398,  399,  400,  401 }, // 121
  {  120,  121,  123,  124,  125,  126,  127,  128,  129,  130,  131,   98,  280,  324,  332,  442,  443,  444,  445,  446,  447,  448 }, // 122
  {  120,  121,  122,  124,  125,  126,  127,  128,  129,  130,  131,  171,  286,  334,  351,  395,  409,  444,  457,  483,  484,  485 }, // 123
  {  120,  121,  122,  123,  125,  126,  127,  128,  129,  130,  131,  136,  243,  336,  397,  495,  522,  523,  524,  525,  526,  527 }, // 124
  {  120,  121,  122,  123,  124,  126,  127,  128,  129,  130,  131,  101,  246,  329,  337,  445,  516,  522,  554,  555,  556,  557 }, // 125
  {  120,  121,  122,  123,  124,  125,  127,  128,  129,  130,  131,   30,  193,  586,  587,  588,  589,  590,  591,  592,  593,  594 }, // 126
  {  120,  121,  122,  123,  124,  125,  126,  128,  129,  130,  131,   31,  250,  498,  524,  542,  556,  587,  636,  644,  645,  646 }, // 127
  {  120,  121,  122,  123,  124,  125,  126,  127,  129,  130,  131,  176,  199,  447,  460,  484,  589,  622,  678,  686,  687,  688 }, // 128
  {  120,  121,  122,  123,  124,  125,  126,  127,  128,  130,  131,  105,  202,  448,  557,  573,  591,  638,  645,  679,  686,  692 }, // 129
  {  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  131,   34,  232,  368,  398,  500,  526,  592,  646,  701,  702,  703 }, // 130
  {  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  179,  238,  400,  414,  485,  594,  627,  688,  703,  713,  718 }, // 131
  {  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  120,  277,  322,  331,  332,  333,  334,  335,  336,  337,  338 }, // 132
  {  132,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  121,  230,  331,  394,  395,  396,  397,  398,  399,  400,  401 }, // 133
  {  132,  133,  135,  136,  137,  138,  139,  140,  141,  142,  143,  110,  281,  325,  333,  449,  450,  451,  452,  453,  454,  455 }, // 134
  {  132,  133,  134,  136,  137,  138,  139,  140,  141,  142,  143,  183,  287,  335,  352,  396,  410,  451,  463,  483,  486,  487 }, // 135
  {  132,  133,  134,  135,  137,  138,  139,  140,  141,  142,  143,  124,  243,  336,  397,  495,  522,  523,  524,  525,  526,  527 }, // 136
  {  132,  133,  134,  135,  136,  138,  139,  140,  141,  142,  143,  113,  247,  330,  338,  452,  517,  523,  554,  558,  559,  560 }, // 137
  {  132,  133,  134,  135,  136,  137,  139,  140,  141,  142,  143,   42,  205,  595,  596,  597,  598,  599,  600,  601,  602,  603 }, // 138
  {  132,  133,  134,  135,  136,  137,  138,  140,  141,  142,  143,   43,  251,  499,  525,  545,  559,  596,  640,  647,  648,  649 }, // 139
  {  132,  133,  134,  135,  136,  137,  138,  139,  141,  142,  143,  188,  211,  454,  466,  486,  598,  630,  682,  689,  690,  691 }, // 140
  {  132,  133,  134,  135,  136,  137,  138,  139,  140,  142,  143,  117,  214,  455,  560,  582,  600,  642,  648,  683,  689,  693 }, // 141
  {  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  143,   46,  233,  369,  399,  501,  527,  601,  649,  701,  704,  705 }, // 142
  {  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  191,  239,  401,  415,  487,  603,  635,  691,  705,  715,  719 }, // 143
  {  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  278,  339,  340,  341,  342,  343,  344,  345,  346,  347 }, // 144
  {  144,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  157,  219,  340,  386,  402,  403,  404,  405,  406,  407,  408 }, // 145
  {  144,  145,  147,  148,  149,  150,  151,  152,  153,  154,  155,  170,  282,  341,  349,  442,  456,  457,  458,  459,  460,  461 }, // 146
  {  144,  145,  146,  148,  149,  150,  151,  152,  153,  154,  155,   99,  284,  326,  343,  387,  402,  443,  456,  478,  479,  480 }, // 147
  {  144,  145,  146,  147,  149,  150,  151,  152,  153,  154,  155,  160,  254,  345,  404,  502,  528,  529,  530,  531,  532,  533 }, // 148
  {  144,  145,  146,  147,  148,  150,  151,  152,  153,  154,  155,  173,  258,  346,  354,  458,  528,  534,  561,  562,  563,  564 }, // 149
  {  144,  145,  146,  147,  148,  149,  151,  152,  153,  154,  155,   54,  194,  568,  604,  605,  606,  607,  608,  609,  610,  611 }, // 150
  {  144,  145,  146,  147,  148,  149,  150,  152,  153,  154,  155,   55,  260,  505,  530,  548,  562,  604,  650,  651,  652,  653 }, // 151
  {  144,  145,  146,  147,  148,  149,  150,  151,  153,  154,  155,  104,  198,  446,  459,  479,  571,  606,  678,  679,  680,  681 }, // 152
  {  144,  145,  146,  147,  148,  149,  150,  151,  152,  154,  155,  177,  203,  461,  564,  608,  624,  652,  659,  680,  687,  694 }, // 153
  {  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  155,   58,  222,  375,  405,  507,  532,  609,  653,  706,  707,  708 }, // 154
  {  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  107,  226,  392,  407,  480,  576,  611,  681,  698,  708,  716 }, // 155
  {  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  144,  278,  339,  340,  341,  342,  343,  344,  345,  346,  347 }, // 156
  {  156,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  145,  219,  340,  386,  402,  403,  404,  405,  406,  407,  408 }, // 157
  {  156,  157,  159,  160,  161,  162,  163,  164,  165,  166,  167,  182,  283,  342,  350,  449,  462,  463,  464,  465,  466,  467 }, // 158
  {  156,  157,  158,  160,  161,  162,  163,  164,  165,  166,  167,  111,  285,  327,  344,  388,  403,  450,  462,  478,  481,  482 }, // 159
  {  156,  157,  158,  159,  161,  162,  163,  164,  165,  166,  167,  148,  254,  345,  404,  502,  528,  529,  530,  531,  532,  533 }, // 160
  {  156,  157,  158,  159,  160,  162,  163,  164,  165,  166,  167,  185,  259,  347,  355,  464,  529,  535,  561,  565,  566,  567 }, // 161
  {  156,  157,  158,  159,  160,  161,  163,  164,  165,  166,  167,   66,  206,  577,  612,  613,  614,  615,  616,  617,  618,  619 }, // 162
  {  156,  157,  158,  159,  160,  161,  162,  164,  165,  166,  167,   67,  261,  506,  531,  551,  565,  612,  654,  655,  656,  657 }, // 163
  {  156,  157,  158,  159,  160,  161,  162,  163,  165,  166,  167,  116,  210,  453,  465,  481,  580,  614,  682,  683,  684,  685 }, // 164
  {  156,  157,  158,  159,  160,  161,  162,  163,  164,  166,  167,  189,  215,  467,  567,  616,  632,  656,  662,  684,  690,  695 }, // 165
  {  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  167,   70,  223,  376,  406,  508,  533,  617,  657,  706,  709,  710 }, // 166
  {  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  119,  227,  393,  408,  482,  585,  619,  685,  700,  710,  717 }, // 167
  {  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  279,  339,  348,  349,  350,  351,  352,  353,  354,  355 }, // 168
  {  168,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  181,  231,  348,  394,  409,  410,  411,  412,  413,  414,  415 }, // 169
  {  168,  169,  171,  172,  173,  174,  175,  176,  177,  178,  179,  146,  282,  341,  349,  442,  456,  457,  458,  459,  460,  461 }, // 170
  {  168,  169,  170,  172,  173,  174,  175,  176,  177,  178,  179,  123,  286,  334,  351,  395,  409,  444,  457,  483,  484,  485 }, // 171
  {  168,  169,  170,  171,  173,  174,  175,  176,  177,  178,  179,  184,  255,  353,  411,  509,  534,  535,  536,  537,  538,  539 }, // 172
  {  168,  169,  170,  171,  172,  174,  175,  176,  177,  178,  179,  149,  258,  346,  354,  458,  528,  534,  561,  562,  563,  564 }, // 173
  {  168,  169,  170,  171,  172,  173,  175,  176,  177,  178,  179,   78,  195,  586,  620,  621,  622,  623,  624,  625,  626,  627 }, // 174
  {  168,  169,  170,  171,  172,  173,  174,  176,  177,  178,  179,   79,  262,  512,  536,  549,  563,  620,  650,  658,  659,  660 }, // 175
  {  168,  169,  170,  171,  172,  173,  174,  175,  177,  178,  179,  128,  199,  447,  460,  484,  589,  622,  678,  686,  687,  688 }, // 176
  {  168,  169,  170,  171,  172,  173,  174,  175,  176,  178,  179,  153,  203,  461,  564,  608,  624,  652,  659,  680,  687,  694 }, // 177
  {  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  179,   82,  234,  382,  412,  514,  538,  625,  660,  711,  712,  713 }, // 178
  {  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  131,  238,  400,  414,  485,  594,  627,  688,  703,  713,  718 }, // 179
  {  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  168,  279,  339,  348,  349,  350,  351,  352,  353,  354,  355 }, // 180
  {  180,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  169,  231,  348,  394,  409,  410,  411,  412,  413,  414,  415 }, // 181
  {  180,  181,  183,  184,  185,  186,  187,  188,  189,  190,  191,  158,  283,  342,  350,  449,  462,  463,  464,  465,  466,  467 }, // 182
  {  180,  181,  182,  184,  185,  186,  187,  188,  189,  190,  191,  135,  287,  335,  352,  396,  410,  451,  463,  483,  486,  487 }, // 183
  {  180,  181,  182,  183,  185,  186,  187,  188,  189,  190,  191,  172,  255,  353,  411,  509,  534,  535,  536,  537,  538,  539 }, // 184
  {  180,  181,  182,  183,  184,  186,  187,  188,  189,  190,  191,  161,  259,  347,  355,  464,  529,  535,  561,  565,  566,  567 }, // 185
  {  180,  181,  182,  183,  184,  185,  187,  188,  189,  190,  191,   90,  207,  595,  628,  629,  630,  631,  632,  633,  634,  635 }, // 186
  {  180,  181,  182,  183,  184,  185,  186,  188,  189,  190,  191,   91,  263,  513,  537,  552,  566,  628,  654,  661,  662,  663 }, // 187
  {  180,  181,  182,  183,  184,  185,  186,  187,  189,  190,  191,  140,  211,  454,  466,  486,  598,  630,  682,  689,  690,  691 }, // 188
  {  180,  181,  182,  183,  184,  185,  186,  187,  188,  190,  191,  165,  215,  467,  567,  616,  632,  656,  662,  684,  690,  695 }, // 189
  {  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  191,   94,  235,  383,  413,  515,  539,  633,  663,  711,  714,  715 }, // 190
  {  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  143,  239,  401,  415,  487,  603,  635,  691,  705,  715,  719 }, // 191
  {  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,    6,  102,  568,  569,  570,  571,  572,  573,  574,  575,  576 }, // 192
  {  192,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,   30,  126,  586,  587,  588,  589,  590,  591,  592,  593,  594 }, // 193
  {  192,  193,  195,  196,  197,  198,  199,  200,  201,  202,  203,   54,  150,  568,  604,  605,  606,  607,  608,  609,  610,  611 }, // 194
  {  192,  193,  194,  196,  197,  198,  199,  200,  201,  202,  203,   78,  174,  586,  620,  621,  622,  623,  624,  625,  626,  627 }, // 195
  {  192,  193,  194,  195,  197,  198,  199,  200,  201,  202,  203,    8,   56,  420,  433,  469,  570,  605,  664,  665,  666,  667 }, // 196
  {  192,  193,  194,  195,  196,  198,  199,  200,  201,  202,  203,   32,   80,  421,  434,  474,  588,  621,  664,  672,  673,  674 }, // 197
  {  192,  193,  194,  195,  196,  197,  199,  200,  201,  202,  203,  104,  152,  446,  459,  479,  571,  606,  678,  679,  680,  681 }, // 198
  {  192,  193,  194,  195,  196,  197,  198,  200,  201,  202,  203,  128,  176,  447,  460,  484,  589,  622,  678,  686,  687,  688 }, // 199
  {  192,  193,  194,  195,  196,  197,  198,  199,  201,  202,  203,    9,   33,  422,  543,  572,  590,  637,  644,  665,  672,  692 }, // 200
  {  192,  193,  194,  195,  196,  197,  198,  199,  200,  202,  203,   57,   81,  435,  550,  607,  623,  651,  658,  666,  673,  694 }, // 201
  {  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  203,  105,  129,  448,  557,  573,  591,  638,  645,  679,  686,  692 }, // 202
  {  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  153,  177,  461,  564,  608,  624,  652,  659,  680,  687,  694 }, // 203
  {  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,   18,  114,  577,  578,  579,  580,  581,  582,  583,  584,  585 }, // 204
  {  204,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,   42,  138,  595,  596,  597,  598,  599,  600,  601,  602,  603 }, // 205
  {  204,  205,  207,  208,  209,  210,  211,  212,  213,  214,  215,   66,  162,  577,  612,  613,  614,  615,  616,  617,  618,  619 }, // 206
  {  204,  205,  206,  208,  209,  210,  211,  212,  213,  214,  215,   90,  186,  595,  628,  629,  630,  631,  632,  633,  634,  635 }, // 207
  {  204,  205,  206,  207,  209,  210,  211,  212,  213,  214,  215,   20,   68,  427,  439,  471,  579,  613,  668,  669,  670,  671 }, // 208
  {  204,  205,  206,  207,  208,  210,  211,  212,  213,  214,  215,   44,   92,  428,  440,  476,  597,  629,  668,  675,  676,  677 }, // 209
  {  204,  205,  206,  207,  208,  209,  211,  212,  213,  214,  215,  116,  164,  453,  465,  481,  580,  614,  682,  683,  684,  685 }, // 210
  {  204,  205,  206,  207,  208,  209,  210,  212,  213,  214,  215,  140,  188,  454,  466,  486,  598,  630,  682,  689,  690,  691 }, // 211
  {  204,  205,  206,  207,  208,  209,  210,  211,  213,  214,  215,   21,   45,  429,  546,  581,  599,  641,  647,  669,  675,  693 }, // 212
  {  204,  205,  206,  207,  208,  209,  210,  211,  212,  214,  215,   69,   93,  441,  553,  615,  631,  655,  661,  670,  676,  695 }, // 213
  {  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  215,  117,  141,  455,  560,  582,  600,  642,  648,  683,  689,  693 }, // 214
  {  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  165,  189,  467,  567,  616,  632,  656,  662,  684,  690,  695 }, // 215
  {  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,    1,   13,  289,  356,  357,  358,  359,  360,  361,  362,  363 }, // 216
  {  216,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,   49,   61,  306,  356,  372,  373,  374,  375,  376,  377,  378 }, // 217
  {  216,  217,  219,  220,  221,  222,  223,  224,  225,  226,  227,   97,  109,  323,  386,  387,  388,  389,  390,  391,  392,  393 }, // 218
  {  216,  217,  218,  220,  221,  222,  223,  224,  225,  226,  227,  145,  157,  340,  386,  402,  403,  404,  405,  406,  407,  408 }, // 219
  {  216,  217,  218,  219,  221,  222,  223,  224,  225,  226,  227,   10,  106,  360,  390,  493,  520,  574,  639,  696,  697,  698 }, // 220
  {  216,  217,  218,  219,  220,  222,  223,  224,  225,  226,  227,   22,  118,  361,  391,  494,  521,  583,  643,  696,  699,  700 }, // 221
  {  216,  217,  218,  219,  220,  221,  223,  224,  225,  226,  227,   58,  154,  375,  405,  507,  532,  609,  653,  706,  707,  708 }, // 222
  {  216,  217,  218,  219,  220,  221,  222,  224,  225,  226,  227,   70,  166,  376,  406,  508,  533,  617,  657,  706,  709,  710 }, // 223
  {  216,  217,  218,  219,  220,  221,  222,  223,  225,  226,  227,   11,   59,  362,  377,  470,  575,  610,  667,  697,  707,  716 }, // 224
  {  216,  217,  218,  219,  220,  221,  222,  223,  224,  226,  227,   23,   71,  363,  378,  472,  584,  618,  671,  699,  709,  717 }, // 225
  {  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  227,  107,  155,  392,  407,  480,  576,  611,  681,  698,  708,  716 }, // 226
  {  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  119,  167,  393,  408,  482,  585,  619,  685,  700,  710,  717 }, // 227
  {  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,   25,   37,  297,  364,  365,  366,  367,  368,  369,  370,  371 }, // 228
  {  228,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,   73,   85,  314,  364,  379,  380,  381,  382,  383,  384,  385 }, // 229
  {  228,  229,  231,  232,  233,  234,  235,  236,  237,  238,  239,  121,  133,  331,  394,  395,  396,  397,  398,  399,  400,  401 }, // 230
  {  228,  229,  230,  232,  233,  234,  235,  236,  237,  238,  239,  169,  181,  348,  394,  409,  410,  411,  412,  413,  414,  415 }, // 231
  {  228,  229,  230,  231,  233,  234,  235,  236,  237,  238,  239,   34,  130,  368,  398,  500,  526,  592,  646,  701,  702,  703 }, // 232
  {  228,  229,  230,  231,  232,  234,  235,  236,  237,  238,  239,   46,  142,  369,  399,  501,  527,  601,  649,  701,  704,  705 }, // 233
  {  228,  229,  230,  231,  232,  233,  235,  236,  237,  238,  239,   82,  178,  382,  412,  514,  538,  625,  660,  711,  712,  713 }, // 234
  {  228,  229,  230,  231,  232,  233,  234,  236,  237,  238,  239,   94,  190,  383,  413,  515,  539,  633,  663,  711,  714,  715 }, // 235
  {  228,  229,  230,  231,  232,  233,  234,  235,  237,  238,  239,   35,   83,  370,  384,  475,  593,  626,  674,  702,  712,  718 }, // 236
  {  228,  229,  230,  231,  232,  233,  234,  235,  236,  238,  239,   47,   95,  371,  385,  477,  602,  634,  677,  704,  714,  719 }, // 237
  {  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  239,  131,  179,  400,  414,  485,  594,  627,  688,  703,  713,  718 }, // 238
  {  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  143,  191,  401,  415,  487,  603,  635,  691,  705,  715,  719 }, // 239
  {  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,    4,   16,  294,  359,  488,  489,  490,  491,  492,  493,  494 }, // 240
  {  240,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,   28,   40,  302,  367,  495,  496,  497,  498,  499,  500,  501 }, // 241
  {  240,  241,  243,  244,  245,  246,  247,  248,  249,  250,  251,  100,  112,  328,  389,  488,  516,  517,  518,  519,  520,  521 }, // 242
  {  240,  241,  242,  244,  245,  246,  247,  248,  249,  250,  251,  124,  136,  336,  397,  495,  522,  523,  524,  525,  526,  527 }, // 243
  {  240,  241,  242,  243,  245,  246,  247,  248,  249,  250,  251,    5,   29,  295,  303,  419,  489,  496,  540,  541,  542,  543 }, // 244
  {  240,  241,  242,  243,  244,  246,  247,  248,  249,  250,  251,   17,   41,  296,  304,  426,  490,  497,  540,  544,  545,  546 }, // 245
  {  240,  241,  242,  243,  244,  245,  247,  248,  249,  250,  251,  101,  125,  329,  337,  445,  516,  522,  554,  555,  556,  557 }, // 246
  {  240,  241,  242,  243,  244,  245,  246,  248,  249,  250,  251,  113,  137,  330,  338,  452,  517,  523,  554,  558,  559,  560 }, // 247
  {  240,  241,  242,  243,  244,  245,  246,  247,  249,  250,  251,    7,  103,  491,  518,  541,  555,  569,  636,  637,  638,  639 }, // 248
  {  240,  241,  242,  243,  244,  245,  246,  247,  248,  250,  251,   19,  115,  492,  519,  544,  558,  578,  640,  641,  642,  643 }, // 249
  {  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  251,   31,  127,  498,  524,  542,  556,  587,  636,  644,  645,  646 }, // 250
  {  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,   43,  139,  499,  525,  545,  559,  596,  640,  647,  648,  649 }, // 251
  {  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,   52,   64,  311,  374,  502,  503,  504,  505,  506,  507,  508 }, // 252
  {  252,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,   76,   88,  319,  381,  509,  510,  511,  512,  513,  514,  515 }, // 253
  {  252,  253,  255,  256,  257,  258,  259,  260,  261,  262,  263,  148,  160,  345,  404,  502,  528,  529,  530,  531,  532,  533 }, // 254
  {  252,  253,  254,  256,  257,  258,  259,  260,  261,  262,  263,  172,  184,  353,  411,  509,  534,  535,  536,  537,  538,  539 }, // 255
  {  252,  253,  254,  255,  257,  258,  259,  260,  261,  262,  263,   53,   77,  312,  320,  432,  503,  510,  547,  548,  549,  550 }, // 256
  {  252,  253,  254,  255,  256,  258,  259,  260,  261,  262,  263,   65,   89,  313,  321,  438,  504,  511,  547,  551,  552,  553 }, // 257
  {  252,  253,  254,  255,  256,  257,  259,  260,  261,  262,  263,  149,  173,  346,  354,  458,  528,  534,  561,  562,  563,  564 }, // 258
  {  252,  253,  254,  255,  256,  257,  258,  260,  261,  262,  263,  161,  185,  347,  355,  464,  529,  535,  561,  565,  566,  567 }, // 259
  {  252,  253,  254,  255,  256,  257,  258,  259,  261,  262,  263,   55,  151,  505,  530,  548,  562,  604,  650,  651,  652,  653 }, // 260
  {  252,  253,  254,  255,  256,  257,  258,  259,  260,  262,  263,   67,  163,  506,  531,  551,  565,  612,  654,  655,  656,  657 }, // 261
  {  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  263,   79,  175,  512,  536,  549,  563,  620,  650,  658,  659,  660 }, // 262
  {  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,   91,  187,  513,  537,  552,  566,  628,  654,  661,  662,  663 }, // 263
  {  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,    0,   12,  288,  289,  290,  291,  292,  293,  294,  295,  296 }, // 264
  {  264,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,   24,   36,  288,  297,  298,  299,  300,  301,  302,  303,  304 }, // 265
  {  264,  265,  267,  268,  269,  270,  271,  272,  273,  274,  275,   48,   60,  305,  306,  307,  308,  309,  310,  311,  312,  313 }, // 266
  {  264,  265,  266,  268,  269,  270,  271,  272,  273,  274,  275,   72,   84,  305,  314,  315,  316,  317,  318,  319,  320,  321 }, // 267
  {  264,  265,  266,  267,  269,  270,  271,  272,  273,  274,  275,    2,   26,  290,  298,  416,  417,  418,  419,  420,  421,  422 }, // 268
  {  264,  265,  266,  267,  268,  270,  271,  272,  273,  274,  275,   14,   38,  291,  299,  423,  424,  425,  426,  427,  428,  429 }, // 269
  {  264,  265,  266,  267,  268,  269,  271,  272,  273,  274,  275,   50,   74,  307,  315,  416,  430,  431,  432,  433,  434,  435 }, // 270
  {  264,  265,  266,  267,  268,  269,  270,  272,  273,  274,  275,   62,   86,  308,  316,  423,  436,  437,  438,  439,  440,  441 }, // 271
  {  264,  265,  266,  267,  268,  269,  270,  271,  273,  274,  275,    3,   51,  292,  309,  357,  372,  417,  430,  468,  469,  470 }, // 272
  {  264,  265,  266,  267,  268,  269,  270,  271,  272,  274,  275,   15,   63,  293,  310,  358,  373,  424,  436,  468,  471,  472 }, // 273
  {  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  275,   27,   75,  300,  317,  365,  379,  418,  431,  473,  474,  475 }, // 274
  {  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,   39,   87,  301,  318,  366,  380,  425,  437,  473,  476,  477 }, // 275
  {  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,   96,  108,  322,  323,  324,  325,  326,  327,  328,  329,  330 }, // 276
  {  276,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  120,  132,  322,  331,  332,  333,  334,  335,  336,  337,  338 }, // 277
  {  276,  277,  279,  280,  281,  282,  283,  284,  285,  286,  287,  144,  156,  339,  340,  341,  342,  343,  344,  345,  346,  347 }, // 278
  {  276,  277,  278,  280,  281,  282,  283,  284,  285,  286,  287,  168,  180,  339,  348,  349,  350,  351,  352,  353,  354,  355 }, // 279
  {  276,  277,  278,  279,  281,  282,  283,  284,  285,  286,  287,   98,  122,  324,  332,  442,  443,  444,  445,  446,  447,  448 }, // 280
  {  276,  277,  278,  279,  280,  282,  283,  284,  285,  286,  287,  110,  134,  325,  333,  449,  450,  451,  452,  453,  454,  455 }, // 281
  {  276,  277,  278,  279,  280,  281,  283,  284,  285,  286,  287,  146,  170,  341,  349,  442,  456,  457,  458,  459,  460,  461 }, // 282
  {  276,  277,  278,  279,  280,  281,  282,  284,  285,  286,  287,  158,  182,  342,  350,  449,  462,  463,  464,  465,  466,  467 }, // 283
  {  276,  277,  278,  279,  280,  281,  282,  283,  285,  286,  287,   99,  147,  326,  343,  387,  402,  443,  456,  478,  479,  480 }, // 284
  {  276,  277,  278,  279,  280,  281,  282,  283,  284,  286,  287,  111,  159,  327,  344,  388,  403,  450,  462,  478,  481,  482 }, // 285
  {  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  287,  123,  171,  334,  351,  395,  409,  444,  457,  483,  484,  485 }, // 286
  {  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  135,  183,  335,  352,  396,  410,  451,  463,  483,  486,  487 }, // 287
  {    0,   12,  264,  289,  290,  291,  292,  293,  294,  295,  296,   24,   36,  265,  297,  298,  299,  300,  301,  302,  303,  304 }, // 288
  {    0,   12,  264,  288,  290,  291,  292,  293,  294,  295,  296,    1,   13,  216,  356,  357,  358,  359,  360,  361,  362,  363 }, // 289
  {    0,   12,  264,  288,  289,  291,  292,  293,  294,  295,  296,    2,   26,  268,  298,  416,  417,  418,  419,  420,  421,  422 }, // 290
  {    0,   12,  264,  288,  289,  290,  292,  293,  294,  295,  296,   14,   38,  269,  299,  423,  424,  425,  426,  427,  428,  429 }, // 291
  {    0,   12,  264,  288,  289,  290,  291,  293,  294,  295,  296,    3,   51,  272,  309,  357,  372,  417,  430,  468,  469,  470 }, // 292
  {    0,   12,  264,  288,  289,  290,  291,  292,  294,  295,  296,   15,   63,  273,  310,  358,  373,  424,  436,  468,  471,  472 }, // 293
  {    0,   12,  264,  288,  289,  290,  291,  292,  293,  295,  296,    4,   16,  240,  359,  488,  489,  490,  491,  492,  493,  494 }, // 294
  {    0,   12,  264,  288,  289,  290,  291,  292,  293,  294,  296,    5,   29,  244,  303,  419,  489,  496,  540,  541,  542,  543 }, // 295
  {    0,   12,  264,  288,  289,  290,  291,  292,  293,  294,  295,   17,   41,  245,  304,  426,  490,  497,  540,  544,  545,  546 }, // 296
  {   24,   36,  265,  288,  298,  299,  300,  301,  302,  303,  304,   25,   37,  228,  364,  365,  366,  367,  368,  369,  370,  371 }, // 297
  {   24,   36,  265,  288,  297,  299,  300,  301,  302,  303,  304,    2,   26,  268,  290,  416,  417,  418,  419,  420,  421,  422 }, // 298
  {   24,   36,  265,  288,  297,  298,  300,  301,  302,  303,  304,   14,   38,  269,  291,  423,  424,  425,  426,  427,  428,  429 }, // 299
  {   24,   36,  265,  288,  297,  298,  299,  301,  302,  303,  304,   27,   75,  274,  317,  365,  379,  418,  431,  473,  474,  475 }, // 300
  {   24,   36,  265,  288,  297,  298,  299,  300,  302,  303,  304,   39,   87,  275,  318,  366,  380,  425,  437,  473,  476,  477 }, // 301
  {   24,   36,  265,  288,  297,  298,  299,  300,  301,  303,  304,   28,   40,  241,  367,  495,  496,  497,  498,  499,  500,  501 }, // 302
  {   24,   36,  265,  288,  297,  298,  299,  300,  301,  302,  304,    5,   29,  244,  295,  419,  489,  496,  540,  541,  542,  543 }, // 303
  {   24,   36,  265,  288,  297,  298,  299,  300,  301,  302,  303,   17,   41,  245,  296,  426,  490,  497,  540,  544,  545,  546 }, // 304
  {   48,   60,  266,  306,  307,  308,  309,  310,  311,  312,  313,   72,   84,  267,  314,  315,  316,  317,  318,  319,  320,  321 }, // 305
  {   48,   60,  266,  305,  307,  308,  309,  310,  311,  312,  313,   49,   61,  217,  356,  372,  373,  374,  375,  376,  377,  378 }, // 306
  {   48,   60,  266,  305,  306,  308,  309,  310,  311,  312,  313,   50,   74,  270,  315,  416,  430,  431,  432,  433,  434,  435 }, // 307
  {   48,   60,  266,  305,  306,  307,  309,  310,  311,  312,  313,   62,   86,  271,  316,  423,  436,  437,  438,  439,  440,  441 }, // 308
  {   48,   60,  266,  305,  306,  307,  308,  310,  311,  312,  313,    3,   51,  272,  292,  357,  372,  417,  430,  468,  469,  470 }, // 309
  {   48,   60,  266,  305,  306,  307,  308,  309,  311,  312,  313,   15,   63,  273,  293,  358,  373,  424,  436,  468,  471,  472 }, // 310
  {   48,   60,  266,  305,  306,  307,  308,  309,  310,  312,  313,   52,   64,  252,  374,  502,  503,  504,  505,  506,  507,  508 }, // 311
  {   48,   60,  266,  305,  306,  307,  308,  309,  310,  311,  313,   53,   77,  256,  320,  432,  503,  510,  547,  548,  549,  550 }, // 312
  {   48,   60,  266,  305,  306,  307,  308,  309,  310,  311,  312,   65,   89,  257,  321,  438,  504,  511,  547,  551,  552,  553 }, // 313
  {   72,   84,  267,  305,  315,  316,  317,  318,  319,  320,  321,   73,   85,  229,  364,  379,  380,  381,  382,  383,  384,  385 }, // 314
  {   72,   84,  267,  305,  314,  316,  317,  318,  319,  320,  321,   50,   74,  270,  307,  416,  430,  431,  432,  433,  434,  435 }, // 315
  {   72,   84,  267,  305,  314,  315,  317,  318,  319,  320,  321,   62,   86,  271,  308,  423,  436,  437,  438,  439,  440,  441 }, // 316
  {   72,   84,  267,  305,  314,  315,  316,  318,  319,  320,  321,   27,   75,  274,  300,  365,  379,  418,  431,  473,  474,  475 }, // 317
  {   72,   84,  267,  305,  314,  315,  316,  317,  319,  320,  321,   39,   87,  275,  301,  366,  380,  425,  437,  473,  476,  477 }, // 318
  {   72,   84,  267,  305,  314,  315,  316,  317,  318,  320,  321,   76,   88,  253,  381,  509,  510,  511,  512,  513,  514,  515 }, // 319
  {   72,   84,  267,  305,  314,  315,  316,  317,  318,  319,  321,   53,   77,  256,  312,  432,  503,  510,  547,  548,  549,  550 }, // 320
  {   72,   84,  267,  305,  314,  315,  316,  317,  318,  319,  320,   65,   89,  257,  313,  438,  504,  511,  547,  551,  552,  553 }, // 321
  {   96,  108,  276,  323,  324,  325,  326,  327,  328,  329,  330,  120,  132,  277,  331,  332,  333,  334,  335,  336,  337,  338 }, // 322
  {   96,  108,  276,  322,  324,  325,  326,  327,  328,  329,  330,   97,  109,  218,  386,  387,  388,  389,  390,  391,  392,  393 }, // 323
  {   96,  108,  276,  322,  323,  325,  326,  327,  328,  329,  330,   98,  122,  280,  332,  442,  443,  444,  445,  446,  447,  448 }, // 324
  {   96,  108,  276,  322,  323,  324,  326,  327,  328,  329,  330,  110,  134,  281,  333,  449,  450,  451,  452,  453,  454,  455 }, // 325
  {   96,  108,  276,  322,  323,  324,  325,  327,  328,  329,  330,   99,  147,  284,  343,  387,  402,  443,  456,  478,  479,  480 }, // 326
  {   96,  108,  276,  322,  323,  324,  325,  326,  328,  329,  330,  111,  159,  285,  344,  388,  403,  450,  462,  478,  481,  482 }, // 327
  {   96,  108,  276,  322,  323,  324,  325,  326,  327,  329,  330,  100,  112,  242,  389,  488,  516,  517,  518,  519,  520,  521 }, // 328
  {   96,  108,  276,  322,  323,  324,  325,  326,  327,  328,  330,  101,  125,  246,  337,  445,  516,  522,  554,  555,  556,  557 }, // 329
  {   96,  108,  276,  322,  323,  324,  325,  326,  327,  328,  329,  113,  137,  247,  338,  452,  517,  523,  554,  558,  559,  560 }, // 330
  {  120,  132,  277,  322,  332,  333,  334,  335,  336,  337,  338,  121,  133,  230,  394,  395,  396,  397,  398,  399,  400,  401 }, // 331
  {  120,  132,  277,  322,  331,  333,  334,  335,  336,  337,  338,   98,  122,  280,  324,  442,  443,  444,  445,  446,  447,  448 }, // 332
  {  120,  132,  277,  322,  331,  332,  334,  335,  336,  337,  338,  110,  134,  281,  325,  449,  450,  451,  452,  453,  454,  455 }, // 333
  {  120,  132,  277,  322,  331,  332,  333,  335,  336,  337,  338,  123,  171,  286,  351,  395,  409,  444,  457,  483,  484,  485 }, // 334
  {  120,  132,  277,  322,  331,  332,  333,  334,  336,  337,  338,  135,  183,  287,  352,  396,  410,  451,  463,  483,  486,  487 }, // 335
  {  120,  132,  277,  322,  331,  332,  333,  334,  335,  337,  338,  124,  136,  243,  397,  495,  522,  523,  524,  525,  526,  527 }, // 336
  {  120,  132,  277,  322,  331,  332,  333,  334,  335,  336,  338,  101,  125,  246,  329,  445,  516,  522,  554,  555,  556,  557 }, // 337
  {  120,  132,  277,  322,  331,  332,  333,  334,  335,  336,  337,  113,  137,  247,  330,  452,  517,  523,  554,  558,  559,  560 }, // 338
  {  144,  156,  278,  340,  341,  342,  343,  344,  345,  346,  347,  168,  180,  279,  348,  349,  350,  351,  352,  353,  354,  355 }, // 339
  {  144,  156,  278,  339,  341,  342,  343,  344,  345,  346,  347,  145,  157,  219,  386,  402,  403,  404,  405,  406,  407,  408 }, // 340
  {  144,  156,  278,  339,  340,  342,  343,  344,  345,  346,  347,  146,  170,  282,  349,  442,  456,  457,  458,  459,  460,  461 }, // 341
  {  144,  156,  278,  339,  340,  341,  343,  344,  345,  346,  347,  158,  182,  283,  350,  449,  462,  463,  464,  465,  466,  467 }, // 342
  {  144,  156,  278,  339,  340,  341,  342,  344,  345,  346,  347,   99,  147,  284,  326,  387,  402,  443,  456,  478,  479,  480 }, // 343
  {  144,  156,  278,  339,  340,  341,  342,  343,  345,  346,  347,  111,  159,  285,  327,  388,  403,  450,  462,  478,  481,  482 }, // 344
  {  144,  156,  278,  339,  340,  341,  342,  343,  344,  346,  347,  148,  160,  254,  404,  502,  528,  529,  530,  531,  532,  533 }, // 345
  {  144,  156,  278,  339,  340,  341,  342,  343,  344,  345,  347,  149,  173,  258,  354,  458,  528,  534,  561,  562,  563,  564 }, // 346
  {  144,  156,  278,  339,  340,  341,  342,  343,  344,  345,  346,  161,  185,  259,  355,  464,  529,  535,  561,  565,  566,  567 }, // 347
  {  168,  180,  279,  339,  349,  350,  351,  352,  353,  354,  355,  169,  181,  231,  394,  409,  410,  411,  412,  413,  414,  415 }, // 348
  {  168,  180,  279,  339,  348,  350,  351,  352,  353,  354,  355,  146,  170,  282,  341,  442,  456,  457,  458,  459,  460,  461 }, // 349
  {  168,  180,  279,  339,  348,  349,  351,  352,  353,  354,  355,  158,  182,  283,  342,  449,  462,  463,  464,  465,  466,  467 }, // 350
  {  168,  180,  279,  339,  348,  349,  350,  352,  353,  354,  355,  123,  171,  286,  334,  395,  409,  444,  457,  483,  484,  485 }, // 351
  {  168,  180,  279,  339,  348,  349,  350,  351,  353,  354,  355,  135,  183,  287,  335,  396,  410,  451,  463,  483,  486,  487 }, // 352
  {  168,  180,  279,  339,  348,  349,  350,  351,  352,  354,  355,  172,  184,  255,  411,  509,  534,  535,  536,  537,  538,  539 }, // 353
  {  168,  180,  279,  339,  348,  349,  350,  351,  352,  353,  355,  149,  173,  258,  346,  458,  528,  534,  561,  562,  563,  564 }, // 354
  {  168,  180,  279,  339,  348,  349,  350,  351,  352,  353,  354,  161,  185,  259,  347,  464,  529,  535,  561,  565,  566,  567 }, // 355
  {    1,   13,  216,  289,  357,  358,  359,  360,  361,  362,  363,   49,   61,  217,  306,  372,  373,  374,  375,  376,  377,  378 }, // 356
  {    1,   13,  216,  289,  356,  358,  359,  360,  361,  362,  363,    3,   51,  272,  292,  309,  372,  417,  430,  468,  469,  470 }, // 357
  {    1,   13,  216,  289,  356,  357,  359,  360,  361,  362,  363,   15,   63,  273,  293,  310,  373,  424,  436,  468,  471,  472 }, // 358
  {    1,   13,  216,  289,  356,  357,  358,  360,  361,  362,  363,    4,   16,  240,  294,  488,  489,  490,  491,  492,  493,  494 }, // 359
  {    1,   13,  216,  289,  356,  357,  358,  359,  361,  362,  363,   10,  106,  220,  390,  493,  520,  574,  639,  696,  697,  698 }, // 360
  {    1,   13,  216,  289,  356,  357,  358,  359,  360,  362,  363,   22,  118,  221,  391,  494,  521,  583,  643,  696,  699,  700 }, // 361
  {    1,   13,  216,  289,  356,  357,  358,  359,  360,  361,  363,   11,   59,  224,  377,  470,  575,  610,  667,  697,  707,  716 }, // 362
  {    1,   13,  216,  289,  356,  357,  358,  359,  360,  361,  362,   23,   71,  225,  378,  472,  584,  618,  671,  699,  709,  717 }, // 363
  {   25,   37,  228,  297,  365,  366,  367,  368,  369,  370,  371,   73,   85,  229,  314,  379,  380,  381,  382,  383,  384,  385 }, // 364
  {   25,   37,  228,  297,  364,  366,  367,  368,  369,  370,  371,   27,   75,  274,  300,  317,  379,  418,  431,  473,  474,  475 }, // 365
  {   25,   37,  228,  297,  364,  365,  367,  368,  369,  370,  371,   39,   87,  275,  301,  318,  380,  425,  437,  473,  476,  477 }, // 366
  {   25,   37,  228,  297,  364,  365,  366,  368,  369,  370,  371,   28,   40,  241,  302,  495,  496,  497,  498,  499,  500,  501 }, // 367
  {   25,   37,  228,  297,  364,  365,  366,  367,  369,  370,  371,   34,  130,  232,  398,  500,  526,  592,  646,  701,  702,  703 }, // 368
  {   25,   37,  228,  297,  364,  365,  366,  367,  368,  370,  371,   46,  142,  233,  399,  501,  527,  601,  649,  701,  704,  705 }, // 369
  {   25,   37,  228,  297,  364,  365,  366,  367,  368,  369,  371,   35,   83,  236,  384,  475,  593,  626,  674,  702,  712,  718 }, // 370
  {   25,   37,  228,  297,  364,  365,  366,  367,  368,  369,  370,   47,   95,  237,  385,  477,  602,  634,  677,  704,  714,  719 }, // 371
  {   49,   61,  217,  306,  356,  373,  374,  375,  376,  377,  378,    3,   51,  272,  292,  309,  357,  417,  430,  468,  469,  470 }, // 372
  {   49,   61,  217,  306,  356,  372,  374,  375,  376,  377,  378,   15,   63,  273,  293,  310,  358,  424,  436,  468,  471,  472 }, // 373
  {   49,   61,  217,  306,  356,  372,  373,  375,  376,  377,  378,   52,   64,  252,  311,  502,  503,  504,  505,  506,  507,  508 }, // 374
  {   49,   61,  217,  306,  356,  372,  373,  374,  376,  377,  378,   58,  154,  222,  405,  507,  532,  609,  653,  706,  707,  708 }, // 375
  {   49,   61,  217,  306,  356,  372,  373,  374,  375,  377,  378,   70,  166,  223,  406,  508,  533,  617,  657,  706,  709,  710 }, // 376
  {   49,   61,  217,  306,  356,  372,  373,  374,  375,  376,  378,   11,   59,  224,  362,  470,  575,  610,  667,  697,  707,  716 }, // 377
  {   49,   61,  217,  306,  356,  372,  373,  374,  375,  376,  377,   23,   71,  225,  363,  472,  584,  618,  671,  699,  709,  717 }, // 378
  {   73,   85,  229,  314,  364,  380,  381,  382,  383,  384,  385,   27,   75,  274,  300,  317,  365,  418,  431,  473,  474,  475 }, // 379
  {   73,   85,  229,  314,  364,  379,  381,  382,  383,  384,  385,   39,   87,  275,  301,  318,  366,  425,  437,  473,  476,  477 }, // 380
  {   73,   85,  229,  314,  364,  379,  380,  382,  383,  384,  385,   76,   88,  253,  319,  509,  510,  511,  512,  513,  514,  515 }, // 381
  {   73,   85,  229,  314,  364,  379,  380,  381,  383,  384,  385,   82,  178,  234,  412,  514,  538,  625,  660,  711,  712,  713 }, // 382
  {   73,   85,  229,  314,  364,  379,  380,  381,  382,  384,  385,   94,  190,  235,  413,  515,  539,  633,  663,  711,  714,  715 }, // 383
  {   73,   85,  229,  314,  364,  379,  380,  381,  382,  383,  385,   35,   83,  236,  370,  475,  593,  626,  674,  702,  712,  718 }, // 384
  {   73,   85,  229,  314,  364,  379,  380,  381,  382,  383,  384,   47,   95,  237,  371,  477,  602,  634,  677,  704,  714,  719 }, // 385
  {   97,  109,  218,  323,  387,  388,  389,  390,  391,  392,  393,  145,  157,  219,  340,  402,  403,  404,  405,  406,  407,  408 }, // 386
  {   97,  109,  218,  323,  386,  388,  389,  390,  391,  392,  393,   99,  147,  284,  326,  343,  402,  443,  456,  478,  479,  480 }, // 387
  {   97,  109,  218,  323,  386,  387,  389,  390,  391,  392,  393,  111,  159,  285,  327,  344,  403,  450,  462,  478,  481,  482 }, // 388
  {   97,  109,  218,  323,  386,  387,  388,  390,  391,  392,  393,  100,  112,  242,  328,  488,  516,  517,  518,  519,  520,  521 }, // 389
  {   97,  109,  218,  323,  386,  387,  388,  389,  391,  392,  393,   10,  106,  220,  360,  493,  520,  574,  639,  696,  697,  698 }, // 390
  {   97,  109,  218,  323,  386,  387,  388,  389,  390,  392,  393,   22,  118,  221,  361,  494,  521,  583,  643,  696,  699,  700 }, // 391
  {   97,  109,  218,  323,  386,  387,  388,  389,  390,  391,  393,  107,  155,  226,  407,  480,  576,  611,  681,  698,  708,  716 }, // 392
  {   97,  109,  218,  323,  386,  387,  388,  389,  390,  391,  392,  119,  167,  227,  408,  482,  585,  619,  685,  700,  710,  717 }, // 393
  {  121,  133,  230,  331,  395,  396,  397,  398,  399,  400,  401,  169,  181,  231,  348,  409,  410,  411,  412,  413,  414,  415 }, // 394
  {  121,  133,  230,  331,  394,  396,  397,  398,  399,  400,  401,  123,  171,  286,  334,  351,  409,  444,  457,  483,  484,  485 }, // 395
  {  121,  133,  230,  331,  394,  395,  397,  398,  399,  400,  401,  135,  183,  287,  335,  352,  410,  451,  463,  483,  486,  487 }, // 396
  {  121,  133,  230,  331,  394,  395,  396,  398,  399,  400,  401,  124,  136,  243,  336,  495,  522,  523,  524,  525,  526,  527 }, // 397
  {  121,  133,  230,  331,  394,  395,  396,  397,  399,  400,  401,   34,  130,  232,  368,  500,  526,  592,  646,  701,  702,  703 }, // 398
  {  121,  133,  230,  331,  394,  395,  396,  397,  398,  400,  401,   46,  142,  233,  369,  501,  527,  601,  649,  701,  704,  705 }, // 399
  {  121,  133,  230,  331,  394,  395,  396,  397,  398,  399,  401,  131,  179,  238,  414,  485,  594,  627,  688,  703,  713,  718 }, // 400
  {  121,  133,  230,  331,  394,  395,  396,  397,  398,  399,  400,  143,  191,  239,  415,  487,  603,  635,  691,  705,  715,  719 }, // 401
  {  145,  157,  219,  340,  386,  403,  404,  405,  406,  407,  408,   99,  147,  284,  326,  343,  387,  443,  456,  478,  479,  480 }, // 402
  {  145,  157,  219,  340,  386,  402,  404,  405,  406,  407,  408,  111,  159,  285,  327,  344,  388,  450,  462,  478,  481,  482 }, // 403
  {  145,  157,  219,  340,  386,  402,  403,  405,  406,  407,  408,  148,  160,  254,  345,  502,  528,  529,  530,  531,  532,  533 }, // 404
  {  145,  157,  219,  340,  386,  402,  403,  404,  406,  407,  408,   58,  154,  222,  375,  507,  532,  609,  653,  706,  707,  708 }, // 405
  {  145,  157,  219,  340,  386,  402,  403,  404,  405,  407,  408,   70,  166,  223,  376,  508,  533,  617,  657,  706,  709,  710 }, // 406
  {  145,  157,  219,  340,  386,  402,  403,  404,  405,  406,  408,  107,  155,  226,  392,  480,  576,  611,  681,  698,  708,  716 }, // 407
  {  145,  157,  219,  340,  386,  402,  403,  404,  405,  406,  407,  119,  167,  227,  393,  482,  585,  619,  685,  700,  710,  717 }, // 408
  {  169,  181,  231,  348,  394,  410,  411,  412,  413,  414,  415,  123,  171,  286,  334,  351,  395,  444,  457,  483,  484,  485 }, // 409
  {  169,  181,  231,  348,  394,  409,  411,  412,  413,  414,  415,  135,  183,  287,  335,  352,  396,  451,  463,  483,  486,  487 }, // 410
  {  169,  181,  231,  348,  394,  409,  410,  412,  413,  414,  415,  172,  184,  255,  353,  509,  534,  535,  536,  537,  538,  539 }, // 411
  {  169,  181,  231,  348,  394,  409,  410,  411,  413,  414,  415,   82,  178,  234,  382,  514,  538,  625,  660,  711,  712,  713 }, // 412
  {  169,  181,  231,  348,  394,  409,  410,  411,  412,  414,  415,   94,  190,  235,  383,  515,  539,  633,  663,  711,  714,  715 }, // 413
  {  169,  181,  231,  348,  394,  409,  410,  411,  412,  413,  415,  131,  179,  238,  400,  485,  594,  627,  688,  703,  713,  718 }, // 414
  {  169,  181,  231,  348,  394,  409,  410,  411,  412,  413,  414,  143,  191,  239,  401,  487,  603,  635,  691,  705,  715,  719 }, // 415
  {    2,   26,  268,  290,  298,  417,  418,  419,  420,  421,  422,   50,   74,  270,  307,  315,  430,  431,  432,  433,  434,  435 }, // 416
  {    2,   26,  268,  290,  298,  416,  418,  419,  420,  421,  422,    3,   51,  272,  292,  309,  357,  372,  430,  468,  469,  470 }, // 417
  {    2,   26,  268,  290,  298,  416,  417,  419,  420,  421,  422,   27,   75,  274,  300,  317,  365,  379,  431,  473,  474,  475 }, // 418
  {    2,   26,  268,  290,  298,  416,  417,  418,  420,  421,  422,    5,   29,  244,  295,  303,  489,  496,  540,  541,  542,  543 }, // 419
  {    2,   26,  268,  290,  298,  416,  417,  418,  419,  421,  422,    8,   56,  196,  433,  469,  570,  605,  664,  665,  666,  667 }, // 420
  {    2,   26,  268,  290,  298,  416,  417,  418,  419,  420,  422,   32,   80,  197,  434,  474,  588,  621,  664,  672,  673,  674 }, // 421
  {    2,   26,  268,  290,  298,  416,  417,  418,  419,  420,  421,    9,   33,  200,  543,  572,  590,  637,  644,  665,  672,  692 }, // 422
  {   14,   38,  269,  291,  299,  424,  425,  426,  427,  428,  429,   62,   86,  271,  308,  316,  436,  437,  438,  439,  440,  441 }, // 423
  {   14,   38,  269,  291,  299,  423,  425,  426,  427,  428,  429,   15,   63,  273,  293,  310,  358,  373,  436,  468,  471,  472 }, // 424
  {   14,   38,  269,  291,  299,  423,  424,  426,  427,  428,  429,   39,   87,  275,  301,  318,  366,  380,  437,  473,  476,  477 }, // 425
  {   14,   38,  269,  291,  299,  423,  424,  425,  427,  428,  429,   17,   41,  245,  296,  304,  490,  497,  540,  544,  545,  546 }, // 426
  {   14,   38,  269,  291,  299,  423,  424,  425,  426,  428,  429,   20,   68,  208,  439,  471,  579,  613,  668,  669,  670,  671 }, // 427
  {   14,   38,  269,  291,  299,  423,  424,  425,  426,  427,  429,   44,   92,  209,  440,  476,  597,  629,  668,  675,  676,  677 }, // 428
  {   14,   38,  269,  291,  299,  423,  424,  425,  426,  427,  428,   21,   45,  212,  546,  581,  599,  641,  647,  669,  675,  693 }, // 429
  {   50,   74,  270,  307,  315,  416,  431,  432,  433,  434,  435,    3,   51,  272,  292,  309,  357,  372,  417,  468,  469,  470 }, // 430
  {   50,   74,  270,  307,  315,  416,  430,  432,  433,  434,  435,   27,   75,  274,  300,  317,  365,  379,  418,  473,  474,  475 }, // 431
  {   50,   74,  270,  307,  315,  416,  430,  431,  433,  434,  435,   53,   77,  256,  312,  320,  503,  510,  547,  548,  549,  550 }, // 432
  {   50,   74,  270,  307,  315,  416,  430,  431,  432,  434,  435,    8,   56,  196,  420,  469,  570,  605,  664,  665,  666,  667 }, // 433
  {   50,   74,  270,  307,  315,  416,  430,  431,  432,  433,  435,   32,   80,  197,  421,  474,  588,  621,  664,  672,  673,  674 }, // 434
  {   50,   74,  270,  307,  315,  416,  430,  431,  432,  433,  434,   57,   81,  201,  550,  607,  623,  651,  658,  666,  673,  694 }, // 435
  {   62,   86,  271,  308,  316,  423,  437,  438,  439,  440,  441,   15,   63,  273,  293,  310,  358,  373,  424,  468,  471,  472 }, // 436
  {   62,   86,  271,  308,  316,  423,  436,  438,  439,  440,  441,   39,   87,  275,  301,  318,  366,  380,  425,  473,  476,  477 }, // 437
  {   62,   86,  271,  308,  316,  423,  436,  437,  439,  440,  441,   65,   89,  257,  313,  321,  504,  511,  547,  551,  552,  553 }, // 438
  {   62,   86,  271,  308,  316,  423,  436,  437,  438,  440,  441,   20,   68,  208,  427,  471,  579,  613,  668,  669,  670,  671 }, // 439
  {   62,   86,  271,  308,  316,  423,  436,  437,  438,  439,  441,   44,   92,  209,  428,  476,  597,  629,  668,  675,  676,  677 }, // 440
  {   62,   86,  271,  308,  316,  423,  436,  437,  438,  439,  440,   69,   93,  213,  553,  615,  631,  655,  661,  670,  676,  695 }, // 441
  {   98,  122,  280,  324,  332,  443,  444,  445,  446,  447,  448,  146,  170,  282,  341,  349,  456,  457,  458,  459,  460,  461 }, // 442
  {   98,  122,  280,  324,  332,  442,  444,  445,  446,  447,  448,   99,  147,  284,  326,  343,  387,  402,  456,  478,  479,  480 }, // 443
  {   98,  122,  280,  324,  332,  442,  443,  445,  446,  447,  448,  123,  171,  286,  334,  351,  395,  409,  457,  483,  484,  485 }, // 444
  {   98,  122,  280,  324,  332,  442,  443,  444,  446,  447,  448,  101,  125,  246,  329,  337,  516,  522,  554,  555,  556,  557 }, // 445
  {   98,  122,  280,  324,  332,  442,  443,  444,  445,  447,  448,  104,  152,  198,  459,  479,  571,  606,  678,  679,  680,  681 }, // 446
  {   98,  122,  280,  324,  332,  442,  443,  444,  445,  446,  448,  128,  176,  199,  460,  484,  589,  622,  678,  686,  687,  688 }, // 447
  {   98,  122,  280,  324,  332,  442,  443,  444,  445,  446,  447,  105,  129,  202,  557,  573,  591,  638,  645,  679,  686,  692 }, // 448
  {  110,  134,  281,  325,  333,  450,  451,  452,  453,  454,  455,  158,  182,  283,  342,  350,  462,  463,  464,  465,  466,  467 }, // 449
  {  110,  134,  281,  325,  333,  449,  451,  452,  453,  454,  455,  111,  159,  285,  327,  344,  388,  403,  462,  478,  481,  482 }, // 450
  {  110,  134,  281,  325,  333,  449,  450,  452,  453,  454,  455,  135,  183,  287,  335,  352,  396,  410,  463,  483,  486,  487 }, // 451
  {  110,  134,  281,  325,  333,  449,  450,  451,  453,  454,  455,  113,  137,  247,  330,  338,  517,  523,  554,  558,  559,  560 }, // 452
  {  110,  134,  281,  325,  333,  449,  450,  451,  452,  454,  455,  116,  164,  210,  465,  481,  580,  614,  682,  683,  684,  685 }, // 453
  {  110,  134,  281,  325,  333,  449,  450,  451,  452,  453,  455,  140,  188,  211,  466,  486,  598,  630,  682,  689,  690,  691 }, // 454
  {  110,  134,  281,  325,  333,  449,  450,  451,  452,  453,  454,  117,  141,  214,  560,  582,  600,  642,  648,  683,  689,  693 }, // 455
  {  146,  170,  282,  341,  349,  442,  457,  458,  459,  460,  461,   99,  147,  284,  326,  343,  387,  402,  443,  478,  479,  480 }, // 456
  {  146,  170,  282,  341,  349,  442,  456,  458,  459,  460,  461,  123,  171,  286,  334,  351,  395,  409,  444,  483,  484,  485 }, // 457
  {  146,  170,  282,  341,  349,  442,  456,  457,  459,  460,  461,  149,  173,  258,  346,  354,  528,  534,  561,  562,  563,  564 }, // 458
  {  146,  170,  282,  341,  349,  442,  456,  457,  458,  460,  461,  104,  152,  198,  446,  479,  571,  606,  678,  679,  680,  681 }, // 459
  {  146,  170,  282,  341,  349,  442,  456,  457,  458,  459,  461,  128,  176,  199,  447,  484,  589,  622,  678,  686,  687,  688 }, // 460
  {  146,  170,  282,  341,  349,  442,  456,  457,  458,  459,  460,  153,  177,  203,  564,  608,  624,  652,  659,  680,  687,  694 }, // 461
  {  158,  182,  283,  342,  350,  449,  463,  464,  465,  466,  467,  111,  159,  285,  327,  344,  388,  403,  450,  478,  481,  482 }, // 462
  {  158,  182,  283,  342,  350,  449,  462,  464,  465,  466,  467,  135,  183,  287,  335,  352,  396,  410,  451,  483,  486,  487 }, // 463
  {  158,  182,  283,  342,  350,  449,  462,  463,  465,  466,  467,  161,  185,  259,  347,  355,  529,  535,  561,  565,  566,  567 }, // 464
  {  158,  182,  283,  342,  350,  449,  462,  463,  464,  466,  467,  116,  164,  210,  453,  481,  580,  614,  682,  683,  684,  685 }, // 465
  {  158,  182,  283,  342,  350,  449,  462,  463,  464,  465,  467,  140,  188,  211,  454,  486,  598,  630,  682,  689,  690,  691 }, // 466
  {  158,  182,  283,  342,  350,  449,  462,  463,  464,  465,  466,  165,  189,  215,  567,  616,  632,  656,  662,  684,  690,  695 }, // 467
  {    3,   51,  272,  292,  309,  357,  372,  417,  430,  469,  470,   15,   63,  273,  293,  310,  358,  373,  424,  436,  471,  472 }, // 468
  {    3,   51,  272,  292,  309,  357,  372,  417,  430,  468,  470,    8,   56,  196,  420,  433,  570,  605,  664,  665,  666,  667 }, // 469
  {    3,   51,  272,  292,  309,  357,  372,  417,  430,  468,  469,   11,   59,  224,  362,  377,  575,  610,  667,  697,  707,  716 }, // 470
  {   15,   63,  273,  293,  310,  358,  373,  424,  436,  468,  472,   20,   68,  208,  427,  439,  579,  613,  668,  669,  670,  671 }, // 471
  {   15,   63,  273,  293,  310,  358,  373,  424,  436,  468,  471,   23,   71,  225,  363,  378,  584,  618,  671,  699,  709,  717 }, // 472
  {   27,   75,  274,  300,  317,  365,  379,  418,  431,  474,  475,   39,   87,  275,  301,  318,  366,  380,  425,  437,  476,  477 }, // 473
  {   27,   75,  274,  300,  317,  365,  379,  418,  431,  473,  475,   32,   80,  197,  421,  434,  588,  621,  664,  672,  673,  674 }, // 474
  {   27,   75,  274,  300,  317,  365,  379,  418,  431,  473,  474,   35,   83,  236,  370,  384,  593,  626,  674,  702,  712,  718 }, // 475
  {   39,   87,  275,  301,  318,  366,  380,  425,  437,  473,  477,   44,   92,  209,  428,  440,  597,  629,  668,  675,  676,  677 }, // 476
  {   39,   87,  275,  301,  318,  366,  380,  425,  437,  473,  476,   47,   95,  237,  371,  385,  602,  634,  677,  704,  714,  719 }, // 477
  {   99,  147,  284,  326,  343,  387,  402,  443,  456,  479,  480,  111,  159,  285,  327,  344,  388,  403,  450,  462,  481,  482 }, // 478
  {   99,  147,  284,  326,  343,  387,  402,  443,  456,  478,  480,  104,  152,  198,  446,  459,  571,  606,  678,  679,  680,  681 }, // 479
  {   99,  147,  284,  326,  343,  387,  402,  443,  456,  478,  479,  107,  155,  226,  392,  407,  576,  611,  681,  698,  708,  716 }, // 480
  {  111,  159,  285,  327,  344,  388,  403,  450,  462,  478,  482,  116,  164,  210,  453,  465,  580,  614,  682,  683,  684,  685 }, // 481
  {  111,  159,  285,  327,  344,  388,  403,  450,  462,  478,  481,  119,  167,  227,  393,  408,  585,  619,  685,  700,  710,  717 }, // 482
  {  123,  171,  286,  334,  351,  395,  409,  444,  457,  484,  485,  135,  183,  287,  335,  352,  396,  410,  451,  463,  486,  487 }, // 483
  {  123,  171,  286,  334,  351,  395,  409,  444,  457,  483,  485,  128,  176,  199,  447,  460,  589,  622,  678,  686,  687,  688 }, // 484
  {  123,  171,  286,  334,  351,  395,  409,  444,  457,  483,  484,  131,  179,  238,  400,  414,  594,  627,  688,  703,  713,  718 }, // 485
  {  135,  183,  287,  335,  352,  396,  410,  451,  463,  483,  487,  140,  188,  211,  454,  466,  598,  630,  682,  689,  690,  691 }, // 486
  {  135,  183,  287,  335,  352,  396,  410,  451,  463,  483,  486,  143,  191,  239,  401,  415,  603,  635,  691,  705,  715,  719 }, // 487
  {    4,   16,  240,  294,  359,  489,  490,  491,  492,  493,  494,  100,  112,  242,  328,  389,  516,  517,  518,  519,  520,  521 }, // 488
  {    4,   16,  240,  294,  359,  488,  490,  491,  492,  493,  494,    5,   29,  244,  295,  303,  419,  496,  540,  541,  542,  543 }, // 489
  {    4,   16,  240,  294,  359,  488,  489,  491,  492,  493,  494,   17,   41,  245,  296,  304,  426,  497,  540,  544,  545,  546 }, // 490
  {    4,   16,  240,  294,  359,  488,  489,  490,  492,  493,  494,    7,  103,  248,  518,  541,  555,  569,  636,  637,  638,  639 }, // 491
  {    4,   16,  240,  294,  359,  488,  489,  490,  491,  493,  494,   19,  115,  249,  519,  544,  558,  578,  640,  641,  642,  643 }, // 492
  {    4,   16,  240,  294,  359,  488,  489,  490,  491,  492,  494,   10,  106,  220,  360,  390,  520,  574,  639,  696,  697,  698 }, // 493
  {    4,   16,  240,  294,  359,  488,  489,  490,  491,  492,  493,   22,  118,  221,  361,  391,  521,  583,  643,  696,  699,  700 }, // 494
  {   28,   40,  241,  302,  367,  496,  497,  498,  499,  500,  501,  124,  136,  243,  336,  397,  522,  523,  524,  525,  526,  527 }, // 495
  {   28,   40,  241,  302,  367,  495,  497,  498,  499,  500,  501,    5,   29,  244,  295,  303,  419,  489,  540,  541,  542,  543 }, // 496
  {   28,   40,  241,  302,  367,  495,  496,  498,  499,  500,  501,   17,   41,  245,  296,  304,  426,  490,  540,  544,  545,  546 }, // 497
  {   28,   40,  241,  302,  367,  495,  496,  497,  499,  500,  501,   31,  127,  250,  524,  542,  556,  587,  636,  644,  645,  646 }, // 498
  {   28,   40,  241,  302,  367,  495,  496,  497,  498,  500,  501,   43,  139,  251,  525,  545,  559,  596,  640,  647,  648,  649 }, // 499
  {   28,   40,  241,  302,  367,  495,  496,  497,  498,  499,  501,   34,  130,  232,  368,  398,  526,  592,  646,  701,  702,  703 }, // 500
  {   28,   40,  241,  302,  367,  495,  496,  497,  498,  499,  500,   46,  142,  233,  369,  399,  527,  601,  649,  701,  704,  705 }, // 501
  {   52,   64,  252,  311,  374,  503,  504,  505,  506,  507,  508,  148,  160,  254,  345,  404,  528,  529,  530,  531,  532,  533 }, // 502
  {   52,   64,  252,  311,  374,  502,  504,  505,  506,  507,  508,   53,   77,  256,  312,  320,  432,  510,  547,  548,  549,  550 }, // 503
  {   52,   64,  252,  311,  374,  502,  503,  505,  506,  507,  508,   65,   89,  257,  313,  321,  438,  511,  547,  551,  552,  553 }, // 504
  {   52,   64,  252,  311,  374,  502,  503,  504,  506,  507,  508,   55,  151,  260,  530,  548,  562,  604,  650,  651,  652,  653 }, // 505
  {   52,   64,  252,  311,  374,  502,  503,  504,  505,  507,  508,   67,  163,  261,  531,  551,  565,  612,  654,  655,  656,  657 }, // 506
  {   52,   64,  252,  311,  374,  502,  503,  504,  505,  506,  508,   58,  154,  222,  375,  405,  532,  609,  653,  706,  707,  708 }, // 507
  {   52,   64,  252,  311,  374,  502,  503,  504,  505,  506,  507,   70,  166,  223,  376,  406,  533,  617,  657,  706,  709,  710 }, // 508
  {   76,   88,  253,  319,  381,  510,  511,  512,  513,  514,  515,  172,  184,  255,  353,  411,  534,  535,  536,  537,  538,  539 }, // 509
  {   76,   88,  253,  319,  381,  509,  511,  512,  513,  514,  515,   53,   77,  256,  312,  320,  432,  503,  547,  548,  549,  550 }, // 510
  {   76,   88,  253,  319,  381,  509,  510,  512,  513,  514,  515,   65,   89,  257,  313,  321,  438,  504,  547,  551,  552,  553 }, // 511
  {   76,   88,  253,  319,  381,  509,  510,  511,  513,  514,  515,   79,  175,  262,  536,  549,  563,  620,  650,  658,  659,  660 }, // 512
  {   76,   88,  253,  319,  381,  509,  510,  511,  512,  514,  515,   91,  187,  263,  537,  552,  566,  628,  654,  661,  662,  663 }, // 513
  {   76,   88,  253,  319,  381,  509,  510,  511,  512,  513,  515,   82,  178,  234,  382,  412,  538,  625,  660,  711,  712,  713 }, // 514
  {   76,   88,  253,  319,  381,  509,  510,  511,  512,  513,  514,   94,  190,  235,  383,  413,  539,  633,  663,  711,  714,  715 }, // 515
  {  100,  112,  242,  328,  389,  488,  517,  518,  519,  520,  521,  101,  125,  246,  329,  337,  445,  522,  554,  555,  556,  557 }, // 516
  {  100,  112,  242,  328,  389,  488,  516,  518,  519,  520,  521,  113,  137,  247,  330,  338,  452,  523,  554,  558,  559,  560 }, // 517
  {  100,  112,  242,  328,  389,  488,  516,  517,  519,  520,  521,    7,  103,  248,  491,  541,  555,  569,  636,  637,  638,  639 }, // 518
  {  100,  112,  242,  328,  389,  488,  516,  517,  518,  520,  521,   19,  115,  249,  492,  544,  558,  578,  640,  641,  642,  643 }, // 519
  {  100,  112,  242,  328,  389,  488,  516,  517,  518,  519,  521,   10,  106,  220,  360,  390,  493,  574,  639,  696,  697,  698 }, // 520
  {  100,  112,  242,  328,  389,  488,  516,  517,  518,  519,  520,   22,  118,  221,  361,  391,  494,  583,  643,  696,  699,  700 }, // 521
  {  124,  136,  243,  336,  397,  495,  523,  524,  525,  526,  527,  101,  125,  246,  329,  337,  445,  516,  554,  555,  556,  557 }, // 522
  {  124,  136,  243,  336,  397,  495,  522,  524,  525,  526,  527,  113,  137,  247,  330,  338,  452,  517,  554,  558,  559,  560 }, // 523
  {  124,  136,  243,  336,  397,  495,  522,  523,  525,  526,  527,   31,  127,  250,  498,  542,  556,  587,  636,  644,  645,  646 }, // 524
  {  124,  136,  243,  336,  397,  495,  522,  523,  524,  526,  527,   43,  139,  251,  499,  545,  559,  596,  640,  647,  648,  649 }, // 525
  {  124,  136,  243,  336,  397,  495,  522,  523,  524,  525,  527,   34,  130,  232,  368,  398,  500,  592,  646,  701,  702,  703 }, // 526
  {  124,  136,  243,  336,  397,  495,  522,  523,  524,  525,  526,   46,  142,  233,  369,  399,  501,  601,  649,  701,  704,  705 }, // 527
  {  148,  160,  254,  345,  404,  502,  529,  530,  531,  532,  533,  149,  173,  258,  346,  354,  458,  534,  561,  562,  563,  564 }, // 528
  {  148,  160,  254,  345,  404,  502,  528,  530,  531,  532,  533,  161,  185,  259,  347,  355,  464,  535,  561,  565,  566,  567 }, // 529
  {  148,  160,  254,  345,  404,  502,  528,  529,  531,  532,  533,   55,  151,  260,  505,  548,  562,  604,  650,  651,  652,  653 }, // 530
  {  148,  160,  254,  345,  404,  502,  528,  529,  530,  532,  533,   67,  163,  261,  506,  551,  565,  612,  654,  655,  656,  657 }, // 531
  {  148,  160,  254,  345,  404,  502,  528,  529,  530,  531,  533,   58,  154,  222,  375,  405,  507,  609,  653,  706,  707,  708 }, // 532
  {  148,  160,  254,  345,  404,  502,  528,  529,  530,  531,  532,   70,  166,  223,  376,  406,  508,  617,  657,  706,  709,  710 }, // 533
  {  172,  184,  255,  353,  411,  509,  535,  536,  537,  538,  539,  149,  173,  258,  346,  354,  458,  528,  561,  562,  563,  564 }, // 534
  {  172,  184,  255,  353,  411,  509,  534,  536,  537,  538,  539,  161,  185,  259,  347,  355,  464,  529,  561,  565,  566,  567 }, // 535
  {  172,  184,  255,  353,  411,  509,  534,  535,  537,  538,  539,   79,  175,  262,  512,  549,  563,  620,  650,  658,  659,  660 }, // 536
  {  172,  184,  255,  353,  411,  509,  534,  535,  536,  538,  539,   91,  187,  263,  513,  552,  566,  628,  654,  661,  662,  663 }, // 537
  {  172,  184,  255,  353,  411,  509,  534,  535,  536,  537,  539,   82,  178,  234,  382,  412,  514,  625,  660,  711,  712,  713 }, // 538
  {  172,  184,  255,  353,  411,  509,  534,  535,  536,  537,  538,   94,  190,  235,  383,  413,  515,  633,  663,  711,  714,  715 }, // 539
  {    5,   29,  244,  295,  303,  419,  489,  496,  541,  542,  543,   17,   41,  245,  296,  304,  426,  490,  497,  544,  545,  546 }, // 540
  {    5,   29,  244,  295,  303,  419,  489,  496,  540,  542,  543,    7,  103,  248,  491,  518,  555,  569,  636,  637,  638,  639 }, // 541
  {    5,   29,  244,  295,  303,  419,  489,  496,  540,  541,  543,   31,  127,  250,  498,  524,  556,  587,  636,  644,  645,  646 }, // 542
  {    5,   29,  244,  295,  303,  419,  489,  496,  540,  541,  542,    9,   33,  200,  422,  572,  590,  637,  644,  665,  672,  692 }, // 543
  {   17,   41,  245,  296,  304,  426,  490,  497,  540,  545,  546,   19,  115,  249,  492,  519,  558,  578,  640,  641,  642,  643 }, // 544
  {   17,   41,  245,  296,  304,  426,  490,  497,  540,  544,  546,   43,  139,  251,  499,  525,  559,  596,  640,  647,  648,  649 }, // 545
  {   17,   41,  245,  296,  304,  426,  490,  497,  540,  544,  545,   21,   45,  212,  429,  581,  599,  641,  647,  669,  675,  693 }, // 546
  {   53,   77,  256,  312,  320,  432,  503,  510,  548,  549,  550,   65,   89,  257,  313,  321,  438,  504,  511,  551,  552,  553 }, // 547
  {   53,   77,  256,  312,  320,  432,  503,  510,  547,  549,  550,   55,  151,  260,  505,  530,  562,  604,  650,  651,  652,  653 }, // 548
  {   53,   77,  256,  312,  320,  432,  503,  510,  547,  548,  550,   79,  175,  262,  512,  536,  563,  620,  650,  658,  659,  660 }, // 549
  {   53,   77,  256,  312,  320,  432,  503,  510,  547,  548,  549,   57,   81,  201,  435,  607,  623,  651,  658,  666,  673,  694 }, // 550
  {   65,   89,  257,  313,  321,  438,  504,  511,  547,  552,  553,   67,  163,  261,  506,  531,  565,  612,  654,  655,  656,  657 }, // 551
  {   65,   89,  257,  313,  321,  438,  504,  511,  547,  551,  553,   91,  187,  263,  513,  537,  566,  628,  654,  661,  662,  663 }, // 552
  {   65,   89,  257,  313,  321,  438,  504,  511,  547,  551,  552,   69,   93,  213,  441,  615,  631,  655,  661,  670,  676,  695 }, // 553
  {  101,  125,  246,  329,  337,  445,  516,  522,  555,  556,  557,  113,  137,  247,  330,  338,  452,  517,  523,  558,  559,  560 }, // 554
  {  101,  125,  246,  329,  337,  445,  516,  522,  554,  556,  557,    7,  103,  248,  491,  518,  541,  569,  636,  637,  638,  639 }, // 555
  {  101,  125,  246,  329,  337,  445,  516,  522,  554,  555,  557,   31,  127,  250,  498,  524,  542,  587,  636,  644,  645,  646 }, // 556
  {  101,  125,  246,  329,  337,  445,  516,  522,  554,  555,  556,  105,  129,  202,  448,  573,  591,  638,  645,  679,  686,  692 }, // 557
  {  113,  137,  247,  330,  338,  452,  517,  523,  554,  559,  560,   19,  115,  249,  492,  519,  544,  578,  640,  641,  642,  643 }, // 558
  {  113,  137,  247,  330,  338,  452,  517,  523,  554,  558,  560,   43,  139,  251,  499,  525,  545,  596,  640,  647,  648,  649 }, // 559
  {  113,  137,  247,  330,  338,  452,  517,  523,  554,  558,  559,  117,  141,  214,  455,  582,  600,  642,  648,  683,  689,  693 }, // 560
  {  149,  173,  258,  346,  354,  458,  528,  534,  562,  563,  564,  161,  185,  259,  347,  355,  464,  529,  535,  565,  566,  567 }, // 561
  {  149,  173,  258,  346,  354,  458,  528,  534,  561,  563,  564,   55,  151,  260,  505,  530,  548,  604,  650,  651,  652,  653 }, // 562
  {  149,  173,  258,  346,  354,  458,  528,  534,  561,  562,  564,   79,  175,  262,  512,  536,  549,  620,  650,  658,  659,  660 }, // 563
  {  149,  173,  258,  346,  354,  458,  528,  534,  561,  562,  563,  153,  177,  203,  461,  608,  624,  652,  659,  680,  687,  694 }, // 564
  {  161,  185,  259,  347,  355,  464,  529,  535,  561,  566,  567,   67,  163,  261,  506,  531,  551,  612,  654,  655,  656,  657 }, // 565
  {  161,  185,  259,  347,  355,  464,  529,  535,  561,  565,  567,   91,  187,  263,  513,  537,  552,  628,  654,  661,  662,  663 }, // 566
  {  161,  185,  259,  347,  355,  464,  529,  535,  561,  565,  566,  165,  189,  215,  467,  616,  632,  656,  662,  684,  690,  695 }, // 567
  {    6,  102,  192,  569,  570,  571,  572,  573,  574,  575,  576,   54,  150,  194,  604,  605,  606,  607,  608,  609,  610,  611 }, // 568
  {    6,  102,  192,  568,  570,  571,  572,  573,  574,  575,  576,    7,  103,  248,  491,  518,  541,  555,  636,  637,  638,  639 }, // 569
  {    6,  102,  192,  568,  569,  571,  572,  573,  574,  575,  576,    8,   56,  196,  420,  433,  469,  605,  664,  665,  666,  667 }, // 570
  {    6,  102,  192,  568,  569,  570,  572,  573,  574,  575,  576,  104,  152,  198,  446,  459,  479,  606,  678,  679,  680,  681 }, // 571
  {    6,  102,  192,  568,  569,  570,  571,  573,  574,  575,  576,    9,   33,  200,  422,  543,  590,  637,  644,  665,  672,  692 }, // 572
  {    6,  102,  192,  568,  569,  570,  571,  572,  574,  575,  576,  105,  129,  202,  448,  557,  591,  638,  645,  679,  686,  692 }, // 573
  {    6,  102,  192,  568,  569,  570,  571,  572,  573,  575,  576,   10,  106,  220,  360,  390,  493,  520,  639,  696,  697,  698 }, // 574
  {    6,  102,  192,  568,  569,  570,  571,  572,  573,  574,  576,   11,   59,  224,  362,  377,  470,  610,  667,  697,  707,  716 }, // 575
  {    6,  102,  192,  568,  569,  570,  571,  572,  573,  574,  575,  107,  155,  226,  392,  407,  480,  611,  681,  698,  708,  716 }, // 576
  {   18,  114,  204,  578,  579,  580,  581,  582,  583,  584,  585,   66,  162,  206,  612,  613,  614,  615,  616,  617,  618,  619 }, // 577
  {   18,  114,  204,  577,  579,  580,  581,  582,  583,  584,  585,   19,  115,  249,  492,  519,  544,  558,  640,  641,  642,  643 }, // 578
  {   18,  114,  204,  577,  578,  580,  581,  582,  583,  584,  585,   20,   68,  208,  427,  439,  471,  613,  668,  669,  670,  671 }, // 579
  {   18,  114,  204,  577,  578,  579,  581,  582,  583,  584,  585,  116,  164,  210,  453,  465,  481,  614,  682,  683,  684,  685 }, // 580
  {   18,  114,  204,  577,  578,  579,  580,  582,  583,  584,  585,   21,   45,  212,  429,  546,  599,  641,  647,  669,  675,  693 }, // 581
  {   18,  114,  204,  577,  578,  579,  580,  581,  583,  584,  585,  117,  141,  214,  455,  560,  600,  642,  648,  683,  689,  693 }, // 582
  {   18,  114,  204,  577,  578,  579,  580,  581,  582,  584,  585,   22,  118,  221,  361,  391,  494,  521,  643,  696,  699,  700 }, // 583
  {   18,  114,  204,  577,  578,  579,  580,  581,  582,  583,  585,   23,   71,  225,  363,  378,  472,  618,  671,  699,  709,  717 }, // 584
  {   18,  114,  204,  577,  578,  579,  580,  581,  582,  583,  584,  119,  167,  227,  393,  408,  482,  619,  685,  700,  710,  717 }, // 585
  {   30,  126,  193,  587,  588,  589,  590,  591,  592,  593,  594,   78,  174,  195,  620,  621,  622,  623,  624,  625,  626,  627 }, // 586
  {   30,  126,  193,  586,  588,  589,  590,  591,  592,  593,  594,   31,  127,  250,  498,  524,  542,  556,  636,  644,  645,  646 }, // 587
  {   30,  126,  193,  586,  587,  589,  590,  591,  592,  593,  594,   32,   80,  197,  421,  434,  474,  621,  664,  672,  673,  674 }, // 588
  {   30,  126,  193,  586,  587,  588,  590,  591,  592,  593,  594,  128,  176,  199,  447,  460,  484,  622,  678,  686,  687,  688 }, // 589
  {   30,  126,  193,  586,  587,  588,  589,  591,  592,  593,  594,    9,   33,  200,  422,  543,  572,  637,  644,  665,  672,  692 }, // 590
  {   30,  126,  193,  586,  587,  588,  589,  590,  592,  593,  594,  105,  129,  202,  448,  557,  573,  638,  645,  679,  686,  692 }, // 591
  {   30,  126,  193,  586,  587,  588,  589,  590,  591,  593,  594,   34,  130,  232,  368,  398,  500,  526,  646,  701,  702,  703 }, // 592
  {   30,  126,  193,  586,  587,  588,  589,  590,  591,  592,  594,   35,   83,  236,  370,  384,  475,  626,  674,  702,  712,  718 }, // 593
  {   30,  126,  193,  586,  587,  588,  589,  590,  591,  592,  593,  131,  179,  238,  400,  414,  485,  627,  688,  703,  713,  718 }, // 594
  {   42,  138,  205,  596,  597,  598,  599,  600,  601,  602,  603,   90,  186,  207,  628,  629,  630,  631,  632,  633,  634,  635 }, // 595
  {   42,  138,  205,  595,  597,  598,  599,  600,  601,  602,  603,   43,  139,  251,  499,  525,  545,  559,  640,  647,  648,  649 }, // 596
  {   42,  138,  205,  595,  596,  598,  599,  600,  601,  602,  603,   44,   92,  209,  428,  440,  476,  629,  668,  675,  676,  677 }, // 597
  {   42,  138,  205,  595,  596,  597,  599,  600,  601,  602,  603,  140,  188,  211,  454,  466,  486,  630,  682,  689,  690,  691 }, // 598
  {   42,  138,  205,  595,  596,  597,  598,  600,  601,  602,  603,   21,   45,  212,  429,  546,  581,  641,  647,  669,  675,  693 }, // 599
  {   42,  138,  205,  595,  596,  597,  598,  599,  601,  602,  603,  117,  141,  214,  455,  560,  582,  642,  648,  683,  689,  693 }, // 600
  {   42,  138,  205,  595,  596,  597,  598,  599,  600,  602,  603,   46,  142,  233,  369,  399,  501,  527,  649,  701,  704,  705 }, // 601
  {   42,  138,  205,  595,  596,  597,  598,  599,  600,  601,  603,   47,   95,  237,  371,  385,  477,  634,  677,  704,  714,  719 }, // 602
  {   42,  138,  205,  595,  596,  597,  598,  599,  600,  601,  602,  143,  191,  239,  401,  415,  487,  635,  691,  705,  715,  719 }, // 603
  {   54,  150,  194,  568,  605,  606,  607,  608,  609,  610,  611,   55,  151,  260,  505,  530,  548,  562,  650,  651,  652,  653 }, // 604
  {   54,  150,  194,  568,  604,  606,  607,  608,  609,  610,  611,    8,   56,  196,  420,  433,  469,  570,  664,  665,  666,  667 }, // 605
  {   54,  150,  194,  568,  604,  605,  607,  608,  609,  610,  611,  104,  152,  198,  446,  459,  479,  571,  678,  679,  680,  681 }, // 606
  {   54,  150,  194,  568,  604,  605,  606,  608,  609,  610,  611,   57,   81,  201,  435,  550,  623,  651,  658,  666,  673,  694 }, // 607
  {   54,  150,  194,  568,  604,  605,  606,  607,  609,  610,  611,  153,  177,  203,  461,  564,  624,  652,  659,  680,  687,  694 }, // 608
  {   54,  150,  194,  568,  604,  605,  606,  607,  608,  610,  611,   58,  154,  222,  375,  405,  507,  532,  653,  706,  707,  708 }, // 609
  {   54,  150,  194,  568,  604,  605,  606,  607,  608,  609,  611,   11,   59,  224,  362,  377,  470,  575,  667,  697,  707,  716 }, // 610
  {   54,  150,  194,  568,  604,  605,  606,  607,  608,  609,  610,  107,  155,  226,  392,  407,  480,  576,  681,  698,  708,  716 }, // 611
  {   66,  162,  206,  577,  613,  614,  615,  616,  617,  618,  619,   67,  163,  261,  506,  531,  551,  565,  654,  655,  656,  657 }, // 612
  {   66,  162,  206,  577,  612,  614,  615,  616,  617,  618,  619,   20,   68,  208,  427,  439,  471,  579,  668,  669,  670,  671 }, // 613
  {   66,  162,  206,  577,  612,  613,  615,  616,  617,  618,  619,  116,  164,  210,  453,  465,  481,  580,  682,  683,  684,  685 }, // 614
  {   66,  162,  206,  577,  612,  613,  614,  616,  617,  618,  619,   69,   93,  213,  441,  553,  631,  655,  661,  670,  676,  695 }, // 615
  {   66,  162,  206,  577,  612,  613,  614,  615,  617,  618,  619,  165,  189,  215,  467,  567,  632,  656,  662,  684,  690,  695 }, // 616
  {   66,  162,  206,  577,  612,  613,  614,  615,  616,  618,  619,   70,  166,  223,  376,  406,  508,  533,  657,  706,  709,  710 }, // 617
  {   66,  162,  206,  577,  612,  613,  614,  615,  616,  617,  619,   23,   71,  225,  363,  378,  472,  584,  671,  699,  709,  717 }, // 618
  {   66,  162,  206,  577,  612,  613,  614,  615,  616,  617,  618,  119,  167,  227,  393,  408,  482,  585,  685,  700,  710,  717 }, // 619
  {   78,  174,  195,  586,  621,  622,  623,  624,  625,  626,  627,   79,  175,  262,  512,  536,  549,  563,  650,  658,  659,  660 }, // 620
  {   78,  174,  195,  586,  620,  622,  623,  624,  625,  626,  627,   32,   80,  197,  421,  434,  474,  588,  664,  672,  673,  674 }, // 621
  {   78,  174,  195,  586,  620,  621,  623,  624,  625,  626,  627,  128,  176,  199,  447,  460,  484,  589,  678,  686,  687,  688 }, // 622
  {   78,  174,  195,  586,  620,  621,  622,  624,  625,  626,  627,   57,   81,  201,  435,  550,  607,  651,  658,  666,  673,  694 }, // 623
  {   78,  174,  195,  586,  620,  621,  622,  623,  625,  626,  627,  153,  177,  203,  461,  564,  608,  652,  659,  680,  687,  694 }, // 624
  {   78,  174,  195,  586,  620,  621,  622,  623,  624,  626,  627,   82,  178,  234,  382,  412,  514,  538,  660,  711,  712,  713 }, // 625
  {   78,  174,  195,  586,  620,  621,  622,  623,  624,  625,  627,   35,   83,  236,  370,  384,  475,  593,  674,  702,  712,  718 }, // 626
  {   78,  174,  195,  586,  620,  621,  622,  623,  624,  625,  626,  131,  179,  238,  400,  414,  485,  594,  688,  703,  713,  718 }, // 627
  {   90,  186,  207,  595,  629,  630,  631,  632,  633,  634,  635,   91,  187,  263,  513,  537,  552,  566,  654,  661,  662,  663 }, // 628
  {   90,  186,  207,  595,  628,  630,  631,  632,  633,  634,  635,   44,   92,  209,  428,  440,  476,  597,  668,  675,  676,  677 }, // 629
  {   90,  186,  207,  595,  628,  629,  631,  632,  633,  634,  635,  140,  188,  211,  454,  466,  486,  598,  682,  689,  690,  691 }, // 630
  {   90,  186,  207,  595,  628,  629,  630,  632,  633,  634,  635,   69,   93,  213,  441,  553,  615,  655,  661,  670,  676,  695 }, // 631
  {   90,  186,  207,  595,  628,  629,  630,  631,  633,  634,  635,  165,  189,  215,  467,  567,  616,  656,  662,  684,  690,  695 }, // 632
  {   90,  186,  207,  595,  628,  629,  630,  631,  632,  634,  635,   94,  190,  235,  383,  413,  515,  539,  663,  711,  714,  715 }, // 633
  {   90,  186,  207,  595,  628,  629,  630,  631,  632,  633,  635,   47,   95,  237,  371,  385,  477,  602,  677,  704,  714,  719 }, // 634
  {   90,  186,  207,  595,  628,  629,  630,  631,  632,  633,  634,  143,  191,  239,  401,  415,  487,  603,  691,  705,  715,  719 }, // 635
  {    7,  103,  248,  491,  518,  541,  555,  569,  637,  638,  639,   31,  127,  250,  498,  524,  542,  556,  587,  644,  645,  646 }, // 636
  {    7,  103,  248,  491,  518,  541,  555,  569,  636,  638,  639,    9,   33,  200,  422,  543,  572,  590,  644,  665,  672,  692 }, // 637
  {    7,  103,  248,  491,  518,  541,  555,  569,  636,  637,  639,  105,  129,  202,  448,  557,  573,  591,  645,  679,  686,  692 }, // 638
  {    7,  103,  248,  491,  518,  541,  555,  569,  636,  637,  638,   10,  106,  220,  360,  390,  493,  520,  574,  696,  697,  698 }, // 639
  {   19,  115,  249,  492,  519,  544,  558,  578,  641,  642,  643,   43,  139,  251,  499,  525,  545,  559,  596,  647,  648,  649 }, // 640
  {   19,  115,  249,  492,  519,  544,  558,  578,  640,  642,  643,   21,   45,  212,  429,  546,  581,  599,  647,  669,  675,  693 }, // 641
  {   19,  115,  249,  492,  519,  544,  558,  578,  640,  641,  643,  117,  141,  214,  455,  560,  582,  600,  648,  683,  689,  693 }, // 642
  {   19,  115,  249,  492,  519,  544,  558,  578,  640,  641,  642,   22,  118,  221,  361,  391,  494,  521,  583,  696,  699,  700 }, // 643
  {   31,  127,  250,  498,  524,  542,  556,  587,  636,  645,  646,    9,   33,  200,  422,  543,  572,  590,  637,  665,  672,  692 }, // 644
  {   31,  127,  250,  498,  524,  542,  556,  587,  636,  644,  646,  105,  129,  202,  448,  557,  573,  591,  638,  679,  686,  692 }, // 645
  {   31,  127,  250,  498,  524,  542,  556,  587,  636,  644,  645,   34,  130,  232,  368,  398,  500,  526,  592,  701,  702,  703 }, // 646
  {   43,  139,  251,  499,  525,  545,  559,  596,  640,  648,  649,   21,   45,  212,  429,  546,  581,  599,  641,  669,  675,  693 }, // 647
  {   43,  139,  251,  499,  525,  545,  559,  596,  640,  647,  649,  117,  141,  214,  455,  560,  582,  600,  642,  683,  689,  693 }, // 648
  {   43,  139,  251,  499,  525,  545,  559,  596,  640,  647,  648,   46,  142,  233,  369,  399,  501,  527,  601,  701,  704,  705 }, // 649
  {   55,  151,  260,  505,  530,  548,  562,  604,  651,  652,  653,   79,  175,  262,  512,  536,  549,  563,  620,  658,  659,  660 }, // 650
  {   55,  151,  260,  505,  530,  548,  562,  604,  650,  652,  653,   57,   81,  201,  435,  550,  607,  623,  658,  666,  673,  694 }, // 651
  {   55,  151,  260,  505,  530,  548,  562,  604,  650,  651,  653,  153,  177,  203,  461,  564,  608,  624,  659,  680,  687,  694 }, // 652
  {   55,  151,  260,  505,  530,  548,  562,  604,  650,  651,  652,   58,  154,  222,  375,  405,  507,  532,  609,  706,  707,  708 }, // 653
  {   67,  163,  261,  506,  531,  551,  565,  612,  655,  656,  657,   91,  187,  263,  513,  537,  552,  566,  628,  661,  662,  663 }, // 654
  {   67,  163,  261,  506,  531,  551,  565,  612,  654,  656,  657,   69,   93,  213,  441,  553,  615,  631,  661,  670,  676,  695 }, // 655
  {   67,  163,  261,  506,  531,  551,  565,  612,  654,  655,  657,  165,  189,  215,  467,  567,  616,  632,  662,  684,  690,  695 }, // 656
  {   67,  163,  261,  506,  531,  551,  565,  612,  654,  655,  656,   70,  166,  223,  376,  406,  508,  533,  617,  706,  709,  710 }, // 657
  {   79,  175,  262,  512,  536,  549,  563,  620,  650,  659,  660,   57,   81,  201,  435,  550,  607,  623,  651,  666,  673,  694 }, // 658
  {   79,  175,  262,  512,  536,  549,  563,  620,  650,  658,  660,  153,  177,  203,  461,  564,  608,  624,  652,  680,  687,  694 }, // 659
  {   79,  175,  262,  512,  536,  549,  563,  620,  650,  658,  659,   82,  178,  234,  382,  412,  514,  538,  625,  711,  712,  713 }, // 660
  {   91,  187,  263,  513,  537,  552,  566,  628,  654,  662,  663,   69,   93,  213,  441,  553,  615,  631,  655,  670,  676,  695 }, // 661
  {   91,  187,  263,  513,  537,  552,  566,  628,  654,  661,  663,  165,  189,  215,  467,  567,  616,  632,  656,  684,  690,  695 }, // 662
  {   91,  187,  263,  513,  537,  552,  566,  628,  654,  661,  662,   94,  190,  235,  383,  413,  515,  539,  633,  711,  714,  715 }, // 663
  {    8,   56,  196,  420,  433,  469,  570,  605,  665,  666,  667,   32,   80,  197,  421,  434,  474,  588,  621,  672,  673,  674 }, // 664
  {    8,   56,  196,  420,  433,  469,  570,  605,  664,  666,  667,    9,   33,  200,  422,  543,  572,  590,  637,  644,  672,  692 }, // 665
  {    8,   56,  196,  420,  433,  469,  570,  605,  664,  665,  667,   57,   81,  201,  435,  550,  607,  623,  651,  658,  673,  694 }, // 666
  {    8,   56,  196,  420,  433,  469,  570,  605,  664,  665,  666,   11,   59,  224,  362,  377,  470,  575,  610,  697,  707,  716 }, // 667
  {   20,   68,  208,  427,  439,  471,  579,  613,  669,  670,  671,   44,   92,  209,  428,  440,  476,  597,  629,  675,  676,  677 }, // 668
  {   20,   68,  208,  427,  439,  471,  579,  613,  668,  670,  671,   21,   45,  212,  429,  546,  581,  599,  641,  647,  675,  693 }, // 669
  {   20,   68,  208,  427,  439,  471,  579,  613,  668,  669,  671,   69,   93,  213,  441,  553,  615,  631,  655,  661,  676,  695 }, // 670
  {   20,   68,  208,  427,  439,  471,  579,  613,  668,  669,  670,   23,   71,  225,  363,  378,  472,  584,  618,  699,  709,  717 }, // 671
  {   32,   80,  197,  421,  434,  474,  588,  621,  664,  673,  674,    9,   33,  200,  422,  543,  572,  590,  637,  644,  665,  692 }, // 672
  {   32,   80,  197,  421,  434,  474,  588,  621,  664,  672,  674,   57,   81,  201,  435,  550,  607,  623,  651,  658,  666,  694 }, // 673
  {   32,   80,  197,  421,  434,  474,  588,  621,  664,  672,  673,   35,   83,  236,  370,  384,  475,  593,  626,  702,  712,  718 }, // 674
  {   44,   92,  209,  428,  440,  476,  597,  629,  668,  676,  677,   21,   45,  212,  429,  546,  581,  599,  641,  647,  669,  693 }, // 675
  {   44,   92,  209,  428,  440,  476,  597,  629,  668,  675,  677,   69,   93,  213,  441,  553,  615,  631,  655,  661,  670,  695 }, // 676
  {   44,   92,  209,  428,  440,  476,  597,  629,  668,  675,  676,   47,   95,  237,  371,  385,  477,  602,  634,  704,  714,  719 }, // 677
  {  104,  152,  198,  446,  459,  479,  571,  606,  679,  680,  681,  128,  176,  199,  447,  460,  484,  589,  622,  686,  687,  688 }, // 678
  {  104,  152,  198,  446,  459,  479,  571,  606,  678,  680,  681,  105,  129,  202,  448,  557,  573,  591,  638,  645,  686,  692 }, // 679
  {  104,  152,  198,  446,  459,  479,  571,  606,  678,  679,  681,  153,  177,  203,  461,  564,  608,  624,  652,  659,  687,  694 }, // 680
  {  104,  152,  198,  446,  459,  479,  571,  606,  678,  679,  680,  107,  155,  226,  392,  407,  480,  576,  611,  698,  708,  716 }, // 681
  {  116,  164,  210,  453,  465,  481,  580,  614,  683,  684,  685,  140,  188,  211,  454,  466,  486,  598,  630,  689,  690,  691 }, // 682
  {  116,  164,  210,  453,  465,  481,  580,  614,  682,  684,  685,  117,  141,  214,  455,  560,  582,  600,  642,  648,  689,  693 }, // 683
  {  116,  164,  210,  453,  465,  481,  580,  614,  682,  683,  685,  165,  189,  215,  467,  567,  616,  632,  656,  662,  690,  695 }, // 684
  {  116,  164,  210,  453,  465,  481,  580,  614,  682,  683,  684,  119,  167,  227,  393,  408,  482,  585,  619,  700,  710,  717 }, // 685
  {  128,  176,  199,  447,  460,  484,  589,  622,  678,  687,  688,  105,  129,  202,  448,  557,  573,  591,  638,  645,  679,  692 }, // 686
  {  128,  176,  199,  447,  460,  484,  589,  622,  678,  686,  688,  153,  177,  203,  461,  564,  608,  624,  652,  659,  680,  694 }, // 687
  {  128,  176,  199,  447,  460,  484,  589,  622,  678,  686,  687,  131,  179,  238,  400,  414,  485,  594,  627,  703,  713,  718 }, // 688
  {  140,  188,  211,  454,  466,  486,  598,  630,  682,  690,  691,  117,  141,  214,  455,  560,  582,  600,  642,  648,  683,  693 }, // 689
  {  140,  188,  211,  454,  466,  486,  598,  630,  682,  689,  691,  165,  189,  215,  467,  567,  616,  632,  656,  662,  684,  695 }, // 690
  {  140,  188,  211,  454,  466,  486,  598,  630,  682,  689,  690,  143,  191,  239,  401,  415,  487,  603,  635,  705,  715,  719 }, // 691
  {    9,   33,  200,  422,  543,  572,  590,  637,  644,  665,  672,  105,  129,  202,  448,  557,  573,  591,  638,  645,  679,  686 }, // 692
  {   21,   45,  212,  429,  546,  581,  599,  641,  647,  669,  675,  117,  141,  214,  455,  560,  582,  600,  642,  648,  683,  689 }, // 693
  {   57,   81,  201,  435,  550,  607,  623,  651,  658,  666,  673,  153,  177,  203,  461,  564,  608,  624,  652,  659,  680,  687 }, // 694
  {   69,   93,  213,  441,  553,  615,  631,  655,  661,  670,  676,  165,  189,  215,  467,  567,  616,  632,  656,  662,  684,  690 }, // 695
  {   10,  106,  220,  360,  390,  493,  520,  574,  639,  697,  698,   22,  118,  221,  361,  391,  494,  521,  583,  643,  699,  700 }, // 696
  {   10,  106,  220,  360,  390,  493,  520,  574,  639,  696,  698,   11,   59,  224,  362,  377,  470,  575,  610,  667,  707,  716 }, // 697
  {   10,  106,  220,  360,  390,  493,  520,  574,  639,  696,  697,  107,  155,  226,  392,  407,  480,  576,  611,  681,  708,  716 }, // 698
  {   22,  118,  221,  361,  391,  494,  521,  583,  643,  696,  700,   23,   71,  225,  363,  378,  472,  584,  618,  671,  709,  717 }, // 699
  {   22,  118,  221,  361,  391,  494,  521,  583,  643,  696,  699,  119,  167,  227,  393,  408,  482,  585,  619,  685,  710,  717 }, // 700
  {   34,  130,  232,  368,  398,  500,  526,  592,  646,  702,  703,   46,  142,  233,  369,  399,  501,  527,  601,  649,  704,  705 }, // 701
  {   34,  130,  232,  368,  398,  500,  526,  592,  646,  701,  703,   35,   83,  236,  370,  384,  475,  593,  626,  674,  712,  718 }, // 702
  {   34,  130,  232,  368,  398,  500,  526,  592,  646,  701,  702,  131,  179,  238,  400,  414,  485,  594,  627,  688,  713,  718 }, // 703
  {   46,  142,  233,  369,  399,  501,  527,  601,  649,  701,  705,   47,   95,  237,  371,  385,  477,  602,  634,  677,  714,  719 }, // 704
  {   46,  142,  233,  369,  399,  501,  527,  601,  649,  701,  704,  143,  191,  239,  401,  415,  487,  603,  635,  691,  715,  719 }, // 705
  {   58,  154,  222,  375,  405,  507,  532,  609,  653,  707,  708,   70,  166,  223,  376,  406,  508,  533,  617,  657,  709,  710 }, // 706
  {   58,  154,  222,  375,  405,  507,  532,  609,  653,  706,  708,   11,   59,  224,  362,  377,  470,  575,  610,  667,  697,  716 }, // 707
  {   58,  154,  222,  375,  405,  507,  532,  609,  653,  706,  707,  107,  155,  226,  392,  407,  480,  576,  611,  681,  698,  716 }, // 708
  {   70,  166,  223,  376,  406,  508,  533,  617,  657,  706,  710,   23,   71,  225,  363,  378,  472,  584,  618,  671,  699,  717 }, // 709
  {   70,  166,  223,  376,  406,  508,  533,  617,  657,  706,  709,  119,  167,  227,  393,  408,  482,  585,  619,  685,  700,  717 }, // 710
  {   82,  178,  234,  382,  412,  514,  538,  625,  660,  712,  713,   94,  190,  235,  383,  413,  515,  539,  633,  663,  714,  715 }, // 711
  {   82,  178,  234,  382,  412,  514,  538,  625,  660,  711,  713,   35,   83,  236,  370,  384,  475,  593,  626,  674,  702,  718 }, // 712
  {   82,  178,  234,  382,  412,  514,  538,  625,  660,  711,  712,  131,  179,  238,  400,  414,  485,  594,  627,  688,  703,  718 }, // 713
  {   94,  190,  235,  383,  413,  515,  539,  633,  663,  711,  715,   47,   95,  237,  371,  385,  477,  602,  634,  677,  704,  719 }, // 714
  {   94,  190,  235,  383,  413,  515,  539,  633,  663,  711,  714,  143,  191,  239,  401,  415,  487,  603,  635,  691,  705,  719 }, // 715
  {   11,   59,  224,  362,  377,  470,  575,  610,  667,  697,  707,  107,  155,  226,  392,  407,  480,  576,  611,  681,  698,  708 }, // 716
  {   23,   71,  225,  363,  378,  472,  584,  618,  671,  699,  709,  119,  167,  227,  393,  408,  482,  585,  619,  685,  700,  710 }, // 717
  {   35,   83,  236,  370,  384,  475,  593,  626,  674,  702,  712,  131,  179,  238,  400,  414,  485,  594,  627,  688,  703,  713 }, // 718
  {   47,   95,  237,  371,  385,  477,  602,  634,  677,  704,  714,  143,  191,  239,  401,  415,  487,  603,  635,  691,  705,  715 }, // 719
};
int faceK600[1200][3] = { // Edges bordering each face, in face order
  {    0,    1,  289 }, //   0
  {    0,    2,  290 }, //   1
  {    0,    3,  292 }, //   2
  {    0,    4,  294 }, //   3
  {    0,    5,  295 }, //   4
  {    1,    3,  357 }, //   5
  {    1,    4,  359 }, //   6
  {    1,   10,  360 }, //   7
  {    1,   11,  362 }, //   8
  {    2,    3,  417 }, //   9
  {    2,    5,  419 }, //  10
  {    2,    8,  420 }, //  11
  {    2,    9,  422 }, //  12
  {    3,    8,  469 }, //  13
  {    3,   11,  470 }, //  14
  {    4,    5,  489 }, //  15
  {    4,    7,  491 }, //  16
  {    4,   10,  493 }, //  17
  {    5,    7,  541 }, //  18
  {    5,    9,  543 }, //  19
  {    6,    7,  569 }, //  20
  {    6,    8,  570 }, //  21
  {    6,    9,  572 }, //  22
  {    6,   10,  574 }, //  23
  {    6,   11,  575 }, //  24
  {    7,    9,  637 }, //  25
  {    7,   10,  639 }, //  26
  {    8,    9,  665 }, //  27
  {    8,   11,  667 }, //  28
  {   10,   11,  697 }, //  29
  {   12,   13,  289 }, //  30
  {   12,   14,  291 }, //  31
  {   12,   15,  293 }, //  32
  {   12,   16,  294 }, //  33
  {   12,   17,  296 }, //  34
  {   13,   15,  358 }, //  35
  {   13,   16,  359 }, //  36
  {   13,   22,  361 }, //  37
  {   13,   23,  363 }, //  38
  {   14,   15,  424 }, //  39
  {   14,   17,  426 }, //  40
  {   14,   20,  427 }, //  41
  {   14,   21,  429 }, //  42
  {   15,   20,  471 }, //  43
  {   15,   23,  472 }, //  44
  {   16,   17,  490 }, //  45
  {   16,   19,  492 }, //  46
  {   16,   22,  494 }, //  47
  {   17,   19,  544 }, //  48
  {   17,   21,  546 }, //  49
  {   18,   19,  578 }, //  50
  {   18,   20,  579 }, //  51
  {   18,   21,  581 }, //  52
  {   18,   22,  583 }, //  53
  {   18,   23,  584 }, //  54
  {   19,   21,  641 }, //  55
  {   19,   22,  643 }, //  56
  {   20,   21,  669 }, //  57
  {   20,   23,  671 }, //  58
  {   22,   23,  699 }, //  59
  {   24,   25,  297 }, //  60
  {   24,   26,  298 }, //  61
  {   24,   27,  300 }, //  62
  {   24,   28,  302 }, //  63
  {   24,   29,  303 }, //  64
  {   25,   27,  365 }, //  65
  {   25,   28,  367 }, //  66
  {   25,   34,  368 }, //  67
  {   25,   35,  370 }, //  68
  {   26,   27,  418 }, //  69
  {   26,   29,  419 }, //  70
  {   26,   32,  421 }, //  71
  {   26,   33,  422 }, //  72
  {   27,   32,  474 }, //  73
  {   27,   35,  475 }, //  74
  {   28,   29,  496 }, //  75
  {   28,   31,  498 }, //  76
  {   28,   34,  500 }, //  77
  {   29,   31,  542 }, //  78
  {   29,   33,  543 }, //  79
  {   30,   31,  587 }, //  80
  {   30,   32,  588 }, //  81
  {   30,   33,  590 }, //  82
  {   30,   34,  592 }, //  83
  {   30,   35,  593 }, //  84
  {   31,   33,  644 }, //  85
  {   31,   34,  646 }, //  86
  {   32,   33,  672 }, //  87
  {   32,   35,  674 }, //  88
  {   34,   35,  702 }, //  89
  {   36,   37,  297 }, //  90
  {   36,   38,  299 }, //  91
  {   36,   39,  301 }, //  92
  {   36,   40,  302 }, //  93
  {   36,   41,  304 }, //  94
  {   37,   39,  366 }, //  95
  {   37,   40,  367 }, //  96
  {   37,   46,  369 }, //  97
  {   37,   47,  371 }, //  98
  {   38,   39,  425 }, //  99
  {   38,   41,  426 }, // 100
  {   38,   44,  428 }, // 101
  {   38,   45,  429 }, // 102
  {   39,   44,  476 }, // 103
  {   39,   47,  477 }, // 104
  {   40,   41,  497 }, // 105
  {   40,   43,  499 }, // 106
  {   40,   46,  501 }, // 107
  {   41,   43,  545 }, // 108
  {   41,   45,  546 }, // 109
  {   42,   43,  596 }, // 110
  {   42,   44,  597 }, // 111
  {   42,   45,  599 }, // 112
  {   42,   46,  601 }, // 113
  {   42,   47,  602 }, // 114
  {   43,   45,  647 }, // 115
  {   43,   46,  649 }, // 116
  {   44,   45,  675 }, // 117
  {   44,   47,  677 }, // 118
  {   46,   47,  704 }, // 119
  {   48,   49,  306 }, // 120
  {   48,   50,  307 }, // 121
  {   48,   51,  309 }, // 122
  {   48,   52,  311 }, // 123
  {   48,   53,  312 }, // 124
  {   49,   51,  372 }, // 125
  {   49,   52,  374 }, // 126
  {   49,   58,  375 }, // 127
  {   49,   59,  377 }, // 128
  {   50,   51,  430 }, // 129
  {   50,   53,  432 }, // 130
  {   50,   56,  433 }, // 131
  {   50,   57,  435 }, // 132
  {   51,   56,  469 }, // 133
  {   51,   59,  470 }, // 134
  {   52,   53,  503 }, // 135
  {   52,   55,  505 }, // 136
  {   52,   58,  507 }, // 137
  {   53,   55,  548 }, // 138
  {   53,   57,  550 }, // 139
  {   54,   55,  604 }, // 140
  {   54,   56,  605 }, // 141
  {   54,   57,  607 }, // 142
  {   54,   58,  609 }, // 143
  {   54,   59,  610 }, // 144
  {   55,   57,  651 }, // 145
  {   55,   58,  653 }, // 146
  {   56,   57,  666 }, // 147
  {   56,   59,  667 }, // 148
  {   58,   59,  707 }, // 149
  {   60,   61,  306 }, // 150
  {   60,   62,  308 }, // 151
  {   60,   63,  310 }, // 152
  {   60,   64,  311 }, // 153
  {   60,   65,  313 }, // 154
  {   61,   63,  373 }, // 155
  {   61,   64,  374 }, // 156
  {   61,   70,  376 }, // 157
  {   61,   71,  378 }, // 158
  {   62,   63,  436 }, // 159
  {   62,   65,  438 }, // 160
  {   62,   68,  439 }, // 161
  {   62,   69,  441 }, // 162
  {   63,   68,  471 }, // 163
  {   63,   71,  472 }, // 164
  {   64,   65,  504 }, // 165
  {   64,   67,  506 }, // 166
  {   64,   70,  508 }, // 167
  {   65,   67,  551 }, // 168
  {   65,   69,  553 }, // 169
  {   66,   67,  612 }, // 170
  {   66,   68,  613 }, // 171
  {   66,   69,  615 }, // 172
  {   66,   70,  617 }, // 173
  {   66,   71,  618 }, // 174
  {   67,   69,  655 }, // 175
  {   67,   70,  657 }, // 176
  {   68,   69,  670 }, // 177
  {   68,   71,  671 }, // 178
  {   70,   71,  709 }, // 179
  {   72,   73,  314 }, // 180
  {   72,   74,  315 }, // 181
  {   72,   75,  317 }, // 182
  {   72,   76,  319 }, // 183
  {   72,   77,  320 }, // 184
  {   73,   75,  379 }, // 185
  {   73,   76,  381 }, // 186
  {   73,   82,  382 }, // 187
  {   73,   83,  384 }, // 188
  {   74,   75,  431 }, // 189
  {   74,   77,  432 }, // 190
  {   74,   80,  434 }, // 191
  {   74,   81,  435 }, // 192
  {   75,   80,  474 }, // 193
  {   75,   83,  475 }, // 194
  {   76,   77,  510 }, // 195
  {   76,   79,  512 }, // 196
  {   76,   82,  514 }, // 197
  {   77,   79,  549 }, // 198
  {   77,   81,  550 }, // 199
  {   78,   79,  620 }, // 200
  {   78,   80,  621 }, // 201
  {   78,   81,  623 }, // 202
  {   78,   82,  625 }, // 203
  {   78,   83,  626 }, // 204
  {   79,   81,  658 }, // 205
  {   79,   82,  660 }, // 206
  {   80,   81,  673 }, // 207
  {   80,   83,  674 }, // 208
  {   82,   83,  712 }, // 209
  {   84,   85,  314 }, // 210
  {   84,   86,  316 }, // 211
  {   84,   87,  318 }, // 212
  {   84,   88,  319 }, // 213
  {   84,   89,  321 }, // 214
  {   85,   87,  380 }, // 215
  {   85,   88,  381 }, // 216
  {   85,   94,  383 }, // 217
  {   85,   95,  385 }, // 218
  {   86,   87,  437 }, // 219
  {   86,   89,  438 }, // 220
  {   86,   92,  440 }, // 221
  {   86,   93,  441 }, // 222
  {   87,   92,  476 }, // 223
  {   87,   95,  477 }, // 224
  {   88,   89,  511 }, // 225
  {   88,   91,  513 }, // 226
  {   88,   94,  515 }, // 227
  {   89,   91,  552 }, // 228
  {   89,   93,  553 }, // 229
  {   90,   91,  628 }, // 230
  {   90,   92,  629 }, // 231
  {   90,   93,  631 }, // 232
  {   90,   94,  633 }, // 233
  {   90,   95,  634 }, // 234
  {   91,   93,  661 }, // 235
  {   91,   94,  663 }, // 236
  {   92,   93,  676 }, // 237
  {   92,   95,  677 }, // 238
  {   94,   95,  714 }, // 239
  {   96,   97,  323 }, // 240
  {   96,   98,  324 }, // 241
  {   96,   99,  326 }, // 242
  {   96,  100,  328 }, // 243
  {   96,  101,  329 }, // 244
  {   97,   99,  387 }, // 245
  {   97,  100,  389 }, // 246
  {   97,  106,  390 }, // 247
  {   97,  107,  392 }, // 248
  {   98,   99,  443 }, // 249
  {   98,  101,  445 }, // 250
  {   98,  104,  446 }, // 251
  {   98,  105,  448 }, // 252
  {   99,  104,  479 }, // 253
  {   99,  107,  480 }, // 254
  {  100,  101,  516 }, // 255
  {  100,  103,  518 }, // 256
  {  100,  106,  520 }, // 257
  {  101,  103,  555 }, // 258
  {  101,  105,  557 }, // 259
  {  102,  103,  569 }, // 260
  {  102,  104,  571 }, // 261
  {  102,  105,  573 }, // 262
  {  102,  106,  574 }, // 263
  {  102,  107,  576 }, // 264
  {  103,  105,  638 }, // 265
  {  103,  106,  639 }, // 266
  {  104,  105,  679 }, // 267
  {  104,  107,  681 }, // 268
  {  106,  107,  698 }, // 269
  {  108,  109,  323 }, // 270
  {  108,  110,  325 }, // 271
  {  108,  111,  327 }, // 272
  {  108,  112,  328 }, // 273
  {  108,  113,  330 }, // 274
  {  109,  111,  388 }, // 275
  {  109,  112,  389 }, // 276
  {  109,  118,  391 }, // 277
  {  109,  119,  393 }, // 278
  {  110,  111,  450 }, // 279
  {  110,  113,  452 }, // 280
  {  110,  116,  453 }, // 281
  {  110,  117,  455 }, // 282
  {  111,  116,  481 }, // 283
  {  111,  119,  482 }, // 284
  {  112,  113,  517 }, // 285
  {  112,  115,  519 }, // 286
  {  112,  118,  521 }, // 287
  {  113,  115,  558 }, // 288
  {  113,  117,  560 }, // 289
  {  114,  115,  578 }, // 290
  {  114,  116,  580 }, // 291
  {  114,  117,  582 }, // 292
  {  114,  118,  583 }, // 293
  {  114,  119,  585 }, // 294
  {  115,  117,  642 }, // 295
  {  115,  118,  643 }, // 296
  {  116,  117,  683 }, // 297
  {  116,  119,  685 }, // 298
  {  118,  119,  700 }, // 299
  {  120,  121,  331 }, // 300
  {  120,  122,  332 }, // 301
  {  120,  123,  334 }, // 302
  {  120,  124,  336 }, // 303
  {  120,  125,  337 }, // 304
  {  121,  123,  395 }, // 305
  {  121,  124,  397 }, // 306
  {  121,  130,  398 }, // 307
  {  121,  131,  400 }, // 308
  {  122,  123,  444 }, // 309
  {  122,  125,  445 }, // 310
  {  122,  128,  447 }, // 311
  {  122,  129,  448 }, // 312
  {  123,  128,  484 }, // 313
  {  123,  131,  485 }, // 314
  {  124,  125,  522 }, // 315
  {  124,  127,  524 }, // 316
  {  124,  130,  526 }, // 317
  {  125,  127,  556 }, // 318
  {  125,  129,  557 }, // 319
  {  126,  127,  587 }, // 320
  {  126,  128,  589 }, // 321
  {  126,  129,  591 }, // 322
  {  126,  130,  592 }, // 323
  {  126,  131,  594 }, // 324
  {  127,  129,  645 }, // 325
  {  127,  130,  646 }, // 326
  {  128,  129,  686 }, // 327
  {  128,  131,  688 }, // 328
  {  130,  131,  703 }, // 329
  {  132,  133,  331 }, // 330
  {  132,  134,  333 }, // 331
  {  132,  135,  335 }, // 332
  {  132,  136,  336 }, // 333
  {  132,  137,  338 }, // 334
  {  133,  135,  396 }, // 335
  {  133,  136,  397 }, // 336
  {  133,  142,  399 }, // 337
  {  133,  143,  401 }, // 338
  {  134,  135,  451 }, // 339
  {  134,  137,  452 }, // 340
  {  134,  140,  454 }, // 341
  {  134,  141,  455 }, // 342
  {  135,  140,  486 }, // 343
  {  135,  143,  487 }, // 344
  {  136,  137,  523 }, // 345
  {  136,  139,  525 }, // 346
  {  136,  142,  527 }, // 347
  {  137,  139,  559 }, // 348
  {  137,  141,  560 }, // 349
  {  138,  139,  596 }, // 350
  {  138,  140,  598 }, // 351
  {  138,  141,  600 }, // 352
  {  138,  142,  601 }, // 353
  {  138,  143,  603 }, // 354
  {  139,  141,  648 }, // 355
  {  139,  142,  649 }, // 356
  {  140,  141,  689 }, // 357
  {  140,  143,  691 }, // 358
  {  142,  143,  705 }, // 359
  {  144,  145,  340 }, // 360
  {  144,  146,  341 }, // 361
  {  144,  147,  343 }, // 362
  {  144,  148,  345 }, // 363
  {  144,  149,  346 }, // 364
  {  145,  147,  402 }, // 365
  {  145,  148,  404 }, // 366
  {  145,  154,  405 }, // 367
  {  145,  155,  407 }, // 368
  {  146,  147,  456 }, // 369
  {  146,  149,  458 }, // 370
  {  146,  152,  459 }, // 371
  {  146,  153,  461 }, // 372
  {  147,  152,  479 }, // 373
  {  147,  155,  480 }, // 374
  {  148,  149,  528 }, // 375
  {  148,  151,  530 }, // 376
  {  148,  154,  532 }, // 377
  {  149,  151,  562 }, // 378
  {  149,  153,  564 }, // 379
  {  150,  151,  604 }, // 380
  {  150,  152,  606 }, // 381
  {  150,  153,  608 }, // 382
  {  150,  154,  609 }, // 383
  {  150,  155,  611 }, // 384
  {  151,  153,  652 }, // 385
  {  151,  154,  653 }, // 386
  {  152,  153,  680 }, // 387
  {  152,  155,  681 }, // 388
  {  154,  155,  708 }, // 389
  {  156,  157,  340 }, // 390
  {  156,  158,  342 }, // 391
  {  156,  159,  344 }, // 392
  {  156,  160,  345 }, // 393
  {  156,  161,  347 }, // 394
  {  157,  159,  403 }, // 395
  {  157,  160,  404 }, // 396
  {  157,  166,  406 }, // 397
  {  157,  167,  408 }, // 398
  {  158,  159,  462 }, // 399
  {  158,  161,  464 }, // 400
  {  158,  164,  465 }, // 401
  {  158,  165,  467 }, // 402
  {  159,  164,  481 }, // 403
  {  159,  167,  482 }, // 404
  {  160,  161,  529 }, // 405
  {  160,  163,  531 }, // 406
  {  160,  166,  533 }, // 407
  {  161,  163,  565 }, // 408
  {  161,  165,  567 }, // 409
  {  162,  163,  612 }, // 410
  {  162,  164,  614 }, // 411
  {  162,  165,  616 }, // 412
  {  162,  166,  617 }, // 413
  {  162,  167,  619 }, // 414
  {  163,  165,  656 }, // 415
  {  163,  166,  657 }, // 416
  {  164,  165,  684 }, // 417
  {  164,  167,  685 }, // 418
  {  166,  167,  710 }, // 419
  {  168,  169,  348 }, // 420
  {  168,  170,  349 }, // 421
  {  168,  171,  351 }, // 422
  {  168,  172,  353 }, // 423
  {  168,  173,  354 }, // 424
  {  169,  171,  409 }, // 425
  {  169,  172,  411 }, // 426
  {  169,  178,  412 }, // 427
  {  169,  179,  414 }, // 428
  {  170,  171,  457 }, // 429
  {  170,  173,  458 }, // 430
  {  170,  176,  460 }, // 431
  {  170,  177,  461 }, // 432
  {  171,  176,  484 }, // 433
  {  171,  179,  485 }, // 434
  {  172,  173,  534 }, // 435
  {  172,  175,  536 }, // 436
  {  172,  178,  538 }, // 437
  {  173,  175,  563 }, // 438
  {  173,  177,  564 }, // 439
  {  174,  175,  620 }, // 440
  {  174,  176,  622 }, // 441
  {  174,  177,  624 }, // 442
  {  174,  178,  625 }, // 443
  {  174,  179,  627 }, // 444
  {  175,  177,  659 }, // 445
  {  175,  178,  660 }, // 446
  {  176,  177,  687 }, // 447
  {  176,  179,  688 }, // 448
  {  178,  179,  713 }, // 449
  {  180,  181,  348 }, // 450
  {  180,  182,  350 }, // 451
  {  180,  183,  352 }, // 452
  {  180,  184,  353 }, // 453
  {  180,  185,  355 }, // 454
  {  181,  183,  410 }, // 455
  {  181,  184,  411 }, // 456
  {  181,  190,  413 }, // 457
  {  181,  191,  415 }, // 458
  {  182,  183,  463 }, // 459
  {  182,  185,  464 }, // 460
  {  182,  188,  466 }, // 461
  {  182,  189,  467 }, // 462
  {  183,  188,  486 }, // 463
  {  183,  191,  487 }, // 464
  {  184,  185,  535 }, // 465
  {  184,  187,  537 }, // 466
  {  184,  190,  539 }, // 467
  {  185,  187,  566 }, // 468
  {  185,  189,  567 }, // 469
  {  186,  187,  628 }, // 470
  {  186,  188,  630 }, // 471
  {  186,  189,  632 }, // 472
  {  186,  190,  633 }, // 473
  {  186,  191,  635 }, // 474
  {  187,  189,  662 }, // 475
  {  187,  190,  663 }, // 476
  {  188,  189,  690 }, // 477
  {  188,  191,  691 }, // 478
  {  190,  191,  715 }, // 479
  {  192,  194,  568 }, // 480
  {  192,  196,  570 }, // 481
  {  192,  198,  571 }, // 482
  {  192,  200,  572 }, // 483
  {  192,  202,  573 }, // 484
  {  193,  195,  586 }, // 485
  {  193,  197,  588 }, // 486
  {  193,  199,  589 }, // 487
  {  193,  200,  590 }, // 488
  {  193,  202,  591 }, // 489
  {  194,  196,  605 }, // 490
  {  194,  198,  606 }, // 491
  {  194,  201,  607 }, // 492
  {  194,  203,  608 }, // 493
  {  195,  197,  621 }, // 494
  {  195,  199,  622 }, // 495
  {  195,  201,  623 }, // 496
  {  195,  203,  624 }, // 497
  {  196,  197,  664 }, // 498
  {  196,  200,  665 }, // 499
  {  196,  201,  666 }, // 500
  {  197,  200,  672 }, // 501
  {  197,  201,  673 }, // 502
  {  198,  199,  678 }, // 503
  {  198,  202,  679 }, // 504
  {  198,  203,  680 }, // 505
  {  199,  202,  686 }, // 506
  {  199,  203,  687 }, // 507
  {  200,  202,  692 }, // 508
  {  201,  203,  694 }, // 509
  {  204,  206,  577 }, // 510
  {  204,  208,  579 }, // 511
  {  204,  210,  580 }, // 512
  {  204,  212,  581 }, // 513
  {  204,  214,  582 }, // 514
  {  205,  207,  595 }, // 515
  {  205,  209,  597 }, // 516
  {  205,  211,  598 }, // 517
  {  205,  212,  599 }, // 518
  {  205,  214,  600 }, // 519
  {  206,  208,  613 }, // 520
  {  206,  210,  614 }, // 521
  {  206,  213,  615 }, // 522
  {  206,  215,  616 }, // 523
  {  207,  209,  629 }, // 524
  {  207,  211,  630 }, // 525
  {  207,  213,  631 }, // 526
  {  207,  215,  632 }, // 527
  {  208,  209,  668 }, // 528
  {  208,  212,  669 }, // 529
  {  208,  213,  670 }, // 530
  {  209,  212,  675 }, // 531
  {  209,  213,  676 }, // 532
  {  210,  211,  682 }, // 533
  {  210,  214,  683 }, // 534
  {  210,  215,  684 }, // 535
  {  211,  214,  689 }, // 536
  {  211,  215,  690 }, // 537
  {  212,  214,  693 }, // 538
  {  213,  215,  695 }, // 539
  {  216,  217,  356 }, // 540
  {  216,  220,  360 }, // 541
  {  216,  221,  361 }, // 542
  {  216,  224,  362 }, // 543
  {  216,  225,  363 }, // 544
  {  217,  222,  375 }, // 545
  {  217,  223,  376 }, // 546
  {  217,  224,  377 }, // 547
  {  217,  225,  378 }, // 548
  {  218,  219,  386 }, // 549
  {  218,  220,  390 }, // 550
  {  218,  221,  391 }, // 551
  {  218,  226,  392 }, // 552
  {  218,  227,  393 }, // 553
  {  219,  222,  405 }, // 554
  {  219,  223,  406 }, // 555
  {  219,  226,  407 }, // 556
  {  219,  227,  408 }, // 557
  {  220,  221,  696 }, // 558
  {  220,  224,  697 }, // 559
  {  220,  226,  698 }, // 560
  {  221,  225,  699 }, // 561
  {  221,  227,  700 }, // 562
  {  222,  223,  706 }, // 563
  {  222,  224,  707 }, // 564
  {  222,  226,  708 }, // 565
  {  223,  225,  709 }, // 566
  {  223,  227,  710 }, // 567
  {  224,  226,  716 }, // 568
  {  225,  227,  717 }, // 569
  {  228,  229,  364 }, // 570
  {  228,  232,  368 }, // 571
  {  228,  233,  369 }, // 572
  {  228,  236,  370 }, // 573
  {  228,  237,  371 }, // 574
  {  229,  234,  382 }, // 575
  {  229,  235,  383 }, // 576
  {  229,  236,  384 }, // 577
  {  229,  237,  385 }, // 578
  {  230,  231,  394 }, // 579
  {  230,  232,  398 }, // 580
  {  230,  233,  399 }, // 581
  {  230,  238,  400 }, // 582
  {  230,  239,  401 }, // 583
  {  231,  234,  412 }, // 584
  {  231,  235,  413 }, // 585
  {  231,  238,  414 }, // 586
  {  231,  239,  415 }, // 587
  {  232,  233,  701 }, // 588
  {  232,  236,  702 }, // 589
  {  232,  238,  703 }, // 590
  {  233,  237,  704 }, // 591
  {  233,  239,  705 }, // 592
  {  234,  235,  711 }, // 593
  {  234,  236,  712 }, // 594
  {  234,  238,  713 }, // 595
  {  235,  237,  714 }, // 596
  {  235,  239,  715 }, // 597
  {  236,  238,  718 }, // 598
  {  237,  239,  719 }, // 599
  {  240,  242,  488 }, // 600
  {  240,  244,  489 }, // 601
  {  240,  245,  490 }, // 602
  {  240,  248,  491 }, // 603
  {  240,  249,  492 }, // 604
  {  241,  243,  495 }, // 605
  {  241,  244,  496 }, // 606
  {  241,  245,  497 }, // 607
  {  241,  250,  498 }, // 608
  {  241,  251,  499 }, // 609
  {  242,  246,  516 }, // 610
  {  242,  247,  517 }, // 611
  {  242,  248,  518 }, // 612
  {  242,  249,  519 }, // 613
  {  243,  246,  522 }, // 614
  {  243,  247,  523 }, // 615
  {  243,  250,  524 }, // 616
  {  243,  251,  525 }, // 617
  {  244,  245,  540 }, // 618
  {  244,  248,  541 }, // 619
  {  244,  250,  542 }, // 620
  {  245,  249,  544 }, // 621
  {  245,  251,  545 }, // 622
  {  246,  247,  554 }, // 623
  {  246,  248,  555 }, // 624
  {  246,  250,  556 }, // 625
  {  247,  249,  558 }, // 626
  {  247,  251,  559 }, // 627
  {  248,  250,  636 }, // 628
  {  249,  251,  640 }, // 629
  {  252,  254,  502 }, // 630
  {  252,  256,  503 }, // 631
  {  252,  257,  504 }, // 632
  {  252,  260,  505 }, // 633
  {  252,  261,  506 }, // 634
  {  253,  255,  509 }, // 635
  {  253,  256,  510 }, // 636
  {  253,  257,  511 }, // 637
  {  253,  262,  512 }, // 638
  {  253,  263,  513 }, // 639
  {  254,  258,  528 }, // 640
  {  254,  259,  529 }, // 641
  {  254,  260,  530 }, // 642
  {  254,  261,  531 }, // 643
  {  255,  258,  534 }, // 644
  {  255,  259,  535 }, // 645
  {  255,  262,  536 }, // 646
  {  255,  263,  537 }, // 647
  {  256,  257,  547 }, // 648
  {  256,  260,  548 }, // 649
  {  256,  262,  549 }, // 650
  {  257,  261,  551 }, // 651
  {  257,  263,  552 }, // 652
  {  258,  259,  561 }, // 653
  {  258,  260,  562 }, // 654
  {  258,  262,  563 }, // 655
  {  259,  261,  565 }, // 656
  {  259,  263,  566 }, // 657
  {  260,  262,  650 }, // 658
  {  261,  263,  654 }, // 659
  {  264,  265,  288 }, // 660
  {  264,  268,  290 }, // 661
  {  264,  269,  291 }, // 662
  {  264,  272,  292 }, // 663
  {  264,  273,  293 }, // 664
  {  265,  268,  298 }, // 665
  {  265,  269,  299 }, // 666
  {  265,  274,  300 }, // 667
  {  265,  275,  301 }, // 668
  {  266,  267,  305 }, // 669
  {  266,  270,  307 }, // 670
  {  266,  271,  308 }, // 671
  {  266,  272,  309 }, // 672
  {  266,  273,  310 }, // 673
  {  267,  270,  315 }, // 674
  {  267,  271,  316 }, // 675
  {  267,  274,  317 }, // 676
  {  267,  275,  318 }, // 677
  {  268,  270,  416 }, // 678
  {  268,  272,  417 }, // 679
  {  268,  274,  418 }, // 680
  {  269,  271,  423 }, // 681
  {  269,  273,  424 }, // 682
  {  269,  275,  425 }, // 683
  {  270,  272,  430 }, // 684
  {  270,  274,  431 }, // 685
  {  271,  273,  436 }, // 686
  {  271,  275,  437 }, // 687
  {  272,  273,  468 }, // 688
  {  274,  275,  473 }, // 689
  {  276,  277,  322 }, // 690
  {  276,  280,  324 }, // 691
  {  276,  281,  325 }, // 692
  {  276,  284,  326 }, // 693
  {  276,  285,  327 }, // 694
  {  277,  280,  332 }, // 695
  {  277,  281,  333 }, // 696
  {  277,  286,  334 }, // 697
  {  277,  287,  335 }, // 698
  {  278,  279,  339 }, // 699
  {  278,  282,  341 }, // 700
  {  278,  283,  342 }, // 701
  {  278,  284,  343 }, // 702
  {  278,  285,  344 }, // 703
  {  279,  282,  349 }, // 704
  {  279,  283,  350 }, // 705
  {  279,  286,  351 }, // 706
  {  279,  287,  352 }, // 707
  {  280,  282,  442 }, // 708
  {  280,  284,  443 }, // 709
  {  280,  286,  444 }, // 710
  {  281,  283,  449 }, // 711
  {  281,  285,  450 }, // 712
  {  281,  287,  451 }, // 713
  {  282,  284,  456 }, // 714
  {  282,  286,  457 }, // 715
  {  283,  285,  462 }, // 716
  {  283,  287,  463 }, // 717
  {  284,  285,  478 }, // 718
  {  286,  287,  483 }, // 719
  {  288,  290,  298 }, // 720
  {  288,  291,  299 }, // 721
  {  288,  295,  303 }, // 722
  {  288,  296,  304 }, // 723
  {  289,  292,  357 }, // 724
  {  289,  293,  358 }, // 725
  {  289,  294,  359 }, // 726
  {  290,  292,  417 }, // 727
  {  290,  295,  419 }, // 728
  {  291,  293,  424 }, // 729
  {  291,  296,  426 }, // 730
  {  292,  293,  468 }, // 731
  {  294,  295,  489 }, // 732
  {  294,  296,  490 }, // 733
  {  295,  296,  540 }, // 734
  {  297,  300,  365 }, // 735
  {  297,  301,  366 }, // 736
  {  297,  302,  367 }, // 737
  {  298,  300,  418 }, // 738
  {  298,  303,  419 }, // 739
  {  299,  301,  425 }, // 740
  {  299,  304,  426 }, // 741
  {  300,  301,  473 }, // 742
  {  302,  303,  496 }, // 743
  {  302,  304,  497 }, // 744
  {  303,  304,  540 }, // 745
  {  305,  307,  315 }, // 746
  {  305,  308,  316 }, // 747
  {  305,  312,  320 }, // 748
  {  305,  313,  321 }, // 749
  {  306,  309,  372 }, // 750
  {  306,  310,  373 }, // 751
  {  306,  311,  374 }, // 752
  {  307,  309,  430 }, // 753
  {  307,  312,  432 }, // 754
  {  308,  310,  436 }, // 755
  {  308,  313,  438 }, // 756
  {  309,  310,  468 }, // 757
  {  311,  312,  503 }, // 758
  {  311,  313,  504 }, // 759
  {  312,  313,  547 }, // 760
  {  314,  317,  379 }, // 761
  {  314,  318,  380 }, // 762
  {  314,  319,  381 }, // 763
  {  315,  317,  431 }, // 764
  {  315,  320,  432 }, // 765
  {  316,  318,  437 }, // 766
  {  316,  321,  438 }, // 767
  {  317,  318,  473 }, // 768
  {  319,  320,  510 }, // 769
  {  319,  321,  511 }, // 770
  {  320,  321,  547 }, // 771
  {  322,  324,  332 }, // 772
  {  322,  325,  333 }, // 773
  {  322,  329,  337 }, // 774
  {  322,  330,  338 }, // 775
  {  323,  326,  387 }, // 776
  {  323,  327,  388 }, // 777
  {  323,  328,  389 }, // 778
  {  324,  326,  443 }, // 779
  {  324,  329,  445 }, // 780
  {  325,  327,  450 }, // 781
  {  325,  330,  452 }, // 782
  {  326,  327,  478 }, // 783
  {  328,  329,  516 }, // 784
  {  328,  330,  517 }, // 785
  {  329,  330,  554 }, // 786
  {  331,  334,  395 }, // 787
  {  331,  335,  396 }, // 788
  {  331,  336,  397 }, // 789
  {  332,  334,  444 }, // 790
  {  332,  337,  445 }, // 791
  {  333,  335,  451 }, // 792
  {  333,  338,  452 }, // 793
  {  334,  335,  483 }, // 794
  {  336,  337,  522 }, // 795
  {  336,  338,  523 }, // 796
  {  337,  338,  554 }, // 797
  {  339,  341,  349 }, // 798
  {  339,  342,  350 }, // 799
  {  339,  346,  354 }, // 800
  {  339,  347,  355 }, // 801
  {  340,  343,  402 }, // 802
  {  340,  344,  403 }, // 803
  {  340,  345,  404 }, // 804
  {  341,  343,  456 }, // 805
  {  341,  346,  458 }, // 806
  {  342,  344,  462 }, // 807
  {  342,  347,  464 }, // 808
  {  343,  344,  478 }, // 809
  {  345,  346,  528 }, // 810
  {  345,  347,  529 }, // 811
  {  346,  347,  561 }, // 812
  {  348,  351,  409 }, // 813
  {  348,  352,  410 }, // 814
  {  348,  353,  411 }, // 815
  {  349,  351,  457 }, // 816
  {  349,  354,  458 }, // 817
  {  350,  352,  463 }, // 818
  {  350,  355,  464 }, // 819
  {  351,  352,  483 }, // 820
  {  353,  354,  534 }, // 821
  {  353,  355,  535 }, // 822
  {  354,  355,  561 }, // 823
  {  356,  357,  372 }, // 824
  {  356,  358,  373 }, // 825
  {  356,  362,  377 }, // 826
  {  356,  363,  378 }, // 827
  {  357,  358,  468 }, // 828
  {  357,  362,  470 }, // 829
  {  358,  363,  472 }, // 830
  {  359,  360,  493 }, // 831
  {  359,  361,  494 }, // 832
  {  360,  361,  696 }, // 833
  {  360,  362,  697 }, // 834
  {  361,  363,  699 }, // 835
  {  364,  365,  379 }, // 836
  {  364,  366,  380 }, // 837
  {  364,  370,  384 }, // 838
  {  364,  371,  385 }, // 839
  {  365,  366,  473 }, // 840
  {  365,  370,  475 }, // 841
  {  366,  371,  477 }, // 842
  {  367,  368,  500 }, // 843
  {  367,  369,  501 }, // 844
  {  368,  369,  701 }, // 845
  {  368,  370,  702 }, // 846
  {  369,  371,  704 }, // 847
  {  372,  373,  468 }, // 848
  {  372,  377,  470 }, // 849
  {  373,  378,  472 }, // 850
  {  374,  375,  507 }, // 851
  {  374,  376,  508 }, // 852
  {  375,  376,  706 }, // 853
  {  375,  377,  707 }, // 854
  {  376,  378,  709 }, // 855
  {  379,  380,  473 }, // 856
  {  379,  384,  475 }, // 857
  {  380,  385,  477 }, // 858
  {  381,  382,  514 }, // 859
  {  381,  383,  515 }, // 860
  {  382,  383,  711 }, // 861
  {  382,  384,  712 }, // 862
  {  383,  385,  714 }, // 863
  {  386,  387,  402 }, // 864
  {  386,  388,  403 }, // 865
  {  386,  392,  407 }, // 866
  {  386,  393,  408 }, // 867
  {  387,  388,  478 }, // 868
  {  387,  392,  480 }, // 869
  {  388,  393,  482 }, // 870
  {  389,  390,  520 }, // 871
  {  389,  391,  521 }, // 872
  {  390,  391,  696 }, // 873
  {  390,  392,  698 }, // 874
  {  391,  393,  700 }, // 875
  {  394,  395,  409 }, // 876
  {  394,  396,  410 }, // 877
  {  394,  400,  414 }, // 878
  {  394,  401,  415 }, // 879
  {  395,  396,  483 }, // 880
  {  395,  400,  485 }, // 881
  {  396,  401,  487 }, // 882
  {  397,  398,  526 }, // 883
  {  397,  399,  527 }, // 884
  {  398,  399,  701 }, // 885
  {  398,  400,  703 }, // 886
  {  399,  401,  705 }, // 887
  {  402,  403,  478 }, // 888
  {  402,  407,  480 }, // 889
  {  403,  408,  482 }, // 890
  {  404,  405,  532 }, // 891
  {  404,  406,  533 }, // 892
  {  405,  406,  706 }, // 893
  {  405,  407,  708 }, // 894
  {  406,  408,  710 }, // 895
  {  409,  410,  483 }, // 896
  {  409,  414,  485 }, // 897
  {  410,  415,  487 }, // 898
  {  411,  412,  538 }, // 899
  {  411,  413,  539 }, // 900
  {  412,  413,  711 }, // 901
  {  412,  414,  713 }, // 902
  {  413,  415,  715 }, // 903
  {  416,  417,  430 }, // 904
  {  416,  418,  431 }, // 905
  {  416,  420,  433 }, // 906
  {  416,  421,  434 }, // 907
  {  417,  420,  469 }, // 908
  {  418,  421,  474 }, // 909
  {  419,  422,  543 }, // 910
  {  420,  421,  664 }, // 911
  {  420,  422,  665 }, // 912
  {  421,  422,  672 }, // 913
  {  423,  424,  436 }, // 914
  {  423,  425,  437 }, // 915
  {  423,  427,  439 }, // 916
  {  423,  428,  440 }, // 917
  {  424,  427,  471 }, // 918
  {  425,  428,  476 }, // 919
  {  426,  429,  546 }, // 920
  {  427,  428,  668 }, // 921
  {  427,  429,  669 }, // 922
  {  428,  429,  675 }, // 923
  {  430,  433,  469 }, // 924
  {  431,  434,  474 }, // 925
  {  432,  435,  550 }, // 926
  {  433,  434,  664 }, // 927
  {  433,  435,  666 }, // 928
  {  434,  435,  673 }, // 929
  {  436,  439,  471 }, // 930
  {  437,  440,  476 }, // 931
  {  438,  441,  553 }, // 932
  {  439,  440,  668 }, // 933
  {  439,  441,  670 }, // 934
  {  440,  441,  676 }, // 935
  {  442,  443,  456 }, // 936
  {  442,  444,  457 }, // 937
  {  442,  446,  459 }, // 938
  {  442,  447,  460 }, // 939
  {  443,  446,  479 }, // 940
  {  444,  447,  484 }, // 941
  {  445,  448,  557 }, // 942
  {  446,  447,  678 }, // 943
  {  446,  448,  679 }, // 944
  {  447,  448,  686 }, // 945
  {  449,  450,  462 }, // 946
  {  449,  451,  463 }, // 947
  {  449,  453,  465 }, // 948
  {  449,  454,  466 }, // 949
  {  450,  453,  481 }, // 950
  {  451,  454,  486 }, // 951
  {  452,  455,  560 }, // 952
  {  453,  454,  682 }, // 953
  {  453,  455,  683 }, // 954
  {  454,  455,  689 }, // 955
  {  456,  459,  479 }, // 956
  {  457,  460,  484 }, // 957
  {  458,  461,  564 }, // 958
  {  459,  460,  678 }, // 959
  {  459,  461,  680 }, // 960
  {  460,  461,  687 }, // 961
  {  462,  465,  481 }, // 962
  {  463,  466,  486 }, // 963
  {  464,  467,  567 }, // 964
  {  465,  466,  682 }, // 965
  {  465,  467,  684 }, // 966
  {  466,  467,  690 }, // 967
  {  469,  470,  667 }, // 968
  {  471,  472,  671 }, // 969
  {  474,  475,  674 }, // 970
  {  476,  477,  677 }, // 971
  {  479,  480,  681 }, // 972
  {  481,  482,  685 }, // 973
  {  484,  485,  688 }, // 974
  {  486,  487,  691 }, // 975
  {  488,  491,  518 }, // 976
  {  488,  492,  519 }, // 977
  {  488,  493,  520 }, // 978
  {  488,  494,  521 }, // 979
  {  489,  490,  540 }, // 980
  {  489,  491,  541 }, // 981
  {  490,  492,  544 }, // 982
  {  491,  493,  639 }, // 983
  {  492,  494,  643 }, // 984
  {  493,  494,  696 }, // 985
  {  495,  498,  524 }, // 986
  {  495,  499,  525 }, // 987
  {  495,  500,  526 }, // 988
  {  495,  501,  527 }, // 989
  {  496,  497,  540 }, // 990
  {  496,  498,  542 }, // 991
  {  497,  499,  545 }, // 992
  {  498,  500,  646 }, // 993
  {  499,  501,  649 }, // 994
  {  500,  501,  701 }, // 995
  {  502,  505,  530 }, // 996
  {  502,  506,  531 }, // 997
  {  502,  507,  532 }, // 998
  {  502,  508,  533 }, // 999
  {  503,  504,  547 }, //1000
  {  503,  505,  548 }, //1001
  {  504,  506,  551 }, //1002
  {  505,  507,  653 }, //1003
  {  506,  508,  657 }, //1004
  {  507,  508,  706 }, //1005
  {  509,  512,  536 }, //1006
  {  509,  513,  537 }, //1007
  {  509,  514,  538 }, //1008
  {  509,  515,  539 }, //1009
  {  510,  511,  547 }, //1010
  {  510,  512,  549 }, //1011
  {  511,  513,  552 }, //1012
  {  512,  514,  660 }, //1013
  {  513,  515,  663 }, //1014
  {  514,  515,  711 }, //1015
  {  516,  517,  554 }, //1016
  {  516,  518,  555 }, //1017
  {  517,  519,  558 }, //1018
  {  518,  520,  639 }, //1019
  {  519,  521,  643 }, //1020
  {  520,  521,  696 }, //1021
  {  522,  523,  554 }, //1022
  {  522,  524,  556 }, //1023
  {  523,  525,  559 }, //1024
  {  524,  526,  646 }, //1025
  {  525,  527,  649 }, //1026
  {  526,  527,  701 }, //1027
  {  528,  529,  561 }, //1028
  {  528,  530,  562 }, //1029
  {  529,  531,  565 }, //1030
  {  530,  532,  653 }, //1031
  {  531,  533,  657 }, //1032
  {  532,  533,  706 }, //1033
  {  534,  535,  561 }, //1034
  {  534,  536,  563 }, //1035
  {  535,  537,  566 }, //1036
  {  536,  538,  660 }, //1037
  {  537,  539,  663 }, //1038
  {  538,  539,  711 }, //1039
  {  541,  542,  636 }, //1040
  {  541,  543,  637 }, //1041
  {  542,  543,  644 }, //1042
  {  544,  545,  640 }, //1043
  {  544,  546,  641 }, //1044
  {  545,  546,  647 }, //1045
  {  548,  549,  650 }, //1046
  {  548,  550,  651 }, //1047
  {  549,  550,  658 }, //1048
  {  551,  552,  654 }, //1049
  {  551,  553,  655 }, //1050
  {  552,  553,  661 }, //1051
  {  555,  556,  636 }, //1052
  {  555,  557,  638 }, //1053
  {  556,  557,  645 }, //1054
  {  558,  559,  640 }, //1055
  {  558,  560,  642 }, //1056
  {  559,  560,  648 }, //1057
  {  562,  563,  650 }, //1058
  {  562,  564,  652 }, //1059
  {  563,  564,  659 }, //1060
  {  565,  566,  654 }, //1061
  {  565,  567,  656 }, //1062
  {  566,  567,  662 }, //1063
  {  568,  570,  605 }, //1064
  {  568,  571,  606 }, //1065
  {  568,  575,  610 }, //1066
  {  568,  576,  611 }, //1067
  {  569,  572,  637 }, //1068
  {  569,  573,  638 }, //1069
  {  569,  574,  639 }, //1070
  {  570,  572,  665 }, //1071
  {  570,  575,  667 }, //1072
  {  571,  573,  679 }, //1073
  {  571,  576,  681 }, //1074
  {  572,  573,  692 }, //1075
  {  574,  575,  697 }, //1076
  {  574,  576,  698 }, //1077
  {  575,  576,  716 }, //1078
  {  577,  579,  613 }, //1079
  {  577,  580,  614 }, //1080
  {  577,  584,  618 }, //1081
  {  577,  585,  619 }, //1082
  {  578,  581,  641 }, //1083
  {  578,  582,  642 }, //1084
  {  578,  583,  643 }, //1085
  {  579,  581,  669 }, //1086
  {  579,  584,  671 }, //1087
  {  580,  582,  683 }, //1088
  {  580,  585,  685 }, //1089
  {  581,  582,  693 }, //1090
  {  583,  584,  699 }, //1091
  {  583,  585,  700 }, //1092
  {  584,  585,  717 }, //1093
  {  586,  588,  621 }, //1094
  {  586,  589,  622 }, //1095
  {  586,  593,  626 }, //1096
  {  586,  594,  627 }, //1097
  {  587,  590,  644 }, //1098
  {  587,  591,  645 }, //1099
  {  587,  592,  646 }, //1100
  {  588,  590,  672 }, //1101
  {  588,  593,  674 }, //1102
  {  589,  591,  686 }, //1103
  {  589,  594,  688 }, //1104
  {  590,  591,  692 }, //1105
  {  592,  593,  702 }, //1106
  {  592,  594,  703 }, //1107
  {  593,  594,  718 }, //1108
  {  595,  597,  629 }, //1109
  {  595,  598,  630 }, //1110
  {  595,  602,  634 }, //1111
  {  595,  603,  635 }, //1112
  {  596,  599,  647 }, //1113
  {  596,  600,  648 }, //1114
  {  596,  601,  649 }, //1115
  {  597,  599,  675 }, //1116
  {  597,  602,  677 }, //1117
  {  598,  600,  689 }, //1118
  {  598,  603,  691 }, //1119
  {  599,  600,  693 }, //1120
  {  601,  602,  704 }, //1121
  {  601,  603,  705 }, //1122
  {  602,  603,  719 }, //1123
  {  604,  607,  651 }, //1124
  {  604,  608,  652 }, //1125
  {  604,  609,  653 }, //1126
  {  605,  607,  666 }, //1127
  {  605,  610,  667 }, //1128
  {  606,  608,  680 }, //1129
  {  606,  611,  681 }, //1130
  {  607,  608,  694 }, //1131
  {  609,  610,  707 }, //1132
  {  609,  611,  708 }, //1133
  {  610,  611,  716 }, //1134
  {  612,  615,  655 }, //1135
  {  612,  616,  656 }, //1136
  {  612,  617,  657 }, //1137
  {  613,  615,  670 }, //1138
  {  613,  618,  671 }, //1139
  {  614,  616,  684 }, //1140
  {  614,  619,  685 }, //1141
  {  615,  616,  695 }, //1142
  {  617,  618,  709 }, //1143
  {  617,  619,  710 }, //1144
  {  618,  619,  717 }, //1145
  {  620,  623,  658 }, //1146
  {  620,  624,  659 }, //1147
  {  620,  625,  660 }, //1148
  {  621,  623,  673 }, //1149
  {  621,  626,  674 }, //1150
  {  622,  624,  687 }, //1151
  {  622,  627,  688 }, //1152
  {  623,  624,  694 }, //1153
  {  625,  626,  712 }, //1154
  {  625,  627,  713 }, //1155
  {  626,  627,  718 }, //1156
  {  628,  631,  661 }, //1157
  {  628,  632,  662 }, //1158
  {  628,  633,  663 }, //1159
  {  629,  631,  676 }, //1160
  {  629,  634,  677 }, //1161
  {  630,  632,  690 }, //1162
  {  630,  635,  691 }, //1163
  {  631,  632,  695 }, //1164
  {  633,  634,  714 }, //1165
  {  633,  635,  715 }, //1166
  {  634,  635,  719 }, //1167
  {  636,  637,  644 }, //1168
  {  636,  638,  645 }, //1169
  {  637,  638,  692 }, //1170
  {  640,  641,  647 }, //1171
  {  640,  642,  648 }, //1172
  {  641,  642,  693 }, //1173
  {  644,  645,  692 }, //1174
  {  647,  648,  693 }, //1175
  {  650,  651,  658 }, //1176
  {  650,  652,  659 }, //1177
  {  651,  652,  694 }, //1178
  {  654,  655,  661 }, //1179
  {  654,  656,  662 }, //1180
  {  655,  656,  695 }, //1181
  {  658,  659,  694 }, //1182
  {  661,  662,  695 }, //1183
  {  664,  665,  672 }, //1184
  {  664,  666,  673 }, //1185
  {  668,  669,  675 }, //1186
  {  668,  670,  676 }, //1187
  {  678,  679,  686 }, //1188
  {  678,  680,  687 }, //1189
  {  682,  683,  689 }, //1190
  {  682,  684,  690 }, //1191
  {  697,  698,  716 }, //1192
  {  699,  700,  717 }, //1193
  {  702,  703,  718 }, //1194
  {  704,  705,  719 }, //1195
  {  707,  708,  716 }, //1196
  {  709,  710,  717 }, //1197
  {  712,  713,  718 }, //1198
  {  714,  715,  719 }, //1199
};
int edgeToFaceK600[720][5] = { // Faces on each edge, in edge order
  {    0,    1,    2,    3,    4 }, //   0
  {    0,    5,    6,    7,    8 }, //   1
  {    1,    9,   10,   11,   12 }, //   2
  {    2,    5,    9,   13,   14 }, //   3
  {    3,    6,   15,   16,   17 }, //   4
  {    4,   10,   15,   18,   19 }, //   5
  {   20,   21,   22,   23,   24 }, //   6
  {   16,   18,   20,   25,   26 }, //   7
  {   11,   13,   21,   27,   28 }, //   8
  {   12,   19,   22,   25,   27 }, //   9
  {    7,   17,   23,   26,   29 }, //  10
  {    8,   14,   24,   28,   29 }, //  11
  {   30,   31,   32,   33,   34 }, //  12
  {   30,   35,   36,   37,   38 }, //  13
  {   31,   39,   40,   41,   42 }, //  14
  {   32,   35,   39,   43,   44 }, //  15
  {   33,   36,   45,   46,   47 }, //  16
  {   34,   40,   45,   48,   49 }, //  17
  {   50,   51,   52,   53,   54 }, //  18
  {   46,   48,   50,   55,   56 }, //  19
  {   41,   43,   51,   57,   58 }, //  20
  {   42,   49,   52,   55,   57 }, //  21
  {   37,   47,   53,   56,   59 }, //  22
  {   38,   44,   54,   58,   59 }, //  23
  {   60,   61,   62,   63,   64 }, //  24
  {   60,   65,   66,   67,   68 }, //  25
  {   61,   69,   70,   71,   72 }, //  26
  {   62,   65,   69,   73,   74 }, //  27
  {   63,   66,   75,   76,   77 }, //  28
  {   64,   70,   75,   78,   79 }, //  29
  {   80,   81,   82,   83,   84 }, //  30
  {   76,   78,   80,   85,   86 }, //  31
  {   71,   73,   81,   87,   88 }, //  32
  {   72,   79,   82,   85,   87 }, //  33
  {   67,   77,   83,   86,   89 }, //  34
  {   68,   74,   84,   88,   89 }, //  35
  {   90,   91,   92,   93,   94 }, //  36
  {   90,   95,   96,   97,   98 }, //  37
  {   91,   99,  100,  101,  102 }, //  38
  {   92,   95,   99,  103,  104 }, //  39
  {   93,   96,  105,  106,  107 }, //  40
  {   94,  100,  105,  108,  109 }, //  41
  {  110,  111,  112,  113,  114 }, //  42
  {  106,  108,  110,  115,  116 }, //  43
  {  101,  103,  111,  117,  118 }, //  44
  {  102,  109,  112,  115,  117 }, //  45
  {   97,  107,  113,  116,  119 }, //  46
  {   98,  104,  114,  118,  119 }, //  47
  {  120,  121,  122,  123,  124 }, //  48
  {  120,  125,  126,  127,  128 }, //  49
  {  121,  129,  130,  131,  132 }, //  50
  {  122,  125,  129,  133,  134 }, //  51
  {  123,  126,  135,  136,  137 }, //  52
  {  124,  130,  135,  138,  139 }, //  53
  {  140,  141,  142,  143,  144 }, //  54
  {  136,  138,  140,  145,  146 }, //  55
  {  131,  133,  141,  147,  148 }, //  56
  {  132,  139,  142,  145,  147 }, //  57
  {  127,  137,  143,  146,  149 }, //  58
  {  128,  134,  144,  148,  149 }, //  59
  {  150,  151,  152,  153,  154 }, //  60
  {  150,  155,  156,  157,  158 }, //  61
  {  151,  159,  160,  161,  162 }, //  62
  {  152,  155,  159,  163,  164 }, //  63
  {  153,  156,  165,  166,  167 }, //  64
  {  154,  160,  165,  168,  169 }, //  65
  {  170,  171,  172,  173,  174 }, //  66
  {  166,  168,  170,  175,  176 }, //  67
  {  161,  163,  171,  177,  178 }, //  68
  {  162,  169,  172,  175,  177 }, //  69
  {  157,  167,  173,  176,  179 }, //  70
  {  158,  164,  174,  178,  179 }, //  71
  {  180,  181,  182,  183,  184 }, //  72
  {  180,  185,  186,  187,  188 }, //  73
  {  181,  189,  190,  191,  192 }, //  74
  {  182,  185,  189,  193,  194 }, //  75
  {  183,  186,  195,  196,  197 }, //  76
  {  184,  190,  195,  198,  199 }, //  77
  {  200,  201,  202,  203,  204 }, //  78
  {  196,  198,  200,  205,  206 }, //  79
  {  191,  193,  201,  207,  208 }, //  80
  {  192,  199,  202,  205,  207 }, //  81
  {  187,  197,  203,  206,  209 }, //  82
  {  188,  194,  204,  208,  209 }, //  83
  {  210,  211,  212,  213,  214 }, //  84
  {  210,  215,  216,  217,  218 }, //  85
  {  211,  219,  220,  221,  222 }, //  86
  {  212,  215,  219,  223,  224 }, //  87
  {  213,  216,  225,  226,  227 }, //  88
  {  214,  220,  225,  228,  229 }, //  89
  {  230,  231,  232,  233,  234 }, //  90
  {  226,  228,  230,  235,  236 }, //  91
  {  221,  223,  231,  237,  238 }, //  92
  {  222,  229,  232,  235,  237 }, //  93
  {  217,  227,  233,  236,  239 }, //  94
  {  218,  224,  234,  238,  239 }, //  95
  {  240,  241,  242,  243,  244 }, //  96
  {  240,  245,  246,  247,  248 }, //  97
  {  241,  249,  250,  251,  252 }, //  98
  {  242,  245,  249,  253,  254 }, //  99
  {  243,  246,  255,  256,  257 }, // 100
  {  244,  250,  255,  258,  259 }, // 101
  {  260,  261,  262,  263,  264 }, // 102
  {  256,  258,  260,  265,  266 }, // 103
  {  251,  253,  261,  267,  268 }, // 104
  {  252,  259,  262,  265,  267 }, // 105
  {  247,  257,  263,  266,  269 }, // 106
  {  248,  254,  264,  268,  269 }, // 107
  {  270,  271,  272,  273,  274 }, // 108
  {  270,  275,  276,  277,  278 }, // 109
  {  271,  279,  280,  281,  282 }, // 110
  {  272,  275,  279,  283,  284 }, // 111
  {  273,  276,  285,  286,  287 }, // 112
  {  274,  280,  285,  288,  289 }, // 113
  {  290,  291,  292,  293,  294 }, // 114
  {  286,  288,  290,  295,  296 }, // 115
  {  281,  283,  291,  297,  298 }, // 116
  {  282,  289,  292,  295,  297 }, // 117
  {  277,  287,  293,  296,  299 }, // 118
  {  278,  284,  294,  298,  299 }, // 119
  {  300,  301,  302,  303,  304 }, // 120
  {  300,  305,  306,  307,  308 }, // 121
  {  301,  309,  310,  311,  312 }, // 122
  {  302,  305,  309,  313,  314 }, // 123
  {  303,  306,  315,  316,  317 }, // 124
  {  304,  310,  315,  318,  319 }, // 125
  {  320,  321,  322,  323,  324 }, // 126
  {  316,  318,  320,  325,  326 }, // 127
  {  311,  313,  321,  327,  328 }, // 128
  {  312,  319,  322,  325,  327 }, // 129
  {  307,  317,  323,  326,  329 }, // 130
  {  308,  314,  324,  328,  329 }, // 131
  {  330,  331,  332,  333,  334 }, // 132
  {  330,  335,  336,  337,  338 }, // 133
  {  331,  339,  340,  341,  342 }, // 134
  {  332,  335,  339,  343,  344 }, // 135
  {  333,  336,  345,  346,  347 }, // 136
  {  334,  340,  345,  348,  349 }, // 137
  {  350,  351,  352,  353,  354 }, // 138
  {  346,  348,  350,  355,  356 }, // 139
  {  341,  343,  351,  357,  358 }, // 140
  {  342,  349,  352,  355,  357 }, // 141
  {  337,  347,  353,  356,  359 }, // 142
  {  338,  344,  354,  358,  359 }, // 143
  {  360,  361,  362,  363,  364 }, // 144
  {  360,  365,  366,  367,  368 }, // 145
  {  361,  369,  370,  371,  372 }, // 146
  {  362,  365,  369,  373,  374 }, // 147
  {  363,  366,  375,  376,  377 }, // 148
  {  364,  370,  375,  378,  379 }, // 149
  {  380,  381,  382,  383,  384 }, // 150
  {  376,  378,  380,  385,  386 }, // 151
  {  371,  373,  381,  387,  388 }, // 152
  {  372,  379,  382,  385,  387 }, // 153
  {  367,  377,  383,  386,  389 }, // 154
  {  368,  374,  384,  388,  389 }, // 155
  {  390,  391,  392,  393,  394 }, // 156
  {  390,  395,  396,  397,  398 }, // 157
  {  391,  399,  400,  401,  402 }, // 158
  {  392,  395,  399,  403,  404 }, // 159
  {  393,  396,  405,  406,  407 }, // 160
  {  394,  400,  405,  408,  409 }, // 161
  {  410,  411,  412,  413,  414 }, // 162
  {  406,  408,  410,  415,  416 }, // 163
  {  401,  403,  411,  417,  418 }, // 164
  {  402,  409,  412,  415,  417 }, // 165
  {  397,  407,  413,  416,  419 }, // 166
  {  398,  404,  414,  418,  419 }, // 167
  {  420,  421,  422,  423,  424 }, // 168
  {  420,  425,  426,  427,  428 }, // 169
  {  421,  429,  430,  431,  432 }, // 170
  {  422,  425,  429,  433,  434 }, // 171
  {  423,  426,  435,  436,  437 }, // 172
  {  424,  430,  435,  438,  439 }, // 173
  {  440,  441,  442,  443,  444 }, // 174
  {  436,  438,  440,  445,  446 }, // 175
  {  431,  433,  441,  447,  448 }, // 176
  {  432,  439,  442,  445,  447 }, // 177
  {  427,  437,  443,  446,  449 }, // 178
  {  428,  434,  444,  448,  449 }, // 179
  {  450,  451,  452,  453,  454 }, // 180
  {  450,  455,  456,  457,  458 }, // 181
  {  451,  459,  460,  461,  462 }, // 182
  {  452,  455,  459,  463,  464 }, // 183
  {  453,  456,  465,  466,  467 }, // 184
  {  454,  460,  465,  468,  469 }, // 185
  {  470,  471,  472,  473,  474 }, // 186
  {  466,  468,  470,  475,  476 }, // 187
  {  461,  463,  471,  477,  478 }, // 188
  {  462,  469,  472,  475,  477 }, // 189
  {  457,  467,  473,  476,  479 }, // 190
  {  458,  464,  474,  478,  479 }, // 191
  {  480,  481,  482,  483,  484 }, // 192
  {  485,  486,  487,  488,  489 }, // 193
  {  480,  490,  491,  492,  493 }, // 194
  {  485,  494,  495,  496,  497 }, // 195
  {  481,  490,  498,  499,  500 }, // 196
  {  486,  494,  498,  501,  502 }, // 197
  {  482,  491,  503,  504,  505 }, // 198
  {  487,  495,  503,  506,  507 }, // 199
  {  483,  488,  499,  501,  508 }, // 200
  {  492,  496,  500,  502,  509 }, // 201
  {  484,  489,  504,  506,  508 }, // 202
  {  493,  497,  505,  507,  509 }, // 203
  {  510,  511,  512,  513,  514 }, // 204
  {  515,  516,  517,  518,  519 }, // 205
  {  510,  520,  521,  522,  523 }, // 206
  {  515,  524,  525,  526,  527 }, // 207
  {  511,  520,  528,  529,  530 }, // 208
  {  516,  524,  528,  531,  532 }, // 209
  {  512,  521,  533,  534,  535 }, // 210
  {  517,  525,  533,  536,  537 }, // 211
  {  513,  518,  529,  531,  538 }, // 212
  {  522,  526,  530,  532,  539 }, // 213
  {  514,  519,  534,  536,  538 }, // 214
  {  523,  527,  535,  537,  539 }, // 215
  {  540,  541,  542,  543,  544 }, // 216
  {  540,  545,  546,  547,  548 }, // 217
  {  549,  550,  551,  552,  553 }, // 218
  {  549,  554,  555,  556,  557 }, // 219
  {  541,  550,  558,  559,  560 }, // 220
  {  542,  551,  558,  561,  562 }, // 221
  {  545,  554,  563,  564,  565 }, // 222
  {  546,  555,  563,  566,  567 }, // 223
  {  543,  547,  559,  564,  568 }, // 224
  {  544,  548,  561,  566,  569 }, // 225
  {  552,  556,  560,  565,  568 }, // 226
  {  553,  557,  562,  567,  569 }, // 227
  {  570,  571,  572,  573,  574 }, // 228
  {  570,  575,  576,  577,  578 }, // 229
  {  579,  580,  581,  582,  583 }, // 230
  {  579,  584,  585,  586,  587 }, // 231
  {  571,  580,  588,  589,  590 }, // 232
  {  572,  581,  588,  591,  592 }, // 233
  {  575,  584,  593,  594,  595 }, // 234
  {  576,  585,  593,  596,  597 }, // 235
  {  573,  577,  589,  594,  598 }, // 236
  {  574,  578,  591,  596,  599 }, // 237
  {  582,  586,  590,  595,  598 }, // 238
  {  583,  587,  592,  597,  599 }, // 239
  {  600,  601,  602,  603,  604 }, // 240
  {  605,  606,  607,  608,  609 }, // 241
  {  600,  610,  611,  612,  613 }, // 242
  {  605,  614,  615,  616,  617 }, // 243
  {  601,  606,  618,  619,  620 }, // 244
  {  602,  607,  618,  621,  622 }, // 245
  {  610,  614,  623,  624,  625 }, // 246
  {  611,  615,  623,  626,  627 }, // 247
  {  603,  612,  619,  624,  628 }, // 248
  {  604,  613,  621,  626,  629 }, // 249
  {  608,  616,  620,  625,  628 }, // 250
  {  609,  617,  622,  627,  629 }, // 251
  {  630,  631,  632,  633,  634 }, // 252
  {  635,  636,  637,  638,  639 }, // 253
  {  630,  640,  641,  642,  643 }, // 254
  {  635,  644,  645,  646,  647 }, // 255
  {  631,  636,  648,  649,  650 }, // 256
  {  632,  637,  648,  651,  652 }, // 257
  {  640,  644,  653,  654,  655 }, // 258
  {  641,  645,  653,  656,  657 }, // 259
  {  633,  642,  649,  654,  658 }, // 260
  {  634,  643,  651,  656,  659 }, // 261
  {  638,  646,  650,  655,  658 }, // 262
  {  639,  647,  652,  657,  659 }, // 263
  {  660,  661,  662,  663,  664 }, // 264
  {  660,  665,  666,  667,  668 }, // 265
  {  669,  670,  671,  672,  673 }, // 266
  {  669,  674,  675,  676,  677 }, // 267
  {  661,  665,  678,  679,  680 }, // 268
  {  662,  666,  681,  682,  683 }, // 269
  {  670,  674,  678,  684,  685 }, // 270
  {  671,  675,  681,  686,  687 }, // 271
  {  663,  672,  679,  684,  688 }, // 272
  {  664,  673,  682,  686,  688 }, // 273
  {  667,  676,  680,  685,  689 }, // 274
  {  668,  677,  683,  687,  689 }, // 275
  {  690,  691,  692,  693,  694 }, // 276
  {  690,  695,  696,  697,  698 }, // 277
  {  699,  700,  701,  702,  703 }, // 278
  {  699,  704,  705,  706,  707 }, // 279
  {  691,  695,  708,  709,  710 }, // 280
  {  692,  696,  711,  712,  713 }, // 281
  {  700,  704,  708,  714,  715 }, // 282
  {  701,  705,  711,  716,  717 }, // 283
  {  693,  702,  709,  714,  718 }, // 284
  {  694,  703,  712,  716,  718 }, // 285
  {  697,  706,  710,  715,  719 }, // 286
  {  698,  707,  713,  717,  719 }, // 287
  {  660,  720,  721,  722,  723 }, // 288
  {    0,   30,  724,  725,  726 }, // 289
  {    1,  661,  720,  727,  728 }, // 290
  {   31,  662,  721,  729,  730 }, // 291
  {    2,  663,  724,  727,  731 }, // 292
  {   32,  664,  725,  729,  731 }, // 293
  {    3,   33,  726,  732,  733 }, // 294
  {    4,  722,  728,  732,  734 }, // 295
  {   34,  723,  730,  733,  734 }, // 296
  {   60,   90,  735,  736,  737 }, // 297
  {   61,  665,  720,  738,  739 }, // 298
  {   91,  666,  721,  740,  741 }, // 299
  {   62,  667,  735,  738,  742 }, // 300
  {   92,  668,  736,  740,  742 }, // 301
  {   63,   93,  737,  743,  744 }, // 302
  {   64,  722,  739,  743,  745 }, // 303
  {   94,  723,  741,  744,  745 }, // 304
  {  669,  746,  747,  748,  749 }, // 305
  {  120,  150,  750,  751,  752 }, // 306
  {  121,  670,  746,  753,  754 }, // 307
  {  151,  671,  747,  755,  756 }, // 308
  {  122,  672,  750,  753,  757 }, // 309
  {  152,  673,  751,  755,  757 }, // 310
  {  123,  153,  752,  758,  759 }, // 311
  {  124,  748,  754,  758,  760 }, // 312
  {  154,  749,  756,  759,  760 }, // 313
  {  180,  210,  761,  762,  763 }, // 314
  {  181,  674,  746,  764,  765 }, // 315
  {  211,  675,  747,  766,  767 }, // 316
  {  182,  676,  761,  764,  768 }, // 317
  {  212,  677,  762,  766,  768 }, // 318
  {  183,  213,  763,  769,  770 }, // 319
  {  184,  748,  765,  769,  771 }, // 320
  {  214,  749,  767,  770,  771 }, // 321
  {  690,  772,  773,  774,  775 }, // 322
  {  240,  270,  776,  777,  778 }, // 323
  {  241,  691,  772,  779,  780 }, // 324
  {  271,  692,  773,  781,  782 }, // 325
  {  242,  693,  776,  779,  783 }, // 326
  {  272,  694,  777,  781,  783 }, // 327
  {  243,  273,  778,  784,  785 }, // 328
  {  244,  774,  780,  784,  786 }, // 329
  {  274,  775,  782,  785,  786 }, // 330
  {  300,  330,  787,  788,  789 }, // 331
  {  301,  695,  772,  790,  791 }, // 332
  {  331,  696,  773,  792,  793 }, // 333
  {  302,  697,  787,  790,  794 }, // 334
  {  332,  698,  788,  792,  794 }, // 335
  {  303,  333,  789,  795,  796 }, // 336
  {  304,  774,  791,  795,  797 }, // 337
  {  334,  775,  793,  796,  797 }, // 338
  {  699,  798,  799,  800,  801 }, // 339
  {  360,  390,  802,  803,  804 }, // 340
  {  361,  700,  798,  805,  806 }, // 341
  {  391,  701,  799,  807,  808 }, // 342
  {  362,  702,  802,  805,  809 }, // 343
  {  392,  703,  803,  807,  809 }, // 344
  {  363,  393,  804,  810,  811 }, // 345
  {  364,  800,  806,  810,  812 }, // 346
  {  394,  801,  808,  811,  812 }, // 347
  {  420,  450,  813,  814,  815 }, // 348
  {  421,  704,  798,  816,  817 }, // 349
  {  451,  705,  799,  818,  819 }, // 350
  {  422,  706,  813,  816,  820 }, // 351
  {  452,  707,  814,  818,  820 }, // 352
  {  423,  453,  815,  821,  822 }, // 353
  {  424,  800,  817,  821,  823 }, // 354
  {  454,  801,  819,  822,  823 }, // 355
  {  540,  824,  825,  826,  827 }, // 356
  {    5,  724,  824,  828,  829 }, // 357
  {   35,  725,  825,  828,  830 }, // 358
  {    6,   36,  726,  831,  832 }, // 359
  {    7,  541,  831,  833,  834 }, // 360
  {   37,  542,  832,  833,  835 }, // 361
  {    8,  543,  826,  829,  834 }, // 362
  {   38,  544,  827,  830,  835 }, // 363
  {  570,  836,  837,  838,  839 }, // 364
  {   65,  735,  836,  840,  841 }, // 365
  {   95,  736,  837,  840,  842 }, // 366
  {   66,   96,  737,  843,  844 }, // 367
  {   67,  571,  843,  845,  846 }, // 368
  {   97,  572,  844,  845,  847 }, // 369
  {   68,  573,  838,  841,  846 }, // 370
  {   98,  574,  839,  842,  847 }, // 371
  {  125,  750,  824,  848,  849 }, // 372
  {  155,  751,  825,  848,  850 }, // 373
  {  126,  156,  752,  851,  852 }, // 374
  {  127,  545,  851,  853,  854 }, // 375
  {  157,  546,  852,  853,  855 }, // 376
  {  128,  547,  826,  849,  854 }, // 377
  {  158,  548,  827,  850,  855 }, // 378
  {  185,  761,  836,  856,  857 }, // 379
  {  215,  762,  837,  856,  858 }, // 380
  {  186,  216,  763,  859,  860 }, // 381
  {  187,  575,  859,  861,  862 }, // 382
  {  217,  576,  860,  861,  863 }, // 383
  {  188,  577,  838,  857,  862 }, // 384
  {  218,  578,  839,  858,  863 }, // 385
  {  549,  864,  865,  866,  867 }, // 386
  {  245,  776,  864,  868,  869 }, // 387
  {  275,  777,  865,  868,  870 }, // 388
  {  246,  276,  778,  871,  872 }, // 389
  {  247,  550,  871,  873,  874 }, // 390
  {  277,  551,  872,  873,  875 }, // 391
  {  248,  552,  866,  869,  874 }, // 392
  {  278,  553,  867,  870,  875 }, // 393
  {  579,  876,  877,  878,  879 }, // 394
  {  305,  787,  876,  880,  881 }, // 395
  {  335,  788,  877,  880,  882 }, // 396
  {  306,  336,  789,  883,  884 }, // 397
  {  307,  580,  883,  885,  886 }, // 398
  {  337,  581,  884,  885,  887 }, // 399
  {  308,  582,  878,  881,  886 }, // 400
  {  338,  583,  879,  882,  887 }, // 401
  {  365,  802,  864,  888,  889 }, // 402
  {  395,  803,  865,  888,  890 }, // 403
  {  366,  396,  804,  891,  892 }, // 404
  {  367,  554,  891,  893,  894 }, // 405
  {  397,  555,  892,  893,  895 }, // 406
  {  368,  556,  866,  889,  894 }, // 407
  {  398,  557,  867,  890,  895 }, // 408
  {  425,  813,  876,  896,  897 }, // 409
  {  455,  814,  877,  896,  898 }, // 410
  {  426,  456,  815,  899,  900 }, // 411
  {  427,  584,  899,  901,  902 }, // 412
  {  457,  585,  900,  901,  903 }, // 413
  {  428,  586,  878,  897,  902 }, // 414
  {  458,  587,  879,  898,  903 }, // 415
  {  678,  904,  905,  906,  907 }, // 416
  {    9,  679,  727,  904,  908 }, // 417
  {   69,  680,  738,  905,  909 }, // 418
  {   10,   70,  728,  739,  910 }, // 419
  {   11,  906,  908,  911,  912 }, // 420
  {   71,  907,  909,  911,  913 }, // 421
  {   12,   72,  910,  912,  913 }, // 422
  {  681,  914,  915,  916,  917 }, // 423
  {   39,  682,  729,  914,  918 }, // 424
  {   99,  683,  740,  915,  919 }, // 425
  {   40,  100,  730,  741,  920 }, // 426
  {   41,  916,  918,  921,  922 }, // 427
  {  101,  917,  919,  921,  923 }, // 428
  {   42,  102,  920,  922,  923 }, // 429
  {  129,  684,  753,  904,  924 }, // 430
  {  189,  685,  764,  905,  925 }, // 431
  {  130,  190,  754,  765,  926 }, // 432
  {  131,  906,  924,  927,  928 }, // 433
  {  191,  907,  925,  927,  929 }, // 434
  {  132,  192,  926,  928,  929 }, // 435
  {  159,  686,  755,  914,  930 }, // 436
  {  219,  687,  766,  915,  931 }, // 437
  {  160,  220,  756,  767,  932 }, // 438
  {  161,  916,  930,  933,  934 }, // 439
  {  221,  917,  931,  933,  935 }, // 440
  {  162,  222,  932,  934,  935 }, // 441
  {  708,  936,  937,  938,  939 }, // 442
  {  249,  709,  779,  936,  940 }, // 443
  {  309,  710,  790,  937,  941 }, // 444
  {  250,  310,  780,  791,  942 }, // 445
  {  251,  938,  940,  943,  944 }, // 446
  {  311,  939,  941,  943,  945 }, // 447
  {  252,  312,  942,  944,  945 }, // 448
  {  711,  946,  947,  948,  949 }, // 449
  {  279,  712,  781,  946,  950 }, // 450
  {  339,  713,  792,  947,  951 }, // 451
  {  280,  340,  782,  793,  952 }, // 452
  {  281,  948,  950,  953,  954 }, // 453
  {  341,  949,  951,  953,  955 }, // 454
  {  282,  342,  952,  954,  955 }, // 455
  {  369,  714,  805,  936,  956 }, // 456
  {  429,  715,  816,  937,  957 }, // 457
  {  370,  430,  806,  817,  958 }, // 458
  {  371,  938,  956,  959,  960 }, // 459
  {  431,  939,  957,  959,  961 }, // 460
  {  372,  432,  958,  960,  961 }, // 461
  {  399,  716,  807,  946,  962 }, // 462
  {  459,  717,  818,  947,  963 }, // 463
  {  400,  460,  808,  819,  964 }, // 464
  {  401,  948,  962,  965,  966 }, // 465
  {  461,  949,  963,  965,  967 }, // 466
  {  402,  462,  964,  966,  967 }, // 467
  {  688,  731,  757,  828,  848 }, // 468
  {   13,  133,  908,  924,  968 }, // 469
  {   14,  134,  829,  849,  968 }, // 470
  {   43,  163,  918,  930,  969 }, // 471
  {   44,  164,  830,  850,  969 }, // 472
  {  689,  742,  768,  840,  856 }, // 473
  {   73,  193,  909,  925,  970 }, // 474
  {   74,  194,  841,  857,  970 }, // 475
  {  103,  223,  919,  931,  971 }, // 476
  {  104,  224,  842,  858,  971 }, // 477
  {  718,  783,  809,  868,  888 }, // 478
  {  253,  373,  940,  956,  972 }, // 479
  {  254,  374,  869,  889,  972 }, // 480
  {  283,  403,  950,  962,  973 }, // 481
  {  284,  404,  870,  890,  973 }, // 482
  {  719,  794,  820,  880,  896 }, // 483
  {  313,  433,  941,  957,  974 }, // 484
  {  314,  434,  881,  897,  974 }, // 485
  {  343,  463,  951,  963,  975 }, // 486
  {  344,  464,  882,  898,  975 }, // 487
  {  600,  976,  977,  978,  979 }, // 488
  {   15,  601,  732,  980,  981 }, // 489
  {   45,  602,  733,  980,  982 }, // 490
  {   16,  603,  976,  981,  983 }, // 491
  {   46,  604,  977,  982,  984 }, // 492
  {   17,  831,  978,  983,  985 }, // 493
  {   47,  832,  979,  984,  985 }, // 494
  {  605,  986,  987,  988,  989 }, // 495
  {   75,  606,  743,  990,  991 }, // 496
  {  105,  607,  744,  990,  992 }, // 497
  {   76,  608,  986,  991,  993 }, // 498
  {  106,  609,  987,  992,  994 }, // 499
  {   77,  843,  988,  993,  995 }, // 500
  {  107,  844,  989,  994,  995 }, // 501
  {  630,  996,  997,  998,  999 }, // 502
  {  135,  631,  758, 1000, 1001 }, // 503
  {  165,  632,  759, 1000, 1002 }, // 504
  {  136,  633,  996, 1001, 1003 }, // 505
  {  166,  634,  997, 1002, 1004 }, // 506
  {  137,  851,  998, 1003, 1005 }, // 507
  {  167,  852,  999, 1004, 1005 }, // 508
  {  635, 1006, 1007, 1008, 1009 }, // 509
  {  195,  636,  769, 1010, 1011 }, // 510
  {  225,  637,  770, 1010, 1012 }, // 511
  {  196,  638, 1006, 1011, 1013 }, // 512
  {  226,  639, 1007, 1012, 1014 }, // 513
  {  197,  859, 1008, 1013, 1015 }, // 514
  {  227,  860, 1009, 1014, 1015 }, // 515
  {  255,  610,  784, 1016, 1017 }, // 516
  {  285,  611,  785, 1016, 1018 }, // 517
  {  256,  612,  976, 1017, 1019 }, // 518
  {  286,  613,  977, 1018, 1020 }, // 519
  {  257,  871,  978, 1019, 1021 }, // 520
  {  287,  872,  979, 1020, 1021 }, // 521
  {  315,  614,  795, 1022, 1023 }, // 522
  {  345,  615,  796, 1022, 1024 }, // 523
  {  316,  616,  986, 1023, 1025 }, // 524
  {  346,  617,  987, 1024, 1026 }, // 525
  {  317,  883,  988, 1025, 1027 }, // 526
  {  347,  884,  989, 1026, 1027 }, // 527
  {  375,  640,  810, 1028, 1029 }, // 528
  {  405,  641,  811, 1028, 1030 }, // 529
  {  376,  642,  996, 1029, 1031 }, // 530
  {  406,  643,  997, 1030, 1032 }, // 531
  {  377,  891,  998, 1031, 1033 }, // 532
  {  407,  892,  999, 1032, 1033 }, // 533
  {  435,  644,  821, 1034, 1035 }, // 534
  {  465,  645,  822, 1034, 1036 }, // 535
  {  436,  646, 1006, 1035, 1037 }, // 536
  {  466,  647, 1007, 1036, 1038 }, // 537
  {  437,  899, 1008, 1037, 1039 }, // 538
  {  467,  900, 1009, 1038, 1039 }, // 539
  {  618,  734,  745,  980,  990 }, // 540
  {   18,  619,  981, 1040, 1041 }, // 541
  {   78,  620,  991, 1040, 1042 }, // 542
  {   19,   79,  910, 1041, 1042 }, // 543
  {   48,  621,  982, 1043, 1044 }, // 544
  {  108,  622,  992, 1043, 1045 }, // 545
  {   49,  109,  920, 1044, 1045 }, // 546
  {  648,  760,  771, 1000, 1010 }, // 547
  {  138,  649, 1001, 1046, 1047 }, // 548
  {  198,  650, 1011, 1046, 1048 }, // 549
  {  139,  199,  926, 1047, 1048 }, // 550
  {  168,  651, 1002, 1049, 1050 }, // 551
  {  228,  652, 1012, 1049, 1051 }, // 552
  {  169,  229,  932, 1050, 1051 }, // 553
  {  623,  786,  797, 1016, 1022 }, // 554
  {  258,  624, 1017, 1052, 1053 }, // 555
  {  318,  625, 1023, 1052, 1054 }, // 556
  {  259,  319,  942, 1053, 1054 }, // 557
  {  288,  626, 1018, 1055, 1056 }, // 558
  {  348,  627, 1024, 1055, 1057 }, // 559
  {  289,  349,  952, 1056, 1057 }, // 560
  {  653,  812,  823, 1028, 1034 }, // 561
  {  378,  654, 1029, 1058, 1059 }, // 562
  {  438,  655, 1035, 1058, 1060 }, // 563
  {  379,  439,  958, 1059, 1060 }, // 564
  {  408,  656, 1030, 1061, 1062 }, // 565
  {  468,  657, 1036, 1061, 1063 }, // 566
  {  409,  469,  964, 1062, 1063 }, // 567
  {  480, 1064, 1065, 1066, 1067 }, // 568
  {   20,  260, 1068, 1069, 1070 }, // 569
  {   21,  481, 1064, 1071, 1072 }, // 570
  {  261,  482, 1065, 1073, 1074 }, // 571
  {   22,  483, 1068, 1071, 1075 }, // 572
  {  262,  484, 1069, 1073, 1075 }, // 573
  {   23,  263, 1070, 1076, 1077 }, // 574
  {   24, 1066, 1072, 1076, 1078 }, // 575
  {  264, 1067, 1074, 1077, 1078 }, // 576
  {  510, 1079, 1080, 1081, 1082 }, // 577
  {   50,  290, 1083, 1084, 1085 }, // 578
  {   51,  511, 1079, 1086, 1087 }, // 579
  {  291,  512, 1080, 1088, 1089 }, // 580
  {   52,  513, 1083, 1086, 1090 }, // 581
  {  292,  514, 1084, 1088, 1090 }, // 582
  {   53,  293, 1085, 1091, 1092 }, // 583
  {   54, 1081, 1087, 1091, 1093 }, // 584
  {  294, 1082, 1089, 1092, 1093 }, // 585
  {  485, 1094, 1095, 1096, 1097 }, // 586
  {   80,  320, 1098, 1099, 1100 }, // 587
  {   81,  486, 1094, 1101, 1102 }, // 588
  {  321,  487, 1095, 1103, 1104 }, // 589
  {   82,  488, 1098, 1101, 1105 }, // 590
  {  322,  489, 1099, 1103, 1105 }, // 591
  {   83,  323, 1100, 1106, 1107 }, // 592
  {   84, 1096, 1102, 1106, 1108 }, // 593
  {  324, 1097, 1104, 1107, 1108 }, // 594
  {  515, 1109, 1110, 1111, 1112 }, // 595
  {  110,  350, 1113, 1114, 1115 }, // 596
  {  111,  516, 1109, 1116, 1117 }, // 597
  {  351,  517, 1110, 1118, 1119 }, // 598
  {  112,  518, 1113, 1116, 1120 }, // 599
  {  352,  519, 1114, 1118, 1120 }, // 600
  {  113,  353, 1115, 1121, 1122 }, // 601
  {  114, 1111, 1117, 1121, 1123 }, // 602
  {  354, 1112, 1119, 1122, 1123 }, // 603
  {  140,  380, 1124, 1125, 1126 }, // 604
  {  141,  490, 1064, 1127, 1128 }, // 605
  {  381,  491, 1065, 1129, 1130 }, // 606
  {  142,  492, 1124, 1127, 1131 }, // 607
  {  382,  493, 1125, 1129, 1131 }, // 608
  {  143,  383, 1126, 1132, 1133 }, // 609
  {  144, 1066, 1128, 1132, 1134 }, // 610
  {  384, 1067, 1130, 1133, 1134 }, // 611
  {  170,  410, 1135, 1136, 1137 }, // 612
  {  171,  520, 1079, 1138, 1139 }, // 613
  {  411,  521, 1080, 1140, 1141 }, // 614
  {  172,  522, 1135, 1138, 1142 }, // 615
  {  412,  523, 1136, 1140, 1142 }, // 616
  {  173,  413, 1137, 1143, 1144 }, // 617
  {  174, 1081, 1139, 1143, 1145 }, // 618
  {  414, 1082, 1141, 1144, 1145 }, // 619
  {  200,  440, 1146, 1147, 1148 }, // 620
  {  201,  494, 1094, 1149, 1150 }, // 621
  {  441,  495, 1095, 1151, 1152 }, // 622
  {  202,  496, 1146, 1149, 1153 }, // 623
  {  442,  497, 1147, 1151, 1153 }, // 624
  {  203,  443, 1148, 1154, 1155 }, // 625
  {  204, 1096, 1150, 1154, 1156 }, // 626
  {  444, 1097, 1152, 1155, 1156 }, // 627
  {  230,  470, 1157, 1158, 1159 }, // 628
  {  231,  524, 1109, 1160, 1161 }, // 629
  {  471,  525, 1110, 1162, 1163 }, // 630
  {  232,  526, 1157, 1160, 1164 }, // 631
  {  472,  527, 1158, 1162, 1164 }, // 632
  {  233,  473, 1159, 1165, 1166 }, // 633
  {  234, 1111, 1161, 1165, 1167 }, // 634
  {  474, 1112, 1163, 1166, 1167 }, // 635
  {  628, 1040, 1052, 1168, 1169 }, // 636
  {   25, 1041, 1068, 1168, 1170 }, // 637
  {  265, 1053, 1069, 1169, 1170 }, // 638
  {   26,  266,  983, 1019, 1070 }, // 639
  {  629, 1043, 1055, 1171, 1172 }, // 640
  {   55, 1044, 1083, 1171, 1173 }, // 641
  {  295, 1056, 1084, 1172, 1173 }, // 642
  {   56,  296,  984, 1020, 1085 }, // 643
  {   85, 1042, 1098, 1168, 1174 }, // 644
  {  325, 1054, 1099, 1169, 1174 }, // 645
  {   86,  326,  993, 1025, 1100 }, // 646
  {  115, 1045, 1113, 1171, 1175 }, // 647
  {  355, 1057, 1114, 1172, 1175 }, // 648
  {  116,  356,  994, 1026, 1115 }, // 649
  {  658, 1046, 1058, 1176, 1177 }, // 650
  {  145, 1047, 1124, 1176, 1178 }, // 651
  {  385, 1059, 1125, 1177, 1178 }, // 652
  {  146,  386, 1003, 1031, 1126 }, // 653
  {  659, 1049, 1061, 1179, 1180 }, // 654
  {  175, 1050, 1135, 1179, 1181 }, // 655
  {  415, 1062, 1136, 1180, 1181 }, // 656
  {  176,  416, 1004, 1032, 1137 }, // 657
  {  205, 1048, 1146, 1176, 1182 }, // 658
  {  445, 1060, 1147, 1177, 1182 }, // 659
  {  206,  446, 1013, 1037, 1148 }, // 660
  {  235, 1051, 1157, 1179, 1183 }, // 661
  {  475, 1063, 1158, 1180, 1183 }, // 662
  {  236,  476, 1014, 1038, 1159 }, // 663
  {  498,  911,  927, 1184, 1185 }, // 664
  {   27,  499,  912, 1071, 1184 }, // 665
  {  147,  500,  928, 1127, 1185 }, // 666
  {   28,  148,  968, 1072, 1128 }, // 667
  {  528,  921,  933, 1186, 1187 }, // 668
  {   57,  529,  922, 1086, 1186 }, // 669
  {  177,  530,  934, 1138, 1187 }, // 670
  {   58,  178,  969, 1087, 1139 }, // 671
  {   87,  501,  913, 1101, 1184 }, // 672
  {  207,  502,  929, 1149, 1185 }, // 673
  {   88,  208,  970, 1102, 1150 }, // 674
  {  117,  531,  923, 1116, 1186 }, // 675
  {  237,  532,  935, 1160, 1187 }, // 676
  {  118,  238,  971, 1117, 1161 }, // 677
  {  503,  943,  959, 1188, 1189 }, // 678
  {  267,  504,  944, 1073, 1188 }, // 679
  {  387,  505,  960, 1129, 1189 }, // 680
  {  268,  388,  972, 1074, 1130 }, // 681
  {  533,  953,  965, 1190, 1191 }, // 682
  {  297,  534,  954, 1088, 1190 }, // 683
  {  417,  535,  966, 1140, 1191 }, // 684
  {  298,  418,  973, 1089, 1141 }, // 685
  {  327,  506,  945, 1103, 1188 }, // 686
  {  447,  507,  961, 1151, 1189 }, // 687
  {  328,  448,  974, 1104, 1152 }, // 688
  {  357,  536,  955, 1118, 1190 }, // 689
  {  477,  537,  967, 1162, 1191 }, // 690
  {  358,  478,  975, 1119, 1163 }, // 691
  {  508, 1075, 1105, 1170, 1174 }, // 692
  {  538, 1090, 1120, 1173, 1175 }, // 693
  {  509, 1131, 1153, 1178, 1182 }, // 694
  {  539, 1142, 1164, 1181, 1183 }, // 695
  {  558,  833,  873,  985, 1021 }, // 696
  {   29,  559,  834, 1076, 1192 }, // 697
  {  269,  560,  874, 1077, 1192 }, // 698
  {   59,  561,  835, 1091, 1193 }, // 699
  {  299,  562,  875, 1092, 1193 }, // 700
  {  588,  845,  885,  995, 1027 }, // 701
  {   89,  589,  846, 1106, 1194 }, // 702
  {  329,  590,  886, 1107, 1194 }, // 703
  {  119,  591,  847, 1121, 1195 }, // 704
  {  359,  592,  887, 1122, 1195 }, // 705
  {  563,  853,  893, 1005, 1033 }, // 706
  {  149,  564,  854, 1132, 1196 }, // 707
  {  389,  565,  894, 1133, 1196 }, // 708
  {  179,  566,  855, 1143, 1197 }, // 709
  {  419,  567,  895, 1144, 1197 }, // 710
  {  593,  861,  901, 1015, 1039 }, // 711
  {  209,  594,  862, 1154, 1198 }, // 712
  {  449,  595,  902, 1155, 1198 }, // 713
  {  239,  596,  863, 1165, 1199 }, // 714
  {  479,  597,  903, 1166, 1199 }, // 715
  {  568, 1078, 1134, 1192, 1196 }, // 716
  {  569, 1093, 1145, 1193, 1197 }, // 717
  {  598, 1108, 1156, 1194, 1198 }, // 718
  {  599, 1123, 1167, 1195, 1199 }, // 719
};
int faceToFaceK600[1200][12] = { // Faces connected to each face via edges (in face order, of course)
  {    1,    2,    3,    4,    5,    6,    7,    8,   30,  724,  725,  726 }, //   0
  {    0,    2,    3,    4,    9,   10,   11,   12,  661,  720,  727,  728 }, //   1
  {    0,    1,    3,    4,    5,    9,   13,   14,  663,  724,  727,  731 }, //   2
  {    0,    1,    2,    4,    6,   15,   16,   17,   33,  726,  732,  733 }, //   3
  {    0,    1,    2,    3,   10,   15,   18,   19,  722,  728,  732,  734 }, //   4
  {    0,    6,    7,    8,    2,    9,   13,   14,  724,  824,  828,  829 }, //   5
  {    0,    5,    7,    8,    3,   15,   16,   17,   36,  726,  831,  832 }, //   6
  {    0,    5,    6,    8,   17,   23,   26,   29,  541,  831,  833,  834 }, //   7
  {    0,    5,    6,    7,   14,   24,   28,   29,  543,  826,  829,  834 }, //   8
  {    1,   10,   11,   12,    2,    5,   13,   14,  679,  727,  904,  908 }, //   9
  {    1,    9,   11,   12,    4,   15,   18,   19,   70,  728,  739,  910 }, //  10
  {    1,    9,   10,   12,   13,   21,   27,   28,  906,  908,  911,  912 }, //  11
  {    1,    9,   10,   11,   19,   22,   25,   27,   72,  910,  912,  913 }, //  12
  {    2,    5,    9,   14,   11,   21,   27,   28,  133,  908,  924,  968 }, //  13
  {    2,    5,    9,   13,    8,   24,   28,   29,  134,  829,  849,  968 }, //  14
  {    3,    6,   16,   17,    4,   10,   18,   19,  601,  732,  980,  981 }, //  15
  {    3,    6,   15,   17,   18,   20,   25,   26,  603,  976,  981,  983 }, //  16
  {    3,    6,   15,   16,    7,   23,   26,   29,  831,  978,  983,  985 }, //  17
  {    4,   10,   15,   19,   16,   20,   25,   26,  619,  981, 1040, 1041 }, //  18
  {    4,   10,   15,   18,   12,   22,   25,   27,   79,  910, 1041, 1042 }, //  19
  {   21,   22,   23,   24,   16,   18,   25,   26,  260, 1068, 1069, 1070 }, //  20
  {   20,   22,   23,   24,   11,   13,   27,   28,  481, 1064, 1071, 1072 }, //  21
  {   20,   21,   23,   24,   12,   19,   25,   27,  483, 1068, 1071, 1075 }, //  22
  {   20,   21,   22,   24,    7,   17,   26,   29,  263, 1070, 1076, 1077 }, //  23
  {   20,   21,   22,   23,    8,   14,   28,   29, 1066, 1072, 1076, 1078 }, //  24
  {   16,   18,   20,   26,   12,   19,   22,   27, 1041, 1068, 1168, 1170 }, //  25
  {   16,   18,   20,   25,    7,   17,   23,   29,  266,  983, 1019, 1070 }, //  26
  {   11,   13,   21,   28,   12,   19,   22,   25,  499,  912, 1071, 1184 }, //  27
  {   11,   13,   21,   27,    8,   14,   24,   29,  148,  968, 1072, 1128 }, //  28
  {    7,   17,   23,   26,    8,   14,   24,   28,  559,  834, 1076, 1192 }, //  29
  {   31,   32,   33,   34,   35,   36,   37,   38,    0,  724,  725,  726 }, //  30
  {   30,   32,   33,   34,   39,   40,   41,   42,  662,  721,  729,  730 }, //  31
  {   30,   31,   33,   34,   35,   39,   43,   44,  664,  725,  729,  731 }, //  32
  {   30,   31,   32,   34,   36,   45,   46,   47,    3,  726,  732,  733 }, //  33
  {   30,   31,   32,   33,   40,   45,   48,   49,  723,  730,  733,  734 }, //  34
  {   30,   36,   37,   38,   32,   39,   43,   44,  725,  825,  828,  830 }, //  35
  {   30,   35,   37,   38,   33,   45,   46,   47,    6,  726,  831,  832 }, //  36
  {   30,   35,   36,   38,   47,   53,   56,   59,  542,  832,  833,  835 }, //  37
  {   30,   35,   36,   37,   44,   54,   58,   59,  544,  827,  830,  835 }, //  38
  {   31,   40,   41,   42,   32,   35,   43,   44,  682,  729,  914,  918 }, //  39
  {   31,   39,   41,   42,   34,   45,   48,   49,  100,  730,  741,  920 }, //  40
  {   31,   39,   40,   42,   43,   51,   57,   58,  916,  918,  921,  922 }, //  41
  {   31,   39,   40,   41,   49,   52,   55,   57,  102,  920,  922,  923 }, //  42
  {   32,   35,   39,   44,   41,   51,   57,   58,  163,  918,  930,  969 }, //  43
  {   32,   35,   39,   43,   38,   54,   58,   59,  164,  830,  850,  969 }, //  44
  {   33,   36,   46,   47,   34,   40,   48,   49,  602,  733,  980,  982 }, //  45
  {   33,   36,   45,   47,   48,   50,   55,   56,  604,  977,  982,  984 }, //  46
  {   33,   36,   45,   46,   37,   53,   56,   59,  832,  979,  984,  985 }, //  47
  {   34,   40,   45,   49,   46,   50,   55,   56,  621,  982, 1043, 1044 }, //  48
  {   34,   40,   45,   48,   42,   52,   55,   57,  109,  920, 1044, 1045 }, //  49
  {   51,   52,   53,   54,   46,   48,   55,   56,  290, 1083, 1084, 1085 }, //  50
  {   50,   52,   53,   54,   41,   43,   57,   58,  511, 1079, 1086, 1087 }, //  51
  {   50,   51,   53,   54,   42,   49,   55,   57,  513, 1083, 1086, 1090 }, //  52
  {   50,   51,   52,   54,   37,   47,   56,   59,  293, 1085, 1091, 1092 }, //  53
  {   50,   51,   52,   53,   38,   44,   58,   59, 1081, 1087, 1091, 1093 }, //  54
  {   46,   48,   50,   56,   42,   49,   52,   57, 1044, 1083, 1171, 1173 }, //  55
  {   46,   48,   50,   55,   37,   47,   53,   59,  296,  984, 1020, 1085 }, //  56
  {   41,   43,   51,   58,   42,   49,   52,   55,  529,  922, 1086, 1186 }, //  57
  {   41,   43,   51,   57,   38,   44,   54,   59,  178,  969, 1087, 1139 }, //  58
  {   37,   47,   53,   56,   38,   44,   54,   58,  561,  835, 1091, 1193 }, //  59
  {   61,   62,   63,   64,   65,   66,   67,   68,   90,  735,  736,  737 }, //  60
  {   60,   62,   63,   64,   69,   70,   71,   72,  665,  720,  738,  739 }, //  61
  {   60,   61,   63,   64,   65,   69,   73,   74,  667,  735,  738,  742 }, //  62
  {   60,   61,   62,   64,   66,   75,   76,   77,   93,  737,  743,  744 }, //  63
  {   60,   61,   62,   63,   70,   75,   78,   79,  722,  739,  743,  745 }, //  64
  {   60,   66,   67,   68,   62,   69,   73,   74,  735,  836,  840,  841 }, //  65
  {   60,   65,   67,   68,   63,   75,   76,   77,   96,  737,  843,  844 }, //  66
  {   60,   65,   66,   68,   77,   83,   86,   89,  571,  843,  845,  846 }, //  67
  {   60,   65,   66,   67,   74,   84,   88,   89,  573,  838,  841,  846 }, //  68
  {   61,   70,   71,   72,   62,   65,   73,   74,  680,  738,  905,  909 }, //  69
  {   61,   69,   71,   72,   64,   75,   78,   79,   10,  728,  739,  910 }, //  70
  {   61,   69,   70,   72,   73,   81,   87,   88,  907,  909,  911,  913 }, //  71
  {   61,   69,   70,   71,   79,   82,   85,   87,   12,  910,  912,  913 }, //  72
  {   62,   65,   69,   74,   71,   81,   87,   88,  193,  909,  925,  970 }, //  73
  {   62,   65,   69,   73,   68,   84,   88,   89,  194,  841,  857,  970 }, //  74
  {   63,   66,   76,   77,   64,   70,   78,   79,  606,  743,  990,  991 }, //  75
  {   63,   66,   75,   77,   78,   80,   85,   86,  608,  986,  991,  993 }, //  76
  {   63,   66,   75,   76,   67,   83,   86,   89,  843,  988,  993,  995 }, //  77
  {   64,   70,   75,   79,   76,   80,   85,   86,  620,  991, 1040, 1042 }, //  78
  {   64,   70,   75,   78,   72,   82,   85,   87,   19,  910, 1041, 1042 }, //  79
  {   81,   82,   83,   84,   76,   78,   85,   86,  320, 1098, 1099, 1100 }, //  80
  {   80,   82,   83,   84,   71,   73,   87,   88,  486, 1094, 1101, 1102 }, //  81
  {   80,   81,   83,   84,   72,   79,   85,   87,  488, 1098, 1101, 1105 }, //  82
  {   80,   81,   82,   84,   67,   77,   86,   89,  323, 1100, 1106, 1107 }, //  83
  {   80,   81,   82,   83,   68,   74,   88,   89, 1096, 1102, 1106, 1108 }, //  84
  {   76,   78,   80,   86,   72,   79,   82,   87, 1042, 1098, 1168, 1174 }, //  85
  {   76,   78,   80,   85,   67,   77,   83,   89,  326,  993, 1025, 1100 }, //  86
  {   71,   73,   81,   88,   72,   79,   82,   85,  501,  913, 1101, 1184 }, //  87
  {   71,   73,   81,   87,   68,   74,   84,   89,  208,  970, 1102, 1150 }, //  88
  {   67,   77,   83,   86,   68,   74,   84,   88,  589,  846, 1106, 1194 }, //  89
  {   91,   92,   93,   94,   95,   96,   97,   98,   60,  735,  736,  737 }, //  90
  {   90,   92,   93,   94,   99,  100,  101,  102,  666,  721,  740,  741 }, //  91
  {   90,   91,   93,   94,   95,   99,  103,  104,  668,  736,  740,  742 }, //  92
  {   90,   91,   92,   94,   96,  105,  106,  107,   63,  737,  743,  744 }, //  93
  {   90,   91,   92,   93,  100,  105,  108,  109,  723,  741,  744,  745 }, //  94
  {   90,   96,   97,   98,   92,   99,  103,  104,  736,  837,  840,  842 }, //  95
  {   90,   95,   97,   98,   93,  105,  106,  107,   66,  737,  843,  844 }, //  96
  {   90,   95,   96,   98,  107,  113,  116,  119,  572,  844,  845,  847 }, //  97
  {   90,   95,   96,   97,  104,  114,  118,  119,  574,  839,  842,  847 }, //  98
  {   91,  100,  101,  102,   92,   95,  103,  104,  683,  740,  915,  919 }, //  99
  {   91,   99,  101,  102,   94,  105,  108,  109,   40,  730,  741,  920 }, // 100
  {   91,   99,  100,  102,  103,  111,  117,  118,  917,  919,  921,  923 }, // 101
  {   91,   99,  100,  101,  109,  112,  115,  117,   42,  920,  922,  923 }, // 102
  {   92,   95,   99,  104,  101,  111,  117,  118,  223,  919,  931,  971 }, // 103
  {   92,   95,   99,  103,   98,  114,  118,  119,  224,  842,  858,  971 }, // 104
  {   93,   96,  106,  107,   94,  100,  108,  109,  607,  744,  990,  992 }, // 105
  {   93,   96,  105,  107,  108,  110,  115,  116,  609,  987,  992,  994 }, // 106
  {   93,   96,  105,  106,   97,  113,  116,  119,  844,  989,  994,  995 }, // 107
  {   94,  100,  105,  109,  106,  110,  115,  116,  622,  992, 1043, 1045 }, // 108
  {   94,  100,  105,  108,  102,  112,  115,  117,   49,  920, 1044, 1045 }, // 109
  {  111,  112,  113,  114,  106,  108,  115,  116,  350, 1113, 1114, 1115 }, // 110
  {  110,  112,  113,  114,  101,  103,  117,  118,  516, 1109, 1116, 1117 }, // 111
  {  110,  111,  113,  114,  102,  109,  115,  117,  518, 1113, 1116, 1120 }, // 112
  {  110,  111,  112,  114,   97,  107,  116,  119,  353, 1115, 1121, 1122 }, // 113
  {  110,  111,  112,  113,   98,  104,  118,  119, 1111, 1117, 1121, 1123 }, // 114
  {  106,  108,  110,  116,  102,  109,  112,  117, 1045, 1113, 1171, 1175 }, // 115
  {  106,  108,  110,  115,   97,  107,  113,  119,  356,  994, 1026, 1115 }, // 116
  {  101,  103,  111,  118,  102,  109,  112,  115,  531,  923, 1116, 1186 }, // 117
  {  101,  103,  111,  117,   98,  104,  114,  119,  238,  971, 1117, 1161 }, // 118
  {   97,  107,  113,  116,   98,  104,  114,  118,  591,  847, 1121, 1195 }, // 119
  {  121,  122,  123,  124,  125,  126,  127,  128,  150,  750,  751,  752 }, // 120
  {  120,  122,  123,  124,  129,  130,  131,  132,  670,  746,  753,  754 }, // 121
  {  120,  121,  123,  124,  125,  129,  133,  134,  672,  750,  753,  757 }, // 122
  {  120,  121,  122,  124,  126,  135,  136,  137,  153,  752,  758,  759 }, // 123
  {  120,  121,  122,  123,  130,  135,  138,  139,  748,  754,  758,  760 }, // 124
  {  120,  126,  127,  128,  122,  129,  133,  134,  750,  824,  848,  849 }, // 125
  {  120,  125,  127,  128,  123,  135,  136,  137,  156,  752,  851,  852 }, // 126
  {  120,  125,  126,  128,  137,  143,  146,  149,  545,  851,  853,  854 }, // 127
  {  120,  125,  126,  127,  134,  144,  148,  149,  547,  826,  849,  854 }, // 128
  {  121,  130,  131,  132,  122,  125,  133,  134,  684,  753,  904,  924 }, // 129
  {  121,  129,  131,  132,  124,  135,  138,  139,  190,  754,  765,  926 }, // 130
  {  121,  129,  130,  132,  133,  141,  147,  148,  906,  924,  927,  928 }, // 131
  {  121,  129,  130,  131,  139,  142,  145,  147,  192,  926,  928,  929 }, // 132
  {  122,  125,  129,  134,  131,  141,  147,  148,   13,  908,  924,  968 }, // 133
  {  122,  125,  129,  133,  128,  144,  148,  149,   14,  829,  849,  968 }, // 134
  {  123,  126,  136,  137,  124,  130,  138,  139,  631,  758, 1000, 1001 }, // 135
  {  123,  126,  135,  137,  138,  140,  145,  146,  633,  996, 1001, 1003 }, // 136
  {  123,  126,  135,  136,  127,  143,  146,  149,  851,  998, 1003, 1005 }, // 137
  {  124,  130,  135,  139,  136,  140,  145,  146,  649, 1001, 1046, 1047 }, // 138
  {  124,  130,  135,  138,  132,  142,  145,  147,  199,  926, 1047, 1048 }, // 139
  {  141,  142,  143,  144,  136,  138,  145,  146,  380, 1124, 1125, 1126 }, // 140
  {  140,  142,  143,  144,  131,  133,  147,  148,  490, 1064, 1127, 1128 }, // 141
  {  140,  141,  143,  144,  132,  139,  145,  147,  492, 1124, 1127, 1131 }, // 142
  {  140,  141,  142,  144,  127,  137,  146,  149,  383, 1126, 1132, 1133 }, // 143
  {  140,  141,  142,  143,  128,  134,  148,  149, 1066, 1128, 1132, 1134 }, // 144
  {  136,  138,  140,  146,  132,  139,  142,  147, 1047, 1124, 1176, 1178 }, // 145
  {  136,  138,  140,  145,  127,  137,  143,  149,  386, 1003, 1031, 1126 }, // 146
  {  131,  133,  141,  148,  132,  139,  142,  145,  500,  928, 1127, 1185 }, // 147
  {  131,  133,  141,  147,  128,  134,  144,  149,   28,  968, 1072, 1128 }, // 148
  {  127,  137,  143,  146,  128,  134,  144,  148,  564,  854, 1132, 1196 }, // 149
  {  151,  152,  153,  154,  155,  156,  157,  158,  120,  750,  751,  752 }, // 150
  {  150,  152,  153,  154,  159,  160,  161,  162,  671,  747,  755,  756 }, // 151
  {  150,  151,  153,  154,  155,  159,  163,  164,  673,  751,  755,  757 }, // 152
  {  150,  151,  152,  154,  156,  165,  166,  167,  123,  752,  758,  759 }, // 153
  {  150,  151,  152,  153,  160,  165,  168,  169,  749,  756,  759,  760 }, // 154
  {  150,  156,  157,  158,  152,  159,  163,  164,  751,  825,  848,  850 }, // 155
  {  150,  155,  157,  158,  153,  165,  166,  167,  126,  752,  851,  852 }, // 156
  {  150,  155,  156,  158,  167,  173,  176,  179,  546,  852,  853,  855 }, // 157
  {  150,  155,  156,  157,  164,  174,  178,  179,  548,  827,  850,  855 }, // 158
  {  151,  160,  161,  162,  152,  155,  163,  164,  686,  755,  914,  930 }, // 159
  {  151,  159,  161,  162,  154,  165,  168,  169,  220,  756,  767,  932 }, // 160
  {  151,  159,  160,  162,  163,  171,  177,  178,  916,  930,  933,  934 }, // 161
  {  151,  159,  160,  161,  169,  172,  175,  177,  222,  932,  934,  935 }, // 162
  {  152,  155,  159,  164,  161,  171,  177,  178,   43,  918,  930,  969 }, // 163
  {  152,  155,  159,  163,  158,  174,  178,  179,   44,  830,  850,  969 }, // 164
  {  153,  156,  166,  167,  154,  160,  168,  169,  632,  759, 1000, 1002 }, // 165
  {  153,  156,  165,  167,  168,  170,  175,  176,  634,  997, 1002, 1004 }, // 166
  {  153,  156,  165,  166,  157,  173,  176,  179,  852,  999, 1004, 1005 }, // 167
  {  154,  160,  165,  169,  166,  170,  175,  176,  651, 1002, 1049, 1050 }, // 168
  {  154,  160,  165,  168,  162,  172,  175,  177,  229,  932, 1050, 1051 }, // 169
  {  171,  172,  173,  174,  166,  168,  175,  176,  410, 1135, 1136, 1137 }, // 170
  {  170,  172,  173,  174,  161,  163,  177,  178,  520, 1079, 1138, 1139 }, // 171
  {  170,  171,  173,  174,  162,  169,  175,  177,  522, 1135, 1138, 1142 }, // 172
  {  170,  171,  172,  174,  157,  167,  176,  179,  413, 1137, 1143, 1144 }, // 173
  {  170,  171,  172,  173,  158,  164,  178,  179, 1081, 1139, 1143, 1145 }, // 174
  {  166,  168,  170,  176,  162,  169,  172,  177, 1050, 1135, 1179, 1181 }, // 175
  {  166,  168,  170,  175,  157,  167,  173,  179,  416, 1004, 1032, 1137 }, // 176
  {  161,  163,  171,  178,  162,  169,  172,  175,  530,  934, 1138, 1187 }, // 177
  {  161,  163,  171,  177,  158,  164,  174,  179,   58,  969, 1087, 1139 }, // 178
  {  157,  167,  173,  176,  158,  164,  174,  178,  566,  855, 1143, 1197 }, // 179
  {  181,  182,  183,  184,  185,  186,  187,  188,  210,  761,  762,  763 }, // 180
  {  180,  182,  183,  184,  189,  190,  191,  192,  674,  746,  764,  765 }, // 181
  {  180,  181,  183,  184,  185,  189,  193,  194,  676,  761,  764,  768 }, // 182
  {  180,  181,  182,  184,  186,  195,  196,  197,  213,  763,  769,  770 }, // 183
  {  180,  181,  182,  183,  190,  195,  198,  199,  748,  765,  769,  771 }, // 184
  {  180,  186,  187,  188,  182,  189,  193,  194,  761,  836,  856,  857 }, // 185
  {  180,  185,  187,  188,  183,  195,  196,  197,  216,  763,  859,  860 }, // 186
  {  180,  185,  186,  188,  197,  203,  206,  209,  575,  859,  861,  862 }, // 187
  {  180,  185,  186,  187,  194,  204,  208,  209,  577,  838,  857,  862 }, // 188
  {  181,  190,  191,  192,  182,  185,  193,  194,  685,  764,  905,  925 }, // 189
  {  181,  189,  191,  192,  184,  195,  198,  199,  130,  754,  765,  926 }, // 190
  {  181,  189,  190,  192,  193,  201,  207,  208,  907,  925,  927,  929 }, // 191
  {  181,  189,  190,  191,  199,  202,  205,  207,  132,  926,  928,  929 }, // 192
  {  182,  185,  189,  194,  191,  201,  207,  208,   73,  909,  925,  970 }, // 193
  {  182,  185,  189,  193,  188,  204,  208,  209,   74,  841,  857,  970 }, // 194
  {  183,  186,  196,  197,  184,  190,  198,  199,  636,  769, 1010, 1011 }, // 195
  {  183,  186,  195,  197,  198,  200,  205,  206,  638, 1006, 1011, 1013 }, // 196
  {  183,  186,  195,  196,  187,  203,  206,  209,  859, 1008, 1013, 1015 }, // 197
  {  184,  190,  195,  199,  196,  200,  205,  206,  650, 1011, 1046, 1048 }, // 198
  {  184,  190,  195,  198,  192,  202,  205,  207,  139,  926, 1047, 1048 }, // 199
  {  201,  202,  203,  204,  196,  198,  205,  206,  440, 1146, 1147, 1148 }, // 200
  {  200,  202,  203,  204,  191,  193,  207,  208,  494, 1094, 1149, 1150 }, // 201
  {  200,  201,  203,  204,  192,  199,  205,  207,  496, 1146, 1149, 1153 }, // 202
  {  200,  201,  202,  204,  187,  197,  206,  209,  443, 1148, 1154, 1155 }, // 203
  {  200,  201,  202,  203,  188,  194,  208,  209, 1096, 1150, 1154, 1156 }, // 204
  {  196,  198,  200,  206,  192,  199,  202,  207, 1048, 1146, 1176, 1182 }, // 205
  {  196,  198,  200,  205,  187,  197,  203,  209,  446, 1013, 1037, 1148 }, // 206
  {  191,  193,  201,  208,  192,  199,  202,  205,  502,  929, 1149, 1185 }, // 207
  {  191,  193,  201,  207,  188,  194,  204,  209,   88,  970, 1102, 1150 }, // 208
  {  187,  197,  203,  206,  188,  194,  204,  208,  594,  862, 1154, 1198 }, // 209
  {  211,  212,  213,  214,  215,  216,  217,  218,  180,  761,  762,  763 }, // 210
  {  210,  212,  213,  214,  219,  220,  221,  222,  675,  747,  766,  767 }, // 211
  {  210,  211,  213,  214,  215,  219,  223,  224,  677,  762,  766,  768 }, // 212
  {  210,  211,  212,  214,  216,  225,  226,  227,  183,  763,  769,  770 }, // 213
  {  210,  211,  212,  213,  220,  225,  228,  229,  749,  767,  770,  771 }, // 214
  {  210,  216,  217,  218,  212,  219,  223,  224,  762,  837,  856,  858 }, // 215
  {  210,  215,  217,  218,  213,  225,  226,  227,  186,  763,  859,  860 }, // 216
  {  210,  215,  216,  218,  227,  233,  236,  239,  576,  860,  861,  863 }, // 217
  {  210,  215,  216,  217,  224,  234,  238,  239,  578,  839,  858,  863 }, // 218
  {  211,  220,  221,  222,  212,  215,  223,  224,  687,  766,  915,  931 }, // 219
  {  211,  219,  221,  222,  214,  225,  228,  229,  160,  756,  767,  932 }, // 220
  {  211,  219,  220,  222,  223,  231,  237,  238,  917,  931,  933,  935 }, // 221
  {  211,  219,  220,  221,  229,  232,  235,  237,  162,  932,  934,  935 }, // 222
  {  212,  215,  219,  224,  221,  231,  237,  238,  103,  919,  931,  971 }, // 223
  {  212,  215,  219,  223,  218,  234,  238,  239,  104,  842,  858,  971 }, // 224
  {  213,  216,  226,  227,  214,  220,  228,  229,  637,  770, 1010, 1012 }, // 225
  {  213,  216,  225,  227,  228,  230,  235,  236,  639, 1007, 1012, 1014 }, // 226
  {  213,  216,  225,  226,  217,  233,  236,  239,  860, 1009, 1014, 1015 }, // 227
  {  214,  220,  225,  229,  226,  230,  235,  236,  652, 1012, 1049, 1051 }, // 228
  {  214,  220,  225,  228,  222,  232,  235,  237,  169,  932, 1050, 1051 }, // 229
  {  231,  232,  233,  234,  226,  228,  235,  236,  470, 1157, 1158, 1159 }, // 230
  {  230,  232,  233,  234,  221,  223,  237,  238,  524, 1109, 1160, 1161 }, // 231
  {  230,  231,  233,  234,  222,  229,  235,  237,  526, 1157, 1160, 1164 }, // 232
  {  230,  231,  232,  234,  217,  227,  236,  239,  473, 1159, 1165, 1166 }, // 233
  {  230,  231,  232,  233,  218,  224,  238,  239, 1111, 1161, 1165, 1167 }, // 234
  {  226,  228,  230,  236,  222,  229,  232,  237, 1051, 1157, 1179, 1183 }, // 235
  {  226,  228,  230,  235,  217,  227,  233,  239,  476, 1014, 1038, 1159 }, // 236
  {  221,  223,  231,  238,  222,  229,  232,  235,  532,  935, 1160, 1187 }, // 237
  {  221,  223,  231,  237,  218,  224,  234,  239,  118,  971, 1117, 1161 }, // 238
  {  217,  227,  233,  236,  218,  224,  234,  238,  596,  863, 1165, 1199 }, // 239
  {  241,  242,  243,  244,  245,  246,  247,  248,  270,  776,  777,  778 }, // 240
  {  240,  242,  243,  244,  249,  250,  251,  252,  691,  772,  779,  780 }, // 241
  {  240,  241,  243,  244,  245,  249,  253,  254,  693,  776,  779,  783 }, // 242
  {  240,  241,  242,  244,  246,  255,  256,  257,  273,  778,  784,  785 }, // 243
  {  240,  241,  242,  243,  250,  255,  258,  259,  774,  780,  784,  786 }, // 244
  {  240,  246,  247,  248,  242,  249,  253,  254,  776,  864,  868,  869 }, // 245
  {  240,  245,  247,  248,  243,  255,  256,  257,  276,  778,  871,  872 }, // 246
  {  240,  245,  246,  248,  257,  263,  266,  269,  550,  871,  873,  874 }, // 247
  {  240,  245,  246,  247,  254,  264,  268,  269,  552,  866,  869,  874 }, // 248
  {  241,  250,  251,  252,  242,  245,  253,  254,  709,  779,  936,  940 }, // 249
  {  241,  249,  251,  252,  244,  255,  258,  259,  310,  780,  791,  942 }, // 250
  {  241,  249,  250,  252,  253,  261,  267,  268,  938,  940,  943,  944 }, // 251
  {  241,  249,  250,  251,  259,  262,  265,  267,  312,  942,  944,  945 }, // 252
  {  242,  245,  249,  254,  251,  261,  267,  268,  373,  940,  956,  972 }, // 253
  {  242,  245,  249,  253,  248,  264,  268,  269,  374,  869,  889,  972 }, // 254
  {  243,  246,  256,  257,  244,  250,  258,  259,  610,  784, 1016, 1017 }, // 255
  {  243,  246,  255,  257,  258,  260,  265,  266,  612,  976, 1017, 1019 }, // 256
  {  243,  246,  255,  256,  247,  263,  266,  269,  871,  978, 1019, 1021 }, // 257
  {  244,  250,  255,  259,  256,  260,  265,  266,  624, 1017, 1052, 1053 }, // 258
  {  244,  250,  255,  258,  252,  262,  265,  267,  319,  942, 1053, 1054 }, // 259
  {  261,  262,  263,  264,  256,  258,  265,  266,   20, 1068, 1069, 1070 }, // 260
  {  260,  262,  263,  264,  251,  253,  267,  268,  482, 1065, 1073, 1074 }, // 261
  {  260,  261,  263,  264,  252,  259,  265,  267,  484, 1069, 1073, 1075 }, // 262
  {  260,  261,  262,  264,  247,  257,  266,  269,   23, 1070, 1076, 1077 }, // 263
  {  260,  261,  262,  263,  248,  254,  268,  269, 1067, 1074, 1077, 1078 }, // 264
  {  256,  258,  260,  266,  252,  259,  262,  267, 1053, 1069, 1169, 1170 }, // 265
  {  256,  258,  260,  265,  247,  257,  263,  269,   26,  983, 1019, 1070 }, // 266
  {  251,  253,  261,  268,  252,  259,  262,  265,  504,  944, 1073, 1188 }, // 267
  {  251,  253,  261,  267,  248,  254,  264,  269,  388,  972, 1074, 1130 }, // 268
  {  247,  257,  263,  266,  248,  254,  264,  268,  560,  874, 1077, 1192 }, // 269
  {  271,  272,  273,  274,  275,  276,  277,  278,  240,  776,  777,  778 }, // 270
  {  270,  272,  273,  274,  279,  280,  281,  282,  692,  773,  781,  782 }, // 271
  {  270,  271,  273,  274,  275,  279,  283,  284,  694,  777,  781,  783 }, // 272
  {  270,  271,  272,  274,  276,  285,  286,  287,  243,  778,  784,  785 }, // 273
  {  270,  271,  272,  273,  280,  285,  288,  289,  775,  782,  785,  786 }, // 274
  {  270,  276,  277,  278,  272,  279,  283,  284,  777,  865,  868,  870 }, // 275
  {  270,  275,  277,  278,  273,  285,  286,  287,  246,  778,  871,  872 }, // 276
  {  270,  275,  276,  278,  287,  293,  296,  299,  551,  872,  873,  875 }, // 277
  {  270,  275,  276,  277,  284,  294,  298,  299,  553,  867,  870,  875 }, // 278
  {  271,  280,  281,  282,  272,  275,  283,  284,  712,  781,  946,  950 }, // 279
  {  271,  279,  281,  282,  274,  285,  288,  289,  340,  782,  793,  952 }, // 280
  {  271,  279,  280,  282,  283,  291,  297,  298,  948,  950,  953,  954 }, // 281
  {  271,  279,  280,  281,  289,  292,  295,  297,  342,  952,  954,  955 }, // 282
  {  272,  275,  279,  284,  281,  291,  297,  298,  403,  950,  962,  973 }, // 283
  {  272,  275,  279,  283,  278,  294,  298,  299,  404,  870,  890,  973 }, // 284
  {  273,  276,  286,  287,  274,  280,  288,  289,  611,  785, 1016, 1018 }, // 285
  {  273,  276,  285,  287,  288,  290,  295,  296,  613,  977, 1018, 1020 }, // 286
  {  273,  276,  285,  286,  277,  293,  296,  299,  872,  979, 1020, 1021 }, // 287
  {  274,  280,  285,  289,  286,  290,  295,  296,  626, 1018, 1055, 1056 }, // 288
  {  274,  280,  285,  288,  282,  292,  295,  297,  349,  952, 1056, 1057 }, // 289
  {  291,  292,  293,  294,  286,  288,  295,  296,   50, 1083, 1084, 1085 }, // 290
  {  290,  292,  293,  294,  281,  283,  297,  298,  512, 1080, 1088, 1089 }, // 291
  {  290,  291,  293,  294,  282,  289,  295,  297,  514, 1084, 1088, 1090 }, // 292
  {  290,  291,  292,  294,  277,  287,  296,  299,   53, 1085, 1091, 1092 }, // 293
  {  290,  291,  292,  293,  278,  284,  298,  299, 1082, 1089, 1092, 1093 }, // 294
  {  286,  288,  290,  296,  282,  289,  292,  297, 1056, 1084, 1172, 1173 }, // 295
  {  286,  288,  290,  295,  277,  287,  293,  299,   56,  984, 1020, 1085 }, // 296
  {  281,  283,  291,  298,  282,  289,  292,  295,  534,  954, 1088, 1190 }, // 297
  {  281,  283,  291,  297,  278,  284,  294,  299,  418,  973, 1089, 1141 }, // 298
  {  277,  287,  293,  296,  278,  284,  294,  298,  562,  875, 1092, 1193 }, // 299
  {  301,  302,  303,  304,  305,  306,  307,  308,  330,  787,  788,  789 }, // 300
  {  300,  302,  303,  304,  309,  310,  311,  312,  695,  772,  790,  791 }, // 301
  {  300,  301,  303,  304,  305,  309,  313,  314,  697,  787,  790,  794 }, // 302
  {  300,  301,  302,  304,  306,  315,  316,  317,  333,  789,  795,  796 }, // 303
  {  300,  301,  302,  303,  310,  315,  318,  319,  774,  791,  795,  797 }, // 304
  {  300,  306,  307,  308,  302,  309,  313,  314,  787,  876,  880,  881 }, // 305
  {  300,  305,  307,  308,  303,  315,  316,  317,  336,  789,  883,  884 }, // 306
  {  300,  305,  306,  308,  317,  323,  326,  329,  580,  883,  885,  886 }, // 307
  {  300,  305,  306,  307,  314,  324,  328,  329,  582,  878,  881,  886 }, // 308
  {  301,  310,  311,  312,  302,  305,  313,  314,  710,  790,  937,  941 }, // 309
  {  301,  309,  311,  312,  304,  315,  318,  319,  250,  780,  791,  942 }, // 310
  {  301,  309,  310,  312,  313,  321,  327,  328,  939,  941,  943,  945 }, // 311
  {  301,  309,  310,  311,  319,  322,  325,  327,  252,  942,  944,  945 }, // 312
  {  302,  305,  309,  314,  311,  321,  327,  328,  433,  941,  957,  974 }, // 313
  {  302,  305,  309,  313,  308,  324,  328,  329,  434,  881,  897,  974 }, // 314
  {  303,  306,  316,  317,  304,  310,  318,  319,  614,  795, 1022, 1023 }, // 315
  {  303,  306,  315,  317,  318,  320,  325,  326,  616,  986, 1023, 1025 }, // 316
  {  303,  306,  315,  316,  307,  323,  326,  329,  883,  988, 1025, 1027 }, // 317
  {  304,  310,  315,  319,  316,  320,  325,  326,  625, 1023, 1052, 1054 }, // 318
  {  304,  310,  315,  318,  312,  322,  325,  327,  259,  942, 1053, 1054 }, // 319
  {  321,  322,  323,  324,  316,  318,  325,  326,   80, 1098, 1099, 1100 }, // 320
  {  320,  322,  323,  324,  311,  313,  327,  328,  487, 1095, 1103, 1104 }, // 321
  {  320,  321,  323,  324,  312,  319,  325,  327,  489, 1099, 1103, 1105 }, // 322
  {  320,  321,  322,  324,  307,  317,  326,  329,   83, 1100, 1106, 1107 }, // 323
  {  320,  321,  322,  323,  308,  314,  328,  329, 1097, 1104, 1107, 1108 }, // 324
  {  316,  318,  320,  326,  312,  319,  322,  327, 1054, 1099, 1169, 1174 }, // 325
  {  316,  318,  320,  325,  307,  317,  323,  329,   86,  993, 1025, 1100 }, // 326
  {  311,  313,  321,  328,  312,  319,  322,  325,  506,  945, 1103, 1188 }, // 327
  {  311,  313,  321,  327,  308,  314,  324,  329,  448,  974, 1104, 1152 }, // 328
  {  307,  317,  323,  326,  308,  314,  324,  328,  590,  886, 1107, 1194 }, // 329
  {  331,  332,  333,  334,  335,  336,  337,  338,  300,  787,  788,  789 }, // 330
  {  330,  332,  333,  334,  339,  340,  341,  342,  696,  773,  792,  793 }, // 331
  {  330,  331,  333,  334,  335,  339,  343,  344,  698,  788,  792,  794 }, // 332
  {  330,  331,  332,  334,  336,  345,  346,  347,  303,  789,  795,  796 }, // 333
  {  330,  331,  332,  333,  340,  345,  348,  349,  775,  793,  796,  797 }, // 334
  {  330,  336,  337,  338,  332,  339,  343,  344,  788,  877,  880,  882 }, // 335
  {  330,  335,  337,  338,  333,  345,  346,  347,  306,  789,  883,  884 }, // 336
  {  330,  335,  336,  338,  347,  353,  356,  359,  581,  884,  885,  887 }, // 337
  {  330,  335,  336,  337,  344,  354,  358,  359,  583,  879,  882,  887 }, // 338
  {  331,  340,  341,  342,  332,  335,  343,  344,  713,  792,  947,  951 }, // 339
  {  331,  339,  341,  342,  334,  345,  348,  349,  280,  782,  793,  952 }, // 340
  {  331,  339,  340,  342,  343,  351,  357,  358,  949,  951,  953,  955 }, // 341
  {  331,  339,  340,  341,  349,  352,  355,  357,  282,  952,  954,  955 }, // 342
  {  332,  335,  339,  344,  341,  351,  357,  358,  463,  951,  963,  975 }, // 343
  {  332,  335,  339,  343,  338,  354,  358,  359,  464,  882,  898,  975 }, // 344
  {  333,  336,  346,  347,  334,  340,  348,  349,  615,  796, 1022, 1024 }, // 345
  {  333,  336,  345,  347,  348,  350,  355,  356,  617,  987, 1024, 1026 }, // 346
  {  333,  336,  345,  346,  337,  353,  356,  359,  884,  989, 1026, 1027 }, // 347
  {  334,  340,  345,  349,  346,  350,  355,  356,  627, 1024, 1055, 1057 }, // 348
  {  334,  340,  345,  348,  342,  352,  355,  357,  289,  952, 1056, 1057 }, // 349
  {  351,  352,  353,  354,  346,  348,  355,  356,  110, 1113, 1114, 1115 }, // 350
  {  350,  352,  353,  354,  341,  343,  357,  358,  517, 1110, 1118, 1119 }, // 351
  {  350,  351,  353,  354,  342,  349,  355,  357,  519, 1114, 1118, 1120 }, // 352
  {  350,  351,  352,  354,  337,  347,  356,  359,  113, 1115, 1121, 1122 }, // 353
  {  350,  351,  352,  353,  338,  344,  358,  359, 1112, 1119, 1122, 1123 }, // 354
  {  346,  348,  350,  356,  342,  349,  352,  357, 1057, 1114, 1172, 1175 }, // 355
  {  346,  348,  350,  355,  337,  347,  353,  359,  116,  994, 1026, 1115 }, // 356
  {  341,  343,  351,  358,  342,  349,  352,  355,  536,  955, 1118, 1190 }, // 357
  {  341,  343,  351,  357,  338,  344,  354,  359,  478,  975, 1119, 1163 }, // 358
  {  337,  347,  353,  356,  338,  344,  354,  358,  592,  887, 1122, 1195 }, // 359
  {  361,  362,  363,  364,  365,  366,  367,  368,  390,  802,  803,  804 }, // 360
  {  360,  362,  363,  364,  369,  370,  371,  372,  700,  798,  805,  806 }, // 361
  {  360,  361,  363,  364,  365,  369,  373,  374,  702,  802,  805,  809 }, // 362
  {  360,  361,  362,  364,  366,  375,  376,  377,  393,  804,  810,  811 }, // 363
  {  360,  361,  362,  363,  370,  375,  378,  379,  800,  806,  810,  812 }, // 364
  {  360,  366,  367,  368,  362,  369,  373,  374,  802,  864,  888,  889 }, // 365
  {  360,  365,  367,  368,  363,  375,  376,  377,  396,  804,  891,  892 }, // 366
  {  360,  365,  366,  368,  377,  383,  386,  389,  554,  891,  893,  894 }, // 367
  {  360,  365,  366,  367,  374,  384,  388,  389,  556,  866,  889,  894 }, // 368
  {  361,  370,  371,  372,  362,  365,  373,  374,  714,  805,  936,  956 }, // 369
  {  361,  369,  371,  372,  364,  375,  378,  379,  430,  806,  817,  958 }, // 370
  {  361,  369,  370,  372,  373,  381,  387,  388,  938,  956,  959,  960 }, // 371
  {  361,  369,  370,  371,  379,  382,  385,  387,  432,  958,  960,  961 }, // 372
  {  362,  365,  369,  374,  371,  381,  387,  388,  253,  940,  956,  972 }, // 373
  {  362,  365,  369,  373,  368,  384,  388,  389,  254,  869,  889,  972 }, // 374
  {  363,  366,  376,  377,  364,  370,  378,  379,  640,  810, 1028, 1029 }, // 375
  {  363,  366,  375,  377,  378,  380,  385,  386,  642,  996, 1029, 1031 }, // 376
  {  363,  366,  375,  376,  367,  383,  386,  389,  891,  998, 1031, 1033 }, // 377
  {  364,  370,  375,  379,  376,  380,  385,  386,  654, 1029, 1058, 1059 }, // 378
  {  364,  370,  375,  378,  372,  382,  385,  387,  439,  958, 1059, 1060 }, // 379
  {  381,  382,  383,  384,  376,  378,  385,  386,  140, 1124, 1125, 1126 }, // 380
  {  380,  382,  383,  384,  371,  373,  387,  388,  491, 1065, 1129, 1130 }, // 381
  {  380,  381,  383,  384,  372,  379,  385,  387,  493, 1125, 1129, 1131 }, // 382
  {  380,  381,  382,  384,  367,  377,  386,  389,  143, 1126, 1132, 1133 }, // 383
  {  380,  381,  382,  383,  368,  374,  388,  389, 1067, 1130, 1133, 1134 }, // 384
  {  376,  378,  380,  386,  372,  379,  382,  387, 1059, 1125, 1177, 1178 }, // 385
  {  376,  378,  380,  385,  367,  377,  383,  389,  146, 1003, 1031, 1126 }, // 386
  {  371,  373,  381,  388,  372,  379,  382,  385,  505,  960, 1129, 1189 }, // 387
  {  371,  373,  381,  387,  368,  374,  384,  389,  268,  972, 1074, 1130 }, // 388
  {  367,  377,  383,  386,  368,  374,  384,  388,  565,  894, 1133, 1196 }, // 389
  {  391,  392,  393,  394,  395,  396,  397,  398,  360,  802,  803,  804 }, // 390
  {  390,  392,  393,  394,  399,  400,  401,  402,  701,  799,  807,  808 }, // 391
  {  390,  391,  393,  394,  395,  399,  403,  404,  703,  803,  807,  809 }, // 392
  {  390,  391,  392,  394,  396,  405,  406,  407,  363,  804,  810,  811 }, // 393
  {  390,  391,  392,  393,  400,  405,  408,  409,  801,  808,  811,  812 }, // 394
  {  390,  396,  397,  398,  392,  399,  403,  404,  803,  865,  888,  890 }, // 395
  {  390,  395,  397,  398,  393,  405,  406,  407,  366,  804,  891,  892 }, // 396
  {  390,  395,  396,  398,  407,  413,  416,  419,  555,  892,  893,  895 }, // 397
  {  390,  395,  396,  397,  404,  414,  418,  419,  557,  867,  890,  895 }, // 398
  {  391,  400,  401,  402,  392,  395,  403,  404,  716,  807,  946,  962 }, // 399
  {  391,  399,  401,  402,  394,  405,  408,  409,  460,  808,  819,  964 }, // 400
  {  391,  399,  400,  402,  403,  411,  417,  418,  948,  962,  965,  966 }, // 401
  {  391,  399,  400,  401,  409,  412,  415,  417,  462,  964,  966,  967 }, // 402
  {  392,  395,  399,  404,  401,  411,  417,  418,  283,  950,  962,  973 }, // 403
  {  392,  395,  399,  403,  398,  414,  418,  419,  284,  870,  890,  973 }, // 404
  {  393,  396,  406,  407,  394,  400,  408,  409,  641,  811, 1028, 1030 }, // 405
  {  393,  396,  405,  407,  408,  410,  415,  416,  643,  997, 1030, 1032 }, // 406
  {  393,  396,  405,  406,  397,  413,  416,  419,  892,  999, 1032, 1033 }, // 407
  {  394,  400,  405,  409,  406,  410,  415,  416,  656, 1030, 1061, 1062 }, // 408
  {  394,  400,  405,  408,  402,  412,  415,  417,  469,  964, 1062, 1063 }, // 409
  {  411,  412,  413,  414,  406,  408,  415,  416,  170, 1135, 1136, 1137 }, // 410
  {  410,  412,  413,  414,  401,  403,  417,  418,  521, 1080, 1140, 1141 }, // 411
  {  410,  411,  413,  414,  402,  409,  415,  417,  523, 1136, 1140, 1142 }, // 412
  {  410,  411,  412,  414,  397,  407,  416,  419,  173, 1137, 1143, 1144 }, // 413
  {  410,  411,  412,  413,  398,  404,  418,  419, 1082, 1141, 1144, 1145 }, // 414
  {  406,  408,  410,  416,  402,  409,  412,  417, 1062, 1136, 1180, 1181 }, // 415
  {  406,  408,  410,  415,  397,  407,  413,  419,  176, 1004, 1032, 1137 }, // 416
  {  401,  403,  411,  418,  402,  409,  412,  415,  535,  966, 1140, 1191 }, // 417
  {  401,  403,  411,  417,  398,  404,  414,  419,  298,  973, 1089, 1141 }, // 418
  {  397,  407,  413,  416,  398,  404,  414,  418,  567,  895, 1144, 1197 }, // 419
  {  421,  422,  423,  424,  425,  426,  427,  428,  450,  813,  814,  815 }, // 420
  {  420,  422,  423,  424,  429,  430,  431,  432,  704,  798,  816,  817 }, // 421
  {  420,  421,  423,  424,  425,  429,  433,  434,  706,  813,  816,  820 }, // 422
  {  420,  421,  422,  424,  426,  435,  436,  437,  453,  815,  821,  822 }, // 423
  {  420,  421,  422,  423,  430,  435,  438,  439,  800,  817,  821,  823 }, // 424
  {  420,  426,  427,  428,  422,  429,  433,  434,  813,  876,  896,  897 }, // 425
  {  420,  425,  427,  428,  423,  435,  436,  437,  456,  815,  899,  900 }, // 426
  {  420,  425,  426,  428,  437,  443,  446,  449,  584,  899,  901,  902 }, // 427
  {  420,  425,  426,  427,  434,  444,  448,  449,  586,  878,  897,  902 }, // 428
  {  421,  430,  431,  432,  422,  425,  433,  434,  715,  816,  937,  957 }, // 429
  {  421,  429,  431,  432,  424,  435,  438,  439,  370,  806,  817,  958 }, // 430
  {  421,  429,  430,  432,  433,  441,  447,  448,  939,  957,  959,  961 }, // 431
  {  421,  429,  430,  431,  439,  442,  445,  447,  372,  958,  960,  961 }, // 432
  {  422,  425,  429,  434,  431,  441,  447,  448,  313,  941,  957,  974 }, // 433
  {  422,  425,  429,  433,  428,  444,  448,  449,  314,  881,  897,  974 }, // 434
  {  423,  426,  436,  437,  424,  430,  438,  439,  644,  821, 1034, 1035 }, // 435
  {  423,  426,  435,  437,  438,  440,  445,  446,  646, 1006, 1035, 1037 }, // 436
  {  423,  426,  435,  436,  427,  443,  446,  449,  899, 1008, 1037, 1039 }, // 437
  {  424,  430,  435,  439,  436,  440,  445,  446,  655, 1035, 1058, 1060 }, // 438
  {  424,  430,  435,  438,  432,  442,  445,  447,  379,  958, 1059, 1060 }, // 439
  {  441,  442,  443,  444,  436,  438,  445,  446,  200, 1146, 1147, 1148 }, // 440
  {  440,  442,  443,  444,  431,  433,  447,  448,  495, 1095, 1151, 1152 }, // 441
  {  440,  441,  443,  444,  432,  439,  445,  447,  497, 1147, 1151, 1153 }, // 442
  {  440,  441,  442,  444,  427,  437,  446,  449,  203, 1148, 1154, 1155 }, // 443
  {  440,  441,  442,  443,  428,  434,  448,  449, 1097, 1152, 1155, 1156 }, // 444
  {  436,  438,  440,  446,  432,  439,  442,  447, 1060, 1147, 1177, 1182 }, // 445
  {  436,  438,  440,  445,  427,  437,  443,  449,  206, 1013, 1037, 1148 }, // 446
  {  431,  433,  441,  448,  432,  439,  442,  445,  507,  961, 1151, 1189 }, // 447
  {  431,  433,  441,  447,  428,  434,  444,  449,  328,  974, 1104, 1152 }, // 448
  {  427,  437,  443,  446,  428,  434,  444,  448,  595,  902, 1155, 1198 }, // 449
  {  451,  452,  453,  454,  455,  456,  457,  458,  420,  813,  814,  815 }, // 450
  {  450,  452,  453,  454,  459,  460,  461,  462,  705,  799,  818,  819 }, // 451
  {  450,  451,  453,  454,  455,  459,  463,  464,  707,  814,  818,  820 }, // 452
  {  450,  451,  452,  454,  456,  465,  466,  467,  423,  815,  821,  822 }, // 453
  {  450,  451,  452,  453,  460,  465,  468,  469,  801,  819,  822,  823 }, // 454
  {  450,  456,  457,  458,  452,  459,  463,  464,  814,  877,  896,  898 }, // 455
  {  450,  455,  457,  458,  453,  465,  466,  467,  426,  815,  899,  900 }, // 456
  {  450,  455,  456,  458,  467,  473,  476,  479,  585,  900,  901,  903 }, // 457
  {  450,  455,  456,  457,  464,  474,  478,  479,  587,  879,  898,  903 }, // 458
  {  451,  460,  461,  462,  452,  455,  463,  464,  717,  818,  947,  963 }, // 459
  {  451,  459,  461,  462,  454,  465,  468,  469,  400,  808,  819,  964 }, // 460
  {  451,  459,  460,  462,  463,  471,  477,  478,  949,  963,  965,  967 }, // 461
  {  451,  459,  460,  461,  469,  472,  475,  477,  402,  964,  966,  967 }, // 462
  {  452,  455,  459,  464,  461,  471,  477,  478,  343,  951,  963,  975 }, // 463
  {  452,  455,  459,  463,  458,  474,  478,  479,  344,  882,  898,  975 }, // 464
  {  453,  456,  466,  467,  454,  460,  468,  469,  645,  822, 1034, 1036 }, // 465
  {  453,  456,  465,  467,  468,  470,  475,  476,  647, 1007, 1036, 1038 }, // 466
  {  453,  456,  465,  466,  457,  473,  476,  479,  900, 1009, 1038, 1039 }, // 467
  {  454,  460,  465,  469,  466,  470,  475,  476,  657, 1036, 1061, 1063 }, // 468
  {  454,  460,  465,  468,  462,  472,  475,  477,  409,  964, 1062, 1063 }, // 469
  {  471,  472,  473,  474,  466,  468,  475,  476,  230, 1157, 1158, 1159 }, // 470
  {  470,  472,  473,  474,  461,  463,  477,  478,  525, 1110, 1162, 1163 }, // 471
  {  470,  471,  473,  474,  462,  469,  475,  477,  527, 1158, 1162, 1164 }, // 472
  {  470,  471,  472,  474,  457,  467,  476,  479,  233, 1159, 1165, 1166 }, // 473
  {  470,  471,  472,  473,  458,  464,  478,  479, 1112, 1163, 1166, 1167 }, // 474
  {  466,  468,  470,  476,  462,  469,  472,  477, 1063, 1158, 1180, 1183 }, // 475
  {  466,  468,  470,  475,  457,  467,  473,  479,  236, 1014, 1038, 1159 }, // 476
  {  461,  463,  471,  478,  462,  469,  472,  475,  537,  967, 1162, 1191 }, // 477
  {  461,  463,  471,  477,  458,  464,  474,  479,  358,  975, 1119, 1163 }, // 478
  {  457,  467,  473,  476,  458,  464,  474,  478,  597,  903, 1166, 1199 }, // 479
  {  481,  482,  483,  484,  490,  491,  492,  493, 1064, 1065, 1066, 1067 }, // 480
  {  480,  482,  483,  484,  490,  498,  499,  500,   21, 1064, 1071, 1072 }, // 481
  {  480,  481,  483,  484,  491,  503,  504,  505,  261, 1065, 1073, 1074 }, // 482
  {  480,  481,  482,  484,  488,  499,  501,  508,   22, 1068, 1071, 1075 }, // 483
  {  480,  481,  482,  483,  489,  504,  506,  508,  262, 1069, 1073, 1075 }, // 484
  {  486,  487,  488,  489,  494,  495,  496,  497, 1094, 1095, 1096, 1097 }, // 485
  {  485,  487,  488,  489,  494,  498,  501,  502,   81, 1094, 1101, 1102 }, // 486
  {  485,  486,  488,  489,  495,  503,  506,  507,  321, 1095, 1103, 1104 }, // 487
  {  485,  486,  487,  489,  483,  499,  501,  508,   82, 1098, 1101, 1105 }, // 488
  {  485,  486,  487,  488,  484,  504,  506,  508,  322, 1099, 1103, 1105 }, // 489
  {  480,  491,  492,  493,  481,  498,  499,  500,  141, 1064, 1127, 1128 }, // 490
  {  480,  490,  492,  493,  482,  503,  504,  505,  381, 1065, 1129, 1130 }, // 491
  {  480,  490,  491,  493,  496,  500,  502,  509,  142, 1124, 1127, 1131 }, // 492
  {  480,  490,  491,  492,  497,  505,  507,  509,  382, 1125, 1129, 1131 }, // 493
  {  485,  495,  496,  497,  486,  498,  501,  502,  201, 1094, 1149, 1150 }, // 494
  {  485,  494,  496,  497,  487,  503,  506,  507,  441, 1095, 1151, 1152 }, // 495
  {  485,  494,  495,  497,  492,  500,  502,  509,  202, 1146, 1149, 1153 }, // 496
  {  485,  494,  495,  496,  493,  505,  507,  509,  442, 1147, 1151, 1153 }, // 497
  {  481,  490,  499,  500,  486,  494,  501,  502,  911,  927, 1184, 1185 }, // 498
  {  481,  490,  498,  500,  483,  488,  501,  508,   27,  912, 1071, 1184 }, // 499
  {  481,  490,  498,  499,  492,  496,  502,  509,  147,  928, 1127, 1185 }, // 500
  {  486,  494,  498,  502,  483,  488,  499,  508,   87,  913, 1101, 1184 }, // 501
  {  486,  494,  498,  501,  492,  496,  500,  509,  207,  929, 1149, 1185 }, // 502
  {  482,  491,  504,  505,  487,  495,  506,  507,  943,  959, 1188, 1189 }, // 503
  {  482,  491,  503,  505,  484,  489,  506,  508,  267,  944, 1073, 1188 }, // 504
  {  482,  491,  503,  504,  493,  497,  507,  509,  387,  960, 1129, 1189 }, // 505
  {  487,  495,  503,  507,  484,  489,  504,  508,  327,  945, 1103, 1188 }, // 506
  {  487,  495,  503,  506,  493,  497,  505,  509,  447,  961, 1151, 1189 }, // 507
  {  483,  488,  499,  501,  484,  489,  504,  506, 1075, 1105, 1170, 1174 }, // 508
  {  492,  496,  500,  502,  493,  497,  505,  507, 1131, 1153, 1178, 1182 }, // 509
  {  511,  512,  513,  514,  520,  521,  522,  523, 1079, 1080, 1081, 1082 }, // 510
  {  510,  512,  513,  514,  520,  528,  529,  530,   51, 1079, 1086, 1087 }, // 511
  {  510,  511,  513,  514,  521,  533,  534,  535,  291, 1080, 1088, 1089 }, // 512
  {  510,  511,  512,  514,  518,  529,  531,  538,   52, 1083, 1086, 1090 }, // 513
  {  510,  511,  512,  513,  519,  534,  536,  538,  292, 1084, 1088, 1090 }, // 514
  {  516,  517,  518,  519,  524,  525,  526,  527, 1109, 1110, 1111, 1112 }, // 515
  {  515,  517,  518,  519,  524,  528,  531,  532,  111, 1109, 1116, 1117 }, // 516
  {  515,  516,  518,  519,  525,  533,  536,  537,  351, 1110, 1118, 1119 }, // 517
  {  515,  516,  517,  519,  513,  529,  531,  538,  112, 1113, 1116, 1120 }, // 518
  {  515,  516,  517,  518,  514,  534,  536,  538,  352, 1114, 1118, 1120 }, // 519
  {  510,  521,  522,  523,  511,  528,  529,  530,  171, 1079, 1138, 1139 }, // 520
  {  510,  520,  522,  523,  512,  533,  534,  535,  411, 1080, 1140, 1141 }, // 521
  {  510,  520,  521,  523,  526,  530,  532,  539,  172, 1135, 1138, 1142 }, // 522
  {  510,  520,  521,  522,  527,  535,  537,  539,  412, 1136, 1140, 1142 }, // 523
  {  515,  525,  526,  527,  516,  528,  531,  532,  231, 1109, 1160, 1161 }, // 524
  {  515,  524,  526,  527,  517,  533,  536,  537,  471, 1110, 1162, 1163 }, // 525
  {  515,  524,  525,  527,  522,  530,  532,  539,  232, 1157, 1160, 1164 }, // 526
  {  515,  524,  525,  526,  523,  535,  537,  539,  472, 1158, 1162, 1164 }, // 527
  {  511,  520,  529,  530,  516,  524,  531,  532,  921,  933, 1186, 1187 }, // 528
  {  511,  520,  528,  530,  513,  518,  531,  538,   57,  922, 1086, 1186 }, // 529
  {  511,  520,  528,  529,  522,  526,  532,  539,  177,  934, 1138, 1187 }, // 530
  {  516,  524,  528,  532,  513,  518,  529,  538,  117,  923, 1116, 1186 }, // 531
  {  516,  524,  528,  531,  522,  526,  530,  539,  237,  935, 1160, 1187 }, // 532
  {  512,  521,  534,  535,  517,  525,  536,  537,  953,  965, 1190, 1191 }, // 533
  {  512,  521,  533,  535,  514,  519,  536,  538,  297,  954, 1088, 1190 }, // 534
  {  512,  521,  533,  534,  523,  527,  537,  539,  417,  966, 1140, 1191 }, // 535
  {  517,  525,  533,  537,  514,  519,  534,  538,  357,  955, 1118, 1190 }, // 536
  {  517,  525,  533,  536,  523,  527,  535,  539,  477,  967, 1162, 1191 }, // 537
  {  513,  518,  529,  531,  514,  519,  534,  536, 1090, 1120, 1173, 1175 }, // 538
  {  522,  526,  530,  532,  523,  527,  535,  537, 1142, 1164, 1181, 1183 }, // 539
  {  541,  542,  543,  544,  545,  546,  547,  548,  824,  825,  826,  827 }, // 540
  {  540,  542,  543,  544,  550,  558,  559,  560,    7,  831,  833,  834 }, // 541
  {  540,  541,  543,  544,  551,  558,  561,  562,   37,  832,  833,  835 }, // 542
  {  540,  541,  542,  544,  547,  559,  564,  568,    8,  826,  829,  834 }, // 543
  {  540,  541,  542,  543,  548,  561,  566,  569,   38,  827,  830,  835 }, // 544
  {  540,  546,  547,  548,  554,  563,  564,  565,  127,  851,  853,  854 }, // 545
  {  540,  545,  547,  548,  555,  563,  566,  567,  157,  852,  853,  855 }, // 546
  {  540,  545,  546,  548,  543,  559,  564,  568,  128,  826,  849,  854 }, // 547
  {  540,  545,  546,  547,  544,  561,  566,  569,  158,  827,  850,  855 }, // 548
  {  550,  551,  552,  553,  554,  555,  556,  557,  864,  865,  866,  867 }, // 549
  {  549,  551,  552,  553,  541,  558,  559,  560,  247,  871,  873,  874 }, // 550
  {  549,  550,  552,  553,  542,  558,  561,  562,  277,  872,  873,  875 }, // 551
  {  549,  550,  551,  553,  556,  560,  565,  568,  248,  866,  869,  874 }, // 552
  {  549,  550,  551,  552,  557,  562,  567,  569,  278,  867,  870,  875 }, // 553
  {  549,  555,  556,  557,  545,  563,  564,  565,  367,  891,  893,  894 }, // 554
  {  549,  554,  556,  557,  546,  563,  566,  567,  397,  892,  893,  895 }, // 555
  {  549,  554,  555,  557,  552,  560,  565,  568,  368,  866,  889,  894 }, // 556
  {  549,  554,  555,  556,  553,  562,  567,  569,  398,  867,  890,  895 }, // 557
  {  541,  550,  559,  560,  542,  551,  561,  562,  833,  873,  985, 1021 }, // 558
  {  541,  550,  558,  560,  543,  547,  564,  568,   29,  834, 1076, 1192 }, // 559
  {  541,  550,  558,  559,  552,  556,  565,  568,  269,  874, 1077, 1192 }, // 560
  {  542,  551,  558,  562,  544,  548,  566,  569,   59,  835, 1091, 1193 }, // 561
  {  542,  551,  558,  561,  553,  557,  567,  569,  299,  875, 1092, 1193 }, // 562
  {  545,  554,  564,  565,  546,  555,  566,  567,  853,  893, 1005, 1033 }, // 563
  {  545,  554,  563,  565,  543,  547,  559,  568,  149,  854, 1132, 1196 }, // 564
  {  545,  554,  563,  564,  552,  556,  560,  568,  389,  894, 1133, 1196 }, // 565
  {  546,  555,  563,  567,  544,  548,  561,  569,  179,  855, 1143, 1197 }, // 566
  {  546,  555,  563,  566,  553,  557,  562,  569,  419,  895, 1144, 1197 }, // 567
  {  543,  547,  559,  564,  552,  556,  560,  565, 1078, 1134, 1192, 1196 }, // 568
  {  544,  548,  561,  566,  553,  557,  562,  567, 1093, 1145, 1193, 1197 }, // 569
  {  571,  572,  573,  574,  575,  576,  577,  578,  836,  837,  838,  839 }, // 570
  {  570,  572,  573,  574,  580,  588,  589,  590,   67,  843,  845,  846 }, // 571
  {  570,  571,  573,  574,  581,  588,  591,  592,   97,  844,  845,  847 }, // 572
  {  570,  571,  572,  574,  577,  589,  594,  598,   68,  838,  841,  846 }, // 573
  {  570,  571,  572,  573,  578,  591,  596,  599,   98,  839,  842,  847 }, // 574
  {  570,  576,  577,  578,  584,  593,  594,  595,  187,  859,  861,  862 }, // 575
  {  570,  575,  577,  578,  585,  593,  596,  597,  217,  860,  861,  863 }, // 576
  {  570,  575,  576,  578,  573,  589,  594,  598,  188,  838,  857,  862 }, // 577
  {  570,  575,  576,  577,  574,  591,  596,  599,  218,  839,  858,  863 }, // 578
  {  580,  581,  582,  583,  584,  585,  586,  587,  876,  877,  878,  879 }, // 579
  {  579,  581,  582,  583,  571,  588,  589,  590,  307,  883,  885,  886 }, // 580
  {  579,  580,  582,  583,  572,  588,  591,  592,  337,  884,  885,  887 }, // 581
  {  579,  580,  581,  583,  586,  590,  595,  598,  308,  878,  881,  886 }, // 582
  {  579,  580,  581,  582,  587,  592,  597,  599,  338,  879,  882,  887 }, // 583
  {  579,  585,  586,  587,  575,  593,  594,  595,  427,  899,  901,  902 }, // 584
  {  579,  584,  586,  587,  576,  593,  596,  597,  457,  900,  901,  903 }, // 585
  {  579,  584,  585,  587,  582,  590,  595,  598,  428,  878,  897,  902 }, // 586
  {  579,  584,  585,  586,  583,  592,  597,  599,  458,  879,  898,  903 }, // 587
  {  571,  580,  589,  590,  572,  581,  591,  592,  845,  885,  995, 1027 }, // 588
  {  571,  580,  588,  590,  573,  577,  594,  598,   89,  846, 1106, 1194 }, // 589
  {  571,  580,  588,  589,  582,  586,  595,  598,  329,  886, 1107, 1194 }, // 590
  {  572,  581,  588,  592,  574,  578,  596,  599,  119,  847, 1121, 1195 }, // 591
  {  572,  581,  588,  591,  583,  587,  597,  599,  359,  887, 1122, 1195 }, // 592
  {  575,  584,  594,  595,  576,  585,  596,  597,  861,  901, 1015, 1039 }, // 593
  {  575,  584,  593,  595,  573,  577,  589,  598,  209,  862, 1154, 1198 }, // 594
  {  575,  584,  593,  594,  582,  586,  590,  598,  449,  902, 1155, 1198 }, // 595
  {  576,  585,  593,  597,  574,  578,  591,  599,  239,  863, 1165, 1199 }, // 596
  {  576,  585,  593,  596,  583,  587,  592,  599,  479,  903, 1166, 1199 }, // 597
  {  573,  577,  589,  594,  582,  586,  590,  595, 1108, 1156, 1194, 1198 }, // 598
  {  574,  578,  591,  596,  583,  587,  592,  597, 1123, 1167, 1195, 1199 }, // 599
  {  601,  602,  603,  604,  610,  611,  612,  613,  976,  977,  978,  979 }, // 600
  {  600,  602,  603,  604,  606,  618,  619,  620,   15,  732,  980,  981 }, // 601
  {  600,  601,  603,  604,  607,  618,  621,  622,   45,  733,  980,  982 }, // 602
  {  600,  601,  602,  604,  612,  619,  624,  628,   16,  976,  981,  983 }, // 603
  {  600,  601,  602,  603,  613,  621,  626,  629,   46,  977,  982,  984 }, // 604
  {  606,  607,  608,  609,  614,  615,  616,  617,  986,  987,  988,  989 }, // 605
  {  605,  607,  608,  609,  601,  618,  619,  620,   75,  743,  990,  991 }, // 606
  {  605,  606,  608,  609,  602,  618,  621,  622,  105,  744,  990,  992 }, // 607
  {  605,  606,  607,  609,  616,  620,  625,  628,   76,  986,  991,  993 }, // 608
  {  605,  606,  607,  608,  617,  622,  627,  629,  106,  987,  992,  994 }, // 609
  {  600,  611,  612,  613,  614,  623,  624,  625,  255,  784, 1016, 1017 }, // 610
  {  600,  610,  612,  613,  615,  623,  626,  627,  285,  785, 1016, 1018 }, // 611
  {  600,  610,  611,  613,  603,  619,  624,  628,  256,  976, 1017, 1019 }, // 612
  {  600,  610,  611,  612,  604,  621,  626,  629,  286,  977, 1018, 1020 }, // 613
  {  605,  615,  616,  617,  610,  623,  624,  625,  315,  795, 1022, 1023 }, // 614
  {  605,  614,  616,  617,  611,  623,  626,  627,  345,  796, 1022, 1024 }, // 615
  {  605,  614,  615,  617,  608,  620,  625,  628,  316,  986, 1023, 1025 }, // 616
  {  605,  614,  615,  616,  609,  622,  627,  629,  346,  987, 1024, 1026 }, // 617
  {  601,  606,  619,  620,  602,  607,  621,  622,  734,  745,  980,  990 }, // 618
  {  601,  606,  618,  620,  603,  612,  624,  628,   18,  981, 1040, 1041 }, // 619
  {  601,  606,  618,  619,  608,  616,  625,  628,   78,  991, 1040, 1042 }, // 620
  {  602,  607,  618,  622,  604,  613,  626,  629,   48,  982, 1043, 1044 }, // 621
  {  602,  607,  618,  621,  609,  617,  627,  629,  108,  992, 1043, 1045 }, // 622
  {  610,  614,  624,  625,  611,  615,  626,  627,  786,  797, 1016, 1022 }, // 623
  {  610,  614,  623,  625,  603,  612,  619,  628,  258, 1017, 1052, 1053 }, // 624
  {  610,  614,  623,  624,  608,  616,  620,  628,  318, 1023, 1052, 1054 }, // 625
  {  611,  615,  623,  627,  604,  613,  621,  629,  288, 1018, 1055, 1056 }, // 626
  {  611,  615,  623,  626,  609,  617,  622,  629,  348, 1024, 1055, 1057 }, // 627
  {  603,  612,  619,  624,  608,  616,  620,  625, 1040, 1052, 1168, 1169 }, // 628
  {  604,  613,  621,  626,  609,  617,  622,  627, 1043, 1055, 1171, 1172 }, // 629
  {  631,  632,  633,  634,  640,  641,  642,  643,  996,  997,  998,  999 }, // 630
  {  630,  632,  633,  634,  636,  648,  649,  650,  135,  758, 1000, 1001 }, // 631
  {  630,  631,  633,  634,  637,  648,  651,  652,  165,  759, 1000, 1002 }, // 632
  {  630,  631,  632,  634,  642,  649,  654,  658,  136,  996, 1001, 1003 }, // 633
  {  630,  631,  632,  633,  643,  651,  656,  659,  166,  997, 1002, 1004 }, // 634
  {  636,  637,  638,  639,  644,  645,  646,  647, 1006, 1007, 1008, 1009 }, // 635
  {  635,  637,  638,  639,  631,  648,  649,  650,  195,  769, 1010, 1011 }, // 636
  {  635,  636,  638,  639,  632,  648,  651,  652,  225,  770, 1010, 1012 }, // 637
  {  635,  636,  637,  639,  646,  650,  655,  658,  196, 1006, 1011, 1013 }, // 638
  {  635,  636,  637,  638,  647,  652,  657,  659,  226, 1007, 1012, 1014 }, // 639
  {  630,  641,  642,  643,  644,  653,  654,  655,  375,  810, 1028, 1029 }, // 640
  {  630,  640,  642,  643,  645,  653,  656,  657,  405,  811, 1028, 1030 }, // 641
  {  630,  640,  641,  643,  633,  649,  654,  658,  376,  996, 1029, 1031 }, // 642
  {  630,  640,  641,  642,  634,  651,  656,  659,  406,  997, 1030, 1032 }, // 643
  {  635,  645,  646,  647,  640,  653,  654,  655,  435,  821, 1034, 1035 }, // 644
  {  635,  644,  646,  647,  641,  653,  656,  657,  465,  822, 1034, 1036 }, // 645
  {  635,  644,  645,  647,  638,  650,  655,  658,  436, 1006, 1035, 1037 }, // 646
  {  635,  644,  645,  646,  639,  652,  657,  659,  466, 1007, 1036, 1038 }, // 647
  {  631,  636,  649,  650,  632,  637,  651,  652,  760,  771, 1000, 1010 }, // 648
  {  631,  636,  648,  650,  633,  642,  654,  658,  138, 1001, 1046, 1047 }, // 649
  {  631,  636,  648,  649,  638,  646,  655,  658,  198, 1011, 1046, 1048 }, // 650
  {  632,  637,  648,  652,  634,  643,  656,  659,  168, 1002, 1049, 1050 }, // 651
  {  632,  637,  648,  651,  639,  647,  657,  659,  228, 1012, 1049, 1051 }, // 652
  {  640,  644,  654,  655,  641,  645,  656,  657,  812,  823, 1028, 1034 }, // 653
  {  640,  644,  653,  655,  633,  642,  649,  658,  378, 1029, 1058, 1059 }, // 654
  {  640,  644,  653,  654,  638,  646,  650,  658,  438, 1035, 1058, 1060 }, // 655
  {  641,  645,  653,  657,  634,  643,  651,  659,  408, 1030, 1061, 1062 }, // 656
  {  641,  645,  653,  656,  639,  647,  652,  659,  468, 1036, 1061, 1063 }, // 657
  {  633,  642,  649,  654,  638,  646,  650,  655, 1046, 1058, 1176, 1177 }, // 658
  {  634,  643,  651,  656,  639,  647,  652,  657, 1049, 1061, 1179, 1180 }, // 659
  {  661,  662,  663,  664,  665,  666,  667,  668,  720,  721,  722,  723 }, // 660
  {  660,  662,  663,  664,  665,  678,  679,  680,    1,  720,  727,  728 }, // 661
  {  660,  661,  663,  664,  666,  681,  682,  683,   31,  721,  729,  730 }, // 662
  {  660,  661,  662,  664,  672,  679,  684,  688,    2,  724,  727,  731 }, // 663
  {  660,  661,  662,  663,  673,  682,  686,  688,   32,  725,  729,  731 }, // 664
  {  660,  666,  667,  668,  661,  678,  679,  680,   61,  720,  738,  739 }, // 665
  {  660,  665,  667,  668,  662,  681,  682,  683,   91,  721,  740,  741 }, // 666
  {  660,  665,  666,  668,  676,  680,  685,  689,   62,  735,  738,  742 }, // 667
  {  660,  665,  666,  667,  677,  683,  687,  689,   92,  736,  740,  742 }, // 668
  {  670,  671,  672,  673,  674,  675,  676,  677,  746,  747,  748,  749 }, // 669
  {  669,  671,  672,  673,  674,  678,  684,  685,  121,  746,  753,  754 }, // 670
  {  669,  670,  672,  673,  675,  681,  686,  687,  151,  747,  755,  756 }, // 671
  {  669,  670,  671,  673,  663,  679,  684,  688,  122,  750,  753,  757 }, // 672
  {  669,  670,  671,  672,  664,  682,  686,  688,  152,  751,  755,  757 }, // 673
  {  669,  675,  676,  677,  670,  678,  684,  685,  181,  746,  764,  765 }, // 674
  {  669,  674,  676,  677,  671,  681,  686,  687,  211,  747,  766,  767 }, // 675
  {  669,  674,  675,  677,  667,  680,  685,  689,  182,  761,  764,  768 }, // 676
  {  669,  674,  675,  676,  668,  683,  687,  689,  212,  762,  766,  768 }, // 677
  {  661,  665,  679,  680,  670,  674,  684,  685,  904,  905,  906,  907 }, // 678
  {  661,  665,  678,  680,  663,  672,  684,  688,    9,  727,  904,  908 }, // 679
  {  661,  665,  678,  679,  667,  676,  685,  689,   69,  738,  905,  909 }, // 680
  {  662,  666,  682,  683,  671,  675,  686,  687,  914,  915,  916,  917 }, // 681
  {  662,  666,  681,  683,  664,  673,  686,  688,   39,  729,  914,  918 }, // 682
  {  662,  666,  681,  682,  668,  677,  687,  689,   99,  740,  915,  919 }, // 683
  {  670,  674,  678,  685,  663,  672,  679,  688,  129,  753,  904,  924 }, // 684
  {  670,  674,  678,  684,  667,  676,  680,  689,  189,  764,  905,  925 }, // 685
  {  671,  675,  681,  687,  664,  673,  682,  688,  159,  755,  914,  930 }, // 686
  {  671,  675,  681,  686,  668,  677,  683,  689,  219,  766,  915,  931 }, // 687
  {  663,  672,  679,  684,  664,  673,  682,  686,  731,  757,  828,  848 }, // 688
  {  667,  676,  680,  685,  668,  677,  683,  687,  742,  768,  840,  856 }, // 689
  {  691,  692,  693,  694,  695,  696,  697,  698,  772,  773,  774,  775 }, // 690
  {  690,  692,  693,  694,  695,  708,  709,  710,  241,  772,  779,  780 }, // 691
  {  690,  691,  693,  694,  696,  711,  712,  713,  271,  773,  781,  782 }, // 692
  {  690,  691,  692,  694,  702,  709,  714,  718,  242,  776,  779,  783 }, // 693
  {  690,  691,  692,  693,  703,  712,  716,  718,  272,  777,  781,  783 }, // 694
  {  690,  696,  697,  698,  691,  708,  709,  710,  301,  772,  790,  791 }, // 695
  {  690,  695,  697,  698,  692,  711,  712,  713,  331,  773,  792,  793 }, // 696
  {  690,  695,  696,  698,  706,  710,  715,  719,  302,  787,  790,  794 }, // 697
  {  690,  695,  696,  697,  707,  713,  717,  719,  332,  788,  792,  794 }, // 698
  {  700,  701,  702,  703,  704,  705,  706,  707,  798,  799,  800,  801 }, // 699
  {  699,  701,  702,  703,  704,  708,  714,  715,  361,  798,  805,  806 }, // 700
  {  699,  700,  702,  703,  705,  711,  716,  717,  391,  799,  807,  808 }, // 701
  {  699,  700,  701,  703,  693,  709,  714,  718,  362,  802,  805,  809 }, // 702
  {  699,  700,  701,  702,  694,  712,  716,  718,  392,  803,  807,  809 }, // 703
  {  699,  705,  706,  707,  700,  708,  714,  715,  421,  798,  816,  817 }, // 704
  {  699,  704,  706,  707,  701,  711,  716,  717,  451,  799,  818,  819 }, // 705
  {  699,  704,  705,  707,  697,  710,  715,  719,  422,  813,  816,  820 }, // 706
  {  699,  704,  705,  706,  698,  713,  717,  719,  452,  814,  818,  820 }, // 707
  {  691,  695,  709,  710,  700,  704,  714,  715,  936,  937,  938,  939 }, // 708
  {  691,  695,  708,  710,  693,  702,  714,  718,  249,  779,  936,  940 }, // 709
  {  691,  695,  708,  709,  697,  706,  715,  719,  309,  790,  937,  941 }, // 710
  {  692,  696,  712,  713,  701,  705,  716,  717,  946,  947,  948,  949 }, // 711
  {  692,  696,  711,  713,  694,  703,  716,  718,  279,  781,  946,  950 }, // 712
  {  692,  696,  711,  712,  698,  707,  717,  719,  339,  792,  947,  951 }, // 713
  {  700,  704,  708,  715,  693,  702,  709,  718,  369,  805,  936,  956 }, // 714
  {  700,  704,  708,  714,  697,  706,  710,  719,  429,  816,  937,  957 }, // 715
  {  701,  705,  711,  717,  694,  703,  712,  718,  399,  807,  946,  962 }, // 716
  {  701,  705,  711,  716,  698,  707,  713,  719,  459,  818,  947,  963 }, // 717
  {  693,  702,  709,  714,  694,  703,  712,  716,  783,  809,  868,  888 }, // 718
  {  697,  706,  710,  715,  698,  707,  713,  717,  794,  820,  880,  896 }, // 719
  {  660,  721,  722,  723,    1,  661,  727,  728,   61,  665,  738,  739 }, // 720
  {  660,  720,  722,  723,   31,  662,  729,  730,   91,  666,  740,  741 }, // 721
  {  660,  720,  721,  723,    4,  728,  732,  734,   64,  739,  743,  745 }, // 722
  {  660,  720,  721,  722,   34,  730,  733,  734,   94,  741,  744,  745 }, // 723
  {    0,   30,  725,  726,    2,  663,  727,  731,    5,  824,  828,  829 }, // 724
  {    0,   30,  724,  726,   32,  664,  729,  731,   35,  825,  828,  830 }, // 725
  {    0,   30,  724,  725,    3,   33,  732,  733,    6,   36,  831,  832 }, // 726
  {    1,  661,  720,  728,    2,  663,  724,  731,    9,  679,  904,  908 }, // 727
  {    1,  661,  720,  727,    4,  722,  732,  734,   10,   70,  739,  910 }, // 728
  {   31,  662,  721,  730,   32,  664,  725,  731,   39,  682,  914,  918 }, // 729
  {   31,  662,  721,  729,   34,  723,  733,  734,   40,  100,  741,  920 }, // 730
  {    2,  663,  724,  727,   32,  664,  725,  729,  688,  757,  828,  848 }, // 731
  {    3,   33,  726,  733,    4,  722,  728,  734,   15,  601,  980,  981 }, // 732
  {    3,   33,  726,  732,   34,  723,  730,  734,   45,  602,  980,  982 }, // 733
  {    4,  722,  728,  732,   34,  723,  730,  733,  618,  745,  980,  990 }, // 734
  {   60,   90,  736,  737,   62,  667,  738,  742,   65,  836,  840,  841 }, // 735
  {   60,   90,  735,  737,   92,  668,  740,  742,   95,  837,  840,  842 }, // 736
  {   60,   90,  735,  736,   63,   93,  743,  744,   66,   96,  843,  844 }, // 737
  {   61,  665,  720,  739,   62,  667,  735,  742,   69,  680,  905,  909 }, // 738
  {   61,  665,  720,  738,   64,  722,  743,  745,   10,   70,  728,  910 }, // 739
  {   91,  666,  721,  741,   92,  668,  736,  742,   99,  683,  915,  919 }, // 740
  {   91,  666,  721,  740,   94,  723,  744,  745,   40,  100,  730,  920 }, // 741
  {   62,  667,  735,  738,   92,  668,  736,  740,  689,  768,  840,  856 }, // 742
  {   63,   93,  737,  744,   64,  722,  739,  745,   75,  606,  990,  991 }, // 743
  {   63,   93,  737,  743,   94,  723,  741,  745,  105,  607,  990,  992 }, // 744
  {   64,  722,  739,  743,   94,  723,  741,  744,  618,  734,  980,  990 }, // 745
  {  669,  747,  748,  749,  121,  670,  753,  754,  181,  674,  764,  765 }, // 746
  {  669,  746,  748,  749,  151,  671,  755,  756,  211,  675,  766,  767 }, // 747
  {  669,  746,  747,  749,  124,  754,  758,  760,  184,  765,  769,  771 }, // 748
  {  669,  746,  747,  748,  154,  756,  759,  760,  214,  767,  770,  771 }, // 749
  {  120,  150,  751,  752,  122,  672,  753,  757,  125,  824,  848,  849 }, // 750
  {  120,  150,  750,  752,  152,  673,  755,  757,  155,  825,  848,  850 }, // 751
  {  120,  150,  750,  751,  123,  153,  758,  759,  126,  156,  851,  852 }, // 752
  {  121,  670,  746,  754,  122,  672,  750,  757,  129,  684,  904,  924 }, // 753
  {  121,  670,  746,  753,  124,  748,  758,  760,  130,  190,  765,  926 }, // 754
  {  151,  671,  747,  756,  152,  673,  751,  757,  159,  686,  914,  930 }, // 755
  {  151,  671,  747,  755,  154,  749,  759,  760,  160,  220,  767,  932 }, // 756
  {  122,  672,  750,  753,  152,  673,  751,  755,  688,  731,  828,  848 }, // 757
  {  123,  153,  752,  759,  124,  748,  754,  760,  135,  631, 1000, 1001 }, // 758
  {  123,  153,  752,  758,  154,  749,  756,  760,  165,  632, 1000, 1002 }, // 759
  {  124,  748,  754,  758,  154,  749,  756,  759,  648,  771, 1000, 1010 }, // 760
  {  180,  210,  762,  763,  182,  676,  764,  768,  185,  836,  856,  857 }, // 761
  {  180,  210,  761,  763,  212,  677,  766,  768,  215,  837,  856,  858 }, // 762
  {  180,  210,  761,  762,  183,  213,  769,  770,  186,  216,  859,  860 }, // 763
  {  181,  674,  746,  765,  182,  676,  761,  768,  189,  685,  905,  925 }, // 764
  {  181,  674,  746,  764,  184,  748,  769,  771,  130,  190,  754,  926 }, // 765
  {  211,  675,  747,  767,  212,  677,  762,  768,  219,  687,  915,  931 }, // 766
  {  211,  675,  747,  766,  214,  749,  770,  771,  160,  220,  756,  932 }, // 767
  {  182,  676,  761,  764,  212,  677,  762,  766,  689,  742,  840,  856 }, // 768
  {  183,  213,  763,  770,  184,  748,  765,  771,  195,  636, 1010, 1011 }, // 769
  {  183,  213,  763,  769,  214,  749,  767,  771,  225,  637, 1010, 1012 }, // 770
  {  184,  748,  765,  769,  214,  749,  767,  770,  648,  760, 1000, 1010 }, // 771
  {  690,  773,  774,  775,  241,  691,  779,  780,  301,  695,  790,  791 }, // 772
  {  690,  772,  774,  775,  271,  692,  781,  782,  331,  696,  792,  793 }, // 773
  {  690,  772,  773,  775,  244,  780,  784,  786,  304,  791,  795,  797 }, // 774
  {  690,  772,  773,  774,  274,  782,  785,  786,  334,  793,  796,  797 }, // 775
  {  240,  270,  777,  778,  242,  693,  779,  783,  245,  864,  868,  869 }, // 776
  {  240,  270,  776,  778,  272,  694,  781,  783,  275,  865,  868,  870 }, // 777
  {  240,  270,  776,  777,  243,  273,  784,  785,  246,  276,  871,  872 }, // 778
  {  241,  691,  772,  780,  242,  693,  776,  783,  249,  709,  936,  940 }, // 779
  {  241,  691,  772,  779,  244,  774,  784,  786,  250,  310,  791,  942 }, // 780
  {  271,  692,  773,  782,  272,  694,  777,  783,  279,  712,  946,  950 }, // 781
  {  271,  692,  773,  781,  274,  775,  785,  786,  280,  340,  793,  952 }, // 782
  {  242,  693,  776,  779,  272,  694,  777,  781,  718,  809,  868,  888 }, // 783
  {  243,  273,  778,  785,  244,  774,  780,  786,  255,  610, 1016, 1017 }, // 784
  {  243,  273,  778,  784,  274,  775,  782,  786,  285,  611, 1016, 1018 }, // 785
  {  244,  774,  780,  784,  274,  775,  782,  785,  623,  797, 1016, 1022 }, // 786
  {  300,  330,  788,  789,  302,  697,  790,  794,  305,  876,  880,  881 }, // 787
  {  300,  330,  787,  789,  332,  698,  792,  794,  335,  877,  880,  882 }, // 788
  {  300,  330,  787,  788,  303,  333,  795,  796,  306,  336,  883,  884 }, // 789
  {  301,  695,  772,  791,  302,  697,  787,  794,  309,  710,  937,  941 }, // 790
  {  301,  695,  772,  790,  304,  774,  795,  797,  250,  310,  780,  942 }, // 791
  {  331,  696,  773,  793,  332,  698,  788,  794,  339,  713,  947,  951 }, // 792
  {  331,  696,  773,  792,  334,  775,  796,  797,  280,  340,  782,  952 }, // 793
  {  302,  697,  787,  790,  332,  698,  788,  792,  719,  820,  880,  896 }, // 794
  {  303,  333,  789,  796,  304,  774,  791,  797,  315,  614, 1022, 1023 }, // 795
  {  303,  333,  789,  795,  334,  775,  793,  797,  345,  615, 1022, 1024 }, // 796
  {  304,  774,  791,  795,  334,  775,  793,  796,  623,  786, 1016, 1022 }, // 797
  {  699,  799,  800,  801,  361,  700,  805,  806,  421,  704,  816,  817 }, // 798
  {  699,  798,  800,  801,  391,  701,  807,  808,  451,  705,  818,  819 }, // 799
  {  699,  798,  799,  801,  364,  806,  810,  812,  424,  817,  821,  823 }, // 800
  {  699,  798,  799,  800,  394,  808,  811,  812,  454,  819,  822,  823 }, // 801
  {  360,  390,  803,  804,  362,  702,  805,  809,  365,  864,  888,  889 }, // 802
  {  360,  390,  802,  804,  392,  703,  807,  809,  395,  865,  888,  890 }, // 803
  {  360,  390,  802,  803,  363,  393,  810,  811,  366,  396,  891,  892 }, // 804
  {  361,  700,  798,  806,  362,  702,  802,  809,  369,  714,  936,  956 }, // 805
  {  361,  700,  798,  805,  364,  800,  810,  812,  370,  430,  817,  958 }, // 806
  {  391,  701,  799,  808,  392,  703,  803,  809,  399,  716,  946,  962 }, // 807
  {  391,  701,  799,  807,  394,  801,  811,  812,  400,  460,  819,  964 }, // 808
  {  362,  702,  802,  805,  392,  703,  803,  807,  718,  783,  868,  888 }, // 809
  {  363,  393,  804,  811,  364,  800,  806,  812,  375,  640, 1028, 1029 }, // 810
  {  363,  393,  804,  810,  394,  801,  808,  812,  405,  641, 1028, 1030 }, // 811
  {  364,  800,  806,  810,  394,  801,  808,  811,  653,  823, 1028, 1034 }, // 812
  {  420,  450,  814,  815,  422,  706,  816,  820,  425,  876,  896,  897 }, // 813
  {  420,  450,  813,  815,  452,  707,  818,  820,  455,  877,  896,  898 }, // 814
  {  420,  450,  813,  814,  423,  453,  821,  822,  426,  456,  899,  900 }, // 815
  {  421,  704,  798,  817,  422,  706,  813,  820,  429,  715,  937,  957 }, // 816
  {  421,  704,  798,  816,  424,  800,  821,  823,  370,  430,  806,  958 }, // 817
  {  451,  705,  799,  819,  452,  707,  814,  820,  459,  717,  947,  963 }, // 818
  {  451,  705,  799,  818,  454,  801,  822,  823,  400,  460,  808,  964 }, // 819
  {  422,  706,  813,  816,  452,  707,  814,  818,  719,  794,  880,  896 }, // 820
  {  423,  453,  815,  822,  424,  800,  817,  823,  435,  644, 1034, 1035 }, // 821
  {  423,  453,  815,  821,  454,  801,  819,  823,  465,  645, 1034, 1036 }, // 822
  {  424,  800,  817,  821,  454,  801,  819,  822,  653,  812, 1028, 1034 }, // 823
  {  540,  825,  826,  827,    5,  724,  828,  829,  125,  750,  848,  849 }, // 824
  {  540,  824,  826,  827,   35,  725,  828,  830,  155,  751,  848,  850 }, // 825
  {  540,  824,  825,  827,    8,  543,  829,  834,  128,  547,  849,  854 }, // 826
  {  540,  824,  825,  826,   38,  544,  830,  835,  158,  548,  850,  855 }, // 827
  {    5,  724,  824,  829,   35,  725,  825,  830,  688,  731,  757,  848 }, // 828
  {    5,  724,  824,  828,    8,  543,  826,  834,   14,  134,  849,  968 }, // 829
  {   35,  725,  825,  828,   38,  544,  827,  835,   44,  164,  850,  969 }, // 830
  {    6,   36,  726,  832,    7,  541,  833,  834,   17,  978,  983,  985 }, // 831
  {    6,   36,  726,  831,   37,  542,  833,  835,   47,  979,  984,  985 }, // 832
  {    7,  541,  831,  834,   37,  542,  832,  835,  558,  873,  985, 1021 }, // 833
  {    7,  541,  831,  833,    8,  543,  826,  829,   29,  559, 1076, 1192 }, // 834
  {   37,  542,  832,  833,   38,  544,  827,  830,   59,  561, 1091, 1193 }, // 835
  {  570,  837,  838,  839,   65,  735,  840,  841,  185,  761,  856,  857 }, // 836
  {  570,  836,  838,  839,   95,  736,  840,  842,  215,  762,  856,  858 }, // 837
  {  570,  836,  837,  839,   68,  573,  841,  846,  188,  577,  857,  862 }, // 838
  {  570,  836,  837,  838,   98,  574,  842,  847,  218,  578,  858,  863 }, // 839
  {   65,  735,  836,  841,   95,  736,  837,  842,  689,  742,  768,  856 }, // 840
  {   65,  735,  836,  840,   68,  573,  838,  846,   74,  194,  857,  970 }, // 841
  {   95,  736,  837,  840,   98,  574,  839,  847,  104,  224,  858,  971 }, // 842
  {   66,   96,  737,  844,   67,  571,  845,  846,   77,  988,  993,  995 }, // 843
  {   66,   96,  737,  843,   97,  572,  845,  847,  107,  989,  994,  995 }, // 844
  {   67,  571,  843,  846,   97,  572,  844,  847,  588,  885,  995, 1027 }, // 845
  {   67,  571,  843,  845,   68,  573,  838,  841,   89,  589, 1106, 1194 }, // 846
  {   97,  572,  844,  845,   98,  574,  839,  842,  119,  591, 1121, 1195 }, // 847
  {  125,  750,  824,  849,  155,  751,  825,  850,  688,  731,  757,  828 }, // 848
  {  125,  750,  824,  848,  128,  547,  826,  854,   14,  134,  829,  968 }, // 849
  {  155,  751,  825,  848,  158,  548,  827,  855,   44,  164,  830,  969 }, // 850
  {  126,  156,  752,  852,  127,  545,  853,  854,  137,  998, 1003, 1005 }, // 851
  {  126,  156,  752,  851,  157,  546,  853,  855,  167,  999, 1004, 1005 }, // 852
  {  127,  545,  851,  854,  157,  546,  852,  855,  563,  893, 1005, 1033 }, // 853
  {  127,  545,  851,  853,  128,  547,  826,  849,  149,  564, 1132, 1196 }, // 854
  {  157,  546,  852,  853,  158,  548,  827,  850,  179,  566, 1143, 1197 }, // 855
  {  185,  761,  836,  857,  215,  762,  837,  858,  689,  742,  768,  840 }, // 856
  {  185,  761,  836,  856,  188,  577,  838,  862,   74,  194,  841,  970 }, // 857
  {  215,  762,  837,  856,  218,  578,  839,  863,  104,  224,  842,  971 }, // 858
  {  186,  216,  763,  860,  187,  575,  861,  862,  197, 1008, 1013, 1015 }, // 859
  {  186,  216,  763,  859,  217,  576,  861,  863,  227, 1009, 1014, 1015 }, // 860
  {  187,  575,  859,  862,  217,  576,  860,  863,  593,  901, 1015, 1039 }, // 861
  {  187,  575,  859,  861,  188,  577,  838,  857,  209,  594, 1154, 1198 }, // 862
  {  217,  576,  860,  861,  218,  578,  839,  858,  239,  596, 1165, 1199 }, // 863
  {  549,  865,  866,  867,  245,  776,  868,  869,  365,  802,  888,  889 }, // 864
  {  549,  864,  866,  867,  275,  777,  868,  870,  395,  803,  888,  890 }, // 865
  {  549,  864,  865,  867,  248,  552,  869,  874,  368,  556,  889,  894 }, // 866
  {  549,  864,  865,  866,  278,  553,  870,  875,  398,  557,  890,  895 }, // 867
  {  245,  776,  864,  869,  275,  777,  865,  870,  718,  783,  809,  888 }, // 868
  {  245,  776,  864,  868,  248,  552,  866,  874,  254,  374,  889,  972 }, // 869
  {  275,  777,  865,  868,  278,  553,  867,  875,  284,  404,  890,  973 }, // 870
  {  246,  276,  778,  872,  247,  550,  873,  874,  257,  978, 1019, 1021 }, // 871
  {  246,  276,  778,  871,  277,  551,  873,  875,  287,  979, 1020, 1021 }, // 872
  {  247,  550,  871,  874,  277,  551,  872,  875,  558,  833,  985, 1021 }, // 873
  {  247,  550,  871,  873,  248,  552,  866,  869,  269,  560, 1077, 1192 }, // 874
  {  277,  551,  872,  873,  278,  553,  867,  870,  299,  562, 1092, 1193 }, // 875
  {  579,  877,  878,  879,  305,  787,  880,  881,  425,  813,  896,  897 }, // 876
  {  579,  876,  878,  879,  335,  788,  880,  882,  455,  814,  896,  898 }, // 877
  {  579,  876,  877,  879,  308,  582,  881,  886,  428,  586,  897,  902 }, // 878
  {  579,  876,  877,  878,  338,  583,  882,  887,  458,  587,  898,  903 }, // 879
  {  305,  787,  876,  881,  335,  788,  877,  882,  719,  794,  820,  896 }, // 880
  {  305,  787,  876,  880,  308,  582,  878,  886,  314,  434,  897,  974 }, // 881
  {  335,  788,  877,  880,  338,  583,  879,  887,  344,  464,  898,  975 }, // 882
  {  306,  336,  789,  884,  307,  580,  885,  886,  317,  988, 1025, 1027 }, // 883
  {  306,  336,  789,  883,  337,  581,  885,  887,  347,  989, 1026, 1027 }, // 884
  {  307,  580,  883,  886,  337,  581,  884,  887,  588,  845,  995, 1027 }, // 885
  {  307,  580,  883,  885,  308,  582,  878,  881,  329,  590, 1107, 1194 }, // 886
  {  337,  581,  884,  885,  338,  583,  879,  882,  359,  592, 1122, 1195 }, // 887
  {  365,  802,  864,  889,  395,  803,  865,  890,  718,  783,  809,  868 }, // 888
  {  365,  802,  864,  888,  368,  556,  866,  894,  254,  374,  869,  972 }, // 889
  {  395,  803,  865,  888,  398,  557,  867,  895,  284,  404,  870,  973 }, // 890
  {  366,  396,  804,  892,  367,  554,  893,  894,  377,  998, 1031, 1033 }, // 891
  {  366,  396,  804,  891,  397,  555,  893,  895,  407,  999, 1032, 1033 }, // 892
  {  367,  554,  891,  894,  397,  555,  892,  895,  563,  853, 1005, 1033 }, // 893
  {  367,  554,  891,  893,  368,  556,  866,  889,  389,  565, 1133, 1196 }, // 894
  {  397,  555,  892,  893,  398,  557,  867,  890,  419,  567, 1144, 1197 }, // 895
  {  425,  813,  876,  897,  455,  814,  877,  898,  719,  794,  820,  880 }, // 896
  {  425,  813,  876,  896,  428,  586,  878,  902,  314,  434,  881,  974 }, // 897
  {  455,  814,  877,  896,  458,  587,  879,  903,  344,  464,  882,  975 }, // 898
  {  426,  456,  815,  900,  427,  584,  901,  902,  437, 1008, 1037, 1039 }, // 899
  {  426,  456,  815,  899,  457,  585,  901,  903,  467, 1009, 1038, 1039 }, // 900
  {  427,  584,  899,  902,  457,  585,  900,  903,  593,  861, 1015, 1039 }, // 901
  {  427,  584,  899,  901,  428,  586,  878,  897,  449,  595, 1155, 1198 }, // 902
  {  457,  585,  900,  901,  458,  587,  879,  898,  479,  597, 1166, 1199 }, // 903
  {  678,  905,  906,  907,    9,  679,  727,  908,  129,  684,  753,  924 }, // 904
  {  678,  904,  906,  907,   69,  680,  738,  909,  189,  685,  764,  925 }, // 905
  {  678,  904,  905,  907,   11,  908,  911,  912,  131,  924,  927,  928 }, // 906
  {  678,  904,  905,  906,   71,  909,  911,  913,  191,  925,  927,  929 }, // 907
  {    9,  679,  727,  904,   11,  906,  911,  912,   13,  133,  924,  968 }, // 908
  {   69,  680,  738,  905,   71,  907,  911,  913,   73,  193,  925,  970 }, // 909
  {   10,   70,  728,  739,   12,   72,  912,  913,   19,   79, 1041, 1042 }, // 910
  {   11,  906,  908,  912,   71,  907,  909,  913,  498,  927, 1184, 1185 }, // 911
  {   11,  906,  908,  911,   12,   72,  910,  913,   27,  499, 1071, 1184 }, // 912
  {   71,  907,  909,  911,   12,   72,  910,  912,   87,  501, 1101, 1184 }, // 913
  {  681,  915,  916,  917,   39,  682,  729,  918,  159,  686,  755,  930 }, // 914
  {  681,  914,  916,  917,   99,  683,  740,  919,  219,  687,  766,  931 }, // 915
  {  681,  914,  915,  917,   41,  918,  921,  922,  161,  930,  933,  934 }, // 916
  {  681,  914,  915,  916,  101,  919,  921,  923,  221,  931,  933,  935 }, // 917
  {   39,  682,  729,  914,   41,  916,  921,  922,   43,  163,  930,  969 }, // 918
  {   99,  683,  740,  915,  101,  917,  921,  923,  103,  223,  931,  971 }, // 919
  {   40,  100,  730,  741,   42,  102,  922,  923,   49,  109, 1044, 1045 }, // 920
  {   41,  916,  918,  922,  101,  917,  919,  923,  528,  933, 1186, 1187 }, // 921
  {   41,  916,  918,  921,   42,  102,  920,  923,   57,  529, 1086, 1186 }, // 922
  {  101,  917,  919,  921,   42,  102,  920,  922,  117,  531, 1116, 1186 }, // 923
  {  129,  684,  753,  904,  131,  906,  927,  928,   13,  133,  908,  968 }, // 924
  {  189,  685,  764,  905,  191,  907,  927,  929,   73,  193,  909,  970 }, // 925
  {  130,  190,  754,  765,  132,  192,  928,  929,  139,  199, 1047, 1048 }, // 926
  {  131,  906,  924,  928,  191,  907,  925,  929,  498,  911, 1184, 1185 }, // 927
  {  131,  906,  924,  927,  132,  192,  926,  929,  147,  500, 1127, 1185 }, // 928
  {  191,  907,  925,  927,  132,  192,  926,  928,  207,  502, 1149, 1185 }, // 929
  {  159,  686,  755,  914,  161,  916,  933,  934,   43,  163,  918,  969 }, // 930
  {  219,  687,  766,  915,  221,  917,  933,  935,  103,  223,  919,  971 }, // 931
  {  160,  220,  756,  767,  162,  222,  934,  935,  169,  229, 1050, 1051 }, // 932
  {  161,  916,  930,  934,  221,  917,  931,  935,  528,  921, 1186, 1187 }, // 933
  {  161,  916,  930,  933,  162,  222,  932,  935,  177,  530, 1138, 1187 }, // 934
  {  221,  917,  931,  933,  162,  222,  932,  934,  237,  532, 1160, 1187 }, // 935
  {  708,  937,  938,  939,  249,  709,  779,  940,  369,  714,  805,  956 }, // 936
  {  708,  936,  938,  939,  309,  710,  790,  941,  429,  715,  816,  957 }, // 937
  {  708,  936,  937,  939,  251,  940,  943,  944,  371,  956,  959,  960 }, // 938
  {  708,  936,  937,  938,  311,  941,  943,  945,  431,  957,  959,  961 }, // 939
  {  249,  709,  779,  936,  251,  938,  943,  944,  253,  373,  956,  972 }, // 940
  {  309,  710,  790,  937,  311,  939,  943,  945,  313,  433,  957,  974 }, // 941
  {  250,  310,  780,  791,  252,  312,  944,  945,  259,  319, 1053, 1054 }, // 942
  {  251,  938,  940,  944,  311,  939,  941,  945,  503,  959, 1188, 1189 }, // 943
  {  251,  938,  940,  943,  252,  312,  942,  945,  267,  504, 1073, 1188 }, // 944
  {  311,  939,  941,  943,  252,  312,  942,  944,  327,  506, 1103, 1188 }, // 945
  {  711,  947,  948,  949,  279,  712,  781,  950,  399,  716,  807,  962 }, // 946
  {  711,  946,  948,  949,  339,  713,  792,  951,  459,  717,  818,  963 }, // 947
  {  711,  946,  947,  949,  281,  950,  953,  954,  401,  962,  965,  966 }, // 948
  {  711,  946,  947,  948,  341,  951,  953,  955,  461,  963,  965,  967 }, // 949
  {  279,  712,  781,  946,  281,  948,  953,  954,  283,  403,  962,  973 }, // 950
  {  339,  713,  792,  947,  341,  949,  953,  955,  343,  463,  963,  975 }, // 951
  {  280,  340,  782,  793,  282,  342,  954,  955,  289,  349, 1056, 1057 }, // 952
  {  281,  948,  950,  954,  341,  949,  951,  955,  533,  965, 1190, 1191 }, // 953
  {  281,  948,  950,  953,  282,  342,  952,  955,  297,  534, 1088, 1190 }, // 954
  {  341,  949,  951,  953,  282,  342,  952,  954,  357,  536, 1118, 1190 }, // 955
  {  369,  714,  805,  936,  371,  938,  959,  960,  253,  373,  940,  972 }, // 956
  {  429,  715,  816,  937,  431,  939,  959,  961,  313,  433,  941,  974 }, // 957
  {  370,  430,  806,  817,  372,  432,  960,  961,  379,  439, 1059, 1060 }, // 958
  {  371,  938,  956,  960,  431,  939,  957,  961,  503,  943, 1188, 1189 }, // 959
  {  371,  938,  956,  959,  372,  432,  958,  961,  387,  505, 1129, 1189 }, // 960
  {  431,  939,  957,  959,  372,  432,  958,  960,  447,  507, 1151, 1189 }, // 961
  {  399,  716,  807,  946,  401,  948,  965,  966,  283,  403,  950,  973 }, // 962
  {  459,  717,  818,  947,  461,  949,  965,  967,  343,  463,  951,  975 }, // 963
  {  400,  460,  808,  819,  402,  462,  966,  967,  409,  469, 1062, 1063 }, // 964
  {  401,  948,  962,  966,  461,  949,  963,  967,  533,  953, 1190, 1191 }, // 965
  {  401,  948,  962,  965,  402,  462,  964,  967,  417,  535, 1140, 1191 }, // 966
  {  461,  949,  963,  965,  402,  462,  964,  966,  477,  537, 1162, 1191 }, // 967
  {   13,  133,  908,  924,   14,  134,  829,  849,   28,  148, 1072, 1128 }, // 968
  {   43,  163,  918,  930,   44,  164,  830,  850,   58,  178, 1087, 1139 }, // 969
  {   73,  193,  909,  925,   74,  194,  841,  857,   88,  208, 1102, 1150 }, // 970
  {  103,  223,  919,  931,  104,  224,  842,  858,  118,  238, 1117, 1161 }, // 971
  {  253,  373,  940,  956,  254,  374,  869,  889,  268,  388, 1074, 1130 }, // 972
  {  283,  403,  950,  962,  284,  404,  870,  890,  298,  418, 1089, 1141 }, // 973
  {  313,  433,  941,  957,  314,  434,  881,  897,  328,  448, 1104, 1152 }, // 974
  {  343,  463,  951,  963,  344,  464,  882,  898,  358,  478, 1119, 1163 }, // 975
  {  600,  977,  978,  979,   16,  603,  981,  983,  256,  612, 1017, 1019 }, // 976
  {  600,  976,  978,  979,   46,  604,  982,  984,  286,  613, 1018, 1020 }, // 977
  {  600,  976,  977,  979,   17,  831,  983,  985,  257,  871, 1019, 1021 }, // 978
  {  600,  976,  977,  978,   47,  832,  984,  985,  287,  872, 1020, 1021 }, // 979
  {   15,  601,  732,  981,   45,  602,  733,  982,  618,  734,  745,  990 }, // 980
  {   15,  601,  732,  980,   16,  603,  976,  983,   18,  619, 1040, 1041 }, // 981
  {   45,  602,  733,  980,   46,  604,  977,  984,   48,  621, 1043, 1044 }, // 982
  {   16,  603,  976,  981,   17,  831,  978,  985,   26,  266, 1019, 1070 }, // 983
  {   46,  604,  977,  982,   47,  832,  979,  985,   56,  296, 1020, 1085 }, // 984
  {   17,  831,  978,  983,   47,  832,  979,  984,  558,  833,  873, 1021 }, // 985
  {  605,  987,  988,  989,   76,  608,  991,  993,  316,  616, 1023, 1025 }, // 986
  {  605,  986,  988,  989,  106,  609,  992,  994,  346,  617, 1024, 1026 }, // 987
  {  605,  986,  987,  989,   77,  843,  993,  995,  317,  883, 1025, 1027 }, // 988
  {  605,  986,  987,  988,  107,  844,  994,  995,  347,  884, 1026, 1027 }, // 989
  {   75,  606,  743,  991,  105,  607,  744,  992,  618,  734,  745,  980 }, // 990
  {   75,  606,  743,  990,   76,  608,  986,  993,   78,  620, 1040, 1042 }, // 991
  {  105,  607,  744,  990,  106,  609,  987,  994,  108,  622, 1043, 1045 }, // 992
  {   76,  608,  986,  991,   77,  843,  988,  995,   86,  326, 1025, 1100 }, // 993
  {  106,  609,  987,  992,  107,  844,  989,  995,  116,  356, 1026, 1115 }, // 994
  {   77,  843,  988,  993,  107,  844,  989,  994,  588,  845,  885, 1027 }, // 995
  {  630,  997,  998,  999,  136,  633, 1001, 1003,  376,  642, 1029, 1031 }, // 996
  {  630,  996,  998,  999,  166,  634, 1002, 1004,  406,  643, 1030, 1032 }, // 997
  {  630,  996,  997,  999,  137,  851, 1003, 1005,  377,  891, 1031, 1033 }, // 998
  {  630,  996,  997,  998,  167,  852, 1004, 1005,  407,  892, 1032, 1033 }, // 999
  {  135,  631,  758, 1001,  165,  632,  759, 1002,  648,  760,  771, 1010 }, //1000
  {  135,  631,  758, 1000,  136,  633,  996, 1003,  138,  649, 1046, 1047 }, //1001
  {  165,  632,  759, 1000,  166,  634,  997, 1004,  168,  651, 1049, 1050 }, //1002
  {  136,  633,  996, 1001,  137,  851,  998, 1005,  146,  386, 1031, 1126 }, //1003
  {  166,  634,  997, 1002,  167,  852,  999, 1005,  176,  416, 1032, 1137 }, //1004
  {  137,  851,  998, 1003,  167,  852,  999, 1004,  563,  853,  893, 1033 }, //1005
  {  635, 1007, 1008, 1009,  196,  638, 1011, 1013,  436,  646, 1035, 1037 }, //1006
  {  635, 1006, 1008, 1009,  226,  639, 1012, 1014,  466,  647, 1036, 1038 }, //1007
  {  635, 1006, 1007, 1009,  197,  859, 1013, 1015,  437,  899, 1037, 1039 }, //1008
  {  635, 1006, 1007, 1008,  227,  860, 1014, 1015,  467,  900, 1038, 1039 }, //1009
  {  195,  636,  769, 1011,  225,  637,  770, 1012,  648,  760,  771, 1000 }, //1010
  {  195,  636,  769, 1010,  196,  638, 1006, 1013,  198,  650, 1046, 1048 }, //1011
  {  225,  637,  770, 1010,  226,  639, 1007, 1014,  228,  652, 1049, 1051 }, //1012
  {  196,  638, 1006, 1011,  197,  859, 1008, 1015,  206,  446, 1037, 1148 }, //1013
  {  226,  639, 1007, 1012,  227,  860, 1009, 1015,  236,  476, 1038, 1159 }, //1014
  {  197,  859, 1008, 1013,  227,  860, 1009, 1014,  593,  861,  901, 1039 }, //1015
  {  255,  610,  784, 1017,  285,  611,  785, 1018,  623,  786,  797, 1022 }, //1016
  {  255,  610,  784, 1016,  256,  612,  976, 1019,  258,  624, 1052, 1053 }, //1017
  {  285,  611,  785, 1016,  286,  613,  977, 1020,  288,  626, 1055, 1056 }, //1018
  {  256,  612,  976, 1017,  257,  871,  978, 1021,   26,  266,  983, 1070 }, //1019
  {  286,  613,  977, 1018,  287,  872,  979, 1021,   56,  296,  984, 1085 }, //1020
  {  257,  871,  978, 1019,  287,  872,  979, 1020,  558,  833,  873,  985 }, //1021
  {  315,  614,  795, 1023,  345,  615,  796, 1024,  623,  786,  797, 1016 }, //1022
  {  315,  614,  795, 1022,  316,  616,  986, 1025,  318,  625, 1052, 1054 }, //1023
  {  345,  615,  796, 1022,  346,  617,  987, 1026,  348,  627, 1055, 1057 }, //1024
  {  316,  616,  986, 1023,  317,  883,  988, 1027,   86,  326,  993, 1100 }, //1025
  {  346,  617,  987, 1024,  347,  884,  989, 1027,  116,  356,  994, 1115 }, //1026
  {  317,  883,  988, 1025,  347,  884,  989, 1026,  588,  845,  885,  995 }, //1027
  {  375,  640,  810, 1029,  405,  641,  811, 1030,  653,  812,  823, 1034 }, //1028
  {  375,  640,  810, 1028,  376,  642,  996, 1031,  378,  654, 1058, 1059 }, //1029
  {  405,  641,  811, 1028,  406,  643,  997, 1032,  408,  656, 1061, 1062 }, //1030
  {  376,  642,  996, 1029,  377,  891,  998, 1033,  146,  386, 1003, 1126 }, //1031
  {  406,  643,  997, 1030,  407,  892,  999, 1033,  176,  416, 1004, 1137 }, //1032
  {  377,  891,  998, 1031,  407,  892,  999, 1032,  563,  853,  893, 1005 }, //1033
  {  435,  644,  821, 1035,  465,  645,  822, 1036,  653,  812,  823, 1028 }, //1034
  {  435,  644,  821, 1034,  436,  646, 1006, 1037,  438,  655, 1058, 1060 }, //1035
  {  465,  645,  822, 1034,  466,  647, 1007, 1038,  468,  657, 1061, 1063 }, //1036
  {  436,  646, 1006, 1035,  437,  899, 1008, 1039,  206,  446, 1013, 1148 }, //1037
  {  466,  647, 1007, 1036,  467,  900, 1009, 1039,  236,  476, 1014, 1159 }, //1038
  {  437,  899, 1008, 1037,  467,  900, 1009, 1038,  593,  861,  901, 1015 }, //1039
  {   18,  619,  981, 1041,   78,  620,  991, 1042,  628, 1052, 1168, 1169 }, //1040
  {   18,  619,  981, 1040,   19,   79,  910, 1042,   25, 1068, 1168, 1170 }, //1041
  {   78,  620,  991, 1040,   19,   79,  910, 1041,   85, 1098, 1168, 1174 }, //1042
  {   48,  621,  982, 1044,  108,  622,  992, 1045,  629, 1055, 1171, 1172 }, //1043
  {   48,  621,  982, 1043,   49,  109,  920, 1045,   55, 1083, 1171, 1173 }, //1044
  {  108,  622,  992, 1043,   49,  109,  920, 1044,  115, 1113, 1171, 1175 }, //1045
  {  138,  649, 1001, 1047,  198,  650, 1011, 1048,  658, 1058, 1176, 1177 }, //1046
  {  138,  649, 1001, 1046,  139,  199,  926, 1048,  145, 1124, 1176, 1178 }, //1047
  {  198,  650, 1011, 1046,  139,  199,  926, 1047,  205, 1146, 1176, 1182 }, //1048
  {  168,  651, 1002, 1050,  228,  652, 1012, 1051,  659, 1061, 1179, 1180 }, //1049
  {  168,  651, 1002, 1049,  169,  229,  932, 1051,  175, 1135, 1179, 1181 }, //1050
  {  228,  652, 1012, 1049,  169,  229,  932, 1050,  235, 1157, 1179, 1183 }, //1051
  {  258,  624, 1017, 1053,  318,  625, 1023, 1054,  628, 1040, 1168, 1169 }, //1052
  {  258,  624, 1017, 1052,  259,  319,  942, 1054,  265, 1069, 1169, 1170 }, //1053
  {  318,  625, 1023, 1052,  259,  319,  942, 1053,  325, 1099, 1169, 1174 }, //1054
  {  288,  626, 1018, 1056,  348,  627, 1024, 1057,  629, 1043, 1171, 1172 }, //1055
  {  288,  626, 1018, 1055,  289,  349,  952, 1057,  295, 1084, 1172, 1173 }, //1056
  {  348,  627, 1024, 1055,  289,  349,  952, 1056,  355, 1114, 1172, 1175 }, //1057
  {  378,  654, 1029, 1059,  438,  655, 1035, 1060,  658, 1046, 1176, 1177 }, //1058
  {  378,  654, 1029, 1058,  379,  439,  958, 1060,  385, 1125, 1177, 1178 }, //1059
  {  438,  655, 1035, 1058,  379,  439,  958, 1059,  445, 1147, 1177, 1182 }, //1060
  {  408,  656, 1030, 1062,  468,  657, 1036, 1063,  659, 1049, 1179, 1180 }, //1061
  {  408,  656, 1030, 1061,  409,  469,  964, 1063,  415, 1136, 1180, 1181 }, //1062
  {  468,  657, 1036, 1061,  409,  469,  964, 1062,  475, 1158, 1180, 1183 }, //1063
  {  480, 1065, 1066, 1067,   21,  481, 1071, 1072,  141,  490, 1127, 1128 }, //1064
  {  480, 1064, 1066, 1067,  261,  482, 1073, 1074,  381,  491, 1129, 1130 }, //1065
  {  480, 1064, 1065, 1067,   24, 1072, 1076, 1078,  144, 1128, 1132, 1134 }, //1066
  {  480, 1064, 1065, 1066,  264, 1074, 1077, 1078,  384, 1130, 1133, 1134 }, //1067
  {   20,  260, 1069, 1070,   22,  483, 1071, 1075,   25, 1041, 1168, 1170 }, //1068
  {   20,  260, 1068, 1070,  262,  484, 1073, 1075,  265, 1053, 1169, 1170 }, //1069
  {   20,  260, 1068, 1069,   23,  263, 1076, 1077,   26,  266,  983, 1019 }, //1070
  {   21,  481, 1064, 1072,   22,  483, 1068, 1075,   27,  499,  912, 1184 }, //1071
  {   21,  481, 1064, 1071,   24, 1066, 1076, 1078,   28,  148,  968, 1128 }, //1072
  {  261,  482, 1065, 1074,  262,  484, 1069, 1075,  267,  504,  944, 1188 }, //1073
  {  261,  482, 1065, 1073,  264, 1067, 1077, 1078,  268,  388,  972, 1130 }, //1074
  {   22,  483, 1068, 1071,  262,  484, 1069, 1073,  508, 1105, 1170, 1174 }, //1075
  {   23,  263, 1070, 1077,   24, 1066, 1072, 1078,   29,  559,  834, 1192 }, //1076
  {   23,  263, 1070, 1076,  264, 1067, 1074, 1078,  269,  560,  874, 1192 }, //1077
  {   24, 1066, 1072, 1076,  264, 1067, 1074, 1077,  568, 1134, 1192, 1196 }, //1078
  {  510, 1080, 1081, 1082,   51,  511, 1086, 1087,  171,  520, 1138, 1139 }, //1079
  {  510, 1079, 1081, 1082,  291,  512, 1088, 1089,  411,  521, 1140, 1141 }, //1080
  {  510, 1079, 1080, 1082,   54, 1087, 1091, 1093,  174, 1139, 1143, 1145 }, //1081
  {  510, 1079, 1080, 1081,  294, 1089, 1092, 1093,  414, 1141, 1144, 1145 }, //1082
  {   50,  290, 1084, 1085,   52,  513, 1086, 1090,   55, 1044, 1171, 1173 }, //1083
  {   50,  290, 1083, 1085,  292,  514, 1088, 1090,  295, 1056, 1172, 1173 }, //1084
  {   50,  290, 1083, 1084,   53,  293, 1091, 1092,   56,  296,  984, 1020 }, //1085
  {   51,  511, 1079, 1087,   52,  513, 1083, 1090,   57,  529,  922, 1186 }, //1086
  {   51,  511, 1079, 1086,   54, 1081, 1091, 1093,   58,  178,  969, 1139 }, //1087
  {  291,  512, 1080, 1089,  292,  514, 1084, 1090,  297,  534,  954, 1190 }, //1088
  {  291,  512, 1080, 1088,  294, 1082, 1092, 1093,  298,  418,  973, 1141 }, //1089
  {   52,  513, 1083, 1086,  292,  514, 1084, 1088,  538, 1120, 1173, 1175 }, //1090
  {   53,  293, 1085, 1092,   54, 1081, 1087, 1093,   59,  561,  835, 1193 }, //1091
  {   53,  293, 1085, 1091,  294, 1082, 1089, 1093,  299,  562,  875, 1193 }, //1092
  {   54, 1081, 1087, 1091,  294, 1082, 1089, 1092,  569, 1145, 1193, 1197 }, //1093
  {  485, 1095, 1096, 1097,   81,  486, 1101, 1102,  201,  494, 1149, 1150 }, //1094
  {  485, 1094, 1096, 1097,  321,  487, 1103, 1104,  441,  495, 1151, 1152 }, //1095
  {  485, 1094, 1095, 1097,   84, 1102, 1106, 1108,  204, 1150, 1154, 1156 }, //1096
  {  485, 1094, 1095, 1096,  324, 1104, 1107, 1108,  444, 1152, 1155, 1156 }, //1097
  {   80,  320, 1099, 1100,   82,  488, 1101, 1105,   85, 1042, 1168, 1174 }, //1098
  {   80,  320, 1098, 1100,  322,  489, 1103, 1105,  325, 1054, 1169, 1174 }, //1099
  {   80,  320, 1098, 1099,   83,  323, 1106, 1107,   86,  326,  993, 1025 }, //1100
  {   81,  486, 1094, 1102,   82,  488, 1098, 1105,   87,  501,  913, 1184 }, //1101
  {   81,  486, 1094, 1101,   84, 1096, 1106, 1108,   88,  208,  970, 1150 }, //1102
  {  321,  487, 1095, 1104,  322,  489, 1099, 1105,  327,  506,  945, 1188 }, //1103
  {  321,  487, 1095, 1103,  324, 1097, 1107, 1108,  328,  448,  974, 1152 }, //1104
  {   82,  488, 1098, 1101,  322,  489, 1099, 1103,  508, 1075, 1170, 1174 }, //1105
  {   83,  323, 1100, 1107,   84, 1096, 1102, 1108,   89,  589,  846, 1194 }, //1106
  {   83,  323, 1100, 1106,  324, 1097, 1104, 1108,  329,  590,  886, 1194 }, //1107
  {   84, 1096, 1102, 1106,  324, 1097, 1104, 1107,  598, 1156, 1194, 1198 }, //1108
  {  515, 1110, 1111, 1112,  111,  516, 1116, 1117,  231,  524, 1160, 1161 }, //1109
  {  515, 1109, 1111, 1112,  351,  517, 1118, 1119,  471,  525, 1162, 1163 }, //1110
  {  515, 1109, 1110, 1112,  114, 1117, 1121, 1123,  234, 1161, 1165, 1167 }, //1111
  {  515, 1109, 1110, 1111,  354, 1119, 1122, 1123,  474, 1163, 1166, 1167 }, //1112
  {  110,  350, 1114, 1115,  112,  518, 1116, 1120,  115, 1045, 1171, 1175 }, //1113
  {  110,  350, 1113, 1115,  352,  519, 1118, 1120,  355, 1057, 1172, 1175 }, //1114
  {  110,  350, 1113, 1114,  113,  353, 1121, 1122,  116,  356,  994, 1026 }, //1115
  {  111,  516, 1109, 1117,  112,  518, 1113, 1120,  117,  531,  923, 1186 }, //1116
  {  111,  516, 1109, 1116,  114, 1111, 1121, 1123,  118,  238,  971, 1161 }, //1117
  {  351,  517, 1110, 1119,  352,  519, 1114, 1120,  357,  536,  955, 1190 }, //1118
  {  351,  517, 1110, 1118,  354, 1112, 1122, 1123,  358,  478,  975, 1163 }, //1119
  {  112,  518, 1113, 1116,  352,  519, 1114, 1118,  538, 1090, 1173, 1175 }, //1120
  {  113,  353, 1115, 1122,  114, 1111, 1117, 1123,  119,  591,  847, 1195 }, //1121
  {  113,  353, 1115, 1121,  354, 1112, 1119, 1123,  359,  592,  887, 1195 }, //1122
  {  114, 1111, 1117, 1121,  354, 1112, 1119, 1122,  599, 1167, 1195, 1199 }, //1123
  {  140,  380, 1125, 1126,  142,  492, 1127, 1131,  145, 1047, 1176, 1178 }, //1124
  {  140,  380, 1124, 1126,  382,  493, 1129, 1131,  385, 1059, 1177, 1178 }, //1125
  {  140,  380, 1124, 1125,  143,  383, 1132, 1133,  146,  386, 1003, 1031 }, //1126
  {  141,  490, 1064, 1128,  142,  492, 1124, 1131,  147,  500,  928, 1185 }, //1127
  {  141,  490, 1064, 1127,  144, 1066, 1132, 1134,   28,  148,  968, 1072 }, //1128
  {  381,  491, 1065, 1130,  382,  493, 1125, 1131,  387,  505,  960, 1189 }, //1129
  {  381,  491, 1065, 1129,  384, 1067, 1133, 1134,  268,  388,  972, 1074 }, //1130
  {  142,  492, 1124, 1127,  382,  493, 1125, 1129,  509, 1153, 1178, 1182 }, //1131
  {  143,  383, 1126, 1133,  144, 1066, 1128, 1134,  149,  564,  854, 1196 }, //1132
  {  143,  383, 1126, 1132,  384, 1067, 1130, 1134,  389,  565,  894, 1196 }, //1133
  {  144, 1066, 1128, 1132,  384, 1067, 1130, 1133,  568, 1078, 1192, 1196 }, //1134
  {  170,  410, 1136, 1137,  172,  522, 1138, 1142,  175, 1050, 1179, 1181 }, //1135
  {  170,  410, 1135, 1137,  412,  523, 1140, 1142,  415, 1062, 1180, 1181 }, //1136
  {  170,  410, 1135, 1136,  173,  413, 1143, 1144,  176,  416, 1004, 1032 }, //1137
  {  171,  520, 1079, 1139,  172,  522, 1135, 1142,  177,  530,  934, 1187 }, //1138
  {  171,  520, 1079, 1138,  174, 1081, 1143, 1145,   58,  178,  969, 1087 }, //1139
  {  411,  521, 1080, 1141,  412,  523, 1136, 1142,  417,  535,  966, 1191 }, //1140
  {  411,  521, 1080, 1140,  414, 1082, 1144, 1145,  298,  418,  973, 1089 }, //1141
  {  172,  522, 1135, 1138,  412,  523, 1136, 1140,  539, 1164, 1181, 1183 }, //1142
  {  173,  413, 1137, 1144,  174, 1081, 1139, 1145,  179,  566,  855, 1197 }, //1143
  {  173,  413, 1137, 1143,  414, 1082, 1141, 1145,  419,  567,  895, 1197 }, //1144
  {  174, 1081, 1139, 1143,  414, 1082, 1141, 1144,  569, 1093, 1193, 1197 }, //1145
  {  200,  440, 1147, 1148,  202,  496, 1149, 1153,  205, 1048, 1176, 1182 }, //1146
  {  200,  440, 1146, 1148,  442,  497, 1151, 1153,  445, 1060, 1177, 1182 }, //1147
  {  200,  440, 1146, 1147,  203,  443, 1154, 1155,  206,  446, 1013, 1037 }, //1148
  {  201,  494, 1094, 1150,  202,  496, 1146, 1153,  207,  502,  929, 1185 }, //1149
  {  201,  494, 1094, 1149,  204, 1096, 1154, 1156,   88,  208,  970, 1102 }, //1150
  {  441,  495, 1095, 1152,  442,  497, 1147, 1153,  447,  507,  961, 1189 }, //1151
  {  441,  495, 1095, 1151,  444, 1097, 1155, 1156,  328,  448,  974, 1104 }, //1152
  {  202,  496, 1146, 1149,  442,  497, 1147, 1151,  509, 1131, 1178, 1182 }, //1153
  {  203,  443, 1148, 1155,  204, 1096, 1150, 1156,  209,  594,  862, 1198 }, //1154
  {  203,  443, 1148, 1154,  444, 1097, 1152, 1156,  449,  595,  902, 1198 }, //1155
  {  204, 1096, 1150, 1154,  444, 1097, 1152, 1155,  598, 1108, 1194, 1198 }, //1156
  {  230,  470, 1158, 1159,  232,  526, 1160, 1164,  235, 1051, 1179, 1183 }, //1157
  {  230,  470, 1157, 1159,  472,  527, 1162, 1164,  475, 1063, 1180, 1183 }, //1158
  {  230,  470, 1157, 1158,  233,  473, 1165, 1166,  236,  476, 1014, 1038 }, //1159
  {  231,  524, 1109, 1161,  232,  526, 1157, 1164,  237,  532,  935, 1187 }, //1160
  {  231,  524, 1109, 1160,  234, 1111, 1165, 1167,  118,  238,  971, 1117 }, //1161
  {  471,  525, 1110, 1163,  472,  527, 1158, 1164,  477,  537,  967, 1191 }, //1162
  {  471,  525, 1110, 1162,  474, 1112, 1166, 1167,  358,  478,  975, 1119 }, //1163
  {  232,  526, 1157, 1160,  472,  527, 1158, 1162,  539, 1142, 1181, 1183 }, //1164
  {  233,  473, 1159, 1166,  234, 1111, 1161, 1167,  239,  596,  863, 1199 }, //1165
  {  233,  473, 1159, 1165,  474, 1112, 1163, 1167,  479,  597,  903, 1199 }, //1166
  {  234, 1111, 1161, 1165,  474, 1112, 1163, 1166,  599, 1123, 1195, 1199 }, //1167
  {  628, 1040, 1052, 1169,   25, 1041, 1068, 1170,   85, 1042, 1098, 1174 }, //1168
  {  628, 1040, 1052, 1168,  265, 1053, 1069, 1170,  325, 1054, 1099, 1174 }, //1169
  {   25, 1041, 1068, 1168,  265, 1053, 1069, 1169,  508, 1075, 1105, 1174 }, //1170
  {  629, 1043, 1055, 1172,   55, 1044, 1083, 1173,  115, 1045, 1113, 1175 }, //1171
  {  629, 1043, 1055, 1171,  295, 1056, 1084, 1173,  355, 1057, 1114, 1175 }, //1172
  {   55, 1044, 1083, 1171,  295, 1056, 1084, 1172,  538, 1090, 1120, 1175 }, //1173
  {   85, 1042, 1098, 1168,  325, 1054, 1099, 1169,  508, 1075, 1105, 1170 }, //1174
  {  115, 1045, 1113, 1171,  355, 1057, 1114, 1172,  538, 1090, 1120, 1173 }, //1175
  {  658, 1046, 1058, 1177,  145, 1047, 1124, 1178,  205, 1048, 1146, 1182 }, //1176
  {  658, 1046, 1058, 1176,  385, 1059, 1125, 1178,  445, 1060, 1147, 1182 }, //1177
  {  145, 1047, 1124, 1176,  385, 1059, 1125, 1177,  509, 1131, 1153, 1182 }, //1178
  {  659, 1049, 1061, 1180,  175, 1050, 1135, 1181,  235, 1051, 1157, 1183 }, //1179
  {  659, 1049, 1061, 1179,  415, 1062, 1136, 1181,  475, 1063, 1158, 1183 }, //1180
  {  175, 1050, 1135, 1179,  415, 1062, 1136, 1180,  539, 1142, 1164, 1183 }, //1181
  {  205, 1048, 1146, 1176,  445, 1060, 1147, 1177,  509, 1131, 1153, 1178 }, //1182
  {  235, 1051, 1157, 1179,  475, 1063, 1158, 1180,  539, 1142, 1164, 1181 }, //1183
  {  498,  911,  927, 1185,   27,  499,  912, 1071,   87,  501,  913, 1101 }, //1184
  {  498,  911,  927, 1184,  147,  500,  928, 1127,  207,  502,  929, 1149 }, //1185
  {  528,  921,  933, 1187,   57,  529,  922, 1086,  117,  531,  923, 1116 }, //1186
  {  528,  921,  933, 1186,  177,  530,  934, 1138,  237,  532,  935, 1160 }, //1187
  {  503,  943,  959, 1189,  267,  504,  944, 1073,  327,  506,  945, 1103 }, //1188
  {  503,  943,  959, 1188,  387,  505,  960, 1129,  447,  507,  961, 1151 }, //1189
  {  533,  953,  965, 1191,  297,  534,  954, 1088,  357,  536,  955, 1118 }, //1190
  {  533,  953,  965, 1190,  417,  535,  966, 1140,  477,  537,  967, 1162 }, //1191
  {   29,  559,  834, 1076,  269,  560,  874, 1077,  568, 1078, 1134, 1196 }, //1192
  {   59,  561,  835, 1091,  299,  562,  875, 1092,  569, 1093, 1145, 1197 }, //1193
  {   89,  589,  846, 1106,  329,  590,  886, 1107,  598, 1108, 1156, 1198 }, //1194
  {  119,  591,  847, 1121,  359,  592,  887, 1122,  599, 1123, 1167, 1199 }, //1195
  {  149,  564,  854, 1132,  389,  565,  894, 1133,  568, 1078, 1134, 1192 }, //1196
  {  179,  566,  855, 1143,  419,  567,  895, 1144,  569, 1093, 1145, 1193 }, //1197
  {  209,  594,  862, 1154,  449,  595,  902, 1155,  598, 1108, 1156, 1194 }, //1198
  {  239,  596,  863, 1165,  479,  597,  903, 1166,  599, 1123, 1167, 1195 }, //1199
};
int faceToVertK600[1200][3] = { // Vertices for each face, in face order
  {    0,   32,   24 }, //   0
  {    0,   40,   24 }, //   1
  {    0,   48,   24 }, //   2
  {    0,   56,   24 }, //   3
  {    0,   64,   24 }, //   4
  {    0,   48,   32 }, //   5
  {    0,   56,   32 }, //   6
  {    0,  104,   32 }, //   7
  {    0,  112,   32 }, //   8
  {    0,   48,   40 }, //   9
  {    0,   64,   40 }, //  10
  {    0,   88,   40 }, //  11
  {    0,   96,   40 }, //  12
  {    0,   88,   48 }, //  13
  {    0,  112,   48 }, //  14
  {    0,   64,   56 }, //  15
  {    0,   80,   56 }, //  16
  {    0,  104,   56 }, //  17
  {    0,   80,   64 }, //  18
  {    0,   96,   64 }, //  19
  {    0,   80,   72 }, //  20
  {    0,   88,   72 }, //  21
  {    0,   96,   72 }, //  22
  {    0,  104,   72 }, //  23
  {    0,  112,   72 }, //  24
  {    0,   96,   80 }, //  25
  {    0,  104,   80 }, //  26
  {    0,   96,   88 }, //  27
  {    0,  112,   88 }, //  28
  {    0,  112,  104 }, //  29
  {    1,   32,   24 }, //  30
  {    1,   41,   24 }, //  31
  {    1,   49,   24 }, //  32
  {    1,   56,   24 }, //  33
  {    1,   65,   24 }, //  34
  {    1,   49,   32 }, //  35
  {    1,   56,   32 }, //  36
  {    1,  105,   32 }, //  37
  {    1,  113,   32 }, //  38
  {    1,   49,   41 }, //  39
  {    1,   65,   41 }, //  40
  {    1,   89,   41 }, //  41
  {    1,   97,   41 }, //  42
  {    1,   89,   49 }, //  43
  {    1,  113,   49 }, //  44
  {    1,   65,   56 }, //  45
  {    1,   81,   56 }, //  46
  {    1,  105,   56 }, //  47
  {    1,   81,   65 }, //  48
  {    1,   97,   65 }, //  49
  {    1,   81,   73 }, //  50
  {    1,   89,   73 }, //  51
  {    1,   97,   73 }, //  52
  {    1,  105,   73 }, //  53
  {    1,  113,   73 }, //  54
  {    1,   97,   81 }, //  55
  {    1,  105,   81 }, //  56
  {    1,   97,   89 }, //  57
  {    1,  113,   89 }, //  58
  {    1,  113,  105 }, //  59
  {    2,   33,   25 }, //  60
  {    2,   40,   25 }, //  61
  {    2,   50,   25 }, //  62
  {    2,   57,   25 }, //  63
  {    2,   64,   25 }, //  64
  {    2,   50,   33 }, //  65
  {    2,   57,   33 }, //  66
  {    2,  106,   33 }, //  67
  {    2,  114,   33 }, //  68
  {    2,   50,   40 }, //  69
  {    2,   64,   40 }, //  70
  {    2,   90,   40 }, //  71
  {    2,   96,   40 }, //  72
  {    2,   90,   50 }, //  73
  {    2,  114,   50 }, //  74
  {    2,   64,   57 }, //  75
  {    2,   82,   57 }, //  76
  {    2,  106,   57 }, //  77
  {    2,   82,   64 }, //  78
  {    2,   96,   64 }, //  79
  {    2,   82,   74 }, //  80
  {    2,   90,   74 }, //  81
  {    2,   96,   74 }, //  82
  {    2,  106,   74 }, //  83
  {    2,  114,   74 }, //  84
  {    2,   96,   82 }, //  85
  {    2,  106,   82 }, //  86
  {    2,   96,   90 }, //  87
  {    2,  114,   90 }, //  88
  {    2,  114,  106 }, //  89
  {    3,   33,   25 }, //  90
  {    3,   41,   25 }, //  91
  {    3,   51,   25 }, //  92
  {    3,   57,   25 }, //  93
  {    3,   65,   25 }, //  94
  {    3,   51,   33 }, //  95
  {    3,   57,   33 }, //  96
  {    3,  107,   33 }, //  97
  {    3,  115,   33 }, //  98
  {    3,   51,   41 }, //  99
  {    3,   65,   41 }, // 100
  {    3,   91,   41 }, // 101
  {    3,   97,   41 }, // 102
  {    3,   91,   51 }, // 103
  {    3,  115,   51 }, // 104
  {    3,   65,   57 }, // 105
  {    3,   83,   57 }, // 106
  {    3,  107,   57 }, // 107
  {    3,   83,   65 }, // 108
  {    3,   97,   65 }, // 109
  {    3,   83,   75 }, // 110
  {    3,   91,   75 }, // 111
  {    3,   97,   75 }, // 112
  {    3,  107,   75 }, // 113
  {    3,  115,   75 }, // 114
  {    3,   97,   83 }, // 115
  {    3,  107,   83 }, // 116
  {    3,   97,   91 }, // 117
  {    3,  115,   91 }, // 118
  {    3,  115,  107 }, // 119
  {    4,   34,   26 }, // 120
  {    4,   42,   26 }, // 121
  {    4,   48,   26 }, // 122
  {    4,   58,   26 }, // 123
  {    4,   66,   26 }, // 124
  {    4,   48,   34 }, // 125
  {    4,   58,   34 }, // 126
  {    4,  108,   34 }, // 127
  {    4,  112,   34 }, // 128
  {    4,   48,   42 }, // 129
  {    4,   66,   42 }, // 130
  {    4,   88,   42 }, // 131
  {    4,   98,   42 }, // 132
  {    4,   88,   48 }, // 133
  {    4,  112,   48 }, // 134
  {    4,   66,   58 }, // 135
  {    4,   84,   58 }, // 136
  {    4,  108,   58 }, // 137
  {    4,   84,   66 }, // 138
  {    4,   98,   66 }, // 139
  {    4,   84,   76 }, // 140
  {    4,   88,   76 }, // 141
  {    4,   98,   76 }, // 142
  {    4,  108,   76 }, // 143
  {    4,  112,   76 }, // 144
  {    4,   98,   84 }, // 145
  {    4,  108,   84 }, // 146
  {    4,   98,   88 }, // 147
  {    4,  112,   88 }, // 148
  {    4,  112,  108 }, // 149
  {    5,   34,   26 }, // 150
  {    5,   43,   26 }, // 151
  {    5,   49,   26 }, // 152
  {    5,   58,   26 }, // 153
  {    5,   67,   26 }, // 154
  {    5,   49,   34 }, // 155
  {    5,   58,   34 }, // 156
  {    5,  109,   34 }, // 157
  {    5,  113,   34 }, // 158
  {    5,   49,   43 }, // 159
  {    5,   67,   43 }, // 160
  {    5,   89,   43 }, // 161
  {    5,   99,   43 }, // 162
  {    5,   89,   49 }, // 163
  {    5,  113,   49 }, // 164
  {    5,   67,   58 }, // 165
  {    5,   85,   58 }, // 166
  {    5,  109,   58 }, // 167
  {    5,   85,   67 }, // 168
  {    5,   99,   67 }, // 169
  {    5,   85,   77 }, // 170
  {    5,   89,   77 }, // 171
  {    5,   99,   77 }, // 172
  {    5,  109,   77 }, // 173
  {    5,  113,   77 }, // 174
  {    5,   99,   85 }, // 175
  {    5,  109,   85 }, // 176
  {    5,   99,   89 }, // 177
  {    5,  113,   89 }, // 178
  {    5,  113,  109 }, // 179
  {    6,   35,   27 }, // 180
  {    6,   42,   27 }, // 181
  {    6,   50,   27 }, // 182
  {    6,   59,   27 }, // 183
  {    6,   66,   27 }, // 184
  {    6,   50,   35 }, // 185
  {    6,   59,   35 }, // 186
  {    6,  110,   35 }, // 187
  {    6,  114,   35 }, // 188
  {    6,   50,   42 }, // 189
  {    6,   66,   42 }, // 190
  {    6,   90,   42 }, // 191
  {    6,   98,   42 }, // 192
  {    6,   90,   50 }, // 193
  {    6,  114,   50 }, // 194
  {    6,   66,   59 }, // 195
  {    6,   86,   59 }, // 196
  {    6,  110,   59 }, // 197
  {    6,   86,   66 }, // 198
  {    6,   98,   66 }, // 199
  {    6,   86,   78 }, // 200
  {    6,   90,   78 }, // 201
  {    6,   98,   78 }, // 202
  {    6,  110,   78 }, // 203
  {    6,  114,   78 }, // 204
  {    6,   98,   86 }, // 205
  {    6,  110,   86 }, // 206
  {    6,   98,   90 }, // 207
  {    6,  114,   90 }, // 208
  {    6,  114,  110 }, // 209
  {    7,   35,   27 }, // 210
  {    7,   43,   27 }, // 211
  {    7,   51,   27 }, // 212
  {    7,   59,   27 }, // 213
  {    7,   67,   27 }, // 214
  {    7,   51,   35 }, // 215
  {    7,   59,   35 }, // 216
  {    7,  111,   35 }, // 217
  {    7,  115,   35 }, // 218
  {    7,   51,   43 }, // 219
  {    7,   67,   43 }, // 220
  {    7,   91,   43 }, // 221
  {    7,   99,   43 }, // 222
  {    7,   91,   51 }, // 223
  {    7,  115,   51 }, // 224
  {    7,   67,   59 }, // 225
  {    7,   87,   59 }, // 226
  {    7,  111,   59 }, // 227
  {    7,   87,   67 }, // 228
  {    7,   99,   67 }, // 229
  {    7,   87,   79 }, // 230
  {    7,   91,   79 }, // 231
  {    7,   99,   79 }, // 232
  {    7,  111,   79 }, // 233
  {    7,  115,   79 }, // 234
  {    7,   99,   87 }, // 235
  {    7,  111,   87 }, // 236
  {    7,   99,   91 }, // 237
  {    7,  115,   91 }, // 238
  {    7,  115,  111 }, // 239
  {    8,   36,   28 }, // 240
  {    8,   44,   28 }, // 241
  {    8,   52,   28 }, // 242
  {    8,   60,   28 }, // 243
  {    8,   68,   28 }, // 244
  {    8,   52,   36 }, // 245
  {    8,   60,   36 }, // 246
  {    8,  104,   36 }, // 247
  {    8,  116,   36 }, // 248
  {    8,   52,   44 }, // 249
  {    8,   68,   44 }, // 250
  {    8,   92,   44 }, // 251
  {    8,  100,   44 }, // 252
  {    8,   92,   52 }, // 253
  {    8,  116,   52 }, // 254
  {    8,   68,   60 }, // 255
  {    8,   80,   60 }, // 256
  {    8,  104,   60 }, // 257
  {    8,   80,   68 }, // 258
  {    8,  100,   68 }, // 259
  {    8,   80,   72 }, // 260
  {    8,   92,   72 }, // 261
  {    8,  100,   72 }, // 262
  {    8,  104,   72 }, // 263
  {    8,  116,   72 }, // 264
  {    8,  100,   80 }, // 265
  {    8,  104,   80 }, // 266
  {    8,  100,   92 }, // 267
  {    8,  116,   92 }, // 268
  {    8,  116,  104 }, // 269
  {    9,   36,   28 }, // 270
  {    9,   45,   28 }, // 271
  {    9,   53,   28 }, // 272
  {    9,   60,   28 }, // 273
  {    9,   69,   28 }, // 274
  {    9,   53,   36 }, // 275
  {    9,   60,   36 }, // 276
  {    9,  105,   36 }, // 277
  {    9,  117,   36 }, // 278
  {    9,   53,   45 }, // 279
  {    9,   69,   45 }, // 280
  {    9,   93,   45 }, // 281
  {    9,  101,   45 }, // 282
  {    9,   93,   53 }, // 283
  {    9,  117,   53 }, // 284
  {    9,   69,   60 }, // 285
  {    9,   81,   60 }, // 286
  {    9,  105,   60 }, // 287
  {    9,   81,   69 }, // 288
  {    9,  101,   69 }, // 289
  {    9,   81,   73 }, // 290
  {    9,   93,   73 }, // 291
  {    9,  101,   73 }, // 292
  {    9,  105,   73 }, // 293
  {    9,  117,   73 }, // 294
  {    9,  101,   81 }, // 295
  {    9,  105,   81 }, // 296
  {    9,  101,   93 }, // 297
  {    9,  117,   93 }, // 298
  {    9,  117,  105 }, // 299
  {   10,   37,   29 }, // 300
  {   10,   44,   29 }, // 301
  {   10,   54,   29 }, // 302
  {   10,   61,   29 }, // 303
  {   10,   68,   29 }, // 304
  {   10,   54,   37 }, // 305
  {   10,   61,   37 }, // 306
  {   10,  106,   37 }, // 307
  {   10,  118,   37 }, // 308
  {   10,   54,   44 }, // 309
  {   10,   68,   44 }, // 310
  {   10,   94,   44 }, // 311
  {   10,  100,   44 }, // 312
  {   10,   94,   54 }, // 313
  {   10,  118,   54 }, // 314
  {   10,   68,   61 }, // 315
  {   10,   82,   61 }, // 316
  {   10,  106,   61 }, // 317
  {   10,   82,   68 }, // 318
  {   10,  100,   68 }, // 319
  {   10,   82,   74 }, // 320
  {   10,   94,   74 }, // 321
  {   10,  100,   74 }, // 322
  {   10,  106,   74 }, // 323
  {   10,  118,   74 }, // 324
  {   10,  100,   82 }, // 325
  {   10,  106,   82 }, // 326
  {   10,  100,   94 }, // 327
  {   10,  118,   94 }, // 328
  {   10,  118,  106 }, // 329
  {   11,   37,   29 }, // 330
  {   11,   45,   29 }, // 331
  {   11,   55,   29 }, // 332
  {   11,   61,   29 }, // 333
  {   11,   69,   29 }, // 334
  {   11,   55,   37 }, // 335
  {   11,   61,   37 }, // 336
  {   11,  107,   37 }, // 337
  {   11,  119,   37 }, // 338
  {   11,   55,   45 }, // 339
  {   11,   69,   45 }, // 340
  {   11,   95,   45 }, // 341
  {   11,  101,   45 }, // 342
  {   11,   95,   55 }, // 343
  {   11,  119,   55 }, // 344
  {   11,   69,   61 }, // 345
  {   11,   83,   61 }, // 346
  {   11,  107,   61 }, // 347
  {   11,   83,   69 }, // 348
  {   11,  101,   69 }, // 349
  {   11,   83,   75 }, // 350
  {   11,   95,   75 }, // 351
  {   11,  101,   75 }, // 352
  {   11,  107,   75 }, // 353
  {   11,  119,   75 }, // 354
  {   11,  101,   83 }, // 355
  {   11,  107,   83 }, // 356
  {   11,  101,   95 }, // 357
  {   11,  119,   95 }, // 358
  {   11,  119,  107 }, // 359
  {   12,   38,   30 }, // 360
  {   12,   46,   30 }, // 361
  {   12,   52,   30 }, // 362
  {   12,   62,   30 }, // 363
  {   12,   70,   30 }, // 364
  {   12,   52,   38 }, // 365
  {   12,   62,   38 }, // 366
  {   12,  108,   38 }, // 367
  {   12,  116,   38 }, // 368
  {   12,   52,   46 }, // 369
  {   12,   70,   46 }, // 370
  {   12,   92,   46 }, // 371
  {   12,  102,   46 }, // 372
  {   12,   92,   52 }, // 373
  {   12,  116,   52 }, // 374
  {   12,   70,   62 }, // 375
  {   12,   84,   62 }, // 376
  {   12,  108,   62 }, // 377
  {   12,   84,   70 }, // 378
  {   12,  102,   70 }, // 379
  {   12,   84,   76 }, // 380
  {   12,   92,   76 }, // 381
  {   12,  102,   76 }, // 382
  {   12,  108,   76 }, // 383
  {   12,  116,   76 }, // 384
  {   12,  102,   84 }, // 385
  {   12,  108,   84 }, // 386
  {   12,  102,   92 }, // 387
  {   12,  116,   92 }, // 388
  {   12,  116,  108 }, // 389
  {   13,   38,   30 }, // 390
  {   13,   47,   30 }, // 391
  {   13,   53,   30 }, // 392
  {   13,   62,   30 }, // 393
  {   13,   71,   30 }, // 394
  {   13,   53,   38 }, // 395
  {   13,   62,   38 }, // 396
  {   13,  109,   38 }, // 397
  {   13,  117,   38 }, // 398
  {   13,   53,   47 }, // 399
  {   13,   71,   47 }, // 400
  {   13,   93,   47 }, // 401
  {   13,  103,   47 }, // 402
  {   13,   93,   53 }, // 403
  {   13,  117,   53 }, // 404
  {   13,   71,   62 }, // 405
  {   13,   85,   62 }, // 406
  {   13,  109,   62 }, // 407
  {   13,   85,   71 }, // 408
  {   13,  103,   71 }, // 409
  {   13,   85,   77 }, // 410
  {   13,   93,   77 }, // 411
  {   13,  103,   77 }, // 412
  {   13,  109,   77 }, // 413
  {   13,  117,   77 }, // 414
  {   13,  103,   85 }, // 415
  {   13,  109,   85 }, // 416
  {   13,  103,   93 }, // 417
  {   13,  117,   93 }, // 418
  {   13,  117,  109 }, // 419
  {   14,   39,   31 }, // 420
  {   14,   46,   31 }, // 421
  {   14,   54,   31 }, // 422
  {   14,   63,   31 }, // 423
  {   14,   70,   31 }, // 424
  {   14,   54,   39 }, // 425
  {   14,   63,   39 }, // 426
  {   14,  110,   39 }, // 427
  {   14,  118,   39 }, // 428
  {   14,   54,   46 }, // 429
  {   14,   70,   46 }, // 430
  {   14,   94,   46 }, // 431
  {   14,  102,   46 }, // 432
  {   14,   94,   54 }, // 433
  {   14,  118,   54 }, // 434
  {   14,   70,   63 }, // 435
  {   14,   86,   63 }, // 436
  {   14,  110,   63 }, // 437
  {   14,   86,   70 }, // 438
  {   14,  102,   70 }, // 439
  {   14,   86,   78 }, // 440
  {   14,   94,   78 }, // 441
  {   14,  102,   78 }, // 442
  {   14,  110,   78 }, // 443
  {   14,  118,   78 }, // 444
  {   14,  102,   86 }, // 445
  {   14,  110,   86 }, // 446
  {   14,  102,   94 }, // 447
  {   14,  118,   94 }, // 448
  {   14,  118,  110 }, // 449
  {   15,   39,   31 }, // 450
  {   15,   47,   31 }, // 451
  {   15,   55,   31 }, // 452
  {   15,   63,   31 }, // 453
  {   15,   71,   31 }, // 454
  {   15,   55,   39 }, // 455
  {   15,   63,   39 }, // 456
  {   15,  111,   39 }, // 457
  {   15,  119,   39 }, // 458
  {   15,   55,   47 }, // 459
  {   15,   71,   47 }, // 460
  {   15,   95,   47 }, // 461
  {   15,  103,   47 }, // 462
  {   15,   95,   55 }, // 463
  {   15,  119,   55 }, // 464
  {   15,   71,   63 }, // 465
  {   15,   87,   63 }, // 466
  {   15,  111,   63 }, // 467
  {   15,   87,   71 }, // 468
  {   15,  103,   71 }, // 469
  {   15,   87,   79 }, // 470
  {   15,   95,   79 }, // 471
  {   15,  103,   79 }, // 472
  {   15,  111,   79 }, // 473
  {   15,  119,   79 }, // 474
  {   15,  103,   87 }, // 475
  {   15,  111,   87 }, // 476
  {   15,  103,   95 }, // 477
  {   15,  119,   95 }, // 478
  {   15,  119,  111 }, // 479
  {   16,   76,   72 }, // 480
  {   16,   88,   72 }, // 481
  {   16,   92,   72 }, // 482
  {   16,   96,   72 }, // 483
  {   16,  100,   72 }, // 484
  {   16,   78,   74 }, // 485
  {   16,   90,   74 }, // 486
  {   16,   94,   74 }, // 487
  {   16,   96,   74 }, // 488
  {   16,  100,   74 }, // 489
  {   16,   88,   76 }, // 490
  {   16,   92,   76 }, // 491
  {   16,   98,   76 }, // 492
  {   16,  102,   76 }, // 493
  {   16,   90,   78 }, // 494
  {   16,   94,   78 }, // 495
  {   16,   98,   78 }, // 496
  {   16,  102,   78 }, // 497
  {   16,   90,   88 }, // 498
  {   16,   96,   88 }, // 499
  {   16,   98,   88 }, // 500
  {   16,   96,   90 }, // 501
  {   16,   98,   90 }, // 502
  {   16,   94,   92 }, // 503
  {   16,  100,   92 }, // 504
  {   16,  102,   92 }, // 505
  {   16,  100,   94 }, // 506
  {   16,  102,   94 }, // 507
  {   16,  100,   96 }, // 508
  {   16,  102,   98 }, // 509
  {   17,   77,   73 }, // 510
  {   17,   89,   73 }, // 511
  {   17,   93,   73 }, // 512
  {   17,   97,   73 }, // 513
  {   17,  101,   73 }, // 514
  {   17,   79,   75 }, // 515
  {   17,   91,   75 }, // 516
  {   17,   95,   75 }, // 517
  {   17,   97,   75 }, // 518
  {   17,  101,   75 }, // 519
  {   17,   89,   77 }, // 520
  {   17,   93,   77 }, // 521
  {   17,   99,   77 }, // 522
  {   17,  103,   77 }, // 523
  {   17,   91,   79 }, // 524
  {   17,   95,   79 }, // 525
  {   17,   99,   79 }, // 526
  {   17,  103,   79 }, // 527
  {   17,   91,   89 }, // 528
  {   17,   97,   89 }, // 529
  {   17,   99,   89 }, // 530
  {   17,   97,   91 }, // 531
  {   17,   99,   91 }, // 532
  {   17,   95,   93 }, // 533
  {   17,  101,   93 }, // 534
  {   17,  103,   93 }, // 535
  {   17,  101,   95 }, // 536
  {   17,  103,   95 }, // 537
  {   17,  101,   97 }, // 538
  {   17,  103,   99 }, // 539
  {   18,   34,   32 }, // 540
  {   18,  104,   32 }, // 541
  {   18,  105,   32 }, // 542
  {   18,  112,   32 }, // 543
  {   18,  113,   32 }, // 544
  {   18,  108,   34 }, // 545
  {   18,  109,   34 }, // 546
  {   18,  112,   34 }, // 547
  {   18,  113,   34 }, // 548
  {   18,   38,   36 }, // 549
  {   18,  104,   36 }, // 550
  {   18,  105,   36 }, // 551
  {   18,  116,   36 }, // 552
  {   18,  117,   36 }, // 553
  {   18,  108,   38 }, // 554
  {   18,  109,   38 }, // 555
  {   18,  116,   38 }, // 556
  {   18,  117,   38 }, // 557
  {   18,  105,  104 }, // 558
  {   18,  112,  104 }, // 559
  {   18,  116,  104 }, // 560
  {   18,  113,  105 }, // 561
  {   18,  117,  105 }, // 562
  {   18,  109,  108 }, // 563
  {   18,  112,  108 }, // 564
  {   18,  116,  108 }, // 565
  {   18,  113,  109 }, // 566
  {   18,  117,  109 }, // 567
  {   18,  116,  112 }, // 568
  {   18,  117,  113 }, // 569
  {   19,   35,   33 }, // 570
  {   19,  106,   33 }, // 571
  {   19,  107,   33 }, // 572
  {   19,  114,   33 }, // 573
  {   19,  115,   33 }, // 574
  {   19,  110,   35 }, // 575
  {   19,  111,   35 }, // 576
  {   19,  114,   35 }, // 577
  {   19,  115,   35 }, // 578
  {   19,   39,   37 }, // 579
  {   19,  106,   37 }, // 580
  {   19,  107,   37 }, // 581
  {   19,  118,   37 }, // 582
  {   19,  119,   37 }, // 583
  {   19,  110,   39 }, // 584
  {   19,  111,   39 }, // 585
  {   19,  118,   39 }, // 586
  {   19,  119,   39 }, // 587
  {   19,  107,  106 }, // 588
  {   19,  114,  106 }, // 589
  {   19,  118,  106 }, // 590
  {   19,  115,  107 }, // 591
  {   19,  119,  107 }, // 592
  {   19,  111,  110 }, // 593
  {   19,  114,  110 }, // 594
  {   19,  118,  110 }, // 595
  {   19,  115,  111 }, // 596
  {   19,  119,  111 }, // 597
  {   19,  118,  114 }, // 598
  {   19,  119,  115 }, // 599
  {   20,   60,   56 }, // 600
  {   20,   64,   56 }, // 601
  {   20,   65,   56 }, // 602
  {   20,   80,   56 }, // 603
  {   20,   81,   56 }, // 604
  {   20,   61,   57 }, // 605
  {   20,   64,   57 }, // 606
  {   20,   65,   57 }, // 607
  {   20,   82,   57 }, // 608
  {   20,   83,   57 }, // 609
  {   20,   68,   60 }, // 610
  {   20,   69,   60 }, // 611
  {   20,   80,   60 }, // 612
  {   20,   81,   60 }, // 613
  {   20,   68,   61 }, // 614
  {   20,   69,   61 }, // 615
  {   20,   82,   61 }, // 616
  {   20,   83,   61 }, // 617
  {   20,   65,   64 }, // 618
  {   20,   80,   64 }, // 619
  {   20,   82,   64 }, // 620
  {   20,   81,   65 }, // 621
  {   20,   83,   65 }, // 622
  {   20,   69,   68 }, // 623
  {   20,   80,   68 }, // 624
  {   20,   82,   68 }, // 625
  {   20,   81,   69 }, // 626
  {   20,   83,   69 }, // 627
  {   20,   82,   80 }, // 628
  {   20,   83,   81 }, // 629
  {   21,   62,   58 }, // 630
  {   21,   66,   58 }, // 631
  {   21,   67,   58 }, // 632
  {   21,   84,   58 }, // 633
  {   21,   85,   58 }, // 634
  {   21,   63,   59 }, // 635
  {   21,   66,   59 }, // 636
  {   21,   67,   59 }, // 637
  {   21,   86,   59 }, // 638
  {   21,   87,   59 }, // 639
  {   21,   70,   62 }, // 640
  {   21,   71,   62 }, // 641
  {   21,   84,   62 }, // 642
  {   21,   85,   62 }, // 643
  {   21,   70,   63 }, // 644
  {   21,   71,   63 }, // 645
  {   21,   86,   63 }, // 646
  {   21,   87,   63 }, // 647
  {   21,   67,   66 }, // 648
  {   21,   84,   66 }, // 649
  {   21,   86,   66 }, // 650
  {   21,   85,   67 }, // 651
  {   21,   87,   67 }, // 652
  {   21,   71,   70 }, // 653
  {   21,   84,   70 }, // 654
  {   21,   86,   70 }, // 655
  {   21,   85,   71 }, // 656
  {   21,   87,   71 }, // 657
  {   21,   86,   84 }, // 658
  {   21,   87,   85 }, // 659
  {   22,   25,   24 }, // 660
  {   22,   40,   24 }, // 661
  {   22,   41,   24 }, // 662
  {   22,   48,   24 }, // 663
  {   22,   49,   24 }, // 664
  {   22,   40,   25 }, // 665
  {   22,   41,   25 }, // 666
  {   22,   50,   25 }, // 667
  {   22,   51,   25 }, // 668
  {   22,   27,   26 }, // 669
  {   22,   42,   26 }, // 670
  {   22,   43,   26 }, // 671
  {   22,   48,   26 }, // 672
  {   22,   49,   26 }, // 673
  {   22,   42,   27 }, // 674
  {   22,   43,   27 }, // 675
  {   22,   50,   27 }, // 676
  {   22,   51,   27 }, // 677
  {   22,   42,   40 }, // 678
  {   22,   48,   40 }, // 679
  {   22,   50,   40 }, // 680
  {   22,   43,   41 }, // 681
  {   22,   49,   41 }, // 682
  {   22,   51,   41 }, // 683
  {   22,   48,   42 }, // 684
  {   22,   50,   42 }, // 685
  {   22,   49,   43 }, // 686
  {   22,   51,   43 }, // 687
  {   22,   49,   48 }, // 688
  {   22,   51,   50 }, // 689
  {   23,   29,   28 }, // 690
  {   23,   44,   28 }, // 691
  {   23,   45,   28 }, // 692
  {   23,   52,   28 }, // 693
  {   23,   53,   28 }, // 694
  {   23,   44,   29 }, // 695
  {   23,   45,   29 }, // 696
  {   23,   54,   29 }, // 697
  {   23,   55,   29 }, // 698
  {   23,   31,   30 }, // 699
  {   23,   46,   30 }, // 700
  {   23,   47,   30 }, // 701
  {   23,   52,   30 }, // 702
  {   23,   53,   30 }, // 703
  {   23,   46,   31 }, // 704
  {   23,   47,   31 }, // 705
  {   23,   54,   31 }, // 706
  {   23,   55,   31 }, // 707
  {   23,   46,   44 }, // 708
  {   23,   52,   44 }, // 709
  {   23,   54,   44 }, // 710
  {   23,   47,   45 }, // 711
  {   23,   53,   45 }, // 712
  {   23,   55,   45 }, // 713
  {   23,   52,   46 }, // 714
  {   23,   54,   46 }, // 715
  {   23,   53,   47 }, // 716
  {   23,   55,   47 }, // 717
  {   23,   53,   52 }, // 718
  {   23,   55,   54 }, // 719
  {   24,   40,   25 }, // 720
  {   24,   41,   25 }, // 721
  {   24,   64,   25 }, // 722
  {   24,   65,   25 }, // 723
  {   24,   48,   32 }, // 724
  {   24,   49,   32 }, // 725
  {   24,   56,   32 }, // 726
  {   24,   48,   40 }, // 727
  {   24,   64,   40 }, // 728
  {   24,   49,   41 }, // 729
  {   24,   65,   41 }, // 730
  {   24,   49,   48 }, // 731
  {   24,   64,   56 }, // 732
  {   24,   65,   56 }, // 733
  {   24,   65,   64 }, // 734
  {   25,   50,   33 }, // 735
  {   25,   51,   33 }, // 736
  {   25,   57,   33 }, // 737
  {   25,   50,   40 }, // 738
  {   25,   64,   40 }, // 739
  {   25,   51,   41 }, // 740
  {   25,   65,   41 }, // 741
  {   25,   51,   50 }, // 742
  {   25,   64,   57 }, // 743
  {   25,   65,   57 }, // 744
  {   25,   65,   64 }, // 745
  {   26,   42,   27 }, // 746
  {   26,   43,   27 }, // 747
  {   26,   66,   27 }, // 748
  {   26,   67,   27 }, // 749
  {   26,   48,   34 }, // 750
  {   26,   49,   34 }, // 751
  {   26,   58,   34 }, // 752
  {   26,   48,   42 }, // 753
  {   26,   66,   42 }, // 754
  {   26,   49,   43 }, // 755
  {   26,   67,   43 }, // 756
  {   26,   49,   48 }, // 757
  {   26,   66,   58 }, // 758
  {   26,   67,   58 }, // 759
  {   26,   67,   66 }, // 760
  {   27,   50,   35 }, // 761
  {   27,   51,   35 }, // 762
  {   27,   59,   35 }, // 763
  {   27,   50,   42 }, // 764
  {   27,   66,   42 }, // 765
  {   27,   51,   43 }, // 766
  {   27,   67,   43 }, // 767
  {   27,   51,   50 }, // 768
  {   27,   66,   59 }, // 769
  {   27,   67,   59 }, // 770
  {   27,   67,   66 }, // 771
  {   28,   44,   29 }, // 772
  {   28,   45,   29 }, // 773
  {   28,   68,   29 }, // 774
  {   28,   69,   29 }, // 775
  {   28,   52,   36 }, // 776
  {   28,   53,   36 }, // 777
  {   28,   60,   36 }, // 778
  {   28,   52,   44 }, // 779
  {   28,   68,   44 }, // 780
  {   28,   53,   45 }, // 781
  {   28,   69,   45 }, // 782
  {   28,   53,   52 }, // 783
  {   28,   68,   60 }, // 784
  {   28,   69,   60 }, // 785
  {   28,   69,   68 }, // 786
  {   29,   54,   37 }, // 787
  {   29,   55,   37 }, // 788
  {   29,   61,   37 }, // 789
  {   29,   54,   44 }, // 790
  {   29,   68,   44 }, // 791
  {   29,   55,   45 }, // 792
  {   29,   69,   45 }, // 793
  {   29,   55,   54 }, // 794
  {   29,   68,   61 }, // 795
  {   29,   69,   61 }, // 796
  {   29,   69,   68 }, // 797
  {   30,   46,   31 }, // 798
  {   30,   47,   31 }, // 799
  {   30,   70,   31 }, // 800
  {   30,   71,   31 }, // 801
  {   30,   52,   38 }, // 802
  {   30,   53,   38 }, // 803
  {   30,   62,   38 }, // 804
  {   30,   52,   46 }, // 805
  {   30,   70,   46 }, // 806
  {   30,   53,   47 }, // 807
  {   30,   71,   47 }, // 808
  {   30,   53,   52 }, // 809
  {   30,   70,   62 }, // 810
  {   30,   71,   62 }, // 811
  {   30,   71,   70 }, // 812
  {   31,   54,   39 }, // 813
  {   31,   55,   39 }, // 814
  {   31,   63,   39 }, // 815
  {   31,   54,   46 }, // 816
  {   31,   70,   46 }, // 817
  {   31,   55,   47 }, // 818
  {   31,   71,   47 }, // 819
  {   31,   55,   54 }, // 820
  {   31,   70,   63 }, // 821
  {   31,   71,   63 }, // 822
  {   31,   71,   70 }, // 823
  {   32,   48,   34 }, // 824
  {   32,   49,   34 }, // 825
  {   32,  112,   34 }, // 826
  {   32,  113,   34 }, // 827
  {   32,   49,   48 }, // 828
  {   32,  112,   48 }, // 829
  {   32,  113,   49 }, // 830
  {   32,  104,   56 }, // 831
  {   32,  105,   56 }, // 832
  {   32,  105,  104 }, // 833
  {   32,  112,  104 }, // 834
  {   32,  113,  105 }, // 835
  {   33,   50,   35 }, // 836
  {   33,   51,   35 }, // 837
  {   33,  114,   35 }, // 838
  {   33,  115,   35 }, // 839
  {   33,   51,   50 }, // 840
  {   33,  114,   50 }, // 841
  {   33,  115,   51 }, // 842
  {   33,  106,   57 }, // 843
  {   33,  107,   57 }, // 844
  {   33,  107,  106 }, // 845
  {   33,  114,  106 }, // 846
  {   33,  115,  107 }, // 847
  {   34,   49,   48 }, // 848
  {   34,  112,   48 }, // 849
  {   34,  113,   49 }, // 850
  {   34,  108,   58 }, // 851
  {   34,  109,   58 }, // 852
  {   34,  109,  108 }, // 853
  {   34,  112,  108 }, // 854
  {   34,  113,  109 }, // 855
  {   35,   51,   50 }, // 856
  {   35,  114,   50 }, // 857
  {   35,  115,   51 }, // 858
  {   35,  110,   59 }, // 859
  {   35,  111,   59 }, // 860
  {   35,  111,  110 }, // 861
  {   35,  114,  110 }, // 862
  {   35,  115,  111 }, // 863
  {   36,   52,   38 }, // 864
  {   36,   53,   38 }, // 865
  {   36,  116,   38 }, // 866
  {   36,  117,   38 }, // 867
  {   36,   53,   52 }, // 868
  {   36,  116,   52 }, // 869
  {   36,  117,   53 }, // 870
  {   36,  104,   60 }, // 871
  {   36,  105,   60 }, // 872
  {   36,  105,  104 }, // 873
  {   36,  116,  104 }, // 874
  {   36,  117,  105 }, // 875
  {   37,   54,   39 }, // 876
  {   37,   55,   39 }, // 877
  {   37,  118,   39 }, // 878
  {   37,  119,   39 }, // 879
  {   37,   55,   54 }, // 880
  {   37,  118,   54 }, // 881
  {   37,  119,   55 }, // 882
  {   37,  106,   61 }, // 883
  {   37,  107,   61 }, // 884
  {   37,  107,  106 }, // 885
  {   37,  118,  106 }, // 886
  {   37,  119,  107 }, // 887
  {   38,   53,   52 }, // 888
  {   38,  116,   52 }, // 889
  {   38,  117,   53 }, // 890
  {   38,  108,   62 }, // 891
  {   38,  109,   62 }, // 892
  {   38,  109,  108 }, // 893
  {   38,  116,  108 }, // 894
  {   38,  117,  109 }, // 895
  {   39,   55,   54 }, // 896
  {   39,  118,   54 }, // 897
  {   39,  119,   55 }, // 898
  {   39,  110,   63 }, // 899
  {   39,  111,   63 }, // 900
  {   39,  111,  110 }, // 901
  {   39,  118,  110 }, // 902
  {   39,  119,  111 }, // 903
  {   40,   48,   42 }, // 904
  {   40,   50,   42 }, // 905
  {   40,   88,   42 }, // 906
  {   40,   90,   42 }, // 907
  {   40,   88,   48 }, // 908
  {   40,   90,   50 }, // 909
  {   40,   96,   64 }, // 910
  {   40,   90,   88 }, // 911
  {   40,   96,   88 }, // 912
  {   40,   96,   90 }, // 913
  {   41,   49,   43 }, // 914
  {   41,   51,   43 }, // 915
  {   41,   89,   43 }, // 916
  {   41,   91,   43 }, // 917
  {   41,   89,   49 }, // 918
  {   41,   91,   51 }, // 919
  {   41,   97,   65 }, // 920
  {   41,   91,   89 }, // 921
  {   41,   97,   89 }, // 922
  {   41,   97,   91 }, // 923
  {   42,   88,   48 }, // 924
  {   42,   90,   50 }, // 925
  {   42,   98,   66 }, // 926
  {   42,   90,   88 }, // 927
  {   42,   98,   88 }, // 928
  {   42,   98,   90 }, // 929
  {   43,   89,   49 }, // 930
  {   43,   91,   51 }, // 931
  {   43,   99,   67 }, // 932
  {   43,   91,   89 }, // 933
  {   43,   99,   89 }, // 934
  {   43,   99,   91 }, // 935
  {   44,   52,   46 }, // 936
  {   44,   54,   46 }, // 937
  {   44,   92,   46 }, // 938
  {   44,   94,   46 }, // 939
  {   44,   92,   52 }, // 940
  {   44,   94,   54 }, // 941
  {   44,  100,   68 }, // 942
  {   44,   94,   92 }, // 943
  {   44,  100,   92 }, // 944
  {   44,  100,   94 }, // 945
  {   45,   53,   47 }, // 946
  {   45,   55,   47 }, // 947
  {   45,   93,   47 }, // 948
  {   45,   95,   47 }, // 949
  {   45,   93,   53 }, // 950
  {   45,   95,   55 }, // 951
  {   45,  101,   69 }, // 952
  {   45,   95,   93 }, // 953
  {   45,  101,   93 }, // 954
  {   45,  101,   95 }, // 955
  {   46,   92,   52 }, // 956
  {   46,   94,   54 }, // 957
  {   46,  102,   70 }, // 958
  {   46,   94,   92 }, // 959
  {   46,  102,   92 }, // 960
  {   46,  102,   94 }, // 961
  {   47,   93,   53 }, // 962
  {   47,   95,   55 }, // 963
  {   47,  103,   71 }, // 964
  {   47,   95,   93 }, // 965
  {   47,  103,   93 }, // 966
  {   47,  103,   95 }, // 967
  {   48,  112,   88 }, // 968
  {   49,  113,   89 }, // 969
  {   50,  114,   90 }, // 970
  {   51,  115,   91 }, // 971
  {   52,  116,   92 }, // 972
  {   53,  117,   93 }, // 973
  {   54,  118,   94 }, // 974
  {   55,  119,   95 }, // 975
  {   56,   80,   60 }, // 976
  {   56,   81,   60 }, // 977
  {   56,  104,   60 }, // 978
  {   56,  105,   60 }, // 979
  {   56,   65,   64 }, // 980
  {   56,   80,   64 }, // 981
  {   56,   81,   65 }, // 982
  {   56,  104,   80 }, // 983
  {   56,  105,   81 }, // 984
  {   56,  105,  104 }, // 985
  {   57,   82,   61 }, // 986
  {   57,   83,   61 }, // 987
  {   57,  106,   61 }, // 988
  {   57,  107,   61 }, // 989
  {   57,   65,   64 }, // 990
  {   57,   82,   64 }, // 991
  {   57,   83,   65 }, // 992
  {   57,  106,   82 }, // 993
  {   57,  107,   83 }, // 994
  {   57,  107,  106 }, // 995
  {   58,   84,   62 }, // 996
  {   58,   85,   62 }, // 997
  {   58,  108,   62 }, // 998
  {   58,  109,   62 }, // 999
  {   58,   67,   66 }, //1000
  {   58,   84,   66 }, //1001
  {   58,   85,   67 }, //1002
  {   58,  108,   84 }, //1003
  {   58,  109,   85 }, //1004
  {   58,  109,  108 }, //1005
  {   59,   86,   63 }, //1006
  {   59,   87,   63 }, //1007
  {   59,  110,   63 }, //1008
  {   59,  111,   63 }, //1009
  {   59,   67,   66 }, //1010
  {   59,   86,   66 }, //1011
  {   59,   87,   67 }, //1012
  {   59,  110,   86 }, //1013
  {   59,  111,   87 }, //1014
  {   59,  111,  110 }, //1015
  {   60,   69,   68 }, //1016
  {   60,   80,   68 }, //1017
  {   60,   81,   69 }, //1018
  {   60,  104,   80 }, //1019
  {   60,  105,   81 }, //1020
  {   60,  105,  104 }, //1021
  {   61,   69,   68 }, //1022
  {   61,   82,   68 }, //1023
  {   61,   83,   69 }, //1024
  {   61,  106,   82 }, //1025
  {   61,  107,   83 }, //1026
  {   61,  107,  106 }, //1027
  {   62,   71,   70 }, //1028
  {   62,   84,   70 }, //1029
  {   62,   85,   71 }, //1030
  {   62,  108,   84 }, //1031
  {   62,  109,   85 }, //1032
  {   62,  109,  108 }, //1033
  {   63,   71,   70 }, //1034
  {   63,   86,   70 }, //1035
  {   63,   87,   71 }, //1036
  {   63,  110,   86 }, //1037
  {   63,  111,   87 }, //1038
  {   63,  111,  110 }, //1039
  {   64,   82,   80 }, //1040
  {   64,   96,   80 }, //1041
  {   64,   96,   82 }, //1042
  {   65,   83,   81 }, //1043
  {   65,   97,   81 }, //1044
  {   65,   97,   83 }, //1045
  {   66,   86,   84 }, //1046
  {   66,   98,   84 }, //1047
  {   66,   98,   86 }, //1048
  {   67,   87,   85 }, //1049
  {   67,   99,   85 }, //1050
  {   67,   99,   87 }, //1051
  {   68,   82,   80 }, //1052
  {   68,  100,   80 }, //1053
  {   68,  100,   82 }, //1054
  {   69,   83,   81 }, //1055
  {   69,  101,   81 }, //1056
  {   69,  101,   83 }, //1057
  {   70,   86,   84 }, //1058
  {   70,  102,   84 }, //1059
  {   70,  102,   86 }, //1060
  {   71,   87,   85 }, //1061
  {   71,  103,   85 }, //1062
  {   71,  103,   87 }, //1063
  {   72,   88,   76 }, //1064
  {   72,   92,   76 }, //1065
  {   72,  112,   76 }, //1066
  {   72,  116,   76 }, //1067
  {   72,   96,   80 }, //1068
  {   72,  100,   80 }, //1069
  {   72,  104,   80 }, //1070
  {   72,   96,   88 }, //1071
  {   72,  112,   88 }, //1072
  {   72,  100,   92 }, //1073
  {   72,  116,   92 }, //1074
  {   72,  100,   96 }, //1075
  {   72,  112,  104 }, //1076
  {   72,  116,  104 }, //1077
  {   72,  116,  112 }, //1078
  {   73,   89,   77 }, //1079
  {   73,   93,   77 }, //1080
  {   73,  113,   77 }, //1081
  {   73,  117,   77 }, //1082
  {   73,   97,   81 }, //1083
  {   73,  101,   81 }, //1084
  {   73,  105,   81 }, //1085
  {   73,   97,   89 }, //1086
  {   73,  113,   89 }, //1087
  {   73,  101,   93 }, //1088
  {   73,  117,   93 }, //1089
  {   73,  101,   97 }, //1090
  {   73,  113,  105 }, //1091
  {   73,  117,  105 }, //1092
  {   73,  117,  113 }, //1093
  {   74,   90,   78 }, //1094
  {   74,   94,   78 }, //1095
  {   74,  114,   78 }, //1096
  {   74,  118,   78 }, //1097
  {   74,   96,   82 }, //1098
  {   74,  100,   82 }, //1099
  {   74,  106,   82 }, //1100
  {   74,   96,   90 }, //1101
  {   74,  114,   90 }, //1102
  {   74,  100,   94 }, //1103
  {   74,  118,   94 }, //1104
  {   74,  100,   96 }, //1105
  {   74,  114,  106 }, //1106
  {   74,  118,  106 }, //1107
  {   74,  118,  114 }, //1108
  {   75,   91,   79 }, //1109
  {   75,   95,   79 }, //1110
  {   75,  115,   79 }, //1111
  {   75,  119,   79 }, //1112
  {   75,   97,   83 }, //1113
  {   75,  101,   83 }, //1114
  {   75,  107,   83 }, //1115
  {   75,   97,   91 }, //1116
  {   75,  115,   91 }, //1117
  {   75,  101,   95 }, //1118
  {   75,  119,   95 }, //1119
  {   75,  101,   97 }, //1120
  {   75,  115,  107 }, //1121
  {   75,  119,  107 }, //1122
  {   75,  119,  115 }, //1123
  {   76,   98,   84 }, //1124
  {   76,  102,   84 }, //1125
  {   76,  108,   84 }, //1126
  {   76,   98,   88 }, //1127
  {   76,  112,   88 }, //1128
  {   76,  102,   92 }, //1129
  {   76,  116,   92 }, //1130
  {   76,  102,   98 }, //1131
  {   76,  112,  108 }, //1132
  {   76,  116,  108 }, //1133
  {   76,  116,  112 }, //1134
  {   77,   99,   85 }, //1135
  {   77,  103,   85 }, //1136
  {   77,  109,   85 }, //1137
  {   77,   99,   89 }, //1138
  {   77,  113,   89 }, //1139
  {   77,  103,   93 }, //1140
  {   77,  117,   93 }, //1141
  {   77,  103,   99 }, //1142
  {   77,  113,  109 }, //1143
  {   77,  117,  109 }, //1144
  {   77,  117,  113 }, //1145
  {   78,   98,   86 }, //1146
  {   78,  102,   86 }, //1147
  {   78,  110,   86 }, //1148
  {   78,   98,   90 }, //1149
  {   78,  114,   90 }, //1150
  {   78,  102,   94 }, //1151
  {   78,  118,   94 }, //1152
  {   78,  102,   98 }, //1153
  {   78,  114,  110 }, //1154
  {   78,  118,  110 }, //1155
  {   78,  118,  114 }, //1156
  {   79,   99,   87 }, //1157
  {   79,  103,   87 }, //1158
  {   79,  111,   87 }, //1159
  {   79,   99,   91 }, //1160
  {   79,  115,   91 }, //1161
  {   79,  103,   95 }, //1162
  {   79,  119,   95 }, //1163
  {   79,  103,   99 }, //1164
  {   79,  115,  111 }, //1165
  {   79,  119,  111 }, //1166
  {   79,  119,  115 }, //1167
  {   80,   96,   82 }, //1168
  {   80,  100,   82 }, //1169
  {   80,  100,   96 }, //1170
  {   81,   97,   83 }, //1171
  {   81,  101,   83 }, //1172
  {   81,  101,   97 }, //1173
  {   82,  100,   96 }, //1174
  {   83,  101,   97 }, //1175
  {   84,   98,   86 }, //1176
  {   84,  102,   86 }, //1177
  {   84,  102,   98 }, //1178
  {   85,   99,   87 }, //1179
  {   85,  103,   87 }, //1180
  {   85,  103,   99 }, //1181
  {   86,  102,   98 }, //1182
  {   87,  103,   99 }, //1183
  {   88,   96,   90 }, //1184
  {   88,   98,   90 }, //1185
  {   89,   97,   91 }, //1186
  {   89,   99,   91 }, //1187
  {   92,  100,   94 }, //1188
  {   92,  102,   94 }, //1189
  {   93,  101,   95 }, //1190
  {   93,  103,   95 }, //1191
  {  104,  116,  112 }, //1192
  {  105,  117,  113 }, //1193
  {  106,  118,  114 }, //1194
  {  107,  119,  115 }, //1195
  {  108,  116,  112 }, //1196
  {  109,  117,  113 }, //1197
  {  110,  118,  114 }, //1198
  {  111,  119,  115 }, //1199
};
////////// The Edge Length of K600 is     0.618034
////////// The face Radius of K600 is     0.356822
int cellK600[600][4] = { // Faces bordering each cell, in cell order
  {    0,    2,    5,  724 }, //   0
  {    0,    3,    6,  726 }, //   1
  {    1,    2,    9,  727 }, //   2
  {    1,    4,   10,  728 }, //   3
  {    3,    4,   15,  732 }, //   4
  {    5,    8,   14,  829 }, //   5
  {    6,    7,   17,  831 }, //   6
  {    7,    8,   29,  834 }, //   7
  {    9,   11,   13,  908 }, //   8
  {   10,   12,   19,  910 }, //   9
  {   11,   12,   27,  912 }, //  10
  {   13,   14,   28,  968 }, //  11
  {   15,   16,   18,  981 }, //  12
  {   16,   17,   26,  983 }, //  13
  {   18,   19,   25, 1041 }, //  14
  {   20,   22,   25, 1068 }, //  15
  {   20,   23,   26, 1070 }, //  16
  {   21,   22,   27, 1071 }, //  17
  {   21,   24,   28, 1072 }, //  18
  {   23,   24,   29, 1076 }, //  19
  {   30,   32,   35,  725 }, //  20
  {   30,   33,   36,  726 }, //  21
  {   31,   32,   39,  729 }, //  22
  {   31,   34,   40,  730 }, //  23
  {   33,   34,   45,  733 }, //  24
  {   35,   38,   44,  830 }, //  25
  {   36,   37,   47,  832 }, //  26
  {   37,   38,   59,  835 }, //  27
  {   39,   41,   43,  918 }, //  28
  {   40,   42,   49,  920 }, //  29
  {   41,   42,   57,  922 }, //  30
  {   43,   44,   58,  969 }, //  31
  {   45,   46,   48,  982 }, //  32
  {   46,   47,   56,  984 }, //  33
  {   48,   49,   55, 1044 }, //  34
  {   50,   52,   55, 1083 }, //  35
  {   50,   53,   56, 1085 }, //  36
  {   51,   52,   57, 1086 }, //  37
  {   51,   54,   58, 1087 }, //  38
  {   53,   54,   59, 1091 }, //  39
  {   60,   62,   65,  735 }, //  40
  {   60,   63,   66,  737 }, //  41
  {   61,   62,   69,  738 }, //  42
  {   61,   64,   70,  739 }, //  43
  {   63,   64,   75,  743 }, //  44
  {   65,   68,   74,  841 }, //  45
  {   66,   67,   77,  843 }, //  46
  {   67,   68,   89,  846 }, //  47
  {   69,   71,   73,  909 }, //  48
  {   70,   72,   79,  910 }, //  49
  {   71,   72,   87,  913 }, //  50
  {   73,   74,   88,  970 }, //  51
  {   75,   76,   78,  991 }, //  52
  {   76,   77,   86,  993 }, //  53
  {   78,   79,   85, 1042 }, //  54
  {   80,   82,   85, 1098 }, //  55
  {   80,   83,   86, 1100 }, //  56
  {   81,   82,   87, 1101 }, //  57
  {   81,   84,   88, 1102 }, //  58
  {   83,   84,   89, 1106 }, //  59
  {   90,   92,   95,  736 }, //  60
  {   90,   93,   96,  737 }, //  61
  {   91,   92,   99,  740 }, //  62
  {   91,   94,  100,  741 }, //  63
  {   93,   94,  105,  744 }, //  64
  {   95,   98,  104,  842 }, //  65
  {   96,   97,  107,  844 }, //  66
  {   97,   98,  119,  847 }, //  67
  {   99,  101,  103,  919 }, //  68
  {  100,  102,  109,  920 }, //  69
  {  101,  102,  117,  923 }, //  70
  {  103,  104,  118,  971 }, //  71
  {  105,  106,  108,  992 }, //  72
  {  106,  107,  116,  994 }, //  73
  {  108,  109,  115, 1045 }, //  74
  {  110,  112,  115, 1113 }, //  75
  {  110,  113,  116, 1115 }, //  76
  {  111,  112,  117, 1116 }, //  77
  {  111,  114,  118, 1117 }, //  78
  {  113,  114,  119, 1121 }, //  79
  {  120,  122,  125,  750 }, //  80
  {  120,  123,  126,  752 }, //  81
  {  121,  122,  129,  753 }, //  82
  {  121,  124,  130,  754 }, //  83
  {  123,  124,  135,  758 }, //  84
  {  125,  128,  134,  849 }, //  85
  {  126,  127,  137,  851 }, //  86
  {  127,  128,  149,  854 }, //  87
  {  129,  131,  133,  924 }, //  88
  {  130,  132,  139,  926 }, //  89
  {  131,  132,  147,  928 }, //  90
  {  133,  134,  148,  968 }, //  91
  {  135,  136,  138, 1001 }, //  92
  {  136,  137,  146, 1003 }, //  93
  {  138,  139,  145, 1047 }, //  94
  {  140,  142,  145, 1124 }, //  95
  {  140,  143,  146, 1126 }, //  96
  {  141,  142,  147, 1127 }, //  97
  {  141,  144,  148, 1128 }, //  98
  {  143,  144,  149, 1132 }, //  99
  {  150,  152,  155,  751 }, // 100
  {  150,  153,  156,  752 }, // 101
  {  151,  152,  159,  755 }, // 102
  {  151,  154,  160,  756 }, // 103
  {  153,  154,  165,  759 }, // 104
  {  155,  158,  164,  850 }, // 105
  {  156,  157,  167,  852 }, // 106
  {  157,  158,  179,  855 }, // 107
  {  159,  161,  163,  930 }, // 108
  {  160,  162,  169,  932 }, // 109
  {  161,  162,  177,  934 }, // 110
  {  163,  164,  178,  969 }, // 111
  {  165,  166,  168, 1002 }, // 112
  {  166,  167,  176, 1004 }, // 113
  {  168,  169,  175, 1050 }, // 114
  {  170,  172,  175, 1135 }, // 115
  {  170,  173,  176, 1137 }, // 116
  {  171,  172,  177, 1138 }, // 117
  {  171,  174,  178, 1139 }, // 118
  {  173,  174,  179, 1143 }, // 119
  {  180,  182,  185,  761 }, // 120
  {  180,  183,  186,  763 }, // 121
  {  181,  182,  189,  764 }, // 122
  {  181,  184,  190,  765 }, // 123
  {  183,  184,  195,  769 }, // 124
  {  185,  188,  194,  857 }, // 125
  {  186,  187,  197,  859 }, // 126
  {  187,  188,  209,  862 }, // 127
  {  189,  191,  193,  925 }, // 128
  {  190,  192,  199,  926 }, // 129
  {  191,  192,  207,  929 }, // 130
  {  193,  194,  208,  970 }, // 131
  {  195,  196,  198, 1011 }, // 132
  {  196,  197,  206, 1013 }, // 133
  {  198,  199,  205, 1048 }, // 134
  {  200,  202,  205, 1146 }, // 135
  {  200,  203,  206, 1148 }, // 136
  {  201,  202,  207, 1149 }, // 137
  {  201,  204,  208, 1150 }, // 138
  {  203,  204,  209, 1154 }, // 139
  {  210,  212,  215,  762 }, // 140
  {  210,  213,  216,  763 }, // 141
  {  211,  212,  219,  766 }, // 142
  {  211,  214,  220,  767 }, // 143
  {  213,  214,  225,  770 }, // 144
  {  215,  218,  224,  858 }, // 145
  {  216,  217,  227,  860 }, // 146
  {  217,  218,  239,  863 }, // 147
  {  219,  221,  223,  931 }, // 148
  {  220,  222,  229,  932 }, // 149
  {  221,  222,  237,  935 }, // 150
  {  223,  224,  238,  971 }, // 151
  {  225,  226,  228, 1012 }, // 152
  {  226,  227,  236, 1014 }, // 153
  {  228,  229,  235, 1051 }, // 154
  {  230,  232,  235, 1157 }, // 155
  {  230,  233,  236, 1159 }, // 156
  {  231,  232,  237, 1160 }, // 157
  {  231,  234,  238, 1161 }, // 158
  {  233,  234,  239, 1165 }, // 159
  {  240,  242,  245,  776 }, // 160
  {  240,  243,  246,  778 }, // 161
  {  241,  242,  249,  779 }, // 162
  {  241,  244,  250,  780 }, // 163
  {  243,  244,  255,  784 }, // 164
  {  245,  248,  254,  869 }, // 165
  {  246,  247,  257,  871 }, // 166
  {  247,  248,  269,  874 }, // 167
  {  249,  251,  253,  940 }, // 168
  {  250,  252,  259,  942 }, // 169
  {  251,  252,  267,  944 }, // 170
  {  253,  254,  268,  972 }, // 171
  {  255,  256,  258, 1017 }, // 172
  {  256,  257,  266, 1019 }, // 173
  {  258,  259,  265, 1053 }, // 174
  {  260,  262,  265, 1069 }, // 175
  {  260,  263,  266, 1070 }, // 176
  {  261,  262,  267, 1073 }, // 177
  {  261,  264,  268, 1074 }, // 178
  {  263,  264,  269, 1077 }, // 179
  {  270,  272,  275,  777 }, // 180
  {  270,  273,  276,  778 }, // 181
  {  271,  272,  279,  781 }, // 182
  {  271,  274,  280,  782 }, // 183
  {  273,  274,  285,  785 }, // 184
  {  275,  278,  284,  870 }, // 185
  {  276,  277,  287,  872 }, // 186
  {  277,  278,  299,  875 }, // 187
  {  279,  281,  283,  950 }, // 188
  {  280,  282,  289,  952 }, // 189
  {  281,  282,  297,  954 }, // 190
  {  283,  284,  298,  973 }, // 191
  {  285,  286,  288, 1018 }, // 192
  {  286,  287,  296, 1020 }, // 193
  {  288,  289,  295, 1056 }, // 194
  {  290,  292,  295, 1084 }, // 195
  {  290,  293,  296, 1085 }, // 196
  {  291,  292,  297, 1088 }, // 197
  {  291,  294,  298, 1089 }, // 198
  {  293,  294,  299, 1092 }, // 199
  {  300,  302,  305,  787 }, // 200
  {  300,  303,  306,  789 }, // 201
  {  301,  302,  309,  790 }, // 202
  {  301,  304,  310,  791 }, // 203
  {  303,  304,  315,  795 }, // 204
  {  305,  308,  314,  881 }, // 205
  {  306,  307,  317,  883 }, // 206
  {  307,  308,  329,  886 }, // 207
  {  309,  311,  313,  941 }, // 208
  {  310,  312,  319,  942 }, // 209
  {  311,  312,  327,  945 }, // 210
  {  313,  314,  328,  974 }, // 211
  {  315,  316,  318, 1023 }, // 212
  {  316,  317,  326, 1025 }, // 213
  {  318,  319,  325, 1054 }, // 214
  {  320,  322,  325, 1099 }, // 215
  {  320,  323,  326, 1100 }, // 216
  {  321,  322,  327, 1103 }, // 217
  {  321,  324,  328, 1104 }, // 218
  {  323,  324,  329, 1107 }, // 219
  {  330,  332,  335,  788 }, // 220
  {  330,  333,  336,  789 }, // 221
  {  331,  332,  339,  792 }, // 222
  {  331,  334,  340,  793 }, // 223
  {  333,  334,  345,  796 }, // 224
  {  335,  338,  344,  882 }, // 225
  {  336,  337,  347,  884 }, // 226
  {  337,  338,  359,  887 }, // 227
  {  339,  341,  343,  951 }, // 228
  {  340,  342,  349,  952 }, // 229
  {  341,  342,  357,  955 }, // 230
  {  343,  344,  358,  975 }, // 231
  {  345,  346,  348, 1024 }, // 232
  {  346,  347,  356, 1026 }, // 233
  {  348,  349,  355, 1057 }, // 234
  {  350,  352,  355, 1114 }, // 235
  {  350,  353,  356, 1115 }, // 236
  {  351,  352,  357, 1118 }, // 237
  {  351,  354,  358, 1119 }, // 238
  {  353,  354,  359, 1122 }, // 239
  {  360,  362,  365,  802 }, // 240
  {  360,  363,  366,  804 }, // 241
  {  361,  362,  369,  805 }, // 242
  {  361,  364,  370,  806 }, // 243
  {  363,  364,  375,  810 }, // 244
  {  365,  368,  374,  889 }, // 245
  {  366,  367,  377,  891 }, // 246
  {  367,  368,  389,  894 }, // 247
  {  369,  371,  373,  956 }, // 248
  {  370,  372,  379,  958 }, // 249
  {  371,  372,  387,  960 }, // 250
  {  373,  374,  388,  972 }, // 251
  {  375,  376,  378, 1029 }, // 252
  {  376,  377,  386, 1031 }, // 253
  {  378,  379,  385, 1059 }, // 254
  {  380,  382,  385, 1125 }, // 255
  {  380,  383,  386, 1126 }, // 256
  {  381,  382,  387, 1129 }, // 257
  {  381,  384,  388, 1130 }, // 258
  {  383,  384,  389, 1133 }, // 259
  {  390,  392,  395,  803 }, // 260
  {  390,  393,  396,  804 }, // 261
  {  391,  392,  399,  807 }, // 262
  {  391,  394,  400,  808 }, // 263
  {  393,  394,  405,  811 }, // 264
  {  395,  398,  404,  890 }, // 265
  {  396,  397,  407,  892 }, // 266
  {  397,  398,  419,  895 }, // 267
  {  399,  401,  403,  962 }, // 268
  {  400,  402,  409,  964 }, // 269
  {  401,  402,  417,  966 }, // 270
  {  403,  404,  418,  973 }, // 271
  {  405,  406,  408, 1030 }, // 272
  {  406,  407,  416, 1032 }, // 273
  {  408,  409,  415, 1062 }, // 274
  {  410,  412,  415, 1136 }, // 275
  {  410,  413,  416, 1137 }, // 276
  {  411,  412,  417, 1140 }, // 277
  {  411,  414,  418, 1141 }, // 278
  {  413,  414,  419, 1144 }, // 279
  {  420,  422,  425,  813 }, // 280
  {  420,  423,  426,  815 }, // 281
  {  421,  422,  429,  816 }, // 282
  {  421,  424,  430,  817 }, // 283
  {  423,  424,  435,  821 }, // 284
  {  425,  428,  434,  897 }, // 285
  {  426,  427,  437,  899 }, // 286
  {  427,  428,  449,  902 }, // 287
  {  429,  431,  433,  957 }, // 288
  {  430,  432,  439,  958 }, // 289
  {  431,  432,  447,  961 }, // 290
  {  433,  434,  448,  974 }, // 291
  {  435,  436,  438, 1035 }, // 292
  {  436,  437,  446, 1037 }, // 293
  {  438,  439,  445, 1060 }, // 294
  {  440,  442,  445, 1147 }, // 295
  {  440,  443,  446, 1148 }, // 296
  {  441,  442,  447, 1151 }, // 297
  {  441,  444,  448, 1152 }, // 298
  {  443,  444,  449, 1155 }, // 299
  {  450,  452,  455,  814 }, // 300
  {  450,  453,  456,  815 }, // 301
  {  451,  452,  459,  818 }, // 302
  {  451,  454,  460,  819 }, // 303
  {  453,  454,  465,  822 }, // 304
  {  455,  458,  464,  898 }, // 305
  {  456,  457,  467,  900 }, // 306
  {  457,  458,  479,  903 }, // 307
  {  459,  461,  463,  963 }, // 308
  {  460,  462,  469,  964 }, // 309
  {  461,  462,  477,  967 }, // 310
  {  463,  464,  478,  975 }, // 311
  {  465,  466,  468, 1036 }, // 312
  {  466,  467,  476, 1038 }, // 313
  {  468,  469,  475, 1063 }, // 314
  {  470,  472,  475, 1158 }, // 315
  {  470,  473,  476, 1159 }, // 316
  {  471,  472,  477, 1162 }, // 317
  {  471,  474,  478, 1163 }, // 318
  {  473,  474,  479, 1166 }, // 319
  {  480,  481,  490, 1064 }, // 320
  {  480,  482,  491, 1065 }, // 321
  {  481,  483,  499, 1071 }, // 322
  {  482,  484,  504, 1073 }, // 323
  {  483,  484,  508, 1075 }, // 324
  {  485,  486,  494, 1094 }, // 325
  {  485,  487,  495, 1095 }, // 326
  {  486,  488,  501, 1101 }, // 327
  {  487,  489,  506, 1103 }, // 328
  {  488,  489,  508, 1105 }, // 329
  {  490,  492,  500, 1127 }, // 330
  {  491,  493,  505, 1129 }, // 331
  {  492,  493,  509, 1131 }, // 332
  {  494,  496,  502, 1149 }, // 333
  {  495,  497,  507, 1151 }, // 334
  {  496,  497,  509, 1153 }, // 335
  {  498,  499,  501, 1184 }, // 336
  {  498,  500,  502, 1185 }, // 337
  {  503,  504,  506, 1188 }, // 338
  {  503,  505,  507, 1189 }, // 339
  {  510,  511,  520, 1079 }, // 340
  {  510,  512,  521, 1080 }, // 341
  {  511,  513,  529, 1086 }, // 342
  {  512,  514,  534, 1088 }, // 343
  {  513,  514,  538, 1090 }, // 344
  {  515,  516,  524, 1109 }, // 345
  {  515,  517,  525, 1110 }, // 346
  {  516,  518,  531, 1116 }, // 347
  {  517,  519,  536, 1118 }, // 348
  {  518,  519,  538, 1120 }, // 349
  {  520,  522,  530, 1138 }, // 350
  {  521,  523,  535, 1140 }, // 351
  {  522,  523,  539, 1142 }, // 352
  {  524,  526,  532, 1160 }, // 353
  {  525,  527,  537, 1162 }, // 354
  {  526,  527,  539, 1164 }, // 355
  {  528,  529,  531, 1186 }, // 356
  {  528,  530,  532, 1187 }, // 357
  {  533,  534,  536, 1190 }, // 358
  {  533,  535,  537, 1191 }, // 359
  {  540,  543,  547,  826 }, // 360
  {  540,  544,  548,  827 }, // 361
  {  541,  542,  558,  833 }, // 362
  {  541,  543,  559,  834 }, // 363
  {  542,  544,  561,  835 }, // 364
  {  545,  546,  563,  853 }, // 365
  {  545,  547,  564,  854 }, // 366
  {  546,  548,  566,  855 }, // 367
  {  549,  552,  556,  866 }, // 368
  {  549,  553,  557,  867 }, // 369
  {  550,  551,  558,  873 }, // 370
  {  550,  552,  560,  874 }, // 371
  {  551,  553,  562,  875 }, // 372
  {  554,  555,  563,  893 }, // 373
  {  554,  556,  565,  894 }, // 374
  {  555,  557,  567,  895 }, // 375
  {  559,  560,  568, 1192 }, // 376
  {  561,  562,  569, 1193 }, // 377
  {  564,  565,  568, 1196 }, // 378
  {  566,  567,  569, 1197 }, // 379
  {  570,  573,  577,  838 }, // 380
  {  570,  574,  578,  839 }, // 381
  {  571,  572,  588,  845 }, // 382
  {  571,  573,  589,  846 }, // 383
  {  572,  574,  591,  847 }, // 384
  {  575,  576,  593,  861 }, // 385
  {  575,  577,  594,  862 }, // 386
  {  576,  578,  596,  863 }, // 387
  {  579,  582,  586,  878 }, // 388
  {  579,  583,  587,  879 }, // 389
  {  580,  581,  588,  885 }, // 390
  {  580,  582,  590,  886 }, // 391
  {  581,  583,  592,  887 }, // 392
  {  584,  585,  593,  901 }, // 393
  {  584,  586,  595,  902 }, // 394
  {  585,  587,  597,  903 }, // 395
  {  589,  590,  598, 1194 }, // 396
  {  591,  592,  599, 1195 }, // 397
  {  594,  595,  598, 1198 }, // 398
  {  596,  597,  599, 1199 }, // 399
  {  600,  603,  612,  976 }, // 400
  {  600,  604,  613,  977 }, // 401
  {  601,  602,  618,  980 }, // 402
  {  601,  603,  619,  981 }, // 403
  {  602,  604,  621,  982 }, // 404
  {  605,  608,  616,  986 }, // 405
  {  605,  609,  617,  987 }, // 406
  {  606,  607,  618,  990 }, // 407
  {  606,  608,  620,  991 }, // 408
  {  607,  609,  622,  992 }, // 409
  {  610,  611,  623, 1016 }, // 410
  {  610,  612,  624, 1017 }, // 411
  {  611,  613,  626, 1018 }, // 412
  {  614,  615,  623, 1022 }, // 413
  {  614,  616,  625, 1023 }, // 414
  {  615,  617,  627, 1024 }, // 415
  {  619,  620,  628, 1040 }, // 416
  {  621,  622,  629, 1043 }, // 417
  {  624,  625,  628, 1052 }, // 418
  {  626,  627,  629, 1055 }, // 419
  {  630,  633,  642,  996 }, // 420
  {  630,  634,  643,  997 }, // 421
  {  631,  632,  648, 1000 }, // 422
  {  631,  633,  649, 1001 }, // 423
  {  632,  634,  651, 1002 }, // 424
  {  635,  638,  646, 1006 }, // 425
  {  635,  639,  647, 1007 }, // 426
  {  636,  637,  648, 1010 }, // 427
  {  636,  638,  650, 1011 }, // 428
  {  637,  639,  652, 1012 }, // 429
  {  640,  641,  653, 1028 }, // 430
  {  640,  642,  654, 1029 }, // 431
  {  641,  643,  656, 1030 }, // 432
  {  644,  645,  653, 1034 }, // 433
  {  644,  646,  655, 1035 }, // 434
  {  645,  647,  657, 1036 }, // 435
  {  649,  650,  658, 1046 }, // 436
  {  651,  652,  659, 1049 }, // 437
  {  654,  655,  658, 1058 }, // 438
  {  656,  657,  659, 1061 }, // 439
  {  660,  661,  665,  720 }, // 440
  {  660,  662,  666,  721 }, // 441
  {  661,  663,  679,  727 }, // 442
  {  662,  664,  682,  729 }, // 443
  {  663,  664,  688,  731 }, // 444
  {  665,  667,  680,  738 }, // 445
  {  666,  668,  683,  740 }, // 446
  {  667,  668,  689,  742 }, // 447
  {  669,  670,  674,  746 }, // 448
  {  669,  671,  675,  747 }, // 449
  {  670,  672,  684,  753 }, // 450
  {  671,  673,  686,  755 }, // 451
  {  672,  673,  688,  757 }, // 452
  {  674,  676,  685,  764 }, // 453
  {  675,  677,  687,  766 }, // 454
  {  676,  677,  689,  768 }, // 455
  {  678,  679,  684,  904 }, // 456
  {  678,  680,  685,  905 }, // 457
  {  681,  682,  686,  914 }, // 458
  {  681,  683,  687,  915 }, // 459
  {  690,  691,  695,  772 }, // 460
  {  690,  692,  696,  773 }, // 461
  {  691,  693,  709,  779 }, // 462
  {  692,  694,  712,  781 }, // 463
  {  693,  694,  718,  783 }, // 464
  {  695,  697,  710,  790 }, // 465
  {  696,  698,  713,  792 }, // 466
  {  697,  698,  719,  794 }, // 467
  {  699,  700,  704,  798 }, // 468
  {  699,  701,  705,  799 }, // 469
  {  700,  702,  714,  805 }, // 470
  {  701,  703,  716,  807 }, // 471
  {  702,  703,  718,  809 }, // 472
  {  704,  706,  715,  816 }, // 473
  {  705,  707,  717,  818 }, // 474
  {  706,  707,  719,  820 }, // 475
  {  708,  709,  714,  936 }, // 476
  {  708,  710,  715,  937 }, // 477
  {  711,  712,  716,  946 }, // 478
  {  711,  713,  717,  947 }, // 479
  {  720,  722,  728,  739 }, // 480
  {  721,  723,  730,  741 }, // 481
  {  722,  723,  734,  745 }, // 482
  {  724,  725,  731,  828 }, // 483
  {  732,  733,  734,  980 }, // 484
  {  735,  736,  742,  840 }, // 485
  {  743,  744,  745,  990 }, // 486
  {  746,  748,  754,  765 }, // 487
  {  747,  749,  756,  767 }, // 488
  {  748,  749,  760,  771 }, // 489
  {  750,  751,  757,  848 }, // 490
  {  758,  759,  760, 1000 }, // 491
  {  761,  762,  768,  856 }, // 492
  {  769,  770,  771, 1010 }, // 493
  {  772,  774,  780,  791 }, // 494
  {  773,  775,  782,  793 }, // 495
  {  774,  775,  786,  797 }, // 496
  {  776,  777,  783,  868 }, // 497
  {  784,  785,  786, 1016 }, // 498
  {  787,  788,  794,  880 }, // 499
  {  795,  796,  797, 1022 }, // 500
  {  798,  800,  806,  817 }, // 501
  {  799,  801,  808,  819 }, // 502
  {  800,  801,  812,  823 }, // 503
  {  802,  803,  809,  888 }, // 504
  {  810,  811,  812, 1028 }, // 505
  {  813,  814,  820,  896 }, // 506
  {  821,  822,  823, 1034 }, // 507
  {  824,  825,  828,  848 }, // 508
  {  824,  826,  829,  849 }, // 509
  {  825,  827,  830,  850 }, // 510
  {  831,  832,  833,  985 }, // 511
  {  836,  837,  840,  856 }, // 512
  {  836,  838,  841,  857 }, // 513
  {  837,  839,  842,  858 }, // 514
  {  843,  844,  845,  995 }, // 515
  {  851,  852,  853, 1005 }, // 516
  {  859,  860,  861, 1015 }, // 517
  {  864,  865,  868,  888 }, // 518
  {  864,  866,  869,  889 }, // 519
  {  865,  867,  870,  890 }, // 520
  {  871,  872,  873, 1021 }, // 521
  {  876,  877,  880,  896 }, // 522
  {  876,  878,  881,  897 }, // 523
  {  877,  879,  882,  898 }, // 524
  {  883,  884,  885, 1027 }, // 525
  {  891,  892,  893, 1033 }, // 526
  {  899,  900,  901, 1039 }, // 527
  {  904,  906,  908,  924 }, // 528
  {  905,  907,  909,  925 }, // 529
  {  906,  907,  911,  927 }, // 530
  {  911,  912,  913, 1184 }, // 531
  {  914,  916,  918,  930 }, // 532
  {  915,  917,  919,  931 }, // 533
  {  916,  917,  921,  933 }, // 534
  {  921,  922,  923, 1186 }, // 535
  {  927,  928,  929, 1185 }, // 536
  {  933,  934,  935, 1187 }, // 537
  {  936,  938,  940,  956 }, // 538
  {  937,  939,  941,  957 }, // 539
  {  938,  939,  943,  959 }, // 540
  {  943,  944,  945, 1188 }, // 541
  {  946,  948,  950,  962 }, // 542
  {  947,  949,  951,  963 }, // 543
  {  948,  949,  953,  965 }, // 544
  {  953,  954,  955, 1190 }, // 545
  {  959,  960,  961, 1189 }, // 546
  {  965,  966,  967, 1191 }, // 547
  {  976,  978,  983, 1019 }, // 548
  {  977,  979,  984, 1020 }, // 549
  {  978,  979,  985, 1021 }, // 550
  {  986,  988,  993, 1025 }, // 551
  {  987,  989,  994, 1026 }, // 552
  {  988,  989,  995, 1027 }, // 553
  {  996,  998, 1003, 1031 }, // 554
  {  997,  999, 1004, 1032 }, // 555
  {  998,  999, 1005, 1033 }, // 556
  { 1006, 1008, 1013, 1037 }, // 557
  { 1007, 1009, 1014, 1038 }, // 558
  { 1008, 1009, 1015, 1039 }, // 559
  { 1040, 1041, 1042, 1168 }, // 560
  { 1043, 1044, 1045, 1171 }, // 561
  { 1046, 1047, 1048, 1176 }, // 562
  { 1049, 1050, 1051, 1179 }, // 563
  { 1052, 1053, 1054, 1169 }, // 564
  { 1055, 1056, 1057, 1172 }, // 565
  { 1058, 1059, 1060, 1177 }, // 566
  { 1061, 1062, 1063, 1180 }, // 567
  { 1064, 1066, 1072, 1128 }, // 568
  { 1065, 1067, 1074, 1130 }, // 569
  { 1066, 1067, 1078, 1134 }, // 570
  { 1068, 1069, 1075, 1170 }, // 571
  { 1076, 1077, 1078, 1192 }, // 572
  { 1079, 1081, 1087, 1139 }, // 573
  { 1080, 1082, 1089, 1141 }, // 574
  { 1081, 1082, 1093, 1145 }, // 575
  { 1083, 1084, 1090, 1173 }, // 576
  { 1091, 1092, 1093, 1193 }, // 577
  { 1094, 1096, 1102, 1150 }, // 578
  { 1095, 1097, 1104, 1152 }, // 579
  { 1096, 1097, 1108, 1156 }, // 580
  { 1098, 1099, 1105, 1174 }, // 581
  { 1106, 1107, 1108, 1194 }, // 582
  { 1109, 1111, 1117, 1161 }, // 583
  { 1110, 1112, 1119, 1163 }, // 584
  { 1111, 1112, 1123, 1167 }, // 585
  { 1113, 1114, 1120, 1175 }, // 586
  { 1121, 1122, 1123, 1195 }, // 587
  { 1124, 1125, 1131, 1178 }, // 588
  { 1132, 1133, 1134, 1196 }, // 589
  { 1135, 1136, 1142, 1181 }, // 590
  { 1143, 1144, 1145, 1197 }, // 591
  { 1146, 1147, 1153, 1182 }, // 592
  { 1154, 1155, 1156, 1198 }, // 593
  { 1157, 1158, 1164, 1183 }, // 594
  { 1165, 1166, 1167, 1199 }, // 595
  { 1168, 1169, 1170, 1174 }, // 596
  { 1171, 1172, 1173, 1175 }, // 597
  { 1176, 1177, 1178, 1182 }, // 598
  { 1179, 1180, 1181, 1183 }, // 599
};
int faceToCellK600[1200][2] = { // Cells connected to each face, in face order
  {    0,    1 }, //   0
  {    2,    3 }, //   1
  {    0,    2 }, //   2
  {    1,    4 }, //   3
  {    3,    4 }, //   4
  {    0,    5 }, //   5
  {    1,    6 }, //   6
  {    6,    7 }, //   7
  {    5,    7 }, //   8
  {    2,    8 }, //   9
  {    3,    9 }, //  10
  {    8,   10 }, //  11
  {    9,   10 }, //  12
  {    8,   11 }, //  13
  {    5,   11 }, //  14
  {    4,   12 }, //  15
  {   12,   13 }, //  16
  {    6,   13 }, //  17
  {   12,   14 }, //  18
  {    9,   14 }, //  19
  {   15,   16 }, //  20
  {   17,   18 }, //  21
  {   15,   17 }, //  22
  {   16,   19 }, //  23
  {   18,   19 }, //  24
  {   14,   15 }, //  25
  {   13,   16 }, //  26
  {   10,   17 }, //  27
  {   11,   18 }, //  28
  {    7,   19 }, //  29
  {   20,   21 }, //  30
  {   22,   23 }, //  31
  {   20,   22 }, //  32
  {   21,   24 }, //  33
  {   23,   24 }, //  34
  {   20,   25 }, //  35
  {   21,   26 }, //  36
  {   26,   27 }, //  37
  {   25,   27 }, //  38
  {   22,   28 }, //  39
  {   23,   29 }, //  40
  {   28,   30 }, //  41
  {   29,   30 }, //  42
  {   28,   31 }, //  43
  {   25,   31 }, //  44
  {   24,   32 }, //  45
  {   32,   33 }, //  46
  {   26,   33 }, //  47
  {   32,   34 }, //  48
  {   29,   34 }, //  49
  {   35,   36 }, //  50
  {   37,   38 }, //  51
  {   35,   37 }, //  52
  {   36,   39 }, //  53
  {   38,   39 }, //  54
  {   34,   35 }, //  55
  {   33,   36 }, //  56
  {   30,   37 }, //  57
  {   31,   38 }, //  58
  {   27,   39 }, //  59
  {   40,   41 }, //  60
  {   42,   43 }, //  61
  {   40,   42 }, //  62
  {   41,   44 }, //  63
  {   43,   44 }, //  64
  {   40,   45 }, //  65
  {   41,   46 }, //  66
  {   46,   47 }, //  67
  {   45,   47 }, //  68
  {   42,   48 }, //  69
  {   43,   49 }, //  70
  {   48,   50 }, //  71
  {   49,   50 }, //  72
  {   48,   51 }, //  73
  {   45,   51 }, //  74
  {   44,   52 }, //  75
  {   52,   53 }, //  76
  {   46,   53 }, //  77
  {   52,   54 }, //  78
  {   49,   54 }, //  79
  {   55,   56 }, //  80
  {   57,   58 }, //  81
  {   55,   57 }, //  82
  {   56,   59 }, //  83
  {   58,   59 }, //  84
  {   54,   55 }, //  85
  {   53,   56 }, //  86
  {   50,   57 }, //  87
  {   51,   58 }, //  88
  {   47,   59 }, //  89
  {   60,   61 }, //  90
  {   62,   63 }, //  91
  {   60,   62 }, //  92
  {   61,   64 }, //  93
  {   63,   64 }, //  94
  {   60,   65 }, //  95
  {   61,   66 }, //  96
  {   66,   67 }, //  97
  {   65,   67 }, //  98
  {   62,   68 }, //  99
  {   63,   69 }, // 100
  {   68,   70 }, // 101
  {   69,   70 }, // 102
  {   68,   71 }, // 103
  {   65,   71 }, // 104
  {   64,   72 }, // 105
  {   72,   73 }, // 106
  {   66,   73 }, // 107
  {   72,   74 }, // 108
  {   69,   74 }, // 109
  {   75,   76 }, // 110
  {   77,   78 }, // 111
  {   75,   77 }, // 112
  {   76,   79 }, // 113
  {   78,   79 }, // 114
  {   74,   75 }, // 115
  {   73,   76 }, // 116
  {   70,   77 }, // 117
  {   71,   78 }, // 118
  {   67,   79 }, // 119
  {   80,   81 }, // 120
  {   82,   83 }, // 121
  {   80,   82 }, // 122
  {   81,   84 }, // 123
  {   83,   84 }, // 124
  {   80,   85 }, // 125
  {   81,   86 }, // 126
  {   86,   87 }, // 127
  {   85,   87 }, // 128
  {   82,   88 }, // 129
  {   83,   89 }, // 130
  {   88,   90 }, // 131
  {   89,   90 }, // 132
  {   88,   91 }, // 133
  {   85,   91 }, // 134
  {   84,   92 }, // 135
  {   92,   93 }, // 136
  {   86,   93 }, // 137
  {   92,   94 }, // 138
  {   89,   94 }, // 139
  {   95,   96 }, // 140
  {   97,   98 }, // 141
  {   95,   97 }, // 142
  {   96,   99 }, // 143
  {   98,   99 }, // 144
  {   94,   95 }, // 145
  {   93,   96 }, // 146
  {   90,   97 }, // 147
  {   91,   98 }, // 148
  {   87,   99 }, // 149
  {  100,  101 }, // 150
  {  102,  103 }, // 151
  {  100,  102 }, // 152
  {  101,  104 }, // 153
  {  103,  104 }, // 154
  {  100,  105 }, // 155
  {  101,  106 }, // 156
  {  106,  107 }, // 157
  {  105,  107 }, // 158
  {  102,  108 }, // 159
  {  103,  109 }, // 160
  {  108,  110 }, // 161
  {  109,  110 }, // 162
  {  108,  111 }, // 163
  {  105,  111 }, // 164
  {  104,  112 }, // 165
  {  112,  113 }, // 166
  {  106,  113 }, // 167
  {  112,  114 }, // 168
  {  109,  114 }, // 169
  {  115,  116 }, // 170
  {  117,  118 }, // 171
  {  115,  117 }, // 172
  {  116,  119 }, // 173
  {  118,  119 }, // 174
  {  114,  115 }, // 175
  {  113,  116 }, // 176
  {  110,  117 }, // 177
  {  111,  118 }, // 178
  {  107,  119 }, // 179
  {  120,  121 }, // 180
  {  122,  123 }, // 181
  {  120,  122 }, // 182
  {  121,  124 }, // 183
  {  123,  124 }, // 184
  {  120,  125 }, // 185
  {  121,  126 }, // 186
  {  126,  127 }, // 187
  {  125,  127 }, // 188
  {  122,  128 }, // 189
  {  123,  129 }, // 190
  {  128,  130 }, // 191
  {  129,  130 }, // 192
  {  128,  131 }, // 193
  {  125,  131 }, // 194
  {  124,  132 }, // 195
  {  132,  133 }, // 196
  {  126,  133 }, // 197
  {  132,  134 }, // 198
  {  129,  134 }, // 199
  {  135,  136 }, // 200
  {  137,  138 }, // 201
  {  135,  137 }, // 202
  {  136,  139 }, // 203
  {  138,  139 }, // 204
  {  134,  135 }, // 205
  {  133,  136 }, // 206
  {  130,  137 }, // 207
  {  131,  138 }, // 208
  {  127,  139 }, // 209
  {  140,  141 }, // 210
  {  142,  143 }, // 211
  {  140,  142 }, // 212
  {  141,  144 }, // 213
  {  143,  144 }, // 214
  {  140,  145 }, // 215
  {  141,  146 }, // 216
  {  146,  147 }, // 217
  {  145,  147 }, // 218
  {  142,  148 }, // 219
  {  143,  149 }, // 220
  {  148,  150 }, // 221
  {  149,  150 }, // 222
  {  148,  151 }, // 223
  {  145,  151 }, // 224
  {  144,  152 }, // 225
  {  152,  153 }, // 226
  {  146,  153 }, // 227
  {  152,  154 }, // 228
  {  149,  154 }, // 229
  {  155,  156 }, // 230
  {  157,  158 }, // 231
  {  155,  157 }, // 232
  {  156,  159 }, // 233
  {  158,  159 }, // 234
  {  154,  155 }, // 235
  {  153,  156 }, // 236
  {  150,  157 }, // 237
  {  151,  158 }, // 238
  {  147,  159 }, // 239
  {  160,  161 }, // 240
  {  162,  163 }, // 241
  {  160,  162 }, // 242
  {  161,  164 }, // 243
  {  163,  164 }, // 244
  {  160,  165 }, // 245
  {  161,  166 }, // 246
  {  166,  167 }, // 247
  {  165,  167 }, // 248
  {  162,  168 }, // 249
  {  163,  169 }, // 250
  {  168,  170 }, // 251
  {  169,  170 }, // 252
  {  168,  171 }, // 253
  {  165,  171 }, // 254
  {  164,  172 }, // 255
  {  172,  173 }, // 256
  {  166,  173 }, // 257
  {  172,  174 }, // 258
  {  169,  174 }, // 259
  {  175,  176 }, // 260
  {  177,  178 }, // 261
  {  175,  177 }, // 262
  {  176,  179 }, // 263
  {  178,  179 }, // 264
  {  174,  175 }, // 265
  {  173,  176 }, // 266
  {  170,  177 }, // 267
  {  171,  178 }, // 268
  {  167,  179 }, // 269
  {  180,  181 }, // 270
  {  182,  183 }, // 271
  {  180,  182 }, // 272
  {  181,  184 }, // 273
  {  183,  184 }, // 274
  {  180,  185 }, // 275
  {  181,  186 }, // 276
  {  186,  187 }, // 277
  {  185,  187 }, // 278
  {  182,  188 }, // 279
  {  183,  189 }, // 280
  {  188,  190 }, // 281
  {  189,  190 }, // 282
  {  188,  191 }, // 283
  {  185,  191 }, // 284
  {  184,  192 }, // 285
  {  192,  193 }, // 286
  {  186,  193 }, // 287
  {  192,  194 }, // 288
  {  189,  194 }, // 289
  {  195,  196 }, // 290
  {  197,  198 }, // 291
  {  195,  197 }, // 292
  {  196,  199 }, // 293
  {  198,  199 }, // 294
  {  194,  195 }, // 295
  {  193,  196 }, // 296
  {  190,  197 }, // 297
  {  191,  198 }, // 298
  {  187,  199 }, // 299
  {  200,  201 }, // 300
  {  202,  203 }, // 301
  {  200,  202 }, // 302
  {  201,  204 }, // 303
  {  203,  204 }, // 304
  {  200,  205 }, // 305
  {  201,  206 }, // 306
  {  206,  207 }, // 307
  {  205,  207 }, // 308
  {  202,  208 }, // 309
  {  203,  209 }, // 310
  {  208,  210 }, // 311
  {  209,  210 }, // 312
  {  208,  211 }, // 313
  {  205,  211 }, // 314
  {  204,  212 }, // 315
  {  212,  213 }, // 316
  {  206,  213 }, // 317
  {  212,  214 }, // 318
  {  209,  214 }, // 319
  {  215,  216 }, // 320
  {  217,  218 }, // 321
  {  215,  217 }, // 322
  {  216,  219 }, // 323
  {  218,  219 }, // 324
  {  214,  215 }, // 325
  {  213,  216 }, // 326
  {  210,  217 }, // 327
  {  211,  218 }, // 328
  {  207,  219 }, // 329
  {  220,  221 }, // 330
  {  222,  223 }, // 331
  {  220,  222 }, // 332
  {  221,  224 }, // 333
  {  223,  224 }, // 334
  {  220,  225 }, // 335
  {  221,  226 }, // 336
  {  226,  227 }, // 337
  {  225,  227 }, // 338
  {  222,  228 }, // 339
  {  223,  229 }, // 340
  {  228,  230 }, // 341
  {  229,  230 }, // 342
  {  228,  231 }, // 343
  {  225,  231 }, // 344
  {  224,  232 }, // 345
  {  232,  233 }, // 346
  {  226,  233 }, // 347
  {  232,  234 }, // 348
  {  229,  234 }, // 349
  {  235,  236 }, // 350
  {  237,  238 }, // 351
  {  235,  237 }, // 352
  {  236,  239 }, // 353
  {  238,  239 }, // 354
  {  234,  235 }, // 355
  {  233,  236 }, // 356
  {  230,  237 }, // 357
  {  231,  238 }, // 358
  {  227,  239 }, // 359
  {  240,  241 }, // 360
  {  242,  243 }, // 361
  {  240,  242 }, // 362
  {  241,  244 }, // 363
  {  243,  244 }, // 364
  {  240,  245 }, // 365
  {  241,  246 }, // 366
  {  246,  247 }, // 367
  {  245,  247 }, // 368
  {  242,  248 }, // 369
  {  243,  249 }, // 370
  {  248,  250 }, // 371
  {  249,  250 }, // 372
  {  248,  251 }, // 373
  {  245,  251 }, // 374
  {  244,  252 }, // 375
  {  252,  253 }, // 376
  {  246,  253 }, // 377
  {  252,  254 }, // 378
  {  249,  254 }, // 379
  {  255,  256 }, // 380
  {  257,  258 }, // 381
  {  255,  257 }, // 382
  {  256,  259 }, // 383
  {  258,  259 }, // 384
  {  254,  255 }, // 385
  {  253,  256 }, // 386
  {  250,  257 }, // 387
  {  251,  258 }, // 388
  {  247,  259 }, // 389
  {  260,  261 }, // 390
  {  262,  263 }, // 391
  {  260,  262 }, // 392
  {  261,  264 }, // 393
  {  263,  264 }, // 394
  {  260,  265 }, // 395
  {  261,  266 }, // 396
  {  266,  267 }, // 397
  {  265,  267 }, // 398
  {  262,  268 }, // 399
  {  263,  269 }, // 400
  {  268,  270 }, // 401
  {  269,  270 }, // 402
  {  268,  271 }, // 403
  {  265,  271 }, // 404
  {  264,  272 }, // 405
  {  272,  273 }, // 406
  {  266,  273 }, // 407
  {  272,  274 }, // 408
  {  269,  274 }, // 409
  {  275,  276 }, // 410
  {  277,  278 }, // 411
  {  275,  277 }, // 412
  {  276,  279 }, // 413
  {  278,  279 }, // 414
  {  274,  275 }, // 415
  {  273,  276 }, // 416
  {  270,  277 }, // 417
  {  271,  278 }, // 418
  {  267,  279 }, // 419
  {  280,  281 }, // 420
  {  282,  283 }, // 421
  {  280,  282 }, // 422
  {  281,  284 }, // 423
  {  283,  284 }, // 424
  {  280,  285 }, // 425
  {  281,  286 }, // 426
  {  286,  287 }, // 427
  {  285,  287 }, // 428
  {  282,  288 }, // 429
  {  283,  289 }, // 430
  {  288,  290 }, // 431
  {  289,  290 }, // 432
  {  288,  291 }, // 433
  {  285,  291 }, // 434
  {  284,  292 }, // 435
  {  292,  293 }, // 436
  {  286,  293 }, // 437
  {  292,  294 }, // 438
  {  289,  294 }, // 439
  {  295,  296 }, // 440
  {  297,  298 }, // 441
  {  295,  297 }, // 442
  {  296,  299 }, // 443
  {  298,  299 }, // 444
  {  294,  295 }, // 445
  {  293,  296 }, // 446
  {  290,  297 }, // 447
  {  291,  298 }, // 448
  {  287,  299 }, // 449
  {  300,  301 }, // 450
  {  302,  303 }, // 451
  {  300,  302 }, // 452
  {  301,  304 }, // 453
  {  303,  304 }, // 454
  {  300,  305 }, // 455
  {  301,  306 }, // 456
  {  306,  307 }, // 457
  {  305,  307 }, // 458
  {  302,  308 }, // 459
  {  303,  309 }, // 460
  {  308,  310 }, // 461
  {  309,  310 }, // 462
  {  308,  311 }, // 463
  {  305,  311 }, // 464
  {  304,  312 }, // 465
  {  312,  313 }, // 466
  {  306,  313 }, // 467
  {  312,  314 }, // 468
  {  309,  314 }, // 469
  {  315,  316 }, // 470
  {  317,  318 }, // 471
  {  315,  317 }, // 472
  {  316,  319 }, // 473
  {  318,  319 }, // 474
  {  314,  315 }, // 475
  {  313,  316 }, // 476
  {  310,  317 }, // 477
  {  311,  318 }, // 478
  {  307,  319 }, // 479
  {  320,  321 }, // 480
  {  320,  322 }, // 481
  {  321,  323 }, // 482
  {  322,  324 }, // 483
  {  323,  324 }, // 484
  {  325,  326 }, // 485
  {  325,  327 }, // 486
  {  326,  328 }, // 487
  {  327,  329 }, // 488
  {  328,  329 }, // 489
  {  320,  330 }, // 490
  {  321,  331 }, // 491
  {  330,  332 }, // 492
  {  331,  332 }, // 493
  {  325,  333 }, // 494
  {  326,  334 }, // 495
  {  333,  335 }, // 496
  {  334,  335 }, // 497
  {  336,  337 }, // 498
  {  322,  336 }, // 499
  {  330,  337 }, // 500
  {  327,  336 }, // 501
  {  333,  337 }, // 502
  {  338,  339 }, // 503
  {  323,  338 }, // 504
  {  331,  339 }, // 505
  {  328,  338 }, // 506
  {  334,  339 }, // 507
  {  324,  329 }, // 508
  {  332,  335 }, // 509
  {  340,  341 }, // 510
  {  340,  342 }, // 511
  {  341,  343 }, // 512
  {  342,  344 }, // 513
  {  343,  344 }, // 514
  {  345,  346 }, // 515
  {  345,  347 }, // 516
  {  346,  348 }, // 517
  {  347,  349 }, // 518
  {  348,  349 }, // 519
  {  340,  350 }, // 520
  {  341,  351 }, // 521
  {  350,  352 }, // 522
  {  351,  352 }, // 523
  {  345,  353 }, // 524
  {  346,  354 }, // 525
  {  353,  355 }, // 526
  {  354,  355 }, // 527
  {  356,  357 }, // 528
  {  342,  356 }, // 529
  {  350,  357 }, // 530
  {  347,  356 }, // 531
  {  353,  357 }, // 532
  {  358,  359 }, // 533
  {  343,  358 }, // 534
  {  351,  359 }, // 535
  {  348,  358 }, // 536
  {  354,  359 }, // 537
  {  344,  349 }, // 538
  {  352,  355 }, // 539
  {  360,  361 }, // 540
  {  362,  363 }, // 541
  {  362,  364 }, // 542
  {  360,  363 }, // 543
  {  361,  364 }, // 544
  {  365,  366 }, // 545
  {  365,  367 }, // 546
  {  360,  366 }, // 547
  {  361,  367 }, // 548
  {  368,  369 }, // 549
  {  370,  371 }, // 550
  {  370,  372 }, // 551
  {  368,  371 }, // 552
  {  369,  372 }, // 553
  {  373,  374 }, // 554
  {  373,  375 }, // 555
  {  368,  374 }, // 556
  {  369,  375 }, // 557
  {  362,  370 }, // 558
  {  363,  376 }, // 559
  {  371,  376 }, // 560
  {  364,  377 }, // 561
  {  372,  377 }, // 562
  {  365,  373 }, // 563
  {  366,  378 }, // 564
  {  374,  378 }, // 565
  {  367,  379 }, // 566
  {  375,  379 }, // 567
  {  376,  378 }, // 568
  {  377,  379 }, // 569
  {  380,  381 }, // 570
  {  382,  383 }, // 571
  {  382,  384 }, // 572
  {  380,  383 }, // 573
  {  381,  384 }, // 574
  {  385,  386 }, // 575
  {  385,  387 }, // 576
  {  380,  386 }, // 577
  {  381,  387 }, // 578
  {  388,  389 }, // 579
  {  390,  391 }, // 580
  {  390,  392 }, // 581
  {  388,  391 }, // 582
  {  389,  392 }, // 583
  {  393,  394 }, // 584
  {  393,  395 }, // 585
  {  388,  394 }, // 586
  {  389,  395 }, // 587
  {  382,  390 }, // 588
  {  383,  396 }, // 589
  {  391,  396 }, // 590
  {  384,  397 }, // 591
  {  392,  397 }, // 592
  {  385,  393 }, // 593
  {  386,  398 }, // 594
  {  394,  398 }, // 595
  {  387,  399 }, // 596
  {  395,  399 }, // 597
  {  396,  398 }, // 598
  {  397,  399 }, // 599
  {  400,  401 }, // 600
  {  402,  403 }, // 601
  {  402,  404 }, // 602
  {  400,  403 }, // 603
  {  401,  404 }, // 604
  {  405,  406 }, // 605
  {  407,  408 }, // 606
  {  407,  409 }, // 607
  {  405,  408 }, // 608
  {  406,  409 }, // 609
  {  410,  411 }, // 610
  {  410,  412 }, // 611
  {  400,  411 }, // 612
  {  401,  412 }, // 613
  {  413,  414 }, // 614
  {  413,  415 }, // 615
  {  405,  414 }, // 616
  {  406,  415 }, // 617
  {  402,  407 }, // 618
  {  403,  416 }, // 619
  {  408,  416 }, // 620
  {  404,  417 }, // 621
  {  409,  417 }, // 622
  {  410,  413 }, // 623
  {  411,  418 }, // 624
  {  414,  418 }, // 625
  {  412,  419 }, // 626
  {  415,  419 }, // 627
  {  416,  418 }, // 628
  {  417,  419 }, // 629
  {  420,  421 }, // 630
  {  422,  423 }, // 631
  {  422,  424 }, // 632
  {  420,  423 }, // 633
  {  421,  424 }, // 634
  {  425,  426 }, // 635
  {  427,  428 }, // 636
  {  427,  429 }, // 637
  {  425,  428 }, // 638
  {  426,  429 }, // 639
  {  430,  431 }, // 640
  {  430,  432 }, // 641
  {  420,  431 }, // 642
  {  421,  432 }, // 643
  {  433,  434 }, // 644
  {  433,  435 }, // 645
  {  425,  434 }, // 646
  {  426,  435 }, // 647
  {  422,  427 }, // 648
  {  423,  436 }, // 649
  {  428,  436 }, // 650
  {  424,  437 }, // 651
  {  429,  437 }, // 652
  {  430,  433 }, // 653
  {  431,  438 }, // 654
  {  434,  438 }, // 655
  {  432,  439 }, // 656
  {  435,  439 }, // 657
  {  436,  438 }, // 658
  {  437,  439 }, // 659
  {  440,  441 }, // 660
  {  440,  442 }, // 661
  {  441,  443 }, // 662
  {  442,  444 }, // 663
  {  443,  444 }, // 664
  {  440,  445 }, // 665
  {  441,  446 }, // 666
  {  445,  447 }, // 667
  {  446,  447 }, // 668
  {  448,  449 }, // 669
  {  448,  450 }, // 670
  {  449,  451 }, // 671
  {  450,  452 }, // 672
  {  451,  452 }, // 673
  {  448,  453 }, // 674
  {  449,  454 }, // 675
  {  453,  455 }, // 676
  {  454,  455 }, // 677
  {  456,  457 }, // 678
  {  442,  456 }, // 679
  {  445,  457 }, // 680
  {  458,  459 }, // 681
  {  443,  458 }, // 682
  {  446,  459 }, // 683
  {  450,  456 }, // 684
  {  453,  457 }, // 685
  {  451,  458 }, // 686
  {  454,  459 }, // 687
  {  444,  452 }, // 688
  {  447,  455 }, // 689
  {  460,  461 }, // 690
  {  460,  462 }, // 691
  {  461,  463 }, // 692
  {  462,  464 }, // 693
  {  463,  464 }, // 694
  {  460,  465 }, // 695
  {  461,  466 }, // 696
  {  465,  467 }, // 697
  {  466,  467 }, // 698
  {  468,  469 }, // 699
  {  468,  470 }, // 700
  {  469,  471 }, // 701
  {  470,  472 }, // 702
  {  471,  472 }, // 703
  {  468,  473 }, // 704
  {  469,  474 }, // 705
  {  473,  475 }, // 706
  {  474,  475 }, // 707
  {  476,  477 }, // 708
  {  462,  476 }, // 709
  {  465,  477 }, // 710
  {  478,  479 }, // 711
  {  463,  478 }, // 712
  {  466,  479 }, // 713
  {  470,  476 }, // 714
  {  473,  477 }, // 715
  {  471,  478 }, // 716
  {  474,  479 }, // 717
  {  464,  472 }, // 718
  {  467,  475 }, // 719
  {  440,  480 }, // 720
  {  441,  481 }, // 721
  {  480,  482 }, // 722
  {  481,  482 }, // 723
  {    0,  483 }, // 724
  {   20,  483 }, // 725
  {    1,   21 }, // 726
  {    2,  442 }, // 727
  {    3,  480 }, // 728
  {   22,  443 }, // 729
  {   23,  481 }, // 730
  {  444,  483 }, // 731
  {    4,  484 }, // 732
  {   24,  484 }, // 733
  {  482,  484 }, // 734
  {   40,  485 }, // 735
  {   60,  485 }, // 736
  {   41,   61 }, // 737
  {   42,  445 }, // 738
  {   43,  480 }, // 739
  {   62,  446 }, // 740
  {   63,  481 }, // 741
  {  447,  485 }, // 742
  {   44,  486 }, // 743
  {   64,  486 }, // 744
  {  482,  486 }, // 745
  {  448,  487 }, // 746
  {  449,  488 }, // 747
  {  487,  489 }, // 748
  {  488,  489 }, // 749
  {   80,  490 }, // 750
  {  100,  490 }, // 751
  {   81,  101 }, // 752
  {   82,  450 }, // 753
  {   83,  487 }, // 754
  {  102,  451 }, // 755
  {  103,  488 }, // 756
  {  452,  490 }, // 757
  {   84,  491 }, // 758
  {  104,  491 }, // 759
  {  489,  491 }, // 760
  {  120,  492 }, // 761
  {  140,  492 }, // 762
  {  121,  141 }, // 763
  {  122,  453 }, // 764
  {  123,  487 }, // 765
  {  142,  454 }, // 766
  {  143,  488 }, // 767
  {  455,  492 }, // 768
  {  124,  493 }, // 769
  {  144,  493 }, // 770
  {  489,  493 }, // 771
  {  460,  494 }, // 772
  {  461,  495 }, // 773
  {  494,  496 }, // 774
  {  495,  496 }, // 775
  {  160,  497 }, // 776
  {  180,  497 }, // 777
  {  161,  181 }, // 778
  {  162,  462 }, // 779
  {  163,  494 }, // 780
  {  182,  463 }, // 781
  {  183,  495 }, // 782
  {  464,  497 }, // 783
  {  164,  498 }, // 784
  {  184,  498 }, // 785
  {  496,  498 }, // 786
  {  200,  499 }, // 787
  {  220,  499 }, // 788
  {  201,  221 }, // 789
  {  202,  465 }, // 790
  {  203,  494 }, // 791
  {  222,  466 }, // 792
  {  223,  495 }, // 793
  {  467,  499 }, // 794
  {  204,  500 }, // 795
  {  224,  500 }, // 796
  {  496,  500 }, // 797
  {  468,  501 }, // 798
  {  469,  502 }, // 799
  {  501,  503 }, // 800
  {  502,  503 }, // 801
  {  240,  504 }, // 802
  {  260,  504 }, // 803
  {  241,  261 }, // 804
  {  242,  470 }, // 805
  {  243,  501 }, // 806
  {  262,  471 }, // 807
  {  263,  502 }, // 808
  {  472,  504 }, // 809
  {  244,  505 }, // 810
  {  264,  505 }, // 811
  {  503,  505 }, // 812
  {  280,  506 }, // 813
  {  300,  506 }, // 814
  {  281,  301 }, // 815
  {  282,  473 }, // 816
  {  283,  501 }, // 817
  {  302,  474 }, // 818
  {  303,  502 }, // 819
  {  475,  506 }, // 820
  {  284,  507 }, // 821
  {  304,  507 }, // 822
  {  503,  507 }, // 823
  {  508,  509 }, // 824
  {  508,  510 }, // 825
  {  360,  509 }, // 826
  {  361,  510 }, // 827
  {  483,  508 }, // 828
  {    5,  509 }, // 829
  {   25,  510 }, // 830
  {    6,  511 }, // 831
  {   26,  511 }, // 832
  {  362,  511 }, // 833
  {    7,  363 }, // 834
  {   27,  364 }, // 835
  {  512,  513 }, // 836
  {  512,  514 }, // 837
  {  380,  513 }, // 838
  {  381,  514 }, // 839
  {  485,  512 }, // 840
  {   45,  513 }, // 841
  {   65,  514 }, // 842
  {   46,  515 }, // 843
  {   66,  515 }, // 844
  {  382,  515 }, // 845
  {   47,  383 }, // 846
  {   67,  384 }, // 847
  {  490,  508 }, // 848
  {   85,  509 }, // 849
  {  105,  510 }, // 850
  {   86,  516 }, // 851
  {  106,  516 }, // 852
  {  365,  516 }, // 853
  {   87,  366 }, // 854
  {  107,  367 }, // 855
  {  492,  512 }, // 856
  {  125,  513 }, // 857
  {  145,  514 }, // 858
  {  126,  517 }, // 859
  {  146,  517 }, // 860
  {  385,  517 }, // 861
  {  127,  386 }, // 862
  {  147,  387 }, // 863
  {  518,  519 }, // 864
  {  518,  520 }, // 865
  {  368,  519 }, // 866
  {  369,  520 }, // 867
  {  497,  518 }, // 868
  {  165,  519 }, // 869
  {  185,  520 }, // 870
  {  166,  521 }, // 871
  {  186,  521 }, // 872
  {  370,  521 }, // 873
  {  167,  371 }, // 874
  {  187,  372 }, // 875
  {  522,  523 }, // 876
  {  522,  524 }, // 877
  {  388,  523 }, // 878
  {  389,  524 }, // 879
  {  499,  522 }, // 880
  {  205,  523 }, // 881
  {  225,  524 }, // 882
  {  206,  525 }, // 883
  {  226,  525 }, // 884
  {  390,  525 }, // 885
  {  207,  391 }, // 886
  {  227,  392 }, // 887
  {  504,  518 }, // 888
  {  245,  519 }, // 889
  {  265,  520 }, // 890
  {  246,  526 }, // 891
  {  266,  526 }, // 892
  {  373,  526 }, // 893
  {  247,  374 }, // 894
  {  267,  375 }, // 895
  {  506,  522 }, // 896
  {  285,  523 }, // 897
  {  305,  524 }, // 898
  {  286,  527 }, // 899
  {  306,  527 }, // 900
  {  393,  527 }, // 901
  {  287,  394 }, // 902
  {  307,  395 }, // 903
  {  456,  528 }, // 904
  {  457,  529 }, // 905
  {  528,  530 }, // 906
  {  529,  530 }, // 907
  {    8,  528 }, // 908
  {   48,  529 }, // 909
  {    9,   49 }, // 910
  {  530,  531 }, // 911
  {   10,  531 }, // 912
  {   50,  531 }, // 913
  {  458,  532 }, // 914
  {  459,  533 }, // 915
  {  532,  534 }, // 916
  {  533,  534 }, // 917
  {   28,  532 }, // 918
  {   68,  533 }, // 919
  {   29,   69 }, // 920
  {  534,  535 }, // 921
  {   30,  535 }, // 922
  {   70,  535 }, // 923
  {   88,  528 }, // 924
  {  128,  529 }, // 925
  {   89,  129 }, // 926
  {  530,  536 }, // 927
  {   90,  536 }, // 928
  {  130,  536 }, // 929
  {  108,  532 }, // 930
  {  148,  533 }, // 931
  {  109,  149 }, // 932
  {  534,  537 }, // 933
  {  110,  537 }, // 934
  {  150,  537 }, // 935
  {  476,  538 }, // 936
  {  477,  539 }, // 937
  {  538,  540 }, // 938
  {  539,  540 }, // 939
  {  168,  538 }, // 940
  {  208,  539 }, // 941
  {  169,  209 }, // 942
  {  540,  541 }, // 943
  {  170,  541 }, // 944
  {  210,  541 }, // 945
  {  478,  542 }, // 946
  {  479,  543 }, // 947
  {  542,  544 }, // 948
  {  543,  544 }, // 949
  {  188,  542 }, // 950
  {  228,  543 }, // 951
  {  189,  229 }, // 952
  {  544,  545 }, // 953
  {  190,  545 }, // 954
  {  230,  545 }, // 955
  {  248,  538 }, // 956
  {  288,  539 }, // 957
  {  249,  289 }, // 958
  {  540,  546 }, // 959
  {  250,  546 }, // 960
  {  290,  546 }, // 961
  {  268,  542 }, // 962
  {  308,  543 }, // 963
  {  269,  309 }, // 964
  {  544,  547 }, // 965
  {  270,  547 }, // 966
  {  310,  547 }, // 967
  {   11,   91 }, // 968
  {   31,  111 }, // 969
  {   51,  131 }, // 970
  {   71,  151 }, // 971
  {  171,  251 }, // 972
  {  191,  271 }, // 973
  {  211,  291 }, // 974
  {  231,  311 }, // 975
  {  400,  548 }, // 976
  {  401,  549 }, // 977
  {  548,  550 }, // 978
  {  549,  550 }, // 979
  {  402,  484 }, // 980
  {   12,  403 }, // 981
  {   32,  404 }, // 982
  {   13,  548 }, // 983
  {   33,  549 }, // 984
  {  511,  550 }, // 985
  {  405,  551 }, // 986
  {  406,  552 }, // 987
  {  551,  553 }, // 988
  {  552,  553 }, // 989
  {  407,  486 }, // 990
  {   52,  408 }, // 991
  {   72,  409 }, // 992
  {   53,  551 }, // 993
  {   73,  552 }, // 994
  {  515,  553 }, // 995
  {  420,  554 }, // 996
  {  421,  555 }, // 997
  {  554,  556 }, // 998
  {  555,  556 }, // 999
  {  422,  491 }, //1000
  {   92,  423 }, //1001
  {  112,  424 }, //1002
  {   93,  554 }, //1003
  {  113,  555 }, //1004
  {  516,  556 }, //1005
  {  425,  557 }, //1006
  {  426,  558 }, //1007
  {  557,  559 }, //1008
  {  558,  559 }, //1009
  {  427,  493 }, //1010
  {  132,  428 }, //1011
  {  152,  429 }, //1012
  {  133,  557 }, //1013
  {  153,  558 }, //1014
  {  517,  559 }, //1015
  {  410,  498 }, //1016
  {  172,  411 }, //1017
  {  192,  412 }, //1018
  {  173,  548 }, //1019
  {  193,  549 }, //1020
  {  521,  550 }, //1021
  {  413,  500 }, //1022
  {  212,  414 }, //1023
  {  232,  415 }, //1024
  {  213,  551 }, //1025
  {  233,  552 }, //1026
  {  525,  553 }, //1027
  {  430,  505 }, //1028
  {  252,  431 }, //1029
  {  272,  432 }, //1030
  {  253,  554 }, //1031
  {  273,  555 }, //1032
  {  526,  556 }, //1033
  {  433,  507 }, //1034
  {  292,  434 }, //1035
  {  312,  435 }, //1036
  {  293,  557 }, //1037
  {  313,  558 }, //1038
  {  527,  559 }, //1039
  {  416,  560 }, //1040
  {   14,  560 }, //1041
  {   54,  560 }, //1042
  {  417,  561 }, //1043
  {   34,  561 }, //1044
  {   74,  561 }, //1045
  {  436,  562 }, //1046
  {   94,  562 }, //1047
  {  134,  562 }, //1048
  {  437,  563 }, //1049
  {  114,  563 }, //1050
  {  154,  563 }, //1051
  {  418,  564 }, //1052
  {  174,  564 }, //1053
  {  214,  564 }, //1054
  {  419,  565 }, //1055
  {  194,  565 }, //1056
  {  234,  565 }, //1057
  {  438,  566 }, //1058
  {  254,  566 }, //1059
  {  294,  566 }, //1060
  {  439,  567 }, //1061
  {  274,  567 }, //1062
  {  314,  567 }, //1063
  {  320,  568 }, //1064
  {  321,  569 }, //1065
  {  568,  570 }, //1066
  {  569,  570 }, //1067
  {   15,  571 }, //1068
  {  175,  571 }, //1069
  {   16,  176 }, //1070
  {   17,  322 }, //1071
  {   18,  568 }, //1072
  {  177,  323 }, //1073
  {  178,  569 }, //1074
  {  324,  571 }, //1075
  {   19,  572 }, //1076
  {  179,  572 }, //1077
  {  570,  572 }, //1078
  {  340,  573 }, //1079
  {  341,  574 }, //1080
  {  573,  575 }, //1081
  {  574,  575 }, //1082
  {   35,  576 }, //1083
  {  195,  576 }, //1084
  {   36,  196 }, //1085
  {   37,  342 }, //1086
  {   38,  573 }, //1087
  {  197,  343 }, //1088
  {  198,  574 }, //1089
  {  344,  576 }, //1090
  {   39,  577 }, //1091
  {  199,  577 }, //1092
  {  575,  577 }, //1093
  {  325,  578 }, //1094
  {  326,  579 }, //1095
  {  578,  580 }, //1096
  {  579,  580 }, //1097
  {   55,  581 }, //1098
  {  215,  581 }, //1099
  {   56,  216 }, //1100
  {   57,  327 }, //1101
  {   58,  578 }, //1102
  {  217,  328 }, //1103
  {  218,  579 }, //1104
  {  329,  581 }, //1105
  {   59,  582 }, //1106
  {  219,  582 }, //1107
  {  580,  582 }, //1108
  {  345,  583 }, //1109
  {  346,  584 }, //1110
  {  583,  585 }, //1111
  {  584,  585 }, //1112
  {   75,  586 }, //1113
  {  235,  586 }, //1114
  {   76,  236 }, //1115
  {   77,  347 }, //1116
  {   78,  583 }, //1117
  {  237,  348 }, //1118
  {  238,  584 }, //1119
  {  349,  586 }, //1120
  {   79,  587 }, //1121
  {  239,  587 }, //1122
  {  585,  587 }, //1123
  {   95,  588 }, //1124
  {  255,  588 }, //1125
  {   96,  256 }, //1126
  {   97,  330 }, //1127
  {   98,  568 }, //1128
  {  257,  331 }, //1129
  {  258,  569 }, //1130
  {  332,  588 }, //1131
  {   99,  589 }, //1132
  {  259,  589 }, //1133
  {  570,  589 }, //1134
  {  115,  590 }, //1135
  {  275,  590 }, //1136
  {  116,  276 }, //1137
  {  117,  350 }, //1138
  {  118,  573 }, //1139
  {  277,  351 }, //1140
  {  278,  574 }, //1141
  {  352,  590 }, //1142
  {  119,  591 }, //1143
  {  279,  591 }, //1144
  {  575,  591 }, //1145
  {  135,  592 }, //1146
  {  295,  592 }, //1147
  {  136,  296 }, //1148
  {  137,  333 }, //1149
  {  138,  578 }, //1150
  {  297,  334 }, //1151
  {  298,  579 }, //1152
  {  335,  592 }, //1153
  {  139,  593 }, //1154
  {  299,  593 }, //1155
  {  580,  593 }, //1156
  {  155,  594 }, //1157
  {  315,  594 }, //1158
  {  156,  316 }, //1159
  {  157,  353 }, //1160
  {  158,  583 }, //1161
  {  317,  354 }, //1162
  {  318,  584 }, //1163
  {  355,  594 }, //1164
  {  159,  595 }, //1165
  {  319,  595 }, //1166
  {  585,  595 }, //1167
  {  560,  596 }, //1168
  {  564,  596 }, //1169
  {  571,  596 }, //1170
  {  561,  597 }, //1171
  {  565,  597 }, //1172
  {  576,  597 }, //1173
  {  581,  596 }, //1174
  {  586,  597 }, //1175
  {  562,  598 }, //1176
  {  566,  598 }, //1177
  {  588,  598 }, //1178
  {  563,  599 }, //1179
  {  567,  599 }, //1180
  {  590,  599 }, //1181
  {  592,  598 }, //1182
  {  594,  599 }, //1183
  {  336,  531 }, //1184
  {  337,  536 }, //1185
  {  356,  535 }, //1186
  {  357,  537 }, //1187
  {  338,  541 }, //1188
  {  339,  546 }, //1189
  {  358,  545 }, //1190
  {  359,  547 }, //1191
  {  376,  572 }, //1192
  {  377,  577 }, //1193
  {  396,  582 }, //1194
  {  397,  587 }, //1195
  {  378,  589 }, //1196
  {  379,  591 }, //1197
  {  398,  593 }, //1198
  {  399,  595 }, //1199
};
int cellToEdgeK600[600][6] = { // Edges on each cell, in cell order
  {    0,    1,    3,  289,  292,  357 }, //   0
  {    0,    1,    4,  289,  294,  359 }, //   1
  {    0,    2,    3,  290,  292,  417 }, //   2
  {    0,    2,    5,  290,  295,  419 }, //   3
  {    0,    4,    5,  294,  295,  489 }, //   4
  {    1,    3,   11,  357,  362,  470 }, //   5
  {    1,    4,   10,  359,  360,  493 }, //   6
  {    1,   10,   11,  360,  362,  697 }, //   7
  {    2,    3,    8,  417,  420,  469 }, //   8
  {    2,    5,    9,  419,  422,  543 }, //   9
  {    2,    8,    9,  420,  422,  665 }, //  10
  {    3,    8,   11,  469,  470,  667 }, //  11
  {    4,    5,    7,  489,  491,  541 }, //  12
  {    4,    7,   10,  491,  493,  639 }, //  13
  {    5,    7,    9,  541,  543,  637 }, //  14
  {    6,    7,    9,  569,  572,  637 }, //  15
  {    6,    7,   10,  569,  574,  639 }, //  16
  {    6,    8,    9,  570,  572,  665 }, //  17
  {    6,    8,   11,  570,  575,  667 }, //  18
  {    6,   10,   11,  574,  575,  697 }, //  19
  {   12,   13,   15,  289,  293,  358 }, //  20
  {   12,   13,   16,  289,  294,  359 }, //  21
  {   12,   14,   15,  291,  293,  424 }, //  22
  {   12,   14,   17,  291,  296,  426 }, //  23
  {   12,   16,   17,  294,  296,  490 }, //  24
  {   13,   15,   23,  358,  363,  472 }, //  25
  {   13,   16,   22,  359,  361,  494 }, //  26
  {   13,   22,   23,  361,  363,  699 }, //  27
  {   14,   15,   20,  424,  427,  471 }, //  28
  {   14,   17,   21,  426,  429,  546 }, //  29
  {   14,   20,   21,  427,  429,  669 }, //  30
  {   15,   20,   23,  471,  472,  671 }, //  31
  {   16,   17,   19,  490,  492,  544 }, //  32
  {   16,   19,   22,  492,  494,  643 }, //  33
  {   17,   19,   21,  544,  546,  641 }, //  34
  {   18,   19,   21,  578,  581,  641 }, //  35
  {   18,   19,   22,  578,  583,  643 }, //  36
  {   18,   20,   21,  579,  581,  669 }, //  37
  {   18,   20,   23,  579,  584,  671 }, //  38
  {   18,   22,   23,  583,  584,  699 }, //  39
  {   24,   25,   27,  297,  300,  365 }, //  40
  {   24,   25,   28,  297,  302,  367 }, //  41
  {   24,   26,   27,  298,  300,  418 }, //  42
  {   24,   26,   29,  298,  303,  419 }, //  43
  {   24,   28,   29,  302,  303,  496 }, //  44
  {   25,   27,   35,  365,  370,  475 }, //  45
  {   25,   28,   34,  367,  368,  500 }, //  46
  {   25,   34,   35,  368,  370,  702 }, //  47
  {   26,   27,   32,  418,  421,  474 }, //  48
  {   26,   29,   33,  419,  422,  543 }, //  49
  {   26,   32,   33,  421,  422,  672 }, //  50
  {   27,   32,   35,  474,  475,  674 }, //  51
  {   28,   29,   31,  496,  498,  542 }, //  52
  {   28,   31,   34,  498,  500,  646 }, //  53
  {   29,   31,   33,  542,  543,  644 }, //  54
  {   30,   31,   33,  587,  590,  644 }, //  55
  {   30,   31,   34,  587,  592,  646 }, //  56
  {   30,   32,   33,  588,  590,  672 }, //  57
  {   30,   32,   35,  588,  593,  674 }, //  58
  {   30,   34,   35,  592,  593,  702 }, //  59
  {   36,   37,   39,  297,  301,  366 }, //  60
  {   36,   37,   40,  297,  302,  367 }, //  61
  {   36,   38,   39,  299,  301,  425 }, //  62
  {   36,   38,   41,  299,  304,  426 }, //  63
  {   36,   40,   41,  302,  304,  497 }, //  64
  {   37,   39,   47,  366,  371,  477 }, //  65
  {   37,   40,   46,  367,  369,  501 }, //  66
  {   37,   46,   47,  369,  371,  704 }, //  67
  {   38,   39,   44,  425,  428,  476 }, //  68
  {   38,   41,   45,  426,  429,  546 }, //  69
  {   38,   44,   45,  428,  429,  675 }, //  70
  {   39,   44,   47,  476,  477,  677 }, //  71
  {   40,   41,   43,  497,  499,  545 }, //  72
  {   40,   43,   46,  499,  501,  649 }, //  73
  {   41,   43,   45,  545,  546,  647 }, //  74
  {   42,   43,   45,  596,  599,  647 }, //  75
  {   42,   43,   46,  596,  601,  649 }, //  76
  {   42,   44,   45,  597,  599,  675 }, //  77
  {   42,   44,   47,  597,  602,  677 }, //  78
  {   42,   46,   47,  601,  602,  704 }, //  79
  {   48,   49,   51,  306,  309,  372 }, //  80
  {   48,   49,   52,  306,  311,  374 }, //  81
  {   48,   50,   51,  307,  309,  430 }, //  82
  {   48,   50,   53,  307,  312,  432 }, //  83
  {   48,   52,   53,  311,  312,  503 }, //  84
  {   49,   51,   59,  372,  377,  470 }, //  85
  {   49,   52,   58,  374,  375,  507 }, //  86
  {   49,   58,   59,  375,  377,  707 }, //  87
  {   50,   51,   56,  430,  433,  469 }, //  88
  {   50,   53,   57,  432,  435,  550 }, //  89
  {   50,   56,   57,  433,  435,  666 }, //  90
  {   51,   56,   59,  469,  470,  667 }, //  91
  {   52,   53,   55,  503,  505,  548 }, //  92
  {   52,   55,   58,  505,  507,  653 }, //  93
  {   53,   55,   57,  548,  550,  651 }, //  94
  {   54,   55,   57,  604,  607,  651 }, //  95
  {   54,   55,   58,  604,  609,  653 }, //  96
  {   54,   56,   57,  605,  607,  666 }, //  97
  {   54,   56,   59,  605,  610,  667 }, //  98
  {   54,   58,   59,  609,  610,  707 }, //  99
  {   60,   61,   63,  306,  310,  373 }, // 100
  {   60,   61,   64,  306,  311,  374 }, // 101
  {   60,   62,   63,  308,  310,  436 }, // 102
  {   60,   62,   65,  308,  313,  438 }, // 103
  {   60,   64,   65,  311,  313,  504 }, // 104
  {   61,   63,   71,  373,  378,  472 }, // 105
  {   61,   64,   70,  374,  376,  508 }, // 106
  {   61,   70,   71,  376,  378,  709 }, // 107
  {   62,   63,   68,  436,  439,  471 }, // 108
  {   62,   65,   69,  438,  441,  553 }, // 109
  {   62,   68,   69,  439,  441,  670 }, // 110
  {   63,   68,   71,  471,  472,  671 }, // 111
  {   64,   65,   67,  504,  506,  551 }, // 112
  {   64,   67,   70,  506,  508,  657 }, // 113
  {   65,   67,   69,  551,  553,  655 }, // 114
  {   66,   67,   69,  612,  615,  655 }, // 115
  {   66,   67,   70,  612,  617,  657 }, // 116
  {   66,   68,   69,  613,  615,  670 }, // 117
  {   66,   68,   71,  613,  618,  671 }, // 118
  {   66,   70,   71,  617,  618,  709 }, // 119
  {   72,   73,   75,  314,  317,  379 }, // 120
  {   72,   73,   76,  314,  319,  381 }, // 121
  {   72,   74,   75,  315,  317,  431 }, // 122
  {   72,   74,   77,  315,  320,  432 }, // 123
  {   72,   76,   77,  319,  320,  510 }, // 124
  {   73,   75,   83,  379,  384,  475 }, // 125
  {   73,   76,   82,  381,  382,  514 }, // 126
  {   73,   82,   83,  382,  384,  712 }, // 127
  {   74,   75,   80,  431,  434,  474 }, // 128
  {   74,   77,   81,  432,  435,  550 }, // 129
  {   74,   80,   81,  434,  435,  673 }, // 130
  {   75,   80,   83,  474,  475,  674 }, // 131
  {   76,   77,   79,  510,  512,  549 }, // 132
  {   76,   79,   82,  512,  514,  660 }, // 133
  {   77,   79,   81,  549,  550,  658 }, // 134
  {   78,   79,   81,  620,  623,  658 }, // 135
  {   78,   79,   82,  620,  625,  660 }, // 136
  {   78,   80,   81,  621,  623,  673 }, // 137
  {   78,   80,   83,  621,  626,  674 }, // 138
  {   78,   82,   83,  625,  626,  712 }, // 139
  {   84,   85,   87,  314,  318,  380 }, // 140
  {   84,   85,   88,  314,  319,  381 }, // 141
  {   84,   86,   87,  316,  318,  437 }, // 142
  {   84,   86,   89,  316,  321,  438 }, // 143
  {   84,   88,   89,  319,  321,  511 }, // 144
  {   85,   87,   95,  380,  385,  477 }, // 145
  {   85,   88,   94,  381,  383,  515 }, // 146
  {   85,   94,   95,  383,  385,  714 }, // 147
  {   86,   87,   92,  437,  440,  476 }, // 148
  {   86,   89,   93,  438,  441,  553 }, // 149
  {   86,   92,   93,  440,  441,  676 }, // 150
  {   87,   92,   95,  476,  477,  677 }, // 151
  {   88,   89,   91,  511,  513,  552 }, // 152
  {   88,   91,   94,  513,  515,  663 }, // 153
  {   89,   91,   93,  552,  553,  661 }, // 154
  {   90,   91,   93,  628,  631,  661 }, // 155
  {   90,   91,   94,  628,  633,  663 }, // 156
  {   90,   92,   93,  629,  631,  676 }, // 157
  {   90,   92,   95,  629,  634,  677 }, // 158
  {   90,   94,   95,  633,  634,  714 }, // 159
  {   96,   97,   99,  323,  326,  387 }, // 160
  {   96,   97,  100,  323,  328,  389 }, // 161
  {   96,   98,   99,  324,  326,  443 }, // 162
  {   96,   98,  101,  324,  329,  445 }, // 163
  {   96,  100,  101,  328,  329,  516 }, // 164
  {   97,   99,  107,  387,  392,  480 }, // 165
  {   97,  100,  106,  389,  390,  520 }, // 166
  {   97,  106,  107,  390,  392,  698 }, // 167
  {   98,   99,  104,  443,  446,  479 }, // 168
  {   98,  101,  105,  445,  448,  557 }, // 169
  {   98,  104,  105,  446,  448,  679 }, // 170
  {   99,  104,  107,  479,  480,  681 }, // 171
  {  100,  101,  103,  516,  518,  555 }, // 172
  {  100,  103,  106,  518,  520,  639 }, // 173
  {  101,  103,  105,  555,  557,  638 }, // 174
  {  102,  103,  105,  569,  573,  638 }, // 175
  {  102,  103,  106,  569,  574,  639 }, // 176
  {  102,  104,  105,  571,  573,  679 }, // 177
  {  102,  104,  107,  571,  576,  681 }, // 178
  {  102,  106,  107,  574,  576,  698 }, // 179
  {  108,  109,  111,  323,  327,  388 }, // 180
  {  108,  109,  112,  323,  328,  389 }, // 181
  {  108,  110,  111,  325,  327,  450 }, // 182
  {  108,  110,  113,  325,  330,  452 }, // 183
  {  108,  112,  113,  328,  330,  517 }, // 184
  {  109,  111,  119,  388,  393,  482 }, // 185
  {  109,  112,  118,  389,  391,  521 }, // 186
  {  109,  118,  119,  391,  393,  700 }, // 187
  {  110,  111,  116,  450,  453,  481 }, // 188
  {  110,  113,  117,  452,  455,  560 }, // 189
  {  110,  116,  117,  453,  455,  683 }, // 190
  {  111,  116,  119,  481,  482,  685 }, // 191
  {  112,  113,  115,  517,  519,  558 }, // 192
  {  112,  115,  118,  519,  521,  643 }, // 193
  {  113,  115,  117,  558,  560,  642 }, // 194
  {  114,  115,  117,  578,  582,  642 }, // 195
  {  114,  115,  118,  578,  583,  643 }, // 196
  {  114,  116,  117,  580,  582,  683 }, // 197
  {  114,  116,  119,  580,  585,  685 }, // 198
  {  114,  118,  119,  583,  585,  700 }, // 199
  {  120,  121,  123,  331,  334,  395 }, // 200
  {  120,  121,  124,  331,  336,  397 }, // 201
  {  120,  122,  123,  332,  334,  444 }, // 202
  {  120,  122,  125,  332,  337,  445 }, // 203
  {  120,  124,  125,  336,  337,  522 }, // 204
  {  121,  123,  131,  395,  400,  485 }, // 205
  {  121,  124,  130,  397,  398,  526 }, // 206
  {  121,  130,  131,  398,  400,  703 }, // 207
  {  122,  123,  128,  444,  447,  484 }, // 208
  {  122,  125,  129,  445,  448,  557 }, // 209
  {  122,  128,  129,  447,  448,  686 }, // 210
  {  123,  128,  131,  484,  485,  688 }, // 211
  {  124,  125,  127,  522,  524,  556 }, // 212
  {  124,  127,  130,  524,  526,  646 }, // 213
  {  125,  127,  129,  556,  557,  645 }, // 214
  {  126,  127,  129,  587,  591,  645 }, // 215
  {  126,  127,  130,  587,  592,  646 }, // 216
  {  126,  128,  129,  589,  591,  686 }, // 217
  {  126,  128,  131,  589,  594,  688 }, // 218
  {  126,  130,  131,  592,  594,  703 }, // 219
  {  132,  133,  135,  331,  335,  396 }, // 220
  {  132,  133,  136,  331,  336,  397 }, // 221
  {  132,  134,  135,  333,  335,  451 }, // 222
  {  132,  134,  137,  333,  338,  452 }, // 223
  {  132,  136,  137,  336,  338,  523 }, // 224
  {  133,  135,  143,  396,  401,  487 }, // 225
  {  133,  136,  142,  397,  399,  527 }, // 226
  {  133,  142,  143,  399,  401,  705 }, // 227
  {  134,  135,  140,  451,  454,  486 }, // 228
  {  134,  137,  141,  452,  455,  560 }, // 229
  {  134,  140,  141,  454,  455,  689 }, // 230
  {  135,  140,  143,  486,  487,  691 }, // 231
  {  136,  137,  139,  523,  525,  559 }, // 232
  {  136,  139,  142,  525,  527,  649 }, // 233
  {  137,  139,  141,  559,  560,  648 }, // 234
  {  138,  139,  141,  596,  600,  648 }, // 235
  {  138,  139,  142,  596,  601,  649 }, // 236
  {  138,  140,  141,  598,  600,  689 }, // 237
  {  138,  140,  143,  598,  603,  691 }, // 238
  {  138,  142,  143,  601,  603,  705 }, // 239
  {  144,  145,  147,  340,  343,  402 }, // 240
  {  144,  145,  148,  340,  345,  404 }, // 241
  {  144,  146,  147,  341,  343,  456 }, // 242
  {  144,  146,  149,  341,  346,  458 }, // 243
  {  144,  148,  149,  345,  346,  528 }, // 244
  {  145,  147,  155,  402,  407,  480 }, // 245
  {  145,  148,  154,  404,  405,  532 }, // 246
  {  145,  154,  155,  405,  407,  708 }, // 247
  {  146,  147,  152,  456,  459,  479 }, // 248
  {  146,  149,  153,  458,  461,  564 }, // 249
  {  146,  152,  153,  459,  461,  680 }, // 250
  {  147,  152,  155,  479,  480,  681 }, // 251
  {  148,  149,  151,  528,  530,  562 }, // 252
  {  148,  151,  154,  530,  532,  653 }, // 253
  {  149,  151,  153,  562,  564,  652 }, // 254
  {  150,  151,  153,  604,  608,  652 }, // 255
  {  150,  151,  154,  604,  609,  653 }, // 256
  {  150,  152,  153,  606,  608,  680 }, // 257
  {  150,  152,  155,  606,  611,  681 }, // 258
  {  150,  154,  155,  609,  611,  708 }, // 259
  {  156,  157,  159,  340,  344,  403 }, // 260
  {  156,  157,  160,  340,  345,  404 }, // 261
  {  156,  158,  159,  342,  344,  462 }, // 262
  {  156,  158,  161,  342,  347,  464 }, // 263
  {  156,  160,  161,  345,  347,  529 }, // 264
  {  157,  159,  167,  403,  408,  482 }, // 265
  {  157,  160,  166,  404,  406,  533 }, // 266
  {  157,  166,  167,  406,  408,  710 }, // 267
  {  158,  159,  164,  462,  465,  481 }, // 268
  {  158,  161,  165,  464,  467,  567 }, // 269
  {  158,  164,  165,  465,  467,  684 }, // 270
  {  159,  164,  167,  481,  482,  685 }, // 271
  {  160,  161,  163,  529,  531,  565 }, // 272
  {  160,  163,  166,  531,  533,  657 }, // 273
  {  161,  163,  165,  565,  567,  656 }, // 274
  {  162,  163,  165,  612,  616,  656 }, // 275
  {  162,  163,  166,  612,  617,  657 }, // 276
  {  162,  164,  165,  614,  616,  684 }, // 277
  {  162,  164,  167,  614,  619,  685 }, // 278
  {  162,  166,  167,  617,  619,  710 }, // 279
  {  168,  169,  171,  348,  351,  409 }, // 280
  {  168,  169,  172,  348,  353,  411 }, // 281
  {  168,  170,  171,  349,  351,  457 }, // 282
  {  168,  170,  173,  349,  354,  458 }, // 283
  {  168,  172,  173,  353,  354,  534 }, // 284
  {  169,  171,  179,  409,  414,  485 }, // 285
  {  169,  172,  178,  411,  412,  538 }, // 286
  {  169,  178,  179,  412,  414,  713 }, // 287
  {  170,  171,  176,  457,  460,  484 }, // 288
  {  170,  173,  177,  458,  461,  564 }, // 289
  {  170,  176,  177,  460,  461,  687 }, // 290
  {  171,  176,  179,  484,  485,  688 }, // 291
  {  172,  173,  175,  534,  536,  563 }, // 292
  {  172,  175,  178,  536,  538,  660 }, // 293
  {  173,  175,  177,  563,  564,  659 }, // 294
  {  174,  175,  177,  620,  624,  659 }, // 295
  {  174,  175,  178,  620,  625,  660 }, // 296
  {  174,  176,  177,  622,  624,  687 }, // 297
  {  174,  176,  179,  622,  627,  688 }, // 298
  {  174,  178,  179,  625,  627,  713 }, // 299
  {  180,  181,  183,  348,  352,  410 }, // 300
  {  180,  181,  184,  348,  353,  411 }, // 301
  {  180,  182,  183,  350,  352,  463 }, // 302
  {  180,  182,  185,  350,  355,  464 }, // 303
  {  180,  184,  185,  353,  355,  535 }, // 304
  {  181,  183,  191,  410,  415,  487 }, // 305
  {  181,  184,  190,  411,  413,  539 }, // 306
  {  181,  190,  191,  413,  415,  715 }, // 307
  {  182,  183,  188,  463,  466,  486 }, // 308
  {  182,  185,  189,  464,  467,  567 }, // 309
  {  182,  188,  189,  466,  467,  690 }, // 310
  {  183,  188,  191,  486,  487,  691 }, // 311
  {  184,  185,  187,  535,  537,  566 }, // 312
  {  184,  187,  190,  537,  539,  663 }, // 313
  {  185,  187,  189,  566,  567,  662 }, // 314
  {  186,  187,  189,  628,  632,  662 }, // 315
  {  186,  187,  190,  628,  633,  663 }, // 316
  {  186,  188,  189,  630,  632,  690 }, // 317
  {  186,  188,  191,  630,  635,  691 }, // 318
  {  186,  190,  191,  633,  635,  715 }, // 319
  {  192,  194,  196,  568,  570,  605 }, // 320
  {  192,  194,  198,  568,  571,  606 }, // 321
  {  192,  196,  200,  570,  572,  665 }, // 322
  {  192,  198,  202,  571,  573,  679 }, // 323
  {  192,  200,  202,  572,  573,  692 }, // 324
  {  193,  195,  197,  586,  588,  621 }, // 325
  {  193,  195,  199,  586,  589,  622 }, // 326
  {  193,  197,  200,  588,  590,  672 }, // 327
  {  193,  199,  202,  589,  591,  686 }, // 328
  {  193,  200,  202,  590,  591,  692 }, // 329
  {  194,  196,  201,  605,  607,  666 }, // 330
  {  194,  198,  203,  606,  608,  680 }, // 331
  {  194,  201,  203,  607,  608,  694 }, // 332
  {  195,  197,  201,  621,  623,  673 }, // 333
  {  195,  199,  203,  622,  624,  687 }, // 334
  {  195,  201,  203,  623,  624,  694 }, // 335
  {  196,  197,  200,  664,  665,  672 }, // 336
  {  196,  197,  201,  664,  666,  673 }, // 337
  {  198,  199,  202,  678,  679,  686 }, // 338
  {  198,  199,  203,  678,  680,  687 }, // 339
  {  204,  206,  208,  577,  579,  613 }, // 340
  {  204,  206,  210,  577,  580,  614 }, // 341
  {  204,  208,  212,  579,  581,  669 }, // 342
  {  204,  210,  214,  580,  582,  683 }, // 343
  {  204,  212,  214,  581,  582,  693 }, // 344
  {  205,  207,  209,  595,  597,  629 }, // 345
  {  205,  207,  211,  595,  598,  630 }, // 346
  {  205,  209,  212,  597,  599,  675 }, // 347
  {  205,  211,  214,  598,  600,  689 }, // 348
  {  205,  212,  214,  599,  600,  693 }, // 349
  {  206,  208,  213,  613,  615,  670 }, // 350
  {  206,  210,  215,  614,  616,  684 }, // 351
  {  206,  213,  215,  615,  616,  695 }, // 352
  {  207,  209,  213,  629,  631,  676 }, // 353
  {  207,  211,  215,  630,  632,  690 }, // 354
  {  207,  213,  215,  631,  632,  695 }, // 355
  {  208,  209,  212,  668,  669,  675 }, // 356
  {  208,  209,  213,  668,  670,  676 }, // 357
  {  210,  211,  214,  682,  683,  689 }, // 358
  {  210,  211,  215,  682,  684,  690 }, // 359
  {  216,  217,  224,  356,  362,  377 }, // 360
  {  216,  217,  225,  356,  363,  378 }, // 361
  {  216,  220,  221,  360,  361,  696 }, // 362
  {  216,  220,  224,  360,  362,  697 }, // 363
  {  216,  221,  225,  361,  363,  699 }, // 364
  {  217,  222,  223,  375,  376,  706 }, // 365
  {  217,  222,  224,  375,  377,  707 }, // 366
  {  217,  223,  225,  376,  378,  709 }, // 367
  {  218,  219,  226,  386,  392,  407 }, // 368
  {  218,  219,  227,  386,  393,  408 }, // 369
  {  218,  220,  221,  390,  391,  696 }, // 370
  {  218,  220,  226,  390,  392,  698 }, // 371
  {  218,  221,  227,  391,  393,  700 }, // 372
  {  219,  222,  223,  405,  406,  706 }, // 373
  {  219,  222,  226,  405,  407,  708 }, // 374
  {  219,  223,  227,  406,  408,  710 }, // 375
  {  220,  224,  226,  697,  698,  716 }, // 376
  {  221,  225,  227,  699,  700,  717 }, // 377
  {  222,  224,  226,  707,  708,  716 }, // 378
  {  223,  225,  227,  709,  710,  717 }, // 379
  {  228,  229,  236,  364,  370,  384 }, // 380
  {  228,  229,  237,  364,  371,  385 }, // 381
  {  228,  232,  233,  368,  369,  701 }, // 382
  {  228,  232,  236,  368,  370,  702 }, // 383
  {  228,  233,  237,  369,  371,  704 }, // 384
  {  229,  234,  235,  382,  383,  711 }, // 385
  {  229,  234,  236,  382,  384,  712 }, // 386
  {  229,  235,  237,  383,  385,  714 }, // 387
  {  230,  231,  238,  394,  400,  414 }, // 388
  {  230,  231,  239,  394,  401,  415 }, // 389
  {  230,  232,  233,  398,  399,  701 }, // 390
  {  230,  232,  238,  398,  400,  703 }, // 391
  {  230,  233,  239,  399,  401,  705 }, // 392
  {  231,  234,  235,  412,  413,  711 }, // 393
  {  231,  234,  238,  412,  414,  713 }, // 394
  {  231,  235,  239,  413,  415,  715 }, // 395
  {  232,  236,  238,  702,  703,  718 }, // 396
  {  233,  237,  239,  704,  705,  719 }, // 397
  {  234,  236,  238,  712,  713,  718 }, // 398
  {  235,  237,  239,  714,  715,  719 }, // 399
  {  240,  242,  248,  488,  491,  518 }, // 400
  {  240,  242,  249,  488,  492,  519 }, // 401
  {  240,  244,  245,  489,  490,  540 }, // 402
  {  240,  244,  248,  489,  491,  541 }, // 403
  {  240,  245,  249,  490,  492,  544 }, // 404
  {  241,  243,  250,  495,  498,  524 }, // 405
  {  241,  243,  251,  495,  499,  525 }, // 406
  {  241,  244,  245,  496,  497,  540 }, // 407
  {  241,  244,  250,  496,  498,  542 }, // 408
  {  241,  245,  251,  497,  499,  545 }, // 409
  {  242,  246,  247,  516,  517,  554 }, // 410
  {  242,  246,  248,  516,  518,  555 }, // 411
  {  242,  247,  249,  517,  519,  558 }, // 412
  {  243,  246,  247,  522,  523,  554 }, // 413
  {  243,  246,  250,  522,  524,  556 }, // 414
  {  243,  247,  251,  523,  525,  559 }, // 415
  {  244,  248,  250,  541,  542,  636 }, // 416
  {  245,  249,  251,  544,  545,  640 }, // 417
  {  246,  248,  250,  555,  556,  636 }, // 418
  {  247,  249,  251,  558,  559,  640 }, // 419
  {  252,  254,  260,  502,  505,  530 }, // 420
  {  252,  254,  261,  502,  506,  531 }, // 421
  {  252,  256,  257,  503,  504,  547 }, // 422
  {  252,  256,  260,  503,  505,  548 }, // 423
  {  252,  257,  261,  504,  506,  551 }, // 424
  {  253,  255,  262,  509,  512,  536 }, // 425
  {  253,  255,  263,  509,  513,  537 }, // 426
  {  253,  256,  257,  510,  511,  547 }, // 427
  {  253,  256,  262,  510,  512,  549 }, // 428
  {  253,  257,  263,  511,  513,  552 }, // 429
  {  254,  258,  259,  528,  529,  561 }, // 430
  {  254,  258,  260,  528,  530,  562 }, // 431
  {  254,  259,  261,  529,  531,  565 }, // 432
  {  255,  258,  259,  534,  535,  561 }, // 433
  {  255,  258,  262,  534,  536,  563 }, // 434
  {  255,  259,  263,  535,  537,  566 }, // 435
  {  256,  260,  262,  548,  549,  650 }, // 436
  {  257,  261,  263,  551,  552,  654 }, // 437
  {  258,  260,  262,  562,  563,  650 }, // 438
  {  259,  261,  263,  565,  566,  654 }, // 439
  {  264,  265,  268,  288,  290,  298 }, // 440
  {  264,  265,  269,  288,  291,  299 }, // 441
  {  264,  268,  272,  290,  292,  417 }, // 442
  {  264,  269,  273,  291,  293,  424 }, // 443
  {  264,  272,  273,  292,  293,  468 }, // 444
  {  265,  268,  274,  298,  300,  418 }, // 445
  {  265,  269,  275,  299,  301,  425 }, // 446
  {  265,  274,  275,  300,  301,  473 }, // 447
  {  266,  267,  270,  305,  307,  315 }, // 448
  {  266,  267,  271,  305,  308,  316 }, // 449
  {  266,  270,  272,  307,  309,  430 }, // 450
  {  266,  271,  273,  308,  310,  436 }, // 451
  {  266,  272,  273,  309,  310,  468 }, // 452
  {  267,  270,  274,  315,  317,  431 }, // 453
  {  267,  271,  275,  316,  318,  437 }, // 454
  {  267,  274,  275,  317,  318,  473 }, // 455
  {  268,  270,  272,  416,  417,  430 }, // 456
  {  268,  270,  274,  416,  418,  431 }, // 457
  {  269,  271,  273,  423,  424,  436 }, // 458
  {  269,  271,  275,  423,  425,  437 }, // 459
  {  276,  277,  280,  322,  324,  332 }, // 460
  {  276,  277,  281,  322,  325,  333 }, // 461
  {  276,  280,  284,  324,  326,  443 }, // 462
  {  276,  281,  285,  325,  327,  450 }, // 463
  {  276,  284,  285,  326,  327,  478 }, // 464
  {  277,  280,  286,  332,  334,  444 }, // 465
  {  277,  281,  287,  333,  335,  451 }, // 466
  {  277,  286,  287,  334,  335,  483 }, // 467
  {  278,  279,  282,  339,  341,  349 }, // 468
  {  278,  279,  283,  339,  342,  350 }, // 469
  {  278,  282,  284,  341,  343,  456 }, // 470
  {  278,  283,  285,  342,  344,  462 }, // 471
  {  278,  284,  285,  343,  344,  478 }, // 472
  {  279,  282,  286,  349,  351,  457 }, // 473
  {  279,  283,  287,  350,  352,  463 }, // 474
  {  279,  286,  287,  351,  352,  483 }, // 475
  {  280,  282,  284,  442,  443,  456 }, // 476
  {  280,  282,  286,  442,  444,  457 }, // 477
  {  281,  283,  285,  449,  450,  462 }, // 478
  {  281,  283,  287,  449,  451,  463 }, // 479
  {  288,  290,  295,  298,  303,  419 }, // 480
  {  288,  291,  296,  299,  304,  426 }, // 481
  {  288,  295,  296,  303,  304,  540 }, // 482
  {  289,  292,  293,  357,  358,  468 }, // 483
  {  294,  295,  296,  489,  490,  540 }, // 484
  {  297,  300,  301,  365,  366,  473 }, // 485
  {  302,  303,  304,  496,  497,  540 }, // 486
  {  305,  307,  312,  315,  320,  432 }, // 487
  {  305,  308,  313,  316,  321,  438 }, // 488
  {  305,  312,  313,  320,  321,  547 }, // 489
  {  306,  309,  310,  372,  373,  468 }, // 490
  {  311,  312,  313,  503,  504,  547 }, // 491
  {  314,  317,  318,  379,  380,  473 }, // 492
  {  319,  320,  321,  510,  511,  547 }, // 493
  {  322,  324,  329,  332,  337,  445 }, // 494
  {  322,  325,  330,  333,  338,  452 }, // 495
  {  322,  329,  330,  337,  338,  554 }, // 496
  {  323,  326,  327,  387,  388,  478 }, // 497
  {  328,  329,  330,  516,  517,  554 }, // 498
  {  331,  334,  335,  395,  396,  483 }, // 499
  {  336,  337,  338,  522,  523,  554 }, // 500
  {  339,  341,  346,  349,  354,  458 }, // 501
  {  339,  342,  347,  350,  355,  464 }, // 502
  {  339,  346,  347,  354,  355,  561 }, // 503
  {  340,  343,  344,  402,  403,  478 }, // 504
  {  345,  346,  347,  528,  529,  561 }, // 505
  {  348,  351,  352,  409,  410,  483 }, // 506
  {  353,  354,  355,  534,  535,  561 }, // 507
  {  356,  357,  358,  372,  373,  468 }, // 508
  {  356,  357,  362,  372,  377,  470 }, // 509
  {  356,  358,  363,  373,  378,  472 }, // 510
  {  359,  360,  361,  493,  494,  696 }, // 511
  {  364,  365,  366,  379,  380,  473 }, // 512
  {  364,  365,  370,  379,  384,  475 }, // 513
  {  364,  366,  371,  380,  385,  477 }, // 514
  {  367,  368,  369,  500,  501,  701 }, // 515
  {  374,  375,  376,  507,  508,  706 }, // 516
  {  381,  382,  383,  514,  515,  711 }, // 517
  {  386,  387,  388,  402,  403,  478 }, // 518
  {  386,  387,  392,  402,  407,  480 }, // 519
  {  386,  388,  393,  403,  408,  482 }, // 520
  {  389,  390,  391,  520,  521,  696 }, // 521
  {  394,  395,  396,  409,  410,  483 }, // 522
  {  394,  395,  400,  409,  414,  485 }, // 523
  {  394,  396,  401,  410,  415,  487 }, // 524
  {  397,  398,  399,  526,  527,  701 }, // 525
  {  404,  405,  406,  532,  533,  706 }, // 526
  {  411,  412,  413,  538,  539,  711 }, // 527
  {  416,  417,  420,  430,  433,  469 }, // 528
  {  416,  418,  421,  431,  434,  474 }, // 529
  {  416,  420,  421,  433,  434,  664 }, // 530
  {  420,  421,  422,  664,  665,  672 }, // 531
  {  423,  424,  427,  436,  439,  471 }, // 532
  {  423,  425,  428,  437,  440,  476 }, // 533
  {  423,  427,  428,  439,  440,  668 }, // 534
  {  427,  428,  429,  668,  669,  675 }, // 535
  {  433,  434,  435,  664,  666,  673 }, // 536
  {  439,  440,  441,  668,  670,  676 }, // 537
  {  442,  443,  446,  456,  459,  479 }, // 538
  {  442,  444,  447,  457,  460,  484 }, // 539
  {  442,  446,  447,  459,  460,  678 }, // 540
  {  446,  447,  448,  678,  679,  686 }, // 541
  {  449,  450,  453,  462,  465,  481 }, // 542
  {  449,  451,  454,  463,  466,  486 }, // 543
  {  449,  453,  454,  465,  466,  682 }, // 544
  {  453,  454,  455,  682,  683,  689 }, // 545
  {  459,  460,  461,  678,  680,  687 }, // 546
  {  465,  466,  467,  682,  684,  690 }, // 547
  {  488,  491,  493,  518,  520,  639 }, // 548
  {  488,  492,  494,  519,  521,  643 }, // 549
  {  488,  493,  494,  520,  521,  696 }, // 550
  {  495,  498,  500,  524,  526,  646 }, // 551
  {  495,  499,  501,  525,  527,  649 }, // 552
  {  495,  500,  501,  526,  527,  701 }, // 553
  {  502,  505,  507,  530,  532,  653 }, // 554
  {  502,  506,  508,  531,  533,  657 }, // 555
  {  502,  507,  508,  532,  533,  706 }, // 556
  {  509,  512,  514,  536,  538,  660 }, // 557
  {  509,  513,  515,  537,  539,  663 }, // 558
  {  509,  514,  515,  538,  539,  711 }, // 559
  {  541,  542,  543,  636,  637,  644 }, // 560
  {  544,  545,  546,  640,  641,  647 }, // 561
  {  548,  549,  550,  650,  651,  658 }, // 562
  {  551,  552,  553,  654,  655,  661 }, // 563
  {  555,  556,  557,  636,  638,  645 }, // 564
  {  558,  559,  560,  640,  642,  648 }, // 565
  {  562,  563,  564,  650,  652,  659 }, // 566
  {  565,  566,  567,  654,  656,  662 }, // 567
  {  568,  570,  575,  605,  610,  667 }, // 568
  {  568,  571,  576,  606,  611,  681 }, // 569
  {  568,  575,  576,  610,  611,  716 }, // 570
  {  569,  572,  573,  637,  638,  692 }, // 571
  {  574,  575,  576,  697,  698,  716 }, // 572
  {  577,  579,  584,  613,  618,  671 }, // 573
  {  577,  580,  585,  614,  619,  685 }, // 574
  {  577,  584,  585,  618,  619,  717 }, // 575
  {  578,  581,  582,  641,  642,  693 }, // 576
  {  583,  584,  585,  699,  700,  717 }, // 577
  {  586,  588,  593,  621,  626,  674 }, // 578
  {  586,  589,  594,  622,  627,  688 }, // 579
  {  586,  593,  594,  626,  627,  718 }, // 580
  {  587,  590,  591,  644,  645,  692 }, // 581
  {  592,  593,  594,  702,  703,  718 }, // 582
  {  595,  597,  602,  629,  634,  677 }, // 583
  {  595,  598,  603,  630,  635,  691 }, // 584
  {  595,  602,  603,  634,  635,  719 }, // 585
  {  596,  599,  600,  647,  648,  693 }, // 586
  {  601,  602,  603,  704,  705,  719 }, // 587
  {  604,  607,  608,  651,  652,  694 }, // 588
  {  609,  610,  611,  707,  708,  716 }, // 589
  {  612,  615,  616,  655,  656,  695 }, // 590
  {  617,  618,  619,  709,  710,  717 }, // 591
  {  620,  623,  624,  658,  659,  694 }, // 592
  {  625,  626,  627,  712,  713,  718 }, // 593
  {  628,  631,  632,  661,  662,  695 }, // 594
  {  633,  634,  635,  714,  715,  719 }, // 595
  {  636,  637,  638,  644,  645,  692 }, // 596
  {  640,  641,  642,  647,  648,  693 }, // 597
  {  650,  651,  652,  658,  659,  694 }, // 598
  {  654,  655,  656,  661,  662,  695 }, // 599
};
int cellToVertK600[600][4] = { // Vertices on each cell, in cell order
  {    0,   24,   32,   48 }, //   0
  {    0,   24,   32,   56 }, //   1
  {    0,   24,   40,   48 }, //   2
  {    0,   24,   40,   64 }, //   3
  {    0,   24,   56,   64 }, //   4
  {    0,   32,   48,  112 }, //   5
  {    0,   32,   56,  104 }, //   6
  {    0,   32,  104,  112 }, //   7
  {    0,   40,   48,   88 }, //   8
  {    0,   40,   64,   96 }, //   9
  {    0,   40,   88,   96 }, //  10
  {    0,   48,   88,  112 }, //  11
  {    0,   56,   64,   80 }, //  12
  {    0,   56,   80,  104 }, //  13
  {    0,   64,   80,   96 }, //  14
  {    0,   72,   80,   96 }, //  15
  {    0,   72,   80,  104 }, //  16
  {    0,   72,   88,   96 }, //  17
  {    0,   72,   88,  112 }, //  18
  {    0,   72,  104,  112 }, //  19
  {    1,   24,   32,   49 }, //  20
  {    1,   24,   32,   56 }, //  21
  {    1,   24,   41,   49 }, //  22
  {    1,   24,   41,   65 }, //  23
  {    1,   24,   56,   65 }, //  24
  {    1,   32,   49,  113 }, //  25
  {    1,   32,   56,  105 }, //  26
  {    1,   32,  105,  113 }, //  27
  {    1,   41,   49,   89 }, //  28
  {    1,   41,   65,   97 }, //  29
  {    1,   41,   89,   97 }, //  30
  {    1,   49,   89,  113 }, //  31
  {    1,   56,   65,   81 }, //  32
  {    1,   56,   81,  105 }, //  33
  {    1,   65,   81,   97 }, //  34
  {    1,   73,   81,   97 }, //  35
  {    1,   73,   81,  105 }, //  36
  {    1,   73,   89,   97 }, //  37
  {    1,   73,   89,  113 }, //  38
  {    1,   73,  105,  113 }, //  39
  {    2,   25,   33,   50 }, //  40
  {    2,   25,   33,   57 }, //  41
  {    2,   25,   40,   50 }, //  42
  {    2,   25,   40,   64 }, //  43
  {    2,   25,   57,   64 }, //  44
  {    2,   33,   50,  114 }, //  45
  {    2,   33,   57,  106 }, //  46
  {    2,   33,  106,  114 }, //  47
  {    2,   40,   50,   90 }, //  48
  {    2,   40,   64,   96 }, //  49
  {    2,   40,   90,   96 }, //  50
  {    2,   50,   90,  114 }, //  51
  {    2,   57,   64,   82 }, //  52
  {    2,   57,   82,  106 }, //  53
  {    2,   64,   82,   96 }, //  54
  {    2,   74,   82,   96 }, //  55
  {    2,   74,   82,  106 }, //  56
  {    2,   74,   90,   96 }, //  57
  {    2,   74,   90,  114 }, //  58
  {    2,   74,  106,  114 }, //  59
  {    3,   25,   33,   51 }, //  60
  {    3,   25,   33,   57 }, //  61
  {    3,   25,   41,   51 }, //  62
  {    3,   25,   41,   65 }, //  63
  {    3,   25,   57,   65 }, //  64
  {    3,   33,   51,  115 }, //  65
  {    3,   33,   57,  107 }, //  66
  {    3,   33,  107,  115 }, //  67
  {    3,   41,   51,   91 }, //  68
  {    3,   41,   65,   97 }, //  69
  {    3,   41,   91,   97 }, //  70
  {    3,   51,   91,  115 }, //  71
  {    3,   57,   65,   83 }, //  72
  {    3,   57,   83,  107 }, //  73
  {    3,   65,   83,   97 }, //  74
  {    3,   75,   83,   97 }, //  75
  {    3,   75,   83,  107 }, //  76
  {    3,   75,   91,   97 }, //  77
  {    3,   75,   91,  115 }, //  78
  {    3,   75,  107,  115 }, //  79
  {    4,   26,   34,   48 }, //  80
  {    4,   26,   34,   58 }, //  81
  {    4,   26,   42,   48 }, //  82
  {    4,   26,   42,   66 }, //  83
  {    4,   26,   58,   66 }, //  84
  {    4,   34,   48,  112 }, //  85
  {    4,   34,   58,  108 }, //  86
  {    4,   34,  108,  112 }, //  87
  {    4,   42,   48,   88 }, //  88
  {    4,   42,   66,   98 }, //  89
  {    4,   42,   88,   98 }, //  90
  {    4,   48,   88,  112 }, //  91
  {    4,   58,   66,   84 }, //  92
  {    4,   58,   84,  108 }, //  93
  {    4,   66,   84,   98 }, //  94
  {    4,   76,   84,   98 }, //  95
  {    4,   76,   84,  108 }, //  96
  {    4,   76,   88,   98 }, //  97
  {    4,   76,   88,  112 }, //  98
  {    4,   76,  108,  112 }, //  99
  {    5,   26,   34,   49 }, // 100
  {    5,   26,   34,   58 }, // 101
  {    5,   26,   43,   49 }, // 102
  {    5,   26,   43,   67 }, // 103
  {    5,   26,   58,   67 }, // 104
  {    5,   34,   49,  113 }, // 105
  {    5,   34,   58,  109 }, // 106
  {    5,   34,  109,  113 }, // 107
  {    5,   43,   49,   89 }, // 108
  {    5,   43,   67,   99 }, // 109
  {    5,   43,   89,   99 }, // 110
  {    5,   49,   89,  113 }, // 111
  {    5,   58,   67,   85 }, // 112
  {    5,   58,   85,  109 }, // 113
  {    5,   67,   85,   99 }, // 114
  {    5,   77,   85,   99 }, // 115
  {    5,   77,   85,  109 }, // 116
  {    5,   77,   89,   99 }, // 117
  {    5,   77,   89,  113 }, // 118
  {    5,   77,  109,  113 }, // 119
  {    6,   27,   35,   50 }, // 120
  {    6,   27,   35,   59 }, // 121
  {    6,   27,   42,   50 }, // 122
  {    6,   27,   42,   66 }, // 123
  {    6,   27,   59,   66 }, // 124
  {    6,   35,   50,  114 }, // 125
  {    6,   35,   59,  110 }, // 126
  {    6,   35,  110,  114 }, // 127
  {    6,   42,   50,   90 }, // 128
  {    6,   42,   66,   98 }, // 129
  {    6,   42,   90,   98 }, // 130
  {    6,   50,   90,  114 }, // 131
  {    6,   59,   66,   86 }, // 132
  {    6,   59,   86,  110 }, // 133
  {    6,   66,   86,   98 }, // 134
  {    6,   78,   86,   98 }, // 135
  {    6,   78,   86,  110 }, // 136
  {    6,   78,   90,   98 }, // 137
  {    6,   78,   90,  114 }, // 138
  {    6,   78,  110,  114 }, // 139
  {    7,   27,   35,   51 }, // 140
  {    7,   27,   35,   59 }, // 141
  {    7,   27,   43,   51 }, // 142
  {    7,   27,   43,   67 }, // 143
  {    7,   27,   59,   67 }, // 144
  {    7,   35,   51,  115 }, // 145
  {    7,   35,   59,  111 }, // 146
  {    7,   35,  111,  115 }, // 147
  {    7,   43,   51,   91 }, // 148
  {    7,   43,   67,   99 }, // 149
  {    7,   43,   91,   99 }, // 150
  {    7,   51,   91,  115 }, // 151
  {    7,   59,   67,   87 }, // 152
  {    7,   59,   87,  111 }, // 153
  {    7,   67,   87,   99 }, // 154
  {    7,   79,   87,   99 }, // 155
  {    7,   79,   87,  111 }, // 156
  {    7,   79,   91,   99 }, // 157
  {    7,   79,   91,  115 }, // 158
  {    7,   79,  111,  115 }, // 159
  {    8,   28,   36,   52 }, // 160
  {    8,   28,   36,   60 }, // 161
  {    8,   28,   44,   52 }, // 162
  {    8,   28,   44,   68 }, // 163
  {    8,   28,   60,   68 }, // 164
  {    8,   36,   52,  116 }, // 165
  {    8,   36,   60,  104 }, // 166
  {    8,   36,  104,  116 }, // 167
  {    8,   44,   52,   92 }, // 168
  {    8,   44,   68,  100 }, // 169
  {    8,   44,   92,  100 }, // 170
  {    8,   52,   92,  116 }, // 171
  {    8,   60,   68,   80 }, // 172
  {    8,   60,   80,  104 }, // 173
  {    8,   68,   80,  100 }, // 174
  {    8,   72,   80,  100 }, // 175
  {    8,   72,   80,  104 }, // 176
  {    8,   72,   92,  100 }, // 177
  {    8,   72,   92,  116 }, // 178
  {    8,   72,  104,  116 }, // 179
  {    9,   28,   36,   53 }, // 180
  {    9,   28,   36,   60 }, // 181
  {    9,   28,   45,   53 }, // 182
  {    9,   28,   45,   69 }, // 183
  {    9,   28,   60,   69 }, // 184
  {    9,   36,   53,  117 }, // 185
  {    9,   36,   60,  105 }, // 186
  {    9,   36,  105,  117 }, // 187
  {    9,   45,   53,   93 }, // 188
  {    9,   45,   69,  101 }, // 189
  {    9,   45,   93,  101 }, // 190
  {    9,   53,   93,  117 }, // 191
  {    9,   60,   69,   81 }, // 192
  {    9,   60,   81,  105 }, // 193
  {    9,   69,   81,  101 }, // 194
  {    9,   73,   81,  101 }, // 195
  {    9,   73,   81,  105 }, // 196
  {    9,   73,   93,  101 }, // 197
  {    9,   73,   93,  117 }, // 198
  {    9,   73,  105,  117 }, // 199
  {   10,   29,   37,   54 }, // 200
  {   10,   29,   37,   61 }, // 201
  {   10,   29,   44,   54 }, // 202
  {   10,   29,   44,   68 }, // 203
  {   10,   29,   61,   68 }, // 204
  {   10,   37,   54,  118 }, // 205
  {   10,   37,   61,  106 }, // 206
  {   10,   37,  106,  118 }, // 207
  {   10,   44,   54,   94 }, // 208
  {   10,   44,   68,  100 }, // 209
  {   10,   44,   94,  100 }, // 210
  {   10,   54,   94,  118 }, // 211
  {   10,   61,   68,   82 }, // 212
  {   10,   61,   82,  106 }, // 213
  {   10,   68,   82,  100 }, // 214
  {   10,   74,   82,  100 }, // 215
  {   10,   74,   82,  106 }, // 216
  {   10,   74,   94,  100 }, // 217
  {   10,   74,   94,  118 }, // 218
  {   10,   74,  106,  118 }, // 219
  {   11,   29,   37,   55 }, // 220
  {   11,   29,   37,   61 }, // 221
  {   11,   29,   45,   55 }, // 222
  {   11,   29,   45,   69 }, // 223
  {   11,   29,   61,   69 }, // 224
  {   11,   37,   55,  119 }, // 225
  {   11,   37,   61,  107 }, // 226
  {   11,   37,  107,  119 }, // 227
  {   11,   45,   55,   95 }, // 228
  {   11,   45,   69,  101 }, // 229
  {   11,   45,   95,  101 }, // 230
  {   11,   55,   95,  119 }, // 231
  {   11,   61,   69,   83 }, // 232
  {   11,   61,   83,  107 }, // 233
  {   11,   69,   83,  101 }, // 234
  {   11,   75,   83,  101 }, // 235
  {   11,   75,   83,  107 }, // 236
  {   11,   75,   95,  101 }, // 237
  {   11,   75,   95,  119 }, // 238
  {   11,   75,  107,  119 }, // 239
  {   12,   30,   38,   52 }, // 240
  {   12,   30,   38,   62 }, // 241
  {   12,   30,   46,   52 }, // 242
  {   12,   30,   46,   70 }, // 243
  {   12,   30,   62,   70 }, // 244
  {   12,   38,   52,  116 }, // 245
  {   12,   38,   62,  108 }, // 246
  {   12,   38,  108,  116 }, // 247
  {   12,   46,   52,   92 }, // 248
  {   12,   46,   70,  102 }, // 249
  {   12,   46,   92,  102 }, // 250
  {   12,   52,   92,  116 }, // 251
  {   12,   62,   70,   84 }, // 252
  {   12,   62,   84,  108 }, // 253
  {   12,   70,   84,  102 }, // 254
  {   12,   76,   84,  102 }, // 255
  {   12,   76,   84,  108 }, // 256
  {   12,   76,   92,  102 }, // 257
  {   12,   76,   92,  116 }, // 258
  {   12,   76,  108,  116 }, // 259
  {   13,   30,   38,   53 }, // 260
  {   13,   30,   38,   62 }, // 261
  {   13,   30,   47,   53 }, // 262
  {   13,   30,   47,   71 }, // 263
  {   13,   30,   62,   71 }, // 264
  {   13,   38,   53,  117 }, // 265
  {   13,   38,   62,  109 }, // 266
  {   13,   38,  109,  117 }, // 267
  {   13,   47,   53,   93 }, // 268
  {   13,   47,   71,  103 }, // 269
  {   13,   47,   93,  103 }, // 270
  {   13,   53,   93,  117 }, // 271
  {   13,   62,   71,   85 }, // 272
  {   13,   62,   85,  109 }, // 273
  {   13,   71,   85,  103 }, // 274
  {   13,   77,   85,  103 }, // 275
  {   13,   77,   85,  109 }, // 276
  {   13,   77,   93,  103 }, // 277
  {   13,   77,   93,  117 }, // 278
  {   13,   77,  109,  117 }, // 279
  {   14,   31,   39,   54 }, // 280
  {   14,   31,   39,   63 }, // 281
  {   14,   31,   46,   54 }, // 282
  {   14,   31,   46,   70 }, // 283
  {   14,   31,   63,   70 }, // 284
  {   14,   39,   54,  118 }, // 285
  {   14,   39,   63,  110 }, // 286
  {   14,   39,  110,  118 }, // 287
  {   14,   46,   54,   94 }, // 288
  {   14,   46,   70,  102 }, // 289
  {   14,   46,   94,  102 }, // 290
  {   14,   54,   94,  118 }, // 291
  {   14,   63,   70,   86 }, // 292
  {   14,   63,   86,  110 }, // 293
  {   14,   70,   86,  102 }, // 294
  {   14,   78,   86,  102 }, // 295
  {   14,   78,   86,  110 }, // 296
  {   14,   78,   94,  102 }, // 297
  {   14,   78,   94,  118 }, // 298
  {   14,   78,  110,  118 }, // 299
  {   15,   31,   39,   55 }, // 300
  {   15,   31,   39,   63 }, // 301
  {   15,   31,   47,   55 }, // 302
  {   15,   31,   47,   71 }, // 303
  {   15,   31,   63,   71 }, // 304
  {   15,   39,   55,  119 }, // 305
  {   15,   39,   63,  111 }, // 306
  {   15,   39,  111,  119 }, // 307
  {   15,   47,   55,   95 }, // 308
  {   15,   47,   71,  103 }, // 309
  {   15,   47,   95,  103 }, // 310
  {   15,   55,   95,  119 }, // 311
  {   15,   63,   71,   87 }, // 312
  {   15,   63,   87,  111 }, // 313
  {   15,   71,   87,  103 }, // 314
  {   15,   79,   87,  103 }, // 315
  {   15,   79,   87,  111 }, // 316
  {   15,   79,   95,  103 }, // 317
  {   15,   79,   95,  119 }, // 318
  {   15,   79,  111,  119 }, // 319
  {   16,   72,   76,   88 }, // 320
  {   16,   72,   76,   92 }, // 321
  {   16,   72,   88,   96 }, // 322
  {   16,   72,   92,  100 }, // 323
  {   16,   72,   96,  100 }, // 324
  {   16,   74,   78,   90 }, // 325
  {   16,   74,   78,   94 }, // 326
  {   16,   74,   90,   96 }, // 327
  {   16,   74,   94,  100 }, // 328
  {   16,   74,   96,  100 }, // 329
  {   16,   76,   88,   98 }, // 330
  {   16,   76,   92,  102 }, // 331
  {   16,   76,   98,  102 }, // 332
  {   16,   78,   90,   98 }, // 333
  {   16,   78,   94,  102 }, // 334
  {   16,   78,   98,  102 }, // 335
  {   16,   88,   90,   96 }, // 336
  {   16,   88,   90,   98 }, // 337
  {   16,   92,   94,  100 }, // 338
  {   16,   92,   94,  102 }, // 339
  {   17,   73,   77,   89 }, // 340
  {   17,   73,   77,   93 }, // 341
  {   17,   73,   89,   97 }, // 342
  {   17,   73,   93,  101 }, // 343
  {   17,   73,   97,  101 }, // 344
  {   17,   75,   79,   91 }, // 345
  {   17,   75,   79,   95 }, // 346
  {   17,   75,   91,   97 }, // 347
  {   17,   75,   95,  101 }, // 348
  {   17,   75,   97,  101 }, // 349
  {   17,   77,   89,   99 }, // 350
  {   17,   77,   93,  103 }, // 351
  {   17,   77,   99,  103 }, // 352
  {   17,   79,   91,   99 }, // 353
  {   17,   79,   95,  103 }, // 354
  {   17,   79,   99,  103 }, // 355
  {   17,   89,   91,   97 }, // 356
  {   17,   89,   91,   99 }, // 357
  {   17,   93,   95,  101 }, // 358
  {   17,   93,   95,  103 }, // 359
  {   18,   32,   34,  112 }, // 360
  {   18,   32,   34,  113 }, // 361
  {   18,   32,  104,  105 }, // 362
  {   18,   32,  104,  112 }, // 363
  {   18,   32,  105,  113 }, // 364
  {   18,   34,  108,  109 }, // 365
  {   18,   34,  108,  112 }, // 366
  {   18,   34,  109,  113 }, // 367
  {   18,   36,   38,  116 }, // 368
  {   18,   36,   38,  117 }, // 369
  {   18,   36,  104,  105 }, // 370
  {   18,   36,  104,  116 }, // 371
  {   18,   36,  105,  117 }, // 372
  {   18,   38,  108,  109 }, // 373
  {   18,   38,  108,  116 }, // 374
  {   18,   38,  109,  117 }, // 375
  {   18,  104,  112,  116 }, // 376
  {   18,  105,  113,  117 }, // 377
  {   18,  108,  112,  116 }, // 378
  {   18,  109,  113,  117 }, // 379
  {   19,   33,   35,  114 }, // 380
  {   19,   33,   35,  115 }, // 381
  {   19,   33,  106,  107 }, // 382
  {   19,   33,  106,  114 }, // 383
  {   19,   33,  107,  115 }, // 384
  {   19,   35,  110,  111 }, // 385
  {   19,   35,  110,  114 }, // 386
  {   19,   35,  111,  115 }, // 387
  {   19,   37,   39,  118 }, // 388
  {   19,   37,   39,  119 }, // 389
  {   19,   37,  106,  107 }, // 390
  {   19,   37,  106,  118 }, // 391
  {   19,   37,  107,  119 }, // 392
  {   19,   39,  110,  111 }, // 393
  {   19,   39,  110,  118 }, // 394
  {   19,   39,  111,  119 }, // 395
  {   19,  106,  114,  118 }, // 396
  {   19,  107,  115,  119 }, // 397
  {   19,  110,  114,  118 }, // 398
  {   19,  111,  115,  119 }, // 399
  {   20,   56,   60,   80 }, // 400
  {   20,   56,   60,   81 }, // 401
  {   20,   56,   64,   65 }, // 402
  {   20,   56,   64,   80 }, // 403
  {   20,   56,   65,   81 }, // 404
  {   20,   57,   61,   82 }, // 405
  {   20,   57,   61,   83 }, // 406
  {   20,   57,   64,   65 }, // 407
  {   20,   57,   64,   82 }, // 408
  {   20,   57,   65,   83 }, // 409
  {   20,   60,   68,   69 }, // 410
  {   20,   60,   68,   80 }, // 411
  {   20,   60,   69,   81 }, // 412
  {   20,   61,   68,   69 }, // 413
  {   20,   61,   68,   82 }, // 414
  {   20,   61,   69,   83 }, // 415
  {   20,   64,   80,   82 }, // 416
  {   20,   65,   81,   83 }, // 417
  {   20,   68,   80,   82 }, // 418
  {   20,   69,   81,   83 }, // 419
  {   21,   58,   62,   84 }, // 420
  {   21,   58,   62,   85 }, // 421
  {   21,   58,   66,   67 }, // 422
  {   21,   58,   66,   84 }, // 423
  {   21,   58,   67,   85 }, // 424
  {   21,   59,   63,   86 }, // 425
  {   21,   59,   63,   87 }, // 426
  {   21,   59,   66,   67 }, // 427
  {   21,   59,   66,   86 }, // 428
  {   21,   59,   67,   87 }, // 429
  {   21,   62,   70,   71 }, // 430
  {   21,   62,   70,   84 }, // 431
  {   21,   62,   71,   85 }, // 432
  {   21,   63,   70,   71 }, // 433
  {   21,   63,   70,   86 }, // 434
  {   21,   63,   71,   87 }, // 435
  {   21,   66,   84,   86 }, // 436
  {   21,   67,   85,   87 }, // 437
  {   21,   70,   84,   86 }, // 438
  {   21,   71,   85,   87 }, // 439
  {   22,   24,   25,   40 }, // 440
  {   22,   24,   25,   41 }, // 441
  {   22,   24,   40,   48 }, // 442
  {   22,   24,   41,   49 }, // 443
  {   22,   24,   48,   49 }, // 444
  {   22,   25,   40,   50 }, // 445
  {   22,   25,   41,   51 }, // 446
  {   22,   25,   50,   51 }, // 447
  {   22,   26,   27,   42 }, // 448
  {   22,   26,   27,   43 }, // 449
  {   22,   26,   42,   48 }, // 450
  {   22,   26,   43,   49 }, // 451
  {   22,   26,   48,   49 }, // 452
  {   22,   27,   42,   50 }, // 453
  {   22,   27,   43,   51 }, // 454
  {   22,   27,   50,   51 }, // 455
  {   22,   40,   42,   48 }, // 456
  {   22,   40,   42,   50 }, // 457
  {   22,   41,   43,   49 }, // 458
  {   22,   41,   43,   51 }, // 459
  {   23,   28,   29,   44 }, // 460
  {   23,   28,   29,   45 }, // 461
  {   23,   28,   44,   52 }, // 462
  {   23,   28,   45,   53 }, // 463
  {   23,   28,   52,   53 }, // 464
  {   23,   29,   44,   54 }, // 465
  {   23,   29,   45,   55 }, // 466
  {   23,   29,   54,   55 }, // 467
  {   23,   30,   31,   46 }, // 468
  {   23,   30,   31,   47 }, // 469
  {   23,   30,   46,   52 }, // 470
  {   23,   30,   47,   53 }, // 471
  {   23,   30,   52,   53 }, // 472
  {   23,   31,   46,   54 }, // 473
  {   23,   31,   47,   55 }, // 474
  {   23,   31,   54,   55 }, // 475
  {   23,   44,   46,   52 }, // 476
  {   23,   44,   46,   54 }, // 477
  {   23,   45,   47,   53 }, // 478
  {   23,   45,   47,   55 }, // 479
  {   24,   25,   40,   64 }, // 480
  {   24,   25,   41,   65 }, // 481
  {   24,   25,   64,   65 }, // 482
  {   24,   32,   48,   49 }, // 483
  {   24,   56,   64,   65 }, // 484
  {   25,   33,   50,   51 }, // 485
  {   25,   57,   64,   65 }, // 486
  {   26,   27,   42,   66 }, // 487
  {   26,   27,   43,   67 }, // 488
  {   26,   27,   66,   67 }, // 489
  {   26,   34,   48,   49 }, // 490
  {   26,   58,   66,   67 }, // 491
  {   27,   35,   50,   51 }, // 492
  {   27,   59,   66,   67 }, // 493
  {   28,   29,   44,   68 }, // 494
  {   28,   29,   45,   69 }, // 495
  {   28,   29,   68,   69 }, // 496
  {   28,   36,   52,   53 }, // 497
  {   28,   60,   68,   69 }, // 498
  {   29,   37,   54,   55 }, // 499
  {   29,   61,   68,   69 }, // 500
  {   30,   31,   46,   70 }, // 501
  {   30,   31,   47,   71 }, // 502
  {   30,   31,   70,   71 }, // 503
  {   30,   38,   52,   53 }, // 504
  {   30,   62,   70,   71 }, // 505
  {   31,   39,   54,   55 }, // 506
  {   31,   63,   70,   71 }, // 507
  {   32,   34,   48,   49 }, // 508
  {   32,   34,   48,  112 }, // 509
  {   32,   34,   49,  113 }, // 510
  {   32,   56,  104,  105 }, // 511
  {   33,   35,   50,   51 }, // 512
  {   33,   35,   50,  114 }, // 513
  {   33,   35,   51,  115 }, // 514
  {   33,   57,  106,  107 }, // 515
  {   34,   58,  108,  109 }, // 516
  {   35,   59,  110,  111 }, // 517
  {   36,   38,   52,   53 }, // 518
  {   36,   38,   52,  116 }, // 519
  {   36,   38,   53,  117 }, // 520
  {   36,   60,  104,  105 }, // 521
  {   37,   39,   54,   55 }, // 522
  {   37,   39,   54,  118 }, // 523
  {   37,   39,   55,  119 }, // 524
  {   37,   61,  106,  107 }, // 525
  {   38,   62,  108,  109 }, // 526
  {   39,   63,  110,  111 }, // 527
  {   40,   42,   48,   88 }, // 528
  {   40,   42,   50,   90 }, // 529
  {   40,   42,   88,   90 }, // 530
  {   40,   88,   90,   96 }, // 531
  {   41,   43,   49,   89 }, // 532
  {   41,   43,   51,   91 }, // 533
  {   41,   43,   89,   91 }, // 534
  {   41,   89,   91,   97 }, // 535
  {   42,   88,   90,   98 }, // 536
  {   43,   89,   91,   99 }, // 537
  {   44,   46,   52,   92 }, // 538
  {   44,   46,   54,   94 }, // 539
  {   44,   46,   92,   94 }, // 540
  {   44,   92,   94,  100 }, // 541
  {   45,   47,   53,   93 }, // 542
  {   45,   47,   55,   95 }, // 543
  {   45,   47,   93,   95 }, // 544
  {   45,   93,   95,  101 }, // 545
  {   46,   92,   94,  102 }, // 546
  {   47,   93,   95,  103 }, // 547
  {   56,   60,   80,  104 }, // 548
  {   56,   60,   81,  105 }, // 549
  {   56,   60,  104,  105 }, // 550
  {   57,   61,   82,  106 }, // 551
  {   57,   61,   83,  107 }, // 552
  {   57,   61,  106,  107 }, // 553
  {   58,   62,   84,  108 }, // 554
  {   58,   62,   85,  109 }, // 555
  {   58,   62,  108,  109 }, // 556
  {   59,   63,   86,  110 }, // 557
  {   59,   63,   87,  111 }, // 558
  {   59,   63,  110,  111 }, // 559
  {   64,   80,   82,   96 }, // 560
  {   65,   81,   83,   97 }, // 561
  {   66,   84,   86,   98 }, // 562
  {   67,   85,   87,   99 }, // 563
  {   68,   80,   82,  100 }, // 564
  {   69,   81,   83,  101 }, // 565
  {   70,   84,   86,  102 }, // 566
  {   71,   85,   87,  103 }, // 567
  {   72,   76,   88,  112 }, // 568
  {   72,   76,   92,  116 }, // 569
  {   72,   76,  112,  116 }, // 570
  {   72,   80,   96,  100 }, // 571
  {   72,  104,  112,  116 }, // 572
  {   73,   77,   89,  113 }, // 573
  {   73,   77,   93,  117 }, // 574
  {   73,   77,  113,  117 }, // 575
  {   73,   81,   97,  101 }, // 576
  {   73,  105,  113,  117 }, // 577
  {   74,   78,   90,  114 }, // 578
  {   74,   78,   94,  118 }, // 579
  {   74,   78,  114,  118 }, // 580
  {   74,   82,   96,  100 }, // 581
  {   74,  106,  114,  118 }, // 582
  {   75,   79,   91,  115 }, // 583
  {   75,   79,   95,  119 }, // 584
  {   75,   79,  115,  119 }, // 585
  {   75,   83,   97,  101 }, // 586
  {   75,  107,  115,  119 }, // 587
  {   76,   84,   98,  102 }, // 588
  {   76,  108,  112,  116 }, // 589
  {   77,   85,   99,  103 }, // 590
  {   77,  109,  113,  117 }, // 591
  {   78,   86,   98,  102 }, // 592
  {   78,  110,  114,  118 }, // 593
  {   79,   87,   99,  103 }, // 594
  {   79,  111,  115,  119 }, // 595
  {   80,   82,   96,  100 }, // 596
  {   81,   83,   97,  101 }, // 597
  {   84,   86,   98,  102 }, // 598
  {   85,   87,   99,  103 }, // 599
};
float cellNormalK600[600][4] = { // Normals of cells, in cell order
  {    0.707107f,    0.353553f,    0.572061f,    0.218508f }, //   0
  {    0.572061f,    0.572061f,    0.572061f,    0.135045f }, //   1
  {    0.790569f,    0.353553f,    0.353553f,    0.353553f }, //   2
  {    0.707107f,    0.572061f,    0.218508f,    0.353553f }, //   3
  {    0.572061f,    0.707107f,    0.353553f,    0.218508f }, //   4
  {    0.572061f,    0.218508f,    0.707107f,    0.353553f }, //   5
  {    0.353553f,    0.572061f,    0.707107f,    0.218508f }, //   6
  {    0.353553f,    0.353553f,    0.790569f,    0.353553f }, //   7
  {    0.707107f,    0.218508f,    0.353553f,    0.572061f }, //   8
  {    0.572061f,    0.572061f,    0.135045f,    0.572061f }, //   9
  {    0.572061f,    0.353553f,    0.218508f,    0.707107f }, //  10
  {    0.572061f,    0.135045f,    0.572061f,    0.572061f }, //  11
  {    0.353553f,    0.790569f,    0.353553f,    0.353553f }, //  12
  {    0.218508f,    0.707107f,    0.572061f,    0.353553f }, //  13
  {    0.353553f,    0.707107f,    0.218508f,    0.572061f }, //  14
  {    0.218508f,    0.572061f,    0.353553f,    0.707107f }, //  15
  {    0.135045f,    0.572061f,    0.572061f,    0.572061f }, //  16
  {    0.353553f,    0.353553f,    0.353553f,    0.790569f }, //  17
  {    0.353553f,    0.218508f,    0.572061f,    0.707107f }, //  18
  {    0.218508f,    0.353553f,    0.707107f,    0.572061f }, //  19
  {    0.707107f,    0.353553f,    0.572061f,   -0.218508f }, //  20
  {    0.572061f,    0.572061f,    0.572061f,   -0.135045f }, //  21
  {    0.790569f,    0.353553f,    0.353553f,   -0.353553f }, //  22
  {    0.707107f,    0.572061f,    0.218508f,   -0.353553f }, //  23
  {    0.572061f,    0.707107f,    0.353553f,   -0.218508f }, //  24
  {    0.572061f,    0.218508f,    0.707107f,   -0.353553f }, //  25
  {    0.353553f,    0.572061f,    0.707107f,   -0.218508f }, //  26
  {    0.353553f,    0.353553f,    0.790569f,   -0.353553f }, //  27
  {    0.707107f,    0.218508f,    0.353553f,   -0.572061f }, //  28
  {    0.572061f,    0.572061f,    0.135045f,   -0.572061f }, //  29
  {    0.572061f,    0.353553f,    0.218508f,   -0.707107f }, //  30
  {    0.572061f,    0.135045f,    0.572061f,   -0.572061f }, //  31
  {    0.353553f,    0.790569f,    0.353553f,   -0.353553f }, //  32
  {    0.218508f,    0.707107f,    0.572061f,   -0.353553f }, //  33
  {    0.353553f,    0.707107f,    0.218508f,   -0.572061f }, //  34
  {    0.218508f,    0.572061f,    0.353553f,   -0.707107f }, //  35
  {    0.135045f,    0.572061f,    0.572061f,   -0.572061f }, //  36
  {    0.353553f,    0.353553f,    0.353553f,   -0.790569f }, //  37
  {    0.353553f,    0.218508f,    0.572061f,   -0.707107f }, //  38
  {    0.218508f,    0.353553f,    0.707107f,   -0.572061f }, //  39
  {    0.707107f,    0.353553f,   -0.572061f,    0.218508f }, //  40
  {    0.572061f,    0.572061f,   -0.572061f,    0.135045f }, //  41
  {    0.790569f,    0.353553f,   -0.353553f,    0.353553f }, //  42
  {    0.707107f,    0.572061f,   -0.218508f,    0.353553f }, //  43
  {    0.572061f,    0.707107f,   -0.353553f,    0.218508f }, //  44
  {    0.572061f,    0.218508f,   -0.707107f,    0.353553f }, //  45
  {    0.353553f,    0.572061f,   -0.707107f,    0.218508f }, //  46
  {    0.353553f,    0.353553f,   -0.790569f,    0.353553f }, //  47
  {    0.707107f,    0.218508f,   -0.353553f,    0.572061f }, //  48
  {    0.572061f,    0.572061f,   -0.135045f,    0.572061f }, //  49
  {    0.572061f,    0.353553f,   -0.218508f,    0.707107f }, //  50
  {    0.572061f,    0.135045f,   -0.572061f,    0.572061f }, //  51
  {    0.353553f,    0.790569f,   -0.353553f,    0.353553f }, //  52
  {    0.218508f,    0.707107f,   -0.572061f,    0.353553f }, //  53
  {    0.353553f,    0.707107f,   -0.218508f,    0.572061f }, //  54
  {    0.218508f,    0.572061f,   -0.353553f,    0.707107f }, //  55
  {    0.135045f,    0.572061f,   -0.572061f,    0.572061f }, //  56
  {    0.353553f,    0.353553f,   -0.353553f,    0.790569f }, //  57
  {    0.353553f,    0.218508f,   -0.572061f,    0.707107f }, //  58
  {    0.218508f,    0.353553f,   -0.707107f,    0.572061f }, //  59
  {    0.707107f,    0.353553f,   -0.572061f,   -0.218508f }, //  60
  {    0.572061f,    0.572061f,   -0.572061f,   -0.135045f }, //  61
  {    0.790569f,    0.353553f,   -0.353553f,   -0.353553f }, //  62
  {    0.707107f,    0.572061f,   -0.218508f,   -0.353553f }, //  63
  {    0.572061f,    0.707107f,   -0.353553f,   -0.218508f }, //  64
  {    0.572061f,    0.218508f,   -0.707107f,   -0.353553f }, //  65
  {    0.353553f,    0.572061f,   -0.707107f,   -0.218508f }, //  66
  {    0.353553f,    0.353553f,   -0.790569f,   -0.353553f }, //  67
  {    0.707107f,    0.218508f,   -0.353553f,   -0.572061f }, //  68
  {    0.572061f,    0.572061f,   -0.135045f,   -0.572061f }, //  69
  {    0.572061f,    0.353553f,   -0.218508f,   -0.707107f }, //  70
  {    0.572061f,    0.135045f,   -0.572061f,   -0.572061f }, //  71
  {    0.353553f,    0.790569f,   -0.353553f,   -0.353553f }, //  72
  {    0.218508f,    0.707107f,   -0.572061f,   -0.353553f }, //  73
  {    0.353553f,    0.707107f,   -0.218508f,   -0.572061f }, //  74
  {    0.218508f,    0.572061f,   -0.353553f,   -0.707107f }, //  75
  {    0.135045f,    0.572061f,   -0.572061f,   -0.572061f }, //  76
  {    0.353553f,    0.353553f,   -0.353553f,   -0.790569f }, //  77
  {    0.353553f,    0.218508f,   -0.572061f,   -0.707107f }, //  78
  {    0.218508f,    0.353553f,   -0.707107f,   -0.572061f }, //  79
  {    0.707107f,   -0.353553f,    0.572061f,    0.218508f }, //  80
  {    0.572061f,   -0.572061f,    0.572061f,    0.135045f }, //  81
  {    0.790569f,   -0.353553f,    0.353553f,    0.353553f }, //  82
  {    0.707107f,   -0.572061f,    0.218508f,    0.353553f }, //  83
  {    0.572061f,   -0.707107f,    0.353553f,    0.218508f }, //  84
  {    0.572061f,   -0.218508f,    0.707107f,    0.353553f }, //  85
  {    0.353553f,   -0.572061f,    0.707107f,    0.218508f }, //  86
  {    0.353553f,   -0.353553f,    0.790569f,    0.353553f }, //  87
  {    0.707107f,   -0.218508f,    0.353553f,    0.572061f }, //  88
  {    0.572061f,   -0.572061f,    0.135045f,    0.572061f }, //  89
  {    0.572061f,   -0.353553f,    0.218508f,    0.707107f }, //  90
  {    0.572061f,   -0.135045f,    0.572061f,    0.572061f }, //  91
  {    0.353553f,   -0.790569f,    0.353553f,    0.353553f }, //  92
  {    0.218508f,   -0.707107f,    0.572061f,    0.353553f }, //  93
  {    0.353553f,   -0.707107f,    0.218508f,    0.572061f }, //  94
  {    0.218508f,   -0.572061f,    0.353553f,    0.707107f }, //  95
  {    0.135045f,   -0.572061f,    0.572061f,    0.572061f }, //  96
  {    0.353553f,   -0.353553f,    0.353553f,    0.790569f }, //  97
  {    0.353553f,   -0.218508f,    0.572061f,    0.707107f }, //  98
  {    0.218508f,   -0.353553f,    0.707107f,    0.572061f }, //  99
  {    0.707107f,   -0.353553f,    0.572061f,   -0.218508f }, // 100
  {    0.572061f,   -0.572061f,    0.572061f,   -0.135045f }, // 101
  {    0.790569f,   -0.353553f,    0.353553f,   -0.353553f }, // 102
  {    0.707107f,   -0.572061f,    0.218508f,   -0.353553f }, // 103
  {    0.572061f,   -0.707107f,    0.353553f,   -0.218508f }, // 104
  {    0.572061f,   -0.218508f,    0.707107f,   -0.353553f }, // 105
  {    0.353553f,   -0.572061f,    0.707107f,   -0.218508f }, // 106
  {    0.353553f,   -0.353553f,    0.790569f,   -0.353553f }, // 107
  {    0.707107f,   -0.218508f,    0.353553f,   -0.572061f }, // 108
  {    0.572061f,   -0.572061f,    0.135045f,   -0.572061f }, // 109
  {    0.572061f,   -0.353553f,    0.218508f,   -0.707107f }, // 110
  {    0.572061f,   -0.135045f,    0.572061f,   -0.572061f }, // 111
  {    0.353553f,   -0.790569f,    0.353553f,   -0.353553f }, // 112
  {    0.218508f,   -0.707107f,    0.572061f,   -0.353553f }, // 113
  {    0.353553f,   -0.707107f,    0.218508f,   -0.572061f }, // 114
  {    0.218508f,   -0.572061f,    0.353553f,   -0.707107f }, // 115
  {    0.135045f,   -0.572061f,    0.572061f,   -0.572061f }, // 116
  {    0.353553f,   -0.353553f,    0.353553f,   -0.790569f }, // 117
  {    0.353553f,   -0.218508f,    0.572061f,   -0.707107f }, // 118
  {    0.218508f,   -0.353553f,    0.707107f,   -0.572061f }, // 119
  {    0.707107f,   -0.353553f,   -0.572061f,    0.218508f }, // 120
  {    0.572061f,   -0.572061f,   -0.572061f,    0.135045f }, // 121
  {    0.790569f,   -0.353553f,   -0.353553f,    0.353553f }, // 122
  {    0.707107f,   -0.572061f,   -0.218508f,    0.353553f }, // 123
  {    0.572061f,   -0.707107f,   -0.353553f,    0.218508f }, // 124
  {    0.572061f,   -0.218508f,   -0.707107f,    0.353553f }, // 125
  {    0.353553f,   -0.572061f,   -0.707107f,    0.218508f }, // 126
  {    0.353553f,   -0.353553f,   -0.790569f,    0.353553f }, // 127
  {    0.707107f,   -0.218508f,   -0.353553f,    0.572061f }, // 128
  {    0.572061f,   -0.572061f,   -0.135045f,    0.572061f }, // 129
  {    0.572061f,   -0.353553f,   -0.218508f,    0.707107f }, // 130
  {    0.572061f,   -0.135045f,   -0.572061f,    0.572061f }, // 131
  {    0.353553f,   -0.790569f,   -0.353553f,    0.353553f }, // 132
  {    0.218508f,   -0.707107f,   -0.572061f,    0.353553f }, // 133
  {    0.353553f,   -0.707107f,   -0.218508f,    0.572061f }, // 134
  {    0.218508f,   -0.572061f,   -0.353553f,    0.707107f }, // 135
  {    0.135045f,   -0.572061f,   -0.572061f,    0.572061f }, // 136
  {    0.353553f,   -0.353553f,   -0.353553f,    0.790569f }, // 137
  {    0.353553f,   -0.218508f,   -0.572061f,    0.707107f }, // 138
  {    0.218508f,   -0.353553f,   -0.707107f,    0.572061f }, // 139
  {    0.707107f,   -0.353553f,   -0.572061f,   -0.218508f }, // 140
  {    0.572061f,   -0.572061f,   -0.572061f,   -0.135045f }, // 141
  {    0.790569f,   -0.353553f,   -0.353553f,   -0.353553f }, // 142
  {    0.707107f,   -0.572061f,   -0.218508f,   -0.353553f }, // 143
  {    0.572061f,   -0.707107f,   -0.353553f,   -0.218508f }, // 144
  {    0.572061f,   -0.218508f,   -0.707107f,   -0.353553f }, // 145
  {    0.353553f,   -0.572061f,   -0.707107f,   -0.218508f }, // 146
  {    0.353553f,   -0.353553f,   -0.790569f,   -0.353553f }, // 147
  {    0.707107f,   -0.218508f,   -0.353553f,   -0.572061f }, // 148
  {    0.572061f,   -0.572061f,   -0.135045f,   -0.572061f }, // 149
  {    0.572061f,   -0.353553f,   -0.218508f,   -0.707107f }, // 150
  {    0.572061f,   -0.135045f,   -0.572061f,   -0.572061f }, // 151
  {    0.353553f,   -0.790569f,   -0.353553f,   -0.353553f }, // 152
  {    0.218508f,   -0.707107f,   -0.572061f,   -0.353553f }, // 153
  {    0.353553f,   -0.707107f,   -0.218508f,   -0.572061f }, // 154
  {    0.218508f,   -0.572061f,   -0.353553f,   -0.707107f }, // 155
  {    0.135045f,   -0.572061f,   -0.572061f,   -0.572061f }, // 156
  {    0.353553f,   -0.353553f,   -0.353553f,   -0.790569f }, // 157
  {    0.353553f,   -0.218508f,   -0.572061f,   -0.707107f }, // 158
  {    0.218508f,   -0.353553f,   -0.707107f,   -0.572061f }, // 159
  {   -0.707107f,    0.353553f,    0.572061f,    0.218508f }, // 160
  {   -0.572061f,    0.572061f,    0.572061f,    0.135045f }, // 161
  {   -0.790569f,    0.353553f,    0.353553f,    0.353553f }, // 162
  {   -0.707107f,    0.572061f,    0.218508f,    0.353553f }, // 163
  {   -0.572061f,    0.707107f,    0.353553f,    0.218508f }, // 164
  {   -0.572061f,    0.218508f,    0.707107f,    0.353553f }, // 165
  {   -0.353553f,    0.572061f,    0.707107f,    0.218508f }, // 166
  {   -0.353553f,    0.353553f,    0.790569f,    0.353553f }, // 167
  {   -0.707107f,    0.218508f,    0.353553f,    0.572061f }, // 168
  {   -0.572061f,    0.572061f,    0.135045f,    0.572061f }, // 169
  {   -0.572061f,    0.353553f,    0.218508f,    0.707107f }, // 170
  {   -0.572061f,    0.135045f,    0.572061f,    0.572061f }, // 171
  {   -0.353553f,    0.790569f,    0.353553f,    0.353553f }, // 172
  {   -0.218508f,    0.707107f,    0.572061f,    0.353553f }, // 173
  {   -0.353553f,    0.707107f,    0.218508f,    0.572061f }, // 174
  {   -0.218508f,    0.572061f,    0.353553f,    0.707107f }, // 175
  {   -0.135045f,    0.572061f,    0.572061f,    0.572061f }, // 176
  {   -0.353553f,    0.353553f,    0.353553f,    0.790569f }, // 177
  {   -0.353553f,    0.218508f,    0.572061f,    0.707107f }, // 178
  {   -0.218508f,    0.353553f,    0.707107f,    0.572061f }, // 179
  {   -0.707107f,    0.353553f,    0.572061f,   -0.218508f }, // 180
  {   -0.572061f,    0.572061f,    0.572061f,   -0.135045f }, // 181
  {   -0.790569f,    0.353553f,    0.353553f,   -0.353553f }, // 182
  {   -0.707107f,    0.572061f,    0.218508f,   -0.353553f }, // 183
  {   -0.572061f,    0.707107f,    0.353553f,   -0.218508f }, // 184
  {   -0.572061f,    0.218508f,    0.707107f,   -0.353553f }, // 185
  {   -0.353553f,    0.572061f,    0.707107f,   -0.218508f }, // 186
  {   -0.353553f,    0.353553f,    0.790569f,   -0.353553f }, // 187
  {   -0.707107f,    0.218508f,    0.353553f,   -0.572061f }, // 188
  {   -0.572061f,    0.572061f,    0.135045f,   -0.572061f }, // 189
  {   -0.572061f,    0.353553f,    0.218508f,   -0.707107f }, // 190
  {   -0.572061f,    0.135045f,    0.572061f,   -0.572061f }, // 191
  {   -0.353553f,    0.790569f,    0.353553f,   -0.353553f }, // 192
  {   -0.218508f,    0.707107f,    0.572061f,   -0.353553f }, // 193
  {   -0.353553f,    0.707107f,    0.218508f,   -0.572061f }, // 194
  {   -0.218508f,    0.572061f,    0.353553f,   -0.707107f }, // 195
  {   -0.135045f,    0.572061f,    0.572061f,   -0.572061f }, // 196
  {   -0.353553f,    0.353553f,    0.353553f,   -0.790569f }, // 197
  {   -0.353553f,    0.218508f,    0.572061f,   -0.707107f }, // 198
  {   -0.218508f,    0.353553f,    0.707107f,   -0.572061f }, // 199
  {   -0.707107f,    0.353553f,   -0.572061f,    0.218508f }, // 200
  {   -0.572061f,    0.572061f,   -0.572061f,    0.135045f }, // 201
  {   -0.790569f,    0.353553f,   -0.353553f,    0.353553f }, // 202
  {   -0.707107f,    0.572061f,   -0.218508f,    0.353553f }, // 203
  {   -0.572061f,    0.707107f,   -0.353553f,    0.218508f }, // 204
  {   -0.572061f,    0.218508f,   -0.707107f,    0.353553f }, // 205
  {   -0.353553f,    0.572061f,   -0.707107f,    0.218508f }, // 206
  {   -0.353553f,    0.353553f,   -0.790569f,    0.353553f }, // 207
  {   -0.707107f,    0.218508f,   -0.353553f,    0.572061f }, // 208
  {   -0.572061f,    0.572061f,   -0.135045f,    0.572061f }, // 209
  {   -0.572061f,    0.353553f,   -0.218508f,    0.707107f }, // 210
  {   -0.572061f,    0.135045f,   -0.572061f,    0.572061f }, // 211
  {   -0.353553f,    0.790569f,   -0.353553f,    0.353553f }, // 212
  {   -0.218508f,    0.707107f,   -0.572061f,    0.353553f }, // 213
  {   -0.353553f,    0.707107f,   -0.218508f,    0.572061f }, // 214
  {   -0.218508f,    0.572061f,   -0.353553f,    0.707107f }, // 215
  {   -0.135045f,    0.572061f,   -0.572061f,    0.572061f }, // 216
  {   -0.353553f,    0.353553f,   -0.353553f,    0.790569f }, // 217
  {   -0.353553f,    0.218508f,   -0.572061f,    0.707107f }, // 218
  {   -0.218508f,    0.353553f,   -0.707107f,    0.572061f }, // 219
  {   -0.707107f,    0.353553f,   -0.572061f,   -0.218508f }, // 220
  {   -0.572061f,    0.572061f,   -0.572061f,   -0.135045f }, // 221
  {   -0.790569f,    0.353553f,   -0.353553f,   -0.353553f }, // 222
  {   -0.707107f,    0.572061f,   -0.218508f,   -0.353553f }, // 223
  {   -0.572061f,    0.707107f,   -0.353553f,   -0.218508f }, // 224
  {   -0.572061f,    0.218508f,   -0.707107f,   -0.353553f }, // 225
  {   -0.353553f,    0.572061f,   -0.707107f,   -0.218508f }, // 226
  {   -0.353553f,    0.353553f,   -0.790569f,   -0.353553f }, // 227
  {   -0.707107f,    0.218508f,   -0.353553f,   -0.572061f }, // 228
  {   -0.572061f,    0.572061f,   -0.135045f,   -0.572061f }, // 229
  {   -0.572061f,    0.353553f,   -0.218508f,   -0.707107f }, // 230
  {   -0.572061f,    0.135045f,   -0.572061f,   -0.572061f }, // 231
  {   -0.353553f,    0.790569f,   -0.353553f,   -0.353553f }, // 232
  {   -0.218508f,    0.707107f,   -0.572061f,   -0.353553f }, // 233
  {   -0.353553f,    0.707107f,   -0.218508f,   -0.572061f }, // 234
  {   -0.218508f,    0.572061f,   -0.353553f,   -0.707107f }, // 235
  {   -0.135045f,    0.572061f,   -0.572061f,   -0.572061f }, // 236
  {   -0.353553f,    0.353553f,   -0.353553f,   -0.790569f }, // 237
  {   -0.353553f,    0.218508f,   -0.572061f,   -0.707107f }, // 238
  {   -0.218508f,    0.353553f,   -0.707107f,   -0.572061f }, // 239
  {   -0.707107f,   -0.353553f,    0.572061f,    0.218508f }, // 240
  {   -0.572061f,   -0.572061f,    0.572061f,    0.135045f }, // 241
  {   -0.790569f,   -0.353553f,    0.353553f,    0.353553f }, // 242
  {   -0.707107f,   -0.572061f,    0.218508f,    0.353553f }, // 243
  {   -0.572061f,   -0.707107f,    0.353553f,    0.218508f }, // 244
  {   -0.572061f,   -0.218508f,    0.707107f,    0.353553f }, // 245
  {   -0.353553f,   -0.572061f,    0.707107f,    0.218508f }, // 246
  {   -0.353553f,   -0.353553f,    0.790569f,    0.353553f }, // 247
  {   -0.707107f,   -0.218508f,    0.353553f,    0.572061f }, // 248
  {   -0.572061f,   -0.572061f,    0.135045f,    0.572061f }, // 249
  {   -0.572061f,   -0.353553f,    0.218508f,    0.707107f }, // 250
  {   -0.572061f,   -0.135045f,    0.572061f,    0.572061f }, // 251
  {   -0.353553f,   -0.790569f,    0.353553f,    0.353553f }, // 252
  {   -0.218508f,   -0.707107f,    0.572061f,    0.353553f }, // 253
  {   -0.353553f,   -0.707107f,    0.218508f,    0.572061f }, // 254
  {   -0.218508f,   -0.572061f,    0.353553f,    0.707107f }, // 255
  {   -0.135045f,   -0.572061f,    0.572061f,    0.572061f }, // 256
  {   -0.353553f,   -0.353553f,    0.353553f,    0.790569f }, // 257
  {   -0.353553f,   -0.218508f,    0.572061f,    0.707107f }, // 258
  {   -0.218508f,   -0.353553f,    0.707107f,    0.572061f }, // 259
  {   -0.707107f,   -0.353553f,    0.572061f,   -0.218508f }, // 260
  {   -0.572061f,   -0.572061f,    0.572061f,   -0.135045f }, // 261
  {   -0.790569f,   -0.353553f,    0.353553f,   -0.353553f }, // 262
  {   -0.707107f,   -0.572061f,    0.218508f,   -0.353553f }, // 263
  {   -0.572061f,   -0.707107f,    0.353553f,   -0.218508f }, // 264
  {   -0.572061f,   -0.218508f,    0.707107f,   -0.353553f }, // 265
  {   -0.353553f,   -0.572061f,    0.707107f,   -0.218508f }, // 266
  {   -0.353553f,   -0.353553f,    0.790569f,   -0.353553f }, // 267
  {   -0.707107f,   -0.218508f,    0.353553f,   -0.572061f }, // 268
  {   -0.572061f,   -0.572061f,    0.135045f,   -0.572061f }, // 269
  {   -0.572061f,   -0.353553f,    0.218508f,   -0.707107f }, // 270
  {   -0.572061f,   -0.135045f,    0.572061f,   -0.572061f }, // 271
  {   -0.353553f,   -0.790569f,    0.353553f,   -0.353553f }, // 272
  {   -0.218508f,   -0.707107f,    0.572061f,   -0.353553f }, // 273
  {   -0.353553f,   -0.707107f,    0.218508f,   -0.572061f }, // 274
  {   -0.218508f,   -0.572061f,    0.353553f,   -0.707107f }, // 275
  {   -0.135045f,   -0.572061f,    0.572061f,   -0.572061f }, // 276
  {   -0.353553f,   -0.353553f,    0.353553f,   -0.790569f }, // 277
  {   -0.353553f,   -0.218508f,    0.572061f,   -0.707107f }, // 278
  {   -0.218508f,   -0.353553f,    0.707107f,   -0.572061f }, // 279
  {   -0.707107f,   -0.353553f,   -0.572061f,    0.218508f }, // 280
  {   -0.572061f,   -0.572061f,   -0.572061f,    0.135045f }, // 281
  {   -0.790569f,   -0.353553f,   -0.353553f,    0.353553f }, // 282
  {   -0.707107f,   -0.572061f,   -0.218508f,    0.353553f }, // 283
  {   -0.572061f,   -0.707107f,   -0.353553f,    0.218508f }, // 284
  {   -0.572061f,   -0.218508f,   -0.707107f,    0.353553f }, // 285
  {   -0.353553f,   -0.572061f,   -0.707107f,    0.218508f }, // 286
  {   -0.353553f,   -0.353553f,   -0.790569f,    0.353553f }, // 287
  {   -0.707107f,   -0.218508f,   -0.353553f,    0.572061f }, // 288
  {   -0.572061f,   -0.572061f,   -0.135045f,    0.572061f }, // 289
  {   -0.572061f,   -0.353553f,   -0.218508f,    0.707107f }, // 290
  {   -0.572061f,   -0.135045f,   -0.572061f,    0.572061f }, // 291
  {   -0.353553f,   -0.790569f,   -0.353553f,    0.353553f }, // 292
  {   -0.218508f,   -0.707107f,   -0.572061f,    0.353553f }, // 293
  {   -0.353553f,   -0.707107f,   -0.218508f,    0.572061f }, // 294
  {   -0.218508f,   -0.572061f,   -0.353553f,    0.707107f }, // 295
  {   -0.135045f,   -0.572061f,   -0.572061f,    0.572061f }, // 296
  {   -0.353553f,   -0.353553f,   -0.353553f,    0.790569f }, // 297
  {   -0.353553f,   -0.218508f,   -0.572061f,    0.707107f }, // 298
  {   -0.218508f,   -0.353553f,   -0.707107f,    0.572061f }, // 299
  {   -0.707107f,   -0.353553f,   -0.572061f,   -0.218508f }, // 300
  {   -0.572061f,   -0.572061f,   -0.572061f,   -0.135045f }, // 301
  {   -0.790569f,   -0.353553f,   -0.353553f,   -0.353553f }, // 302
  {   -0.707107f,   -0.572061f,   -0.218508f,   -0.353553f }, // 303
  {   -0.572061f,   -0.707107f,   -0.353553f,   -0.218508f }, // 304
  {   -0.572061f,   -0.218508f,   -0.707107f,   -0.353553f }, // 305
  {   -0.353553f,   -0.572061f,   -0.707107f,   -0.218508f }, // 306
  {   -0.353553f,   -0.353553f,   -0.790569f,   -0.353553f }, // 307
  {   -0.707107f,   -0.218508f,   -0.353553f,   -0.572061f }, // 308
  {   -0.572061f,   -0.572061f,   -0.135045f,   -0.572061f }, // 309
  {   -0.572061f,   -0.353553f,   -0.218508f,   -0.707107f }, // 310
  {   -0.572061f,   -0.135045f,   -0.572061f,   -0.572061f }, // 311
  {   -0.353553f,   -0.790569f,   -0.353553f,   -0.353553f }, // 312
  {   -0.218508f,   -0.707107f,   -0.572061f,   -0.353553f }, // 313
  {   -0.353553f,   -0.707107f,   -0.218508f,   -0.572061f }, // 314
  {   -0.218508f,   -0.572061f,   -0.353553f,   -0.707107f }, // 315
  {   -0.135045f,   -0.572061f,   -0.572061f,   -0.572061f }, // 316
  {   -0.353553f,   -0.353553f,   -0.353553f,   -0.790569f }, // 317
  {   -0.353553f,   -0.218508f,   -0.572061f,   -0.707107f }, // 318
  {   -0.218508f,   -0.353553f,   -0.707107f,   -0.572061f }, // 319
  {    0.135045f,    0.000000f,    0.353553f,    0.925615f }, // 320
  {   -0.135045f,    0.000000f,    0.353553f,    0.925615f }, // 321
  {    0.218508f,    0.218508f,    0.218508f,    0.925615f }, // 322
  {   -0.218508f,    0.218508f,    0.218508f,    0.925615f }, // 323
  {    0.000000f,    0.353553f,    0.135045f,    0.925615f }, // 324
  {    0.135045f,    0.000000f,   -0.353553f,    0.925615f }, // 325
  {   -0.135045f,    0.000000f,   -0.353553f,    0.925615f }, // 326
  {    0.218508f,    0.218508f,   -0.218508f,    0.925615f }, // 327
  {   -0.218508f,    0.218508f,   -0.218508f,    0.925615f }, // 328
  {    0.000000f,    0.353553f,   -0.135045f,    0.925615f }, // 329
  {    0.218508f,   -0.218508f,    0.218508f,    0.925615f }, // 330
  {   -0.218508f,   -0.218508f,    0.218508f,    0.925615f }, // 331
  {    0.000000f,   -0.353553f,    0.135045f,    0.925615f }, // 332
  {    0.218508f,   -0.218508f,   -0.218508f,    0.925615f }, // 333
  {   -0.218508f,   -0.218508f,   -0.218508f,    0.925615f }, // 334
  {    0.000000f,   -0.353553f,   -0.135045f,    0.925615f }, // 335
  {    0.353553f,    0.135045f,    0.000000f,    0.925615f }, // 336
  {    0.353553f,   -0.135045f,    0.000000f,    0.925615f }, // 337
  {   -0.353553f,    0.135045f,    0.000000f,    0.925615f }, // 338
  {   -0.353553f,   -0.135045f,    0.000000f,    0.925615f }, // 339
  {    0.135045f,    0.000000f,    0.353553f,   -0.925615f }, // 340
  {   -0.135045f,    0.000000f,    0.353553f,   -0.925615f }, // 341
  {    0.218508f,    0.218508f,    0.218508f,   -0.925615f }, // 342
  {   -0.218508f,    0.218508f,    0.218508f,   -0.925615f }, // 343
  {    0.000000f,    0.353553f,    0.135045f,   -0.925615f }, // 344
  {    0.135045f,    0.000000f,   -0.353553f,   -0.925615f }, // 345
  {   -0.135045f,    0.000000f,   -0.353553f,   -0.925615f }, // 346
  {    0.218508f,    0.218508f,   -0.218508f,   -0.925615f }, // 347
  {   -0.218508f,    0.218508f,   -0.218508f,   -0.925615f }, // 348
  {    0.000000f,    0.353553f,   -0.135045f,   -0.925615f }, // 349
  {    0.218508f,   -0.218508f,    0.218508f,   -0.925615f }, // 350
  {   -0.218508f,   -0.218508f,    0.218508f,   -0.925615f }, // 351
  {    0.000000f,   -0.353553f,    0.135045f,   -0.925615f }, // 352
  {    0.218508f,   -0.218508f,   -0.218508f,   -0.925615f }, // 353
  {   -0.218508f,   -0.218508f,   -0.218508f,   -0.925615f }, // 354
  {    0.000000f,   -0.353553f,   -0.135045f,   -0.925615f }, // 355
  {    0.353553f,    0.135045f,    0.000000f,   -0.925615f }, // 356
  {    0.353553f,   -0.135045f,    0.000000f,   -0.925615f }, // 357
  {   -0.353553f,    0.135045f,    0.000000f,   -0.925615f }, // 358
  {   -0.353553f,   -0.135045f,    0.000000f,   -0.925615f }, // 359
  {    0.353553f,    0.000000f,    0.925615f,    0.135045f }, // 360
  {    0.353553f,    0.000000f,    0.925615f,   -0.135045f }, // 361
  {    0.135045f,    0.353553f,    0.925615f,    0.000000f }, // 362
  {    0.218508f,    0.218508f,    0.925615f,    0.218508f }, // 363
  {    0.218508f,    0.218508f,    0.925615f,   -0.218508f }, // 364
  {    0.135045f,   -0.353553f,    0.925615f,    0.000000f }, // 365
  {    0.218508f,   -0.218508f,    0.925615f,    0.218508f }, // 366
  {    0.218508f,   -0.218508f,    0.925615f,   -0.218508f }, // 367
  {   -0.353553f,    0.000000f,    0.925615f,    0.135045f }, // 368
  {   -0.353553f,    0.000000f,    0.925615f,   -0.135045f }, // 369
  {   -0.135045f,    0.353553f,    0.925615f,    0.000000f }, // 370
  {   -0.218508f,    0.218508f,    0.925615f,    0.218508f }, // 371
  {   -0.218508f,    0.218508f,    0.925615f,   -0.218508f }, // 372
  {   -0.135045f,   -0.353553f,    0.925615f,    0.000000f }, // 373
  {   -0.218508f,   -0.218508f,    0.925615f,    0.218508f }, // 374
  {   -0.218508f,   -0.218508f,    0.925615f,   -0.218508f }, // 375
  {    0.000000f,    0.135045f,    0.925615f,    0.353553f }, // 376
  {    0.000000f,    0.135045f,    0.925615f,   -0.353553f }, // 377
  {    0.000000f,   -0.135045f,    0.925615f,    0.353553f }, // 378
  {    0.000000f,   -0.135045f,    0.925615f,   -0.353553f }, // 379
  {    0.353553f,    0.000000f,   -0.925615f,    0.135045f }, // 380
  {    0.353553f,    0.000000f,   -0.925615f,   -0.135045f }, // 381
  {    0.135045f,    0.353553f,   -0.925615f,    0.000000f }, // 382
  {    0.218508f,    0.218508f,   -0.925615f,    0.218508f }, // 383
  {    0.218508f,    0.218508f,   -0.925615f,   -0.218508f }, // 384
  {    0.135045f,   -0.353553f,   -0.925615f,    0.000000f }, // 385
  {    0.218508f,   -0.218508f,   -0.925615f,    0.218508f }, // 386
  {    0.218508f,   -0.218508f,   -0.925615f,   -0.218508f }, // 387
  {   -0.353553f,    0.000000f,   -0.925615f,    0.135045f }, // 388
  {   -0.353553f,    0.000000f,   -0.925615f,   -0.135045f }, // 389
  {   -0.135045f,    0.353553f,   -0.925615f,    0.000000f }, // 390
  {   -0.218508f,    0.218508f,   -0.925615f,    0.218508f }, // 391
  {   -0.218508f,    0.218508f,   -0.925615f,   -0.218508f }, // 392
  {   -0.135045f,   -0.353553f,   -0.925615f,    0.000000f }, // 393
  {   -0.218508f,   -0.218508f,   -0.925615f,    0.218508f }, // 394
  {   -0.218508f,   -0.218508f,   -0.925615f,   -0.218508f }, // 395
  {    0.000000f,    0.135045f,   -0.925615f,    0.353553f }, // 396
  {    0.000000f,    0.135045f,   -0.925615f,   -0.353553f }, // 397
  {    0.000000f,   -0.135045f,   -0.925615f,    0.353553f }, // 398
  {    0.000000f,   -0.135045f,   -0.925615f,   -0.353553f }, // 399
  {    0.000000f,    0.925615f,    0.353553f,    0.135045f }, // 400
  {    0.000000f,    0.925615f,    0.353553f,   -0.135045f }, // 401
  {    0.353553f,    0.925615f,    0.135045f,    0.000000f }, // 402
  {    0.218508f,    0.925615f,    0.218508f,    0.218508f }, // 403
  {    0.218508f,    0.925615f,    0.218508f,   -0.218508f }, // 404
  {    0.000000f,    0.925615f,   -0.353553f,    0.135045f }, // 405
  {    0.000000f,    0.925615f,   -0.353553f,   -0.135045f }, // 406
  {    0.353553f,    0.925615f,   -0.135045f,    0.000000f }, // 407
  {    0.218508f,    0.925615f,   -0.218508f,    0.218508f }, // 408
  {    0.218508f,    0.925615f,   -0.218508f,   -0.218508f }, // 409
  {   -0.353553f,    0.925615f,    0.135045f,    0.000000f }, // 410
  {   -0.218508f,    0.925615f,    0.218508f,    0.218508f }, // 411
  {   -0.218508f,    0.925615f,    0.218508f,   -0.218508f }, // 412
  {   -0.353553f,    0.925615f,   -0.135045f,    0.000000f }, // 413
  {   -0.218508f,    0.925615f,   -0.218508f,    0.218508f }, // 414
  {   -0.218508f,    0.925615f,   -0.218508f,   -0.218508f }, // 415
  {    0.135045f,    0.925615f,    0.000000f,    0.353553f }, // 416
  {    0.135045f,    0.925615f,    0.000000f,   -0.353553f }, // 417
  {   -0.135045f,    0.925615f,    0.000000f,    0.353553f }, // 418
  {   -0.135045f,    0.925615f,    0.000000f,   -0.353553f }, // 419
  {    0.000000f,   -0.925615f,    0.353553f,    0.135045f }, // 420
  {    0.000000f,   -0.925615f,    0.353553f,   -0.135045f }, // 421
  {    0.353553f,   -0.925615f,    0.135045f,    0.000000f }, // 422
  {    0.218508f,   -0.925615f,    0.218508f,    0.218508f }, // 423
  {    0.218508f,   -0.925615f,    0.218508f,   -0.218508f }, // 424
  {    0.000000f,   -0.925615f,   -0.353553f,    0.135045f }, // 425
  {    0.000000f,   -0.925615f,   -0.353553f,   -0.135045f }, // 426
  {    0.353553f,   -0.925615f,   -0.135045f,    0.000000f }, // 427
  {    0.218508f,   -0.925615f,   -0.218508f,    0.218508f }, // 428
  {    0.218508f,   -0.925615f,   -0.218508f,   -0.218508f }, // 429
  {   -0.353553f,   -0.925615f,    0.135045f,    0.000000f }, // 430
  {   -0.218508f,   -0.925615f,    0.218508f,    0.218508f }, // 431
  {   -0.218508f,   -0.925615f,    0.218508f,   -0.218508f }, // 432
  {   -0.353553f,   -0.925615f,   -0.135045f,    0.000000f }, // 433
  {   -0.218508f,   -0.925615f,   -0.218508f,    0.218508f }, // 434
  {   -0.218508f,   -0.925615f,   -0.218508f,   -0.218508f }, // 435
  {    0.135045f,   -0.925615f,    0.000000f,    0.353553f }, // 436
  {    0.135045f,   -0.925615f,    0.000000f,   -0.353553f }, // 437
  {   -0.135045f,   -0.925615f,    0.000000f,    0.353553f }, // 438
  {   -0.135045f,   -0.925615f,    0.000000f,   -0.353553f }, // 439
  {    0.925615f,    0.353553f,    0.000000f,    0.135045f }, // 440
  {    0.925615f,    0.353553f,    0.000000f,   -0.135045f }, // 441
  {    0.925615f,    0.218508f,    0.218508f,    0.218508f }, // 442
  {    0.925615f,    0.218508f,    0.218508f,   -0.218508f }, // 443
  {    0.925615f,    0.135045f,    0.353553f,    0.000000f }, // 444
  {    0.925615f,    0.218508f,   -0.218508f,    0.218508f }, // 445
  {    0.925615f,    0.218508f,   -0.218508f,   -0.218508f }, // 446
  {    0.925615f,    0.135045f,   -0.353553f,    0.000000f }, // 447
  {    0.925615f,   -0.353553f,    0.000000f,    0.135045f }, // 448
  {    0.925615f,   -0.353553f,    0.000000f,   -0.135045f }, // 449
  {    0.925615f,   -0.218508f,    0.218508f,    0.218508f }, // 450
  {    0.925615f,   -0.218508f,    0.218508f,   -0.218508f }, // 451
  {    0.925615f,   -0.135045f,    0.353553f,    0.000000f }, // 452
  {    0.925615f,   -0.218508f,   -0.218508f,    0.218508f }, // 453
  {    0.925615f,   -0.218508f,   -0.218508f,   -0.218508f }, // 454
  {    0.925615f,   -0.135045f,   -0.353553f,    0.000000f }, // 455
  {    0.925615f,    0.000000f,    0.135045f,    0.353553f }, // 456
  {    0.925615f,    0.000000f,   -0.135045f,    0.353553f }, // 457
  {    0.925615f,    0.000000f,    0.135045f,   -0.353553f }, // 458
  {    0.925615f,    0.000000f,   -0.135045f,   -0.353553f }, // 459
  {   -0.925615f,    0.353553f,    0.000000f,    0.135045f }, // 460
  {   -0.925615f,    0.353553f,    0.000000f,   -0.135045f }, // 461
  {   -0.925615f,    0.218508f,    0.218508f,    0.218508f }, // 462
  {   -0.925615f,    0.218508f,    0.218508f,   -0.218508f }, // 463
  {   -0.925615f,    0.135045f,    0.353553f,    0.000000f }, // 464
  {   -0.925615f,    0.218508f,   -0.218508f,    0.218508f }, // 465
  {   -0.925615f,    0.218508f,   -0.218508f,   -0.218508f }, // 466
  {   -0.925615f,    0.135045f,   -0.353553f,    0.000000f }, // 467
  {   -0.925615f,   -0.353553f,    0.000000f,    0.135045f }, // 468
  {   -0.925615f,   -0.353553f,    0.000000f,   -0.135045f }, // 469
  {   -0.925615f,   -0.218508f,    0.218508f,    0.218508f }, // 470
  {   -0.925615f,   -0.218508f,    0.218508f,   -0.218508f }, // 471
  {   -0.925615f,   -0.135045f,    0.353553f,    0.000000f }, // 472
  {   -0.925615f,   -0.218508f,   -0.218508f,    0.218508f }, // 473
  {   -0.925615f,   -0.218508f,   -0.218508f,   -0.218508f }, // 474
  {   -0.925615f,   -0.135045f,   -0.353553f,    0.000000f }, // 475
  {   -0.925615f,    0.000000f,    0.135045f,    0.353553f }, // 476
  {   -0.925615f,    0.000000f,   -0.135045f,    0.353553f }, // 477
  {   -0.925615f,    0.000000f,    0.135045f,   -0.353553f }, // 478
  {   -0.925615f,    0.000000f,   -0.135045f,   -0.353553f }, // 479
  {    0.790569f,    0.572061f,    0.000000f,    0.218508f }, // 480
  {    0.790569f,    0.572061f,    0.000000f,   -0.218508f }, // 481
  {    0.707107f,    0.707107f,    0.000000f,    0.000000f }, // 482
  {    0.790569f,    0.218508f,    0.572061f,    0.000000f }, // 483
  {    0.572061f,    0.790569f,    0.218508f,    0.000000f }, // 484
  {    0.790569f,    0.218508f,   -0.572061f,    0.000000f }, // 485
  {    0.572061f,    0.790569f,   -0.218508f,    0.000000f }, // 486
  {    0.790569f,   -0.572061f,    0.000000f,    0.218508f }, // 487
  {    0.790569f,   -0.572061f,    0.000000f,   -0.218508f }, // 488
  {    0.707107f,   -0.707107f,    0.000000f,    0.000000f }, // 489
  {    0.790569f,   -0.218508f,    0.572061f,    0.000000f }, // 490
  {    0.572061f,   -0.790569f,    0.218508f,    0.000000f }, // 491
  {    0.790569f,   -0.218508f,   -0.572061f,    0.000000f }, // 492
  {    0.572061f,   -0.790569f,   -0.218508f,    0.000000f }, // 493
  {   -0.790569f,    0.572061f,    0.000000f,    0.218508f }, // 494
  {   -0.790569f,    0.572061f,    0.000000f,   -0.218508f }, // 495
  {   -0.707107f,    0.707107f,    0.000000f,    0.000000f }, // 496
  {   -0.790569f,    0.218508f,    0.572061f,    0.000000f }, // 497
  {   -0.572061f,    0.790569f,    0.218508f,    0.000000f }, // 498
  {   -0.790569f,    0.218508f,   -0.572061f,    0.000000f }, // 499
  {   -0.572061f,    0.790569f,   -0.218508f,    0.000000f }, // 500
  {   -0.790569f,   -0.572061f,    0.000000f,    0.218508f }, // 501
  {   -0.790569f,   -0.572061f,    0.000000f,   -0.218508f }, // 502
  {   -0.707107f,   -0.707107f,    0.000000f,    0.000000f }, // 503
  {   -0.790569f,   -0.218508f,    0.572061f,    0.000000f }, // 504
  {   -0.572061f,   -0.790569f,    0.218508f,    0.000000f }, // 505
  {   -0.790569f,   -0.218508f,   -0.572061f,    0.000000f }, // 506
  {   -0.572061f,   -0.790569f,   -0.218508f,    0.000000f }, // 507
  {    0.707107f,    0.000000f,    0.707107f,    0.000000f }, // 508
  {    0.572061f,    0.000000f,    0.790569f,    0.218508f }, // 509
  {    0.572061f,    0.000000f,    0.790569f,   -0.218508f }, // 510
  {    0.218508f,    0.572061f,    0.790569f,    0.000000f }, // 511
  {    0.707107f,    0.000000f,   -0.707107f,    0.000000f }, // 512
  {    0.572061f,    0.000000f,   -0.790569f,    0.218508f }, // 513
  {    0.572061f,    0.000000f,   -0.790569f,   -0.218508f }, // 514
  {    0.218508f,    0.572061f,   -0.790569f,    0.000000f }, // 515
  {    0.218508f,   -0.572061f,    0.790569f,    0.000000f }, // 516
  {    0.218508f,   -0.572061f,   -0.790569f,    0.000000f }, // 517
  {   -0.707107f,    0.000000f,    0.707107f,    0.000000f }, // 518
  {   -0.572061f,    0.000000f,    0.790569f,    0.218508f }, // 519
  {   -0.572061f,    0.000000f,    0.790569f,   -0.218508f }, // 520
  {   -0.218508f,    0.572061f,    0.790569f,    0.000000f }, // 521
  {   -0.707107f,    0.000000f,   -0.707107f,    0.000000f }, // 522
  {   -0.572061f,    0.000000f,   -0.790569f,    0.218508f }, // 523
  {   -0.572061f,    0.000000f,   -0.790569f,   -0.218508f }, // 524
  {   -0.218508f,    0.572061f,   -0.790569f,    0.000000f }, // 525
  {   -0.218508f,   -0.572061f,    0.790569f,    0.000000f }, // 526
  {   -0.218508f,   -0.572061f,   -0.790569f,    0.000000f }, // 527
  {    0.790569f,    0.000000f,    0.218508f,    0.572061f }, // 528
  {    0.790569f,    0.000000f,   -0.218508f,    0.572061f }, // 529
  {    0.707107f,    0.000000f,    0.000000f,    0.707107f }, // 530
  {    0.572061f,    0.218508f,    0.000000f,    0.790569f }, // 531
  {    0.790569f,    0.000000f,    0.218508f,   -0.572061f }, // 532
  {    0.790569f,    0.000000f,   -0.218508f,   -0.572061f }, // 533
  {    0.707107f,    0.000000f,    0.000000f,   -0.707107f }, // 534
  {    0.572061f,    0.218508f,    0.000000f,   -0.790569f }, // 535
  {    0.572061f,   -0.218508f,    0.000000f,    0.790569f }, // 536
  {    0.572061f,   -0.218508f,    0.000000f,   -0.790569f }, // 537
  {   -0.790569f,    0.000000f,    0.218508f,    0.572061f }, // 538
  {   -0.790569f,    0.000000f,   -0.218508f,    0.572061f }, // 539
  {   -0.707107f,    0.000000f,    0.000000f,    0.707107f }, // 540
  {   -0.572061f,    0.218508f,    0.000000f,    0.790569f }, // 541
  {   -0.790569f,    0.000000f,    0.218508f,   -0.572061f }, // 542
  {   -0.790569f,    0.000000f,   -0.218508f,   -0.572061f }, // 543
  {   -0.707107f,    0.000000f,    0.000000f,   -0.707107f }, // 544
  {   -0.572061f,    0.218508f,    0.000000f,   -0.790569f }, // 545
  {   -0.572061f,   -0.218508f,    0.000000f,    0.790569f }, // 546
  {   -0.572061f,   -0.218508f,    0.000000f,   -0.790569f }, // 547
  {    0.000000f,    0.790569f,    0.572061f,    0.218508f }, // 548
  {    0.000000f,    0.790569f,    0.572061f,   -0.218508f }, // 549
  {    0.000000f,    0.707107f,    0.707107f,    0.000000f }, // 550
  {    0.000000f,    0.790569f,   -0.572061f,    0.218508f }, // 551
  {    0.000000f,    0.790569f,   -0.572061f,   -0.218508f }, // 552
  {    0.000000f,    0.707107f,   -0.707107f,    0.000000f }, // 553
  {    0.000000f,   -0.790569f,    0.572061f,    0.218508f }, // 554
  {    0.000000f,   -0.790569f,    0.572061f,   -0.218508f }, // 555
  {    0.000000f,   -0.707107f,    0.707107f,    0.000000f }, // 556
  {    0.000000f,   -0.790569f,   -0.572061f,    0.218508f }, // 557
  {    0.000000f,   -0.790569f,   -0.572061f,   -0.218508f }, // 558
  {    0.000000f,   -0.707107f,   -0.707107f,    0.000000f }, // 559
  {    0.218508f,    0.790569f,    0.000000f,    0.572061f }, // 560
  {    0.218508f,    0.790569f,    0.000000f,   -0.572061f }, // 561
  {    0.218508f,   -0.790569f,    0.000000f,    0.572061f }, // 562
  {    0.218508f,   -0.790569f,    0.000000f,   -0.572061f }, // 563
  {   -0.218508f,    0.790569f,    0.000000f,    0.572061f }, // 564
  {   -0.218508f,    0.790569f,    0.000000f,   -0.572061f }, // 565
  {   -0.218508f,   -0.790569f,    0.000000f,    0.572061f }, // 566
  {   -0.218508f,   -0.790569f,    0.000000f,   -0.572061f }, // 567
  {    0.218508f,    0.000000f,    0.572061f,    0.790569f }, // 568
  {   -0.218508f,    0.000000f,    0.572061f,    0.790569f }, // 569
  {    0.000000f,    0.000000f,    0.707107f,    0.707107f }, // 570
  {    0.000000f,    0.572061f,    0.218508f,    0.790569f }, // 571
  {    0.000000f,    0.218508f,    0.790569f,    0.572061f }, // 572
  {    0.218508f,    0.000000f,    0.572061f,   -0.790569f }, // 573
  {   -0.218508f,    0.000000f,    0.572061f,   -0.790569f }, // 574
  {    0.000000f,    0.000000f,    0.707107f,   -0.707107f }, // 575
  {    0.000000f,    0.572061f,    0.218508f,   -0.790569f }, // 576
  {    0.000000f,    0.218508f,    0.790569f,   -0.572061f }, // 577
  {    0.218508f,    0.000000f,   -0.572061f,    0.790569f }, // 578
  {   -0.218508f,    0.000000f,   -0.572061f,    0.790569f }, // 579
  {    0.000000f,    0.000000f,   -0.707107f,    0.707107f }, // 580
  {    0.000000f,    0.572061f,   -0.218508f,    0.790569f }, // 581
  {    0.000000f,    0.218508f,   -0.790569f,    0.572061f }, // 582
  {    0.218508f,    0.000000f,   -0.572061f,   -0.790569f }, // 583
  {   -0.218508f,    0.000000f,   -0.572061f,   -0.790569f }, // 584
  {    0.000000f,    0.000000f,   -0.707107f,   -0.707107f }, // 585
  {    0.000000f,    0.572061f,   -0.218508f,   -0.790569f }, // 586
  {    0.000000f,    0.218508f,   -0.790569f,   -0.572061f }, // 587
  {    0.000000f,   -0.572061f,    0.218508f,    0.790569f }, // 588
  {    0.000000f,   -0.218508f,    0.790569f,    0.572061f }, // 589
  {    0.000000f,   -0.572061f,    0.218508f,   -0.790569f }, // 590
  {    0.000000f,   -0.218508f,    0.790569f,   -0.572061f }, // 591
  {    0.000000f,   -0.572061f,   -0.218508f,    0.790569f }, // 592
  {    0.000000f,   -0.218508f,   -0.790569f,    0.572061f }, // 593
  {    0.000000f,   -0.572061f,   -0.218508f,   -0.790569f }, // 594
  {    0.000000f,   -0.218508f,   -0.790569f,   -0.572061f }, // 595
  {    0.000000f,    0.707107f,    0.000000f,    0.707107f }, // 596
  {    0.000000f,    0.707107f,    0.000000f,   -0.707107f }, // 597
  {    0.000000f,   -0.707107f,    0.000000f,    0.707107f }, // 598
  {    0.000000f,   -0.707107f,    0.000000f,   -0.707107f }, // 599
};
int cellToOppositeK600[600] = { // The opposite cell, in cell order
    300, //   0
    301, //   1
    302, //   2
    303, //   3
    304, //   4
    305, //   5
    306, //   6
    307, //   7
    308, //   8
    309, //   9
    310, //  10
    311, //  11
    312, //  12
    313, //  13
    314, //  14
    315, //  15
    316, //  16
    317, //  17
    318, //  18
    319, //  19
    280, //  20
    281, //  21
    282, //  22
    283, //  23
    284, //  24
    285, //  25
    286, //  26
    287, //  27
    288, //  28
    289, //  29
    290, //  30
    291, //  31
    292, //  32
    293, //  33
    294, //  34
    295, //  35
    296, //  36
    297, //  37
    298, //  38
    299, //  39
    260, //  40
    261, //  41
    262, //  42
    263, //  43
    264, //  44
    265, //  45
    266, //  46
    267, //  47
    268, //  48
    269, //  49
    270, //  50
    271, //  51
    272, //  52
    273, //  53
    274, //  54
    275, //  55
    276, //  56
    277, //  57
    278, //  58
    279, //  59
    240, //  60
    241, //  61
    242, //  62
    243, //  63
    244, //  64
    245, //  65
    246, //  66
    247, //  67
    248, //  68
    249, //  69
    250, //  70
    251, //  71
    252, //  72
    253, //  73
    254, //  74
    255, //  75
    256, //  76
    257, //  77
    258, //  78
    259, //  79
    220, //  80
    221, //  81
    222, //  82
    223, //  83
    224, //  84
    225, //  85
    226, //  86
    227, //  87
    228, //  88
    229, //  89
    230, //  90
    231, //  91
    232, //  92
    233, //  93
    234, //  94
    235, //  95
    236, //  96
    237, //  97
    238, //  98
    239, //  99
    200, // 100
    201, // 101
    202, // 102
    203, // 103
    204, // 104
    205, // 105
    206, // 106
    207, // 107
    208, // 108
    209, // 109
    210, // 110
    211, // 111
    212, // 112
    213, // 113
    214, // 114
    215, // 115
    216, // 116
    217, // 117
    218, // 118
    219, // 119
    180, // 120
    181, // 121
    182, // 122
    183, // 123
    184, // 124
    185, // 125
    186, // 126
    187, // 127
    188, // 128
    189, // 129
    190, // 130
    191, // 131
    192, // 132
    193, // 133
    194, // 134
    195, // 135
    196, // 136
    197, // 137
    198, // 138
    199, // 139
    160, // 140
    161, // 141
    162, // 142
    163, // 143
    164, // 144
    165, // 145
    166, // 146
    167, // 147
    168, // 148
    169, // 149
    170, // 150
    171, // 151
    172, // 152
    173, // 153
    174, // 154
    175, // 155
    176, // 156
    177, // 157
    178, // 158
    179, // 159
    140, // 160
    141, // 161
    142, // 162
    143, // 163
    144, // 164
    145, // 165
    146, // 166
    147, // 167
    148, // 168
    149, // 169
    150, // 170
    151, // 171
    152, // 172
    153, // 173
    154, // 174
    155, // 175
    156, // 176
    157, // 177
    158, // 178
    159, // 179
    120, // 180
    121, // 181
    122, // 182
    123, // 183
    124, // 184
    125, // 185
    126, // 186
    127, // 187
    128, // 188
    129, // 189
    130, // 190
    131, // 191
    132, // 192
    133, // 193
    134, // 194
    135, // 195
    136, // 196
    137, // 197
    138, // 198
    139, // 199
    100, // 200
    101, // 201
    102, // 202
    103, // 203
    104, // 204
    105, // 205
    106, // 206
    107, // 207
    108, // 208
    109, // 209
    110, // 210
    111, // 211
    112, // 212
    113, // 213
    114, // 214
    115, // 215
    116, // 216
    117, // 217
    118, // 218
    119, // 219
     80, // 220
     81, // 221
     82, // 222
     83, // 223
     84, // 224
     85, // 225
     86, // 226
     87, // 227
     88, // 228
     89, // 229
     90, // 230
     91, // 231
     92, // 232
     93, // 233
     94, // 234
     95, // 235
     96, // 236
     97, // 237
     98, // 238
     99, // 239
     60, // 240
     61, // 241
     62, // 242
     63, // 243
     64, // 244
     65, // 245
     66, // 246
     67, // 247
     68, // 248
     69, // 249
     70, // 250
     71, // 251
     72, // 252
     73, // 253
     74, // 254
     75, // 255
     76, // 256
     77, // 257
     78, // 258
     79, // 259
     40, // 260
     41, // 261
     42, // 262
     43, // 263
     44, // 264
     45, // 265
     46, // 266
     47, // 267
     48, // 268
     49, // 269
     50, // 270
     51, // 271
     52, // 272
     53, // 273
     54, // 274
     55, // 275
     56, // 276
     57, // 277
     58, // 278
     59, // 279
     20, // 280
     21, // 281
     22, // 282
     23, // 283
     24, // 284
     25, // 285
     26, // 286
     27, // 287
     28, // 288
     29, // 289
     30, // 290
     31, // 291
     32, // 292
     33, // 293
     34, // 294
     35, // 295
     36, // 296
     37, // 297
     38, // 298
     39, // 299
      0, // 300
      1, // 301
      2, // 302
      3, // 303
      4, // 304
      5, // 305
      6, // 306
      7, // 307
      8, // 308
      9, // 309
     10, // 310
     11, // 311
     12, // 312
     13, // 313
     14, // 314
     15, // 315
     16, // 316
     17, // 317
     18, // 318
     19, // 319
    346, // 320
    345, // 321
    354, // 322
    353, // 323
    355, // 324
    341, // 325
    340, // 326
    351, // 327
    350, // 328
    352, // 329
    348, // 330
    347, // 331
    349, // 332
    343, // 333
    342, // 334
    344, // 335
    359, // 336
    358, // 337
    357, // 338
    356, // 339
    326, // 340
    325, // 341
    334, // 342
    333, // 343
    335, // 344
    321, // 345
    320, // 346
    331, // 347
    330, // 348
    332, // 349
    328, // 350
    327, // 351
    329, // 352
    323, // 353
    322, // 354
    324, // 355
    339, // 356
    338, // 357
    337, // 358
    336, // 359
    389, // 360
    388, // 361
    393, // 362
    395, // 363
    394, // 364
    390, // 365
    392, // 366
    391, // 367
    381, // 368
    380, // 369
    385, // 370
    387, // 371
    386, // 372
    382, // 373
    384, // 374
    383, // 375
    399, // 376
    398, // 377
    397, // 378
    396, // 379
    369, // 380
    368, // 381
    373, // 382
    375, // 383
    374, // 384
    370, // 385
    372, // 386
    371, // 387
    361, // 388
    360, // 389
    365, // 390
    367, // 391
    366, // 392
    362, // 393
    364, // 394
    363, // 395
    379, // 396
    378, // 397
    377, // 398
    376, // 399
    426, // 400
    425, // 401
    433, // 402
    435, // 403
    434, // 404
    421, // 405
    420, // 406
    430, // 407
    432, // 408
    431, // 409
    427, // 410
    429, // 411
    428, // 412
    422, // 413
    424, // 414
    423, // 415
    439, // 416
    438, // 417
    437, // 418
    436, // 419
    406, // 420
    405, // 421
    413, // 422
    415, // 423
    414, // 424
    401, // 425
    400, // 426
    410, // 427
    412, // 428
    411, // 429
    407, // 430
    409, // 431
    408, // 432
    402, // 433
    404, // 434
    403, // 435
    419, // 436
    418, // 437
    417, // 438
    416, // 439
    469, // 440
    468, // 441
    474, // 442
    473, // 443
    475, // 444
    471, // 445
    470, // 446
    472, // 447
    461, // 448
    460, // 449
    466, // 450
    465, // 451
    467, // 452
    463, // 453
    462, // 454
    464, // 455
    479, // 456
    478, // 457
    477, // 458
    476, // 459
    449, // 460
    448, // 461
    454, // 462
    453, // 463
    455, // 464
    451, // 465
    450, // 466
    452, // 467
    441, // 468
    440, // 469
    446, // 470
    445, // 471
    447, // 472
    443, // 473
    442, // 474
    444, // 475
    459, // 476
    458, // 477
    457, // 478
    456, // 479
    502, // 480
    501, // 481
    503, // 482
    506, // 483
    507, // 484
    504, // 485
    505, // 486
    495, // 487
    494, // 488
    496, // 489
    499, // 490
    500, // 491
    497, // 492
    498, // 493
    488, // 494
    487, // 495
    489, // 496
    492, // 497
    493, // 498
    490, // 499
    491, // 500
    481, // 501
    480, // 502
    482, // 503
    485, // 504
    486, // 505
    483, // 506
    484, // 507
    522, // 508
    524, // 509
    523, // 510
    527, // 511
    518, // 512
    520, // 513
    519, // 514
    526, // 515
    525, // 516
    521, // 517
    512, // 518
    514, // 519
    513, // 520
    517, // 521
    508, // 522
    510, // 523
    509, // 524
    516, // 525
    515, // 526
    511, // 527
    543, // 528
    542, // 529
    544, // 530
    547, // 531
    539, // 532
    538, // 533
    540, // 534
    546, // 535
    545, // 536
    541, // 537
    533, // 538
    532, // 539
    534, // 540
    537, // 541
    529, // 542
    528, // 543
    530, // 544
    536, // 545
    535, // 546
    531, // 547
    558, // 548
    557, // 549
    559, // 550
    555, // 551
    554, // 552
    556, // 553
    552, // 554
    551, // 555
    553, // 556
    549, // 557
    548, // 558
    550, // 559
    567, // 560
    566, // 561
    565, // 562
    564, // 563
    563, // 564
    562, // 565
    561, // 566
    560, // 567
    584, // 568
    583, // 569
    585, // 570
    594, // 571
    595, // 572
    579, // 573
    578, // 574
    580, // 575
    592, // 576
    593, // 577
    574, // 578
    573, // 579
    575, // 580
    590, // 581
    591, // 582
    569, // 583
    568, // 584
    570, // 585
    588, // 586
    589, // 587
    586, // 588
    587, // 589
    581, // 590
    582, // 591
    576, // 592
    577, // 593
    571, // 594
    572, // 595
    599, // 596
    598, // 597
    597, // 598
    596, // 599
};
////////// The Radius of the whole K600 is 1. The radius of each cell is     0.378467
////////// The Distance from the origin to the centre of each cell of K600 is     0.925615
////////// The Sphere circumscribing each cell of K600 overlaps the origin by    -0.547148
FigInfo infoK600 = {
    4, // numDims;
  120, // numVerts;
  720, // numEdges;
 1200, // numFaces;
  600, // numCells;
    2, // numVertsPerEdge;
    0, // numVertsPerFace;
    4, // numVertsPerCell;
    3, // numEdgesPerFace;
    6, // numEdgesPerCell;
    4, // numFacesPerCell;
    3, // numFacesPerVert;
    5, // numFacesPerEdge;
    0, // numCellsPerVert;
    5, // numCellsPerEdge;
    2, // numCellsPerFace;
    0.333333f, // dihedralCosine;
    0.378467f, // cellRadius;
    0.925615f, // cellCentreRadius;
    0.934172f, // faceCentreRadius;
(float *)vertexK600, // The vertex matrix
(int *)edgeK600, // The edge Matrix
(int *)vertToEdgeK600, // The Matrix of vertices for each edge
(int *)faceK600, // The face to edge matrix
(int *)edgeToFaceK600, // The edge to face matrix
(int *)0, // Face To Vert (used in 3D)
(int *)0, // Vertex to face (used in 3D)
(int *)faceToCellK600, // Face to cell matrix (used in 4D)
(float *)0, // The normal of a face (used in 3D)
(int *)cellK600, // The cell matrix
(float *)cellNormalK600, // The normal of a 4D cell
(int *)cellToEdgeK600, // Pointer to the edges per cell (number of cells X edges per cell)
(int *)cellToOppositeK600, // Pointer to the opposite cell per cell (number of cells X 1, but not for K005)
};
///////////////////////////////////////--------------- figdata


///////////////////////////////////////+++++++++++++++ infoImage
/* XPM */

static char * infoImage[] = {
"48 48 16 1",
" 	c None",
".	c #FFFFFF",
"+	c #FFDBFF",
"@	c #3A00FF",
"#	c #0000FF",
"$	c #90DBFF",
"%	c #FFB6FF",
"&	c #66B6FF",
"*	c #903AFF",
"=	c #003AFF",
"-	c #DBFFFF",
";	c #6600FF",
">	c #B6FFFF",
",	c #DB90FF",
"'	c #0066FF",
")	c #B666FF",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
".....................+@#####$...................",
"...................+@#########$.................",
"..................%############&................",
"..................*############=-...............",
"..................;#############>...............",
"..................*############=-...............",
"..................%############&................",
"...................+@#########$.................",
".....................+@#####$...................",
"................................................",
"...........,####################>...............",
"...........*####################>...............",
"............%###################>...............",
"..............*#################>...............",
"...............%################>...............",
".................*##############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................%#############>...............",
"..................*#############'...............",
"................,#################$.............",
"...............;###################'............",
".............,#######################$..........",
"............;#########################'.........",
"..........)#############################$.......",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................",
"................................................"};

///////////////////////////////////////--------------- infoImage


///////////////////////////////////////+++++++++++++++ trackball.c


// The fourot 'trackball' (i.e. a trackball simulated by a mouse) is based on a trackball routine 
// found in "OpenGL puzzle demo for the Fast Light Tool Kit (FLTK)."
// The original trackball code contained the following copyright notice:

/*
 * (c) Copyright 1993, 1994, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED
 * Permission to use, copy, modify, and distribute this software for
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission.
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * US Government Users Restricted Rights
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
 */

// The following notice was also part of the original trackball code:


/*
 * Trackball code:
 *
 * Implementation of a virtual trackball.
 * Implemented by Gavin Bell, lots of ideas from Thant Tessman and
 *   the August '88 issue of Siggraph's "Computer Graphics," pp. 121-129.
 *
 * Vector manip code:
 *
 * Original code from:
 * David M. Ciemiewicz, Mark Grossman, Henry Moreton, and Paul Haeberli
 *
 * Much mucking with by:
 * Gavin Bell
 */

#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <assert.h>
#include <limits.h>

/*
#define M_E        2.71828182845904523536
#define M_LOG2E    1.44269504088896340736
#define M_LOG10E   0.434294481903251827651
#define M_LN2      0.693147180559945309417
*/
#define M_LN10     2.30258509299404568402
#define M_PI       3.14159265358979323846
#define M_PI_2     1.57079632679489661923
/*
#define M_PI_4     0.785398163397448309616
#define M_1_PI     0.318309886183790671538
#define M_2_PI     0.636619772367581343076
*/
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2    1.41421356237309504880
/*
#define M_SQRT1_2  0.707106781186547524401
*/
#define M_DEGREES_TO_RADIANS 0.0174532925199432957692369
#define M_RADIANS_TO_DEGREES 57.295779513082320876798
#define M_TWO_PI   6.283185307179586476925

FILE *pFile;
enum IntersectionObjectType fred;

const char * scoresFor2DInfo = 
"THE 2D GAME\n\n\
The object of the game is to rotate the figure (on the left) to the same orientation \
as the target (on the right) in the shortest possible time. The game finishes when the figure is within five degrees of the target.\n\
Select a polygon using the radio buttons on the left.\n\
Select a display from the radio buttons in the centre.\n\
Select an intersection point using the slider or keep the default.\n\
Finally, select Game from the radio buttons on the right and click Start New Game'.\n\n\
HOW TO ROTATE THE FIGURE:\n\n\
Move the mouse pointer while holding down the left button. The pointer must be outside the circle.\n\n\
NUMBERS DISPLAYED DURING PLAY:\n\n\
Angle: The angle between the target and figure, in degrees.\n\n\
Time: The time since the game started, in seconds.\n\n\
NUMBERS DISPLAYED WHEN THE GAME HAS FINISHED:\n\n\
Required Angle: The minimum angle that the figure must rotate before the game finishes. It is positive regardless of the direction of rotation.\n\n\
Time: The time taken to finish the game.\n\n\
Speed: The Required Angle divided by the time, in degrees per second.\n\n\
Accuracy: The required angle divided by total angle traversed by the figure, as a percentage.\n\
Explanation of accuracy: During play, the user can rotate the figure either clockwise or anticlockwise, one of which gives the shortest path to \
the target orientation. If the user chooses the shortest path and rotates the figure directly to the target, \
the accuracy will be 100%. If the user makes a mistake and rotates in the wrong direction, or rotates the figure back and forth, \
the total angle traversed by the figure will be greater than the required angle, and the accuracy will be less than 100%.\n\
In the 2D game there are only two possible directions of rotation, clockwise and anticlockwise, so it \
is easy to get 100% accuracy. In 3D and 4D games it almost impossible to get 100% accuracy.\n\n\
Score: The final score is Speed times Accuracy.\n\n\
GENERAL:\n\n\
The game should be played in Ludus mode, but the other modes are easier and give you an idea of what is going on 'behind the scenes'.\n\n\
DIRECTUS DIMIDIUM LUDUS in Demo Mode\n\n\
Directus (simple) shows two polygons rotating together. On each polygon you can see two small circles (possibly squares) at the points where \
it intersects the line.\nDimidium (half) shows the simple figure on the left and the puzzle figure on the right where you can only see \
the intersection between the polygon and the line. By moving the slider you can vary the position of the line.\n\
Ludus (game) shows only the intersection on both sides. By moving the slider you can vary the position of the line.\n\n\
The polygon is two-dimensional, the line is one-dimensional. When playing the game with Ludus selected, you have to infer the position of the two-dimensional polygon from \
its intersection with the one-dimensional line. In the 3D game you have to infer the position of a three-dimensional solid from its intersection with a two-dimensional plane. \
In the 4D game you have to infer the position of a four-dimensional object from its intersection with a three-dimensional space.";


const char * scoresFor3DInfo = 
"THE 3D GAME\n\n\
The object of the game is to rotate the figure (on the left) to the same orientation \
as the target (on the right) in the shortest possible time. The game finishes when the figure is within five degrees of the target.\n\
Select a figure using the radio buttons on the left - the figures are platonic solids.\n\
To play the simplest game, leave the other options at default and select Game mode, then click on Start New Game.\n\n\
Details of the other options are given later.\n\n\
HOW TO ROTATE THE FIGURE:\n\n\
Move the mouse pointer while holding down the left button. The response of the figure depends on whether the pointer is inside or outside the circle.\n\n\
NUMBERS DISPLAYED DURING PLAY:\n\n\
Angle: The angle between the target and figure, in degrees.\n\n\
Time: The time since the game started, in seconds.\n\n\
NUMBERS DISPLAYED WHEN THE GAME HAS FINISHED:\n\n\
Required Angle: The minimum angle that the figure must rotate before the game finishes. It is positive regardless of the direction of rotation.\n\n\
Time: The time taken to finish the game.\n\n\
Speed: The Required Angle divided by the time, in degrees per second.\n\n\
Accuracy: The required angle divided by total angle traversed by the figure, as a percentage.\n\
Explanation of accuracy: During play, the user can rotate the figure in any direction. In the unlikely event that it rotates in the shortest path \
towards the target, the accuracy will be 100%. If the figure rotates in a sub-optimal direction the total angle that it traverses will be greater than \
the required angle and the accuracy will be less than 100%.\n\n\
Score: The final score is Speed times Accuracy.\n\n\
GENERAL:\n\n\
The game should be played in Ludus mode, but the other modes are easier and give you an idea of what is going on 'behind the scenes'.\n\n\
DIRECTUS DIMIDIUM LUDUS in Demo Mode\n\n\
Directus (simple) shows two polyhedra rotating together. Use the following to vary the display:\n\
The distance and angle sliders and the associated reset buttons.\n\
The Numbers checkbox.\n\
The Speed radio buttons.\n\
The Esc Speed slider has no effect in Directus mode\n\n\
Dimidium (half). The display is as Directus except that the the polyhedron on the right is shown only as an intersection with the plane - \
vary the Distance slider to see this more clearly. The Numbers checkbox also helps.\n\n\
Ludus (game) is as above but shows only the intersection on both sides.";



const char * scoresFor4DInfo = 
"THE 4D GAME\n\n\
The object of the game is to rotate the figure on the left to the same orientation \
as the target on the right in the shortest possible time. The game finishes when the figure is within twenty degrees of the target. \
Select a figure using the radio buttons on the left - the figures are the four-dimensional analogues of the platonic solids.\n\
To play the simplest game, leave the other options at default and select Game mode, then click on Start New Game.\n\n\
\
\
HOW TO ROTATE THE FIGURE:\n\n\
The figure can be rotated with either the mouse or the keyboard. Simple rotations in 4D are possible, but compound rotations are not.\n\n\
Rotation using the mouse can be done with the control key either up or down:\n\n\
Control key UP:\n\
In this mode, the rotation is the same as in the 3D game, namely, \
move the mouse while holding down the left mouse button. The response of the figure depends on whether the pointer is inside or outside the circle.\n\n\
Control key DOWN:\n\
In this mode, the rotation involves the fourth dimension. As before, move the mouse pointer while holding down the left mouse button. \
The response of the figure depends on whether the pointer is inside or outside the circle. This is not a normal rotation! \
Try the movements and see what happens.\n\n\
The technical explanation of the figure movement with the control key down is: if the pointer is inside the circle, \
the plane of rotation is the span of the pointer movement and the w-axis - for example if the pointer moves along the x-axis, the \
plane of rotation is the x-w plane. \
If the pointer is outside the circle, the plane of rotation \
is the z-w plane, no matter how the mouse moves.\n\n\
\
\
Rotation using the keyboard:\n\n\
You can use the keyboard left or right-handed. In both cases you use the thumb and three fingers.\n\
Left handed: rest your hand lightly on the keyboard with your thumb on the space-bar and three fingers in one of the following patterns:\n\
1-2-3, Q-W-E or A-S-D.\n\
Right handed: rest your hand lightly on the keyboard with your thumb on the space-bar and three fingers in one of the following patterns:\n\
8-9-0, I-O-P or J-K-L.\n\
Rotation is accomplished by holding down two keys simultaneously (remember that rotations only work in Game mode, not Demo mode). \
Suppose you are using the 1-2-3-space pattern. There are six possible pairs of keys:\n\
1-2, 1-3, 2-3, 1-space, 2-space or 3-space.\n\
Try the different combinations in your preferred position.\
To rotate the figure in a normal 3D manner, do not use the space bar. Any combination that involves the space bar \
rotates the figure into the fourth dimension.\n\
Each key represents an axis, thus two keys represent a plane - the plane of rotation.\n\
The x-axis (horizontal across a desktop computer screen) is represented by 1, Q, A, 8, I or J.\n\
The y-axis (vertical on a desktop computer screen) is represented by 2, W, S, 9, O or K.\n\
The z-axis (horizontal from front to back on a desktop computer screen) is represented by 3, E, D, 0, P or L.\n\
The w-axis (the invisible axis into the fourth dimension) is represented by the space bar.\n\
If you press the shift key while pressing the rotation keys, you reverse the direction of rotation.\n\
If you hold down either Z or N while pressing the rotation keys, the speed of rotation will increase up to a maximum.\n\
If you hold down either X or M while pressing the rotation keys, the speed of rotation will decrease to a minimum.\n\n\
\
\
\
NUMBERS DISPLAYED DURING PLAY:\n\n\
Angle: The angle between the target and figure, in degrees.\n\n\
Time: The time since the game started, in seconds.\n\n\
NUMBERS DISPLAYED WHEN THE GAME HAS FINISHED:\n\n\
Required Angle: The minimum angle that the figure must rotate before the game finishes. It is positive regardless of the direction of rotation.\n\n\
Time: The time taken to finish the game.\n\n\
Speed: The Required Angle divided by the time, in degrees per second.\n\n\
Accuracy: The required angle divided by total angle traversed by the figure, as a percentage.\n\
Explanation of accuracy: During play, the user can rotate the figure in any direction. In the unlikely event that it rotates in the shortest path \
towards the target, the accuracy will be 100%. If the figure rotates in a sub-optimal direction the total angle that it traverses will be greater than \
the required angle and the accuracy will be less than 100%.\n\n\
Score: The final score is Speed times Accuracy.\n\n\
\
\
\
\
STEREOSCOPY AND PERSPECTIVE:\n\n\
Stereoscopy works in Demo and Game mode, but the figures are larger in Demo mode and are easier to see. \
If you select Stereo by clicking the checkbox, a stereo image is produced. View it by crossing your eyes and viewing the right image with your left \
eye and the left image with the right eye. The degree of the stereo effect can be varied using the E3 slider - pulling the slider down maximises the stereo and \
pushing the slider up reduces then reverses the stereo. In effect, E3 controls the distance between the virtual viewer's eyes \
(including reversing the position of the eyes). \
Also, you can vary the degree of perspective in 3D using the P3 slider. In effect, when the P3 slider moves down, the virtual camera moves closer to the figure \
and the lens becomes wide-angle. When the slider moves up, the virtual lens moves farther back from the figure and the lens becomes telephoto.\n\
The P4 slider controls the perspective when the 4D object is projected into 3D space. This is not an optical effect but rather an artificial \
perspective that can make the display easier to understand. Its effect is best seen if you select the Wire option then move the I4 slider to the top. \
Then try moving the P4 slider slowly up and down. If you \
select the 8-Cell figure, the display may be more familiar. Also try selecting the Slower speed radio button, and viewing the display in stereo.\n\n\
BUGS:\n\n\
There is a bug in the calculation of the angle during gameplay. At times the angle suddenly changes its value. The bug appears more often when \
using the 120-cell or 600-cell.";


const char * generalInfo = 
"Instructions on how to play the games can be found by clicking the Information buttons in the game tabs.\n\n\
\
\
Hover the pointer over most widgets to get a brief summary of the widget's purpose.\n\n\
\
\
DIMENSIONS\n\n\
A point is zero-dimensional.\n\
A line is one-dimensional.\n\
A plane is two-dimensional.\n\
A solid is three-dimensional.\n\n\
\
Can anything be four-dimensional?\n\n\
\
Geometry as taught in high school can be used to describe two- or three-dimensional objects. Such objects \
can be rendered on computer screens and may exist in the real three-dimensional world. In four dimensions no new principles of geometry are required, and four-dimensional \
objects can be described. The details, however, may be more complex than in two or three dimensions. Using Geometry, one can describe objects in four, \
five, six dimensions, and so on without limit, but objects of \
dimension four and higher do not exist in our three-dimensional world, nor can they be rendered directly on a two-dimensional computer screen. \
Thus, a four or higher dimensional object can exist as a geometrical description, but not as a physical object in the three-dimensional world.\n\
(To be strictly accurate, even two- or one-dimensional objects do not exist in our three-dimensional world, since any physical objects, no matter how \
thin, extend into \
the third dimension.)\n\n\
\
\
While some current theories in physics involve more than three spatial dimensions, at the time of writing there does not appear to be any generally \
accepted empirical evidence that more than three spatial dimensions exist.\n\
In Fourot, the fourth dimension is a fourth spatial dimension, not a time dimension as in the \
theory of relativity.\n\n\
\
In the default display in the 4D tab, what you see is the intersection of a 4D object with 3D space, resulting in a 3D object. \
The 3D object is then rendered on the 2D screen using normal perspective projection.\n\
Using other options, it is possible to see the projection of the 4D object into 3D space (as opposed to the intersection of the \
object with 3D space). The following options show projection most clearly:\n\
Select Demo mode. \
Select Wire. \
Select Slow or Slower.\n\
Move the I4 slider to the top (or bottom, if you prefer).\n\
Select Special Cell to observe how an individual cell is projected into 3D space.\n\n\
\
\
BOUNDARIES\n\n\
\
The boundaries of an object are one dimension less than the object itself. The boundaries of the boundaries are one dimension \
less, and so on:\n\
A 1D object (a line) has 0D boundaries (points).\n\
A 2D object (a polygon) has 1D boundaries (lines).\n\
A 3D object (a solid (or 'cell')) has 2D boundaries (faces).\n\
A 4D object (a 'hypersolid') has 3D boundaries (cells).\n\
For example:\n\
The boundaries of a triangle (2D) are three lines (1D).\n\
The boundaries of a cube (3D) are six faces (2D).\n\
The boundaries of a hypercube (4D) are eight cubes (3D).\n\n\
A  complete list of all the objects in fourot, and their boundaries:\n\n\
2D Objects:\n\
Triangle: 3 edges, 3 vertices.\n\
Square: 4 edges, 4 vertices.\n\
Pentagon: 5 edges, 5 vertices.\n\
Hexagon: 6 edges, 6 vertices.\n\
Heptagon: 7 edges, 7 vertices.\n\
Octagon: 8 edges, 8 vertices.\n\n\
3D Objects:\n\
Tetrahedron: 4 triangles, 6 edges, 4 vertices.\n\
Cube: 6 squares, 12 edges, 8 vertices.\n\
Octahedron: 8 triangles, 12 edges, 6 vertices.\n\
Dodecahedron: 12 pentagons, 30 edges, 20 vertices.\n\
Icosahedron: 20 triangles. 30 edges, 12 vertices\n\n\
4D Objects:\n\
5-cell: 5 tetrahedra, 10 triangles, 10 edges, 5 vertices.\n\
8-cell or tesseract or hypercube: 8 cubes, 24 squares, 32 edges, 16 vertices.\n\
16-cell: 16 tetrahedra, 32 triangles, 24 edges, 8 vertices.\n\
24-cell: 24 octahedra, 96 triangles, 96 edges, 24 vertices.\n\
120-cell: 120 dodecahedra, 720 pentagons, 1200 edges, 600 vertices.\n\
600-cell: 600 tetrahedra, 1200 triangles, 720 edges, 120 vertices.\n\n\n\
\
\
\
\n\n4D ROTATIONS\n\n\
In two dimensions a rotation has a fixed point. For example, if a piece of cardboard is pinned to a table top, the fixed point is located at the pin \
and the rest of the cardboard can move.\n\
In three dimensions a rotation has a fixed axis. The axis may change over time but at any instant \
there is one axis.\n\
For rotations in higher dimensions it is necessary to think of a plane of rotation rather than an axis of rotation.\n\n\
Planes of rotation:\n\n\
In two dimensions the plane of rotation is the whole plane (two dimensions), and the fixed point has zero dimensions. \
The dimensionality of the rotating plane (2) and the fixed point (0) add up to \
the total dimensionality of the space (2).\n\n\
A rotation in three dimensions consists of a plane which rotates (2 dimensions) and an axis which is fixed (1 dimension). The fixed axis is \
always perpendicular to the rotating plane. The dimensionality of the plane (2) and the axis (1) add up to the dimensionality of the whole space (3).\n\n\
In four dimensions a simple rotation has a plane which rotates (2 dimensions) and a plane which is fixed (2 dimensions) - four dimensions in total. \
We can continue this pattern to higher dimensions:\n\
A simple rotation in five dimensions consists of a rotating plane (2 dimensions) and three fixed dimensions - five in total. A simple rotation in six dimensions \
consists of a rotating plane (2 dimensions) and four fixed dimensions - six in total. And so on to higher dimensions.\n\
In a simple rotation only two dimensions (a plane) are moving. In two or three dimensions all rotations are simple rotations, but in four or more dimensions compound \
rotations are possible. In a compound rotation, there are two or more rotation planes. \
For example, in four dimensions, there can be a plane which is rotating, and the remaining two dimensions, another plane, \
can be either fixed or rotating independently of the first plane. \
In six dimensions there can be three independent simple rotations happening simultaneously, that is, three independently rotating planes.\n\n\
In Demo mode in the 4D tab, the rotations are compound, but during gameplay all rotations are simple.\
\n\n\n\
\
\
\
EXPLORING THE 4D DISPLAY\n\n\
This section offers a guided tour of different display options in 4D\n\n\
Start fourot and leave everything on default settings. Select the 4D Game tab. Select 120 Cell. Select Slow speed.\n\
You will see a 3D object whose faces change shape and often disappear and reappear. It is the intersection of a 4D object (the 120-cell) with the 3D space occupied by the user, that is, \
our usual 3D space. \
The 120-cell is rotating such that the planes of rotation are partially in the fourth dimension, this is why some of the faces change shape and disappear.\n\n\
Now look at a 3D analogy:\n\
Select the 3D tab, select the dodecahedron, select dimidium and select slow speed. On the right you see a 2D object whose edges change shape (i.e. their length) and often appear and disappear. \
It is the intersection of a 3D object, the dodecahedron, with the 2D space defined by the circular plane as seen on the left. Move the 'Distance' slider slowly up and down to see \
this more clearly. It may be clearer still if you select 'Slower' or 'Freeze' when moving the distance slider. The dodecahedron is rotating such that its plane of rotation \
is not aligned with the the plane of the object you see on the right, rather its plane of rotation is partially 'out of the screen', as can be seen on the left. \
This is why the edges change shape in the intersection figure on the right. The colour of each edge is the same as the colour of its parent face.\n\n\
Now look at a 2D analogy:\n\
Select the 2D tab, select the pentagon and select dimidium. On the right you see a 1D object: a line. In fact you only see the endpoints of the line. \
A point cannot change shape, but it can appear and disappear, The colour of the point corresponds to the colour of the line \
that is intersecting, as seen on the left.\n\n\
\
\
Return to the 4D tab, still showing the 120 cell. We will now look at the shape of the faces.\n\
The 3D boundaries of the 120 cell are dodecahedra. As the 4D object rotates in 4D, each dodecahedron intersects with the user's 3D space for a time, thus creating a 2D face, \
then the dodecahedron rotates away from the 3D space, causing the face to disappear. The user's 3D space does not normally align exactly with the 3D space of each dodecahedron. \
Two non-aligned 3D spaces intersect in a 2D space, this leads to the 2D face created by each dodecahedron. By analogy, two non-aligned 2D spaces \
intersect in a 1D space (a line). For example, if you view the 3D tab with \
Dodecahedron and Dimidium selected, any face of the dodecahedron that intersects the circular plane is not in alignment with the circular plane, and \
these two non-aligned 2D spaces create a 1D intersection as seen on the right.\n\
On the 3D tab with Dodecahedron, Dimidium and slower selected, slowly move the Distance slider all the way up and down. The shapes you see on the right are \
similar to what you see in the changing faces in the 4D tab, since they all come from sections of dodecahedra.\n\n\
To compare changing shapes in the 4D tab with changing polygons in the 3D tab, set up the tabs as follows:\n\
3D tab: Dimidium, either Slower or Freeze.\n\
4D tab: either Slow or Slower.\n\
Then do the following: Firstly, on the 4D tab, select the figure indicated below and observe the changing shape of the faces. \
Secondly, on the 3D tab, select the associated 3D figure as indicated below, then move the Distance slider slowly up and down, observing how the intersection changes shape. \
The shapes in the two tabs should be similar.\n\
4D tab 5-cell, 3D tab tetrahedron.\n\
4D tab 8-cell, 3D tab cube.\n\
4D tab 16-cell, 3D tab tetrahedron.\n\
4D tab 24-cell, 3D tab octahedron.\n\
4D tab 120-cell, 3D tab dodecahedron.\n\
4D tab 600-cell, 3D tab tetrahedron.\n\n\n\
\
Information about viewing figures stereoscopically in the 4D tab can be found by clicking the information button in the 4D tab.\n\n\
IS IT POSSIBLE TO SEE IN FOUR DIMENSIONS?\n\n\
\
Charles Howard Hinton claimed that he could see four-dimensional space as an artist or practical engineer could see three-dimensional space. He claimed \
that his understanding was not just a theoretical appreciation of four-dimensional space.\n\n\
\
Paul Bach-y-Rita said, in relation to normal 3D perception, 'We see with our brains, not with our eyes'.\n\
Perhaps with sufficient understanding of virtual 4D space it would be possible to 'see' 4D space.\n\n\
\
BUGS\n\n\
\
There are two main known bugs:\n\
1. The calculation of angle during the 4D games is sometimes unreliable. This manifests as a sudden change in the displayed value. Overall this does not appear \
to affect the final result.\n\
2. The program sometimes crashes in Demo mode in the 4D tab, especially with the 120-cell or 600-cell. This usually only happens after about ten or more continuous minutes \
in Demo mode.\n\n\
SOME FURTHER READING:\n\n\
'Speculations on the Fourth Dimension: Selected Writings of Charles H. Hinton.' Edited by R. V. Rucker\n\n\
'Flatland, a Romance of Many Dimensions.' Edwin Abbott Abbott\n\n\
'Beyond the Third Dimension.' Thomas Banchoff\n\n\
'The Great Beyond: Higher Dimensions, Parallel Universes, and the Extraordinary Search for a Theory of Everything.' Paul Halpern.\n\n\
Wikipedia article 'Regular 4-polytope'\n\n\
Some interesting graphics can be found on http://math.ucr.edu/home/baez/platonic.html \n\n\
\
THE NAME\n\n\
The name 'Fourot' is a play on the English words 'four' and 'rotation', \n\
and on the French words 'fou' and 'rotation'.\n\
The pronunciation is French, i.e. the syllables rhyme with the English words 'moo' and 'snow'.";
//Technical:\n\
//Some graphics can be found on http://math.ucr.edu/home/baez/platonic.html";

//Geometric Algebra Primer. Jaap Suter. (Available online)\n\n\

const char * webAddress = "www.fourot.org";

const char * welcomeInfo = 
	"Welcome to Fourot.\n\n\
Rotate the figure on the left to the same orientation as\n\
the target on the right. There are versions in two, three\n\
and four dimensions.";

///// Tooltips
const char *ttWriteFile =
	"Opens a new file in which the results of the game are written. The file is called 'Fourot.....txt' where '....' is a date-time stamp. \
The file is in the same directory as fourot.exe";

const char *ttDirectus = 
	"Directus - simple, direct. Showing a simple version on the left and the right\n\n\
Dimidium - half. Showing a simple version on the left and the puzzle version on the right\n\n\
Ludus - Game. Showing the puzzle version left and right";
const char *tt2ChooseFigure =
	"Choose 3,4,5,6,7 or 8 sided polygon";
const char *tt2Demo = 
	"Demonstration mode, showing moving figures. The figures can be stopped using the 'Freeze' button";
const char *tt2Game = 
	"Game mode - start a game with the 'Start Game' button below. There is a five second countdown";
const char *tt2Intersect =
	"Vary the position of the intersecting line\n(Only with Dimidium or Ludus)";
const char *tt2Reset =
	"Reset the position of the intersecting line";
const char *tt2Freeze = 
	"Freeze or allow movement in demo mode";


const char * tt3ChooseFigure = 
	"Choose one of the five Platonic solids";
const char * tt3Intersect = 
	"Vary the distance of the intersecting plane from the base of the figure";
const char * tt3Angle = 
	"Vary the angle of the intersecting plane";
const char * tt3DimReset = 
	"Reset the distance and angle to values suitable for a demonstration of Dimidium";
const char * tt3MidReset = 
	"Reset the distance and angle to values suitable for Ludus";
const char * tt3BaseReset = 
	"Reset the distance and angle to values suitable for Directus";
const char * tt3Numbers = 
	"Add numbers to the display. Both edges and faces are numbered";
const char *ttDbgWindow = 
	"The debug window, used during gameplay, shows detailed information relating to the progress and conclusion of the game, \
but is not necessary in normal gameplay.";
const char *tt3EscSpeed = 
	"Vary the speed at which the target 'escapes' from the figure during gameplay. The default is zero degrees per second. \
The value can be seen in the debug window during gameplay. This slider has no effect in Demo mode.";
const char *tt3Demo = 
	"Demonstration mode, showing the moving figures. The speed can be varied by selecting from the 'Speed' radio buttons";
const char *tt3Game = 
	"Game mode - start a game with the 'Start Game' button below. There is a five second countdown";
const char *tt3Speed = 
	"Vary the speed of the moving figures in Demo mode.";


const char * tt4ChooseFigure = 
	"Choose one of the six regular 4D polytopes";
const char * tt4Display =
	"Only the Ludus option is available. There is no direct way to view 4D objects";
const char * tt4Intersect = 
	"Vary the distance of the intersecting 3D space from the centre of the 4D figure. \
When the slider is either at the top or the bottom, the 4D figure does not intersect the 3D space and can \
only be seen if the Wire option is checked, since that produces a 'wire-frame' projection into 3D space \
rather than an intersection. Try using the slider in conjunction with the Wire, Only, and Speed options";
const char * tt4IntersectReset = 
	"Reset to zero the distance of the intersecting 3D space from the centre of the 4D figure";
const char * tt4Perspective4 = 
	"Vary the perspective of the projection from 4D to 3D. Near orthogonal at the top and strongly \
perspective at the bottom. Can be clearer when using the Wire and Only options";
const char * tt4Perspective4Reset = 
	"Reset the perspective of the projection from 4D to 3D to the standard value";
const char * tt4Perspective3 = 
	"Vary the perspective of the projection from 3D to 2D";
const char * tt4Perspective3Reset = 
	"Reset the perspective of the projection from 3D to 2D to the standard value";
const char * tt4eyes3 = 
	"Vary the degree of stereo of the 3D image. This effectively varies the distance between the virtual eyes for the stereo display";
const char * tt4eyes3Reset = 
	"Reset the degree of stereo of the 3D image to the standard value";
const char * tt4Numbers = 
	"Add numbers to the display. Each boundary cell of the figure is numbered. As each cell intersects the user's 3D space, the intersection is a 2D \
shape which forms a face of the displayed figure.";
const char * tt4Stereo = 
	"Create a stereo display. View the right image with the left eye and the left image with the right eye. Vary the stereo with the E3 slider. \
When playing the game in Stereo mode, the results are shown only in the Debug window";
const char * tt4Wire = 
	"Create wire-frame projection of the figure into 3D space.";
const char * tt4Only = 
	"Remove the intersection figure from the image on the right, leaving only the wire-frame projection. The red and green parts of the image correspond to the \
Ana and Kata parts of the figure.";
const char * tt4SpecialCell = 
	"Render a single (special) cell of the figure in a distinctive colour to help with understanding the display. Use in conjunction with the Wire and Only options";
const char * tt4CellNo = 
	"Toggle the number of the special cell that is rendered in a distinctive colour";
const char * tt4CellOpp = 
	"Render the cell that is opposite the special cell in a distinctive colour. This option does not work for the 5-cell since there are no opposite pairs of cells.";
const char * tt4AutoSolve = 
	"The program Automatically solves itself when in Game mode. New puzzles and solutions repeat until Autosolve is unchecked. Works in conjuction with the \
Best, Keys and Rand options, also the Key and Esc sliders. You can override Autosolve by using the mouse or keyboard to rotate the figure manually";
const char * tt4AutoBest = 
	"Solves the puzzle using the best 4D simple rotation available, regardless of whether it can be input from the keyboard or mouse";
const char * tt4AutoKey = 
	"Solves the puzzle using the best 4D simple rotation available that can be acheived using keyboard input. Thus the only rotation planes that are available are \
x-y (or e12), x-z (or e13), x-w (or e14), y-z (or e23), y-w (or e24) and z-w (or e34). When using this option, figure will occasionally get 'stuck'. Moving the figure \
slightly using the mouse or keyboard will usually free its motion";
const char * tt4AutoRand = 
	"Solves the puzzle using one of the six possible simple 4D rotations, selected at random: The six possible are \
x-y (or e12), x-z (or e13), x-w (or e14), y-z (or e23), y-w (or e24) and z-w (or e34)";
const char * tt4KeySlider = 
	"Vary the rate at which the figure rotates in response to keyboard input. The rate of rotation of the figure when autosolving also varies in response to this slider. \
The same effect is possible using either key 'z' or 'n' to speed the rotation, or keys 'x' or 'm' to slow the rotation";
const char * tt4KeySliderReset = 
	"Reset the rate at which the figure rotates in response to keyboard input to the default value. Also resets the rate of rotation of the figure when autosolving";
const char * tt4EscapeSpeed = 
	"Vary the rate at which the target rotates to 'escape' the figure. By default this is zero. Escape behaviour can operate in AutoSolve mode also";
const char * tt4EscapeReset = 
	"Reset to zero the rate at which the target rotates to 'escape' the figure";
const char *tt4Demo = 
	"Demonstration mode, showing the moving figures.";
const char *tt4Game = 
	"Game mode - start a game with the 'Start Game' button below. There is a five second countdow6n";
const char *tt4Speed = 
	"Vary the speed of the moving figures in Demo mode.";

struct Intersection3DInfo info3DFig;
struct Intersection3DInfo info3DTarg;
struct Intersection3DInfoGeneral info3D;
struct Intersection4DInfo info4DFig;
struct Intersection4DInfo info4DTarg;
struct Intersection4DInfoGeneral info4D;

static int left_mouse, middle_mouse, right_mouse; // These are set true/false (GL_TRUE/GL_FALSE) depending on the current mouse state


/*
 * This size should really be based on the distance from the center of
 * rotation to the point on the object underneath the mouse.  That
 * point would then track the mouse as closely as possible.  This is a
 * simple example, though, so that is left as an Exercise for the
 * Programmer.
 */
#define TRACKBALLSIZE  (INTERSECTION2DLINERADIUS)
/*
 * Local function prototypes (not defined in trackball.h)
 */
static void my_project_to_sphere2(struct trackballInfo *tbi, float *xyz);
void rotManyVec(int count, float *vec, float *rot, float *finalquat);
void createQuatFor3DRotation(float *axis, float angle, float *quat);
//float correctAngle(float oldAngle);
double correctAngle(double oldAngle);
void projectOnePoint4Dto3D(float *v4D, float *v3D, float dPersp);
void projectOnePoint4Dto3DStereo2(float *v4D, float *v3DLeft, float *v3DRight, float dPersp, float eyex);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void
vzero3(float *v)
{
    v[0] = 0.0;
    v[1] = 0.0;
    v[2] = 0.0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void
vsub3(const float *src1, const float *src2, float *dst)
{
    dst[0] = src1[0] - src2[0];
    dst[1] = src1[1] - src2[1];
    dst[2] = src1[2] - src2[2];
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void
vcopy3(const float *v1, float *v2)
{
    v2[0] = v1[0]; v2[1] = v1[1]; v2[2] = v1[2];
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void
vcopy4(const float *v1, float *v2)
{
    v2[0] = v1[0]; v2[1] = v1[1]; v2[2] = v1[2]; v2[3] = v1[3];
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void vcopy3Many(const float *v1, float *v2, int kount)
{
	register int i=0;
	while (kount-- > 0) {
		v2[i] = v1[i++];
		v2[i] = v1[i++];
		v2[i] = v1[i++];
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void
vcross(const float *v1, const float *v2, float *cross)
{
    cross[0] = (v1[1] * v2[2]) - (v1[2] * v2[1]);
    cross[1] = (v1[2] * v2[0]) - (v1[0] * v2[2]);
    cross[2] = (v1[0] * v2[1]) - (v1[1] * v2[0]);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float
vlength3(const float *v)
{
    return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

float vlengthdiff3(const float *v1, const float *v2)
{
	float diff;
	float cumulativeDiffSq;

	diff = v2[0] - v1[0];
	cumulativeDiffSq = diff*diff;
	diff = v2[1] - v1[1];
	cumulativeDiffSq += diff*diff;
	diff = v2[2] - v1[2];
	cumulativeDiffSq += diff*diff;
	return sqrt(cumulativeDiffSq);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float
vdot3(const float *v1, const float *v2)
{
    return (v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float
vdot4(const float *v1, const float *v2)
{
    return (v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2] + v1[3]*v2[3]);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void vcentretriangle3(float *v1, float *v2, float *v3, float *result)
{
	result[0] = (v1[0] + v2[0] + v3[0])/3.0;
	result[1] = (v1[1] + v2[1] + v3[1])/3.0;
	result[2] = (v1[2] + v2[2] + v3[2])/3.0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float angleFromCosSin(float xcos, float xsin)
{	// Given the cosine and sine of an angle,
	// return an angle in the range  -pi < x <= pi
	float angc;

	angc = acos(xcos); // acos returned range is 0 to Pi

	if (xcos > 0.0) {
		//  -pi/2 < angle < pi/2
		// (Could be that angle = 0)
		if (xsin > 0.0) {// angle is in range 0 to pi/2, so angc is already OK
		} else if (xsin < 0.0) { // angle is in the range -pi/2 to 0.0
			angc = -angc;
		} else { // xsin is zero so angle is zero
			angc = 0.0;
		}
	} else if (xcos < 0.0) {
		// Angle must be either in -pi to -pi/2, or in pi/2 to pi
		if (xsin > 0.0) { // angle is in the range  pi/2 to pi, hence angc is already ok
		} else if (xsin < 0.0) { // angle is in the range -pi to -pi/2, need to convert the acos range of 0 to pi.
			angc = -angc;
		} else { // xsin is zero, so angle must be -pi or +pi. Choose +pi.
			angc = M_PI;
		}
	} else {
		// xcos is zero, so angle must be pi/2 or -pi/2
		if (xsin > 0) angc = M_PI_2;
		else angc = -M_PI_2;
	}
	return angc;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

int vangle3D(float *v, float angle,  float *rej, float *result, int restrctd)
{
	// Generate a unit 3D vector that is at a given angle to a given 3D vector v
	// Assumes v is a unit vector
	// The generated vector is put in 'result'.
	// 
	// There are infinitely many solutions, so an randomised solution is returned.
	// Also returned in 'rej' is a randomised unit vector that is orthogonal to the original in v.
	//
	// If restricted is set to 1. then only an angle in the range -pi/2 to pi/2 is set
	//
	float lengthp, lengthr;
	float vec[3];
	float proj[3];
	float cosangle,sinangle;
	float dotp, absdotp;
	int itwasnegative;

	// First, generate a random unit vector in 3D space
	do {
		randomVec3D(vec);
		dotp = vdot3(vec,v);
		absdotp = fabs(dotp);
	} while (absdotp < 0.01 || absdotp > 0.99 );

	if (dotp < 0.0) {
		itwasnegative = 1;
		if (restrctd) dotp = absdotp;
	} else {
		itwasnegative = 0;
	}
	
	// Calc the projection of the random vector onto v
	proj[0] = v[0] * dotp;
	proj[1] = v[1] * dotp;
	proj[2] = v[2] * dotp;

	// Calc the rejection
	rej[0] = vec[0] - proj[0];
	rej[1] = vec[1] - proj[1];
	rej[2] = vec[2] - proj[2];

	// Normalise the projection
	lengthp = sqrt(proj[0]*proj[0] +proj[1]*proj[1] +proj[2]*proj[2]);
	proj[0] /= lengthp;
	proj[1] /= lengthp;
	proj[2] /= lengthp;

	// Normalise the rejection
	lengthr = sqrt(rej[0]*rej[0] +rej[1]*rej[1] +rej[2]*rej[2]);
	rej[0] /= lengthr;
	rej[1] /= lengthr;
	rej[2] /= lengthr;

	cosangle = cos(angle);
	sinangle = sqrt(1 - cosangle*cosangle);

	result[0] = proj[0]*cosangle + rej[0]*sinangle;
	result[1] = proj[1]*cosangle + rej[1]*sinangle;
	result[2] = proj[2]*cosangle + rej[2]*sinangle;

	return itwasnegative;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
int myNormaliseVector3D(float *v) { //normalises in place
	// Return zero if the normalised vector is too short (i.e. 
	float vlength;
	char txt[50];
	vlength = sqrt(v[0]*v[0] +v[1]*v[1] +v[2]*v[2]);
	if (fabs(vlength) <= 0.0001) {
		sprintf(txt,"!!!Length=%10.7f ",vlength);
		{if (pFile) fputs(txt,pFile);}
		return 0;
	}
	v[0]/=vlength;
	v[1]/=vlength;
	v[2]/=vlength;
	return 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
int myNormaliseVector4D(float *v) { //normalises in place
	// Return zero if the normalised vector is too short 
	float vlength;
	char txt[50];
	vlength = sqrt(v[0]*v[0] +v[1]*v[1] +v[2]*v[2] +v[3]*v[3]);
	if (fabs(vlength) <= 0.0001) {
		sprintf(txt,"!!!Length4D=%10.7f ",vlength);
		{if (pFile) fputs(txt,pFile);}
		return 0;
	}
	v[0]/=vlength;
	v[1]/=vlength;
	v[2]/=vlength;
	v[3]/=vlength;
	return 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float myNormaliseRotor(struct Rotor4D *v) { //normalises in place
	// Return zero if the normalised vector is too short 
	float vl,vlen;

	vlen = sqrt(
		v->scalar*v->scalar +
		v->b.e12*v->b.e12 +
		v->b.e13*v->b.e13 +
		v->b.e14*v->b.e14 +
		v->b.e23*v->b.e23 +
		v->b.e24*v->b.e24 +
		v->b.e34*v->b.e34 +
		v->e1234*v->e1234
		);
	vl = 1.0/vlen;

	v->scalar *= vl;
	v->b.e12 *= vl;
	v->b.e13 *= vl;
	v->b.e14 *= vl;
	v->b.e23 *= vl;
	v->b.e24 *= vl;
	v->b.e34 *= vl;
	v->e1234 *= vl;

	return vlen;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

int mytrackball3D(struct trackballInfo *ti, enum StateMouseState *mouseState)
{
	float dotprod=0;
	float temp; 
	char txt[300];
//	char *ptr = txt;
//	time_t tmyTime;
	struct tm *ttnow;
	int case4D = 0; // this identifies the type of movement if a fourD game is being played, one of four types:
		// 0 - no effective mouse movement
		// 1 - The control key is down and the mouse moves  inside the trackball area
		//     the rotation bivector will be calculated from (curr mouse - prev mouse) wedge (W axis) (curr and prev use only x and y axes, I.e. are 2D vectors)
		// 2 - The control key is down and the mouse moves outside the trackball area
		//     the rotation bivector is the zw plane (e34).
		// 3 - The control key is up   and the mouse moves  inside the trackball area
		//     the rotation bivector is (prev mouse) wedge (curr mouse) (prev and curr use z axis, i.e. are 3D vectors)
		// 4 - The control key is up   and the mouse moves outside the trackball area
		//     the rotation bivector is the xy plane (e12)
	int somethingHasChanged = 0;

	// If there is no rotation, we leave the previous values unaltered. but...
	int leavePreviousValuesAlone = 0; // by default, we will update the previous values
	ti->rotangle = 0.0; // By default, there is no rotation

//	time(&tmyTime);
//	ttnow = localtime(&tmyTime);
	//ptr += sprintf(ptr,"%02d:%02d:%02d Trackball3D Prevxyz %8.4f %8.4f %8.4f currxy %8.4f %8.4f %8.4f mouseState ",
	//	ttnow->tm_hour,ttnow->tm_min,ttnow->tm_sec,
	//	ti->prevxyz[0],ti->prevxyz[1],ti->prevxyz[2],ti->currentxyz[0],ti->currentxyz[1],ti->currentxyz[2], *mouseState);

	ti->myquat[0] = 1.0; // Set the quaternion to indicate no rotation.

	switch(*mouseState) {
	case mouseIsUp:
		//ptr += sprintf(ptr, "Is Up\n");
		break;
	case mouseHasJustGoneUp:
		*mouseState = mouseIsUp;
		//ptr += sprintf(ptr, "Just gone Up\n");
		break;
	case mouseIsDown:
		//ptr += sprintf(ptr, "Trackball msDown ");
		if (!ti->horrible4DFlag) {
			// Doing trackball for 3D rotations

			if (ti->prevxyz[0] == ti->currentxyz[0] && ti->prevxyz[1] == ti->currentxyz[1]) {
				//ptr += sprintf(ptr, "no movement\n");
			} else {
				// Something has changed, get current projection to sphere
				my_project_to_sphere2(ti,  ti->currentxyz); // Find the z value of the current mouse position
				my_project_to_sphere2(ti,  ti->prevxyz); // Find the z value of the previous mouse position
				if (ti -> currentxyz[2] == 0.0) {
					// If the mouse is outside the trackball area..
					ti->insideTrackballArea = 0;
					if (ti->prevxyz[2] == 0.0) {
						// Do a 2d rotation since the mouse has moved while outside the trackball area
						//ptr += sprintf(ptr, "2D Rot\n");

						temp = 1/sqrt(ti->currentxyz[0]*ti->currentxyz[0] + ti->currentxyz[1]*ti->currentxyz[1]);
						ti->normalisedCurr[0] = ti->currentxyz[0]*temp;
						ti->normalisedCurr[1] = ti->currentxyz[1]*temp;
						ti->normalisedCurr[2] = 0.0;
						temp = 1/sqrt(ti->prevxyz[0]*ti->prevxyz[0] + ti->prevxyz[1]*ti->prevxyz[1]);
						ti->normalisedPrev[0] = ti->prevxyz[0]*temp;
						ti->normalisedPrev[1] = ti->prevxyz[1]*temp;
						ti->normalisedPrev[2] = 0.0;

						dotprod = vdot3(ti->normalisedCurr, ti->normalisedPrev);
						ti->rotangle = correctAngle((float)acos(dotprod));
						if (ti->rotangle == ti->rotangle) { //may not be a number
							vcross(ti->normalisedPrev, ti->normalisedCurr, ti->axis);
							myNormaliseVector3D(ti->axis); // ti->axis is now a normalised rotation axis for the trackball.
							createQuatFor3DRotation(ti->axis, ti->rotangle, ti->myquat);
						} else {
							// no rotation
							leavePreviousValuesAlone = 1;
						}
					} else {
						// there is a boundary crossing happening
						//ptr += sprintf(ptr, "Bndry X\n");
					}
				} else {
					// The mouse is inside the trackball area
					ti->insideTrackballArea = 1;
					if (ti->prevxyz[2] == 0.0) { // mouse is just entering the trackball area.
						dotprod = 0.0;
						//ptr += sprintf(ptr, "Prevz is 0, no rot\n");
						// The previous value has no z value, so no rotation
					} else {
						// Do a 3D rotation here

						ti->normalisedCurr[0] = ti->currentxyz[0]/ti->trackballsize;
						ti->normalisedCurr[1] = ti->currentxyz[1]/ti->trackballsize;
						ti->normalisedCurr[2] = ti->currentxyz[2]/ti->trackballsize;
						ti->normalisedPrev[0] = ti->prevxyz[0]/ti->trackballsize;
						ti->normalisedPrev[1] = ti->prevxyz[1]/ti->trackballsize;
						ti->normalisedPrev[2] = ti->prevxyz[2]/ti->trackballsize;

						dotprod = vdot3(ti->normalisedCurr, ti->normalisedPrev);
						ti->rotangle = correctAngle((float)acos(dotprod));
						if (ti->rotangle == ti->rotangle) { //may not be a number
							vcross(ti->normalisedPrev, ti->normalisedCurr, ti->axis);
							myNormaliseVector3D(ti->axis); // ti->axis is now a normalised rotation axis for the trackball.
							createQuatFor3DRotation(ti->axis, ti->rotangle, ti->myquat);
							//ptr += sprintf(ptr, "NONZero rot...\n");
							//ptr += sprintf(ptr, "prvz %8.4f curz %8.4f axx %8.4f axy %8.4f axz %8.4f ang %9.2f\n",
							//	ti->prevxyz[2],ti->currentxyz[2],ti->axis[0],ti->axis[1],ti->axis[2],ti->rotangle*M_RADIANS_TO_DEGREES);
						} else {
							// no rotation
							leavePreviousValuesAlone = 1;
						}
					}
				}
			}
		} else {

			/////////////////////// 4D calculations here
			// We need to distinguish left mouse and right mouse, do 4d rotations with right mouse.

			//ptr += sprintf(ptr," curr %6.3f %6.3f %6.3f prv %6.3f %6.3f %6.3f",
			//	ti->currMouse4D[0],ti->currMouse4D[1],ti->currMouse4D[2],
			//	ti->prevMouse4D[0],ti->prevMouse4D[1],ti->prevMouse4D[2]);
			if (ti->prevMouse4D[0] == ti->currMouse4D[0] && ti->prevMouse4D[1] == ti->currMouse4D[1]){
				//ptr += sprintf(ptr," no change ");
				// Nothing has changed
			} else {
				//ptr += sprintf(ptr," change ");
				// something has changed.
				if (ti->currMouse4D[2] == 0.0) {
					// The current mouse is outside the trackball area
					ti->insideTrackballArea = 0;
					if (ti->prevMouse4D[2] == 0.0) {
						// The previous mouse position was outside the trackball area.
						// If this is done with the control key up, it is a 3d rotation:
						//   The current and previous mouse positions combine to form a bivector defining a rotation in the xy plane
						// If the control key is down, it is a 4D rotation defined by the zw bivector.
						// In both cases, only the rotation angle is needed.
						//ptr += sprintf(ptr,"2Drot ");
						temp = 1/sqrt(ti->currMouse4D[0]*ti->currMouse4D[0] + ti->currMouse4D[1]*ti->currMouse4D[1]);
						ti->normalisedCurr[0] = ti->currMouse4D[0]*temp;
						ti->normalisedCurr[1] = ti->currMouse4D[1]*temp;
						ti->normalisedCurr[2] = 0.0;
						ti->normalisedCurr[3] = 0.0;
						temp = 1/sqrt(ti->prevMouse4D[0]*ti->prevMouse4D[0] + ti->prevMouse4D[1]*ti->prevMouse4D[1]);
						ti->normalisedPrev[0] = ti->prevMouse4D[0]*temp;
						ti->normalisedPrev[1] = ti->prevMouse4D[1]*temp;
						ti->normalisedPrev[2] = 0.0;
						ti->normalisedPrev[3] = 0.0;

						dotprod = vdot3(ti->normalisedCurr, ti->normalisedPrev);

						ti->rotangle = correctAngle((float)acos(dotprod));
						if (ti->rotangle == ti->rotangle) { //may not be a number
							//ptr += sprintf(ptr,"OK ");
							
							// we need case 4d							
		// 0 - no effective mouse movement
		// 1 - The control key is down and the mouse moves  inside the trackball area
		//     the rotation bivector will be calculated from (curr mouse - prev mouse) wedge (W axis) (curr and prev use only x and y axes, I.e. are 2D vectors)
		// 2 - The control key is down and the mouse moves outside the trackball area
		//     the rotation bivector is the zw plane (e34).
		// 3 - The control key is up   and the mouse moves  inside the trackball area
		//     the rotation bivector is (prev mouse) wedge (curr mouse) (prev and curr use z axis, i.e. are 3D vectors)
		// 4 - The control key is up   and the mouse moves outside the trackball area
		//     the rotation bivector is the xy plane (e12)
							
//							case4D = 4 - 2*info4D.keyDownCtrl; // Fudge the correct case4D number (as per description above)
							if (right_mouse) {
								case4D = 2;
							} else {
								case4D = 4;
							}
							




							// If the cross product is less than zero, the angle of rotation must be negative
							if (((ti->normalisedPrev[0] * ti->normalisedCurr[1]) - (ti->normalisedPrev[1] * ti->normalisedCurr[0])) < 0.0) {
								ti->rotangle = - ti->rotangle;
							}
						} else {
							// no rotation
							//ptr += sprintf(ptr,"NOK ");
							ti->rotangle = 0.0; // By default, there is no rotation
							leavePreviousValuesAlone = 1;
						}
					} else {
						// there is a boundary crossing happening, The mouse has just exited the trackball area
					}
				} else { // The current mouse is inside the trackball area
					ti->insideTrackballArea = 1;
					if (ti->prevMouse4D[2] == 0.0) {
						// This is a boundary crossing. The mouse is just entering
					} else {
						//The mouse has moved within the trackball area,
						// If the control key is up, this is treated as a 3d rotation and the bivector is calculated using the 
						// previous and current mouse positions (in 3d). The angle is from the dotprod of the previous and current mouse
						// positions (in 3D).
						// If the control key is down, this is treated as a 4D rotation where the bivector is calculated using the
						// (curr mouse posn - prev mouse posn) wedged with the w axis.
						//ptr += sprintf(ptr,"3Drot ");

						temp = 1.0/sqrt(ti->currMouse4D[0]*ti->currMouse4D[0] + ti->currMouse4D[1]*ti->currMouse4D[1] +
							ti->currMouse4D[2]*ti->currMouse4D[2]);
						ti->normalisedCurr[0] = ti->currMouse4D[0]*temp;
						ti->normalisedCurr[1] = ti->currMouse4D[1]*temp;
						ti->normalisedCurr[2] = ti->currMouse4D[2]*temp;
						ti->normalisedCurr[3] = 0.0;
						temp = 1.0/sqrt(ti->prevMouse4D[0]*ti->prevMouse4D[0] + ti->prevMouse4D[1]*ti->prevMouse4D[1] +
							ti->prevMouse4D[2]*ti->prevMouse4D[2]);
						ti->normalisedPrev[0] = ti->prevMouse4D[0]*temp;
						ti->normalisedPrev[1] = ti->prevMouse4D[1]*temp;
						ti->normalisedPrev[2] = ti->prevMouse4D[2]*temp;
						ti->normalisedPrev[3] = 0.0;

						dotprod = vdot3(ti->normalisedCurr, ti->normalisedPrev);
						ti->rotangle = correctAngle((float)acos(dotprod));

						if (ti->rotangle == ti->rotangle) { //may not be a number
							//ptr += sprintf(ptr,"OK "); // Fudge the correct case4D number (as per description above)
							//case4D = 3 - 2*info4D.keyDownCtrl;

							if (right_mouse) {
								case4D = 1;
							} else {
								case4D = 3;
							}
						
						
						
						
						} else {
							// no rotation if rotangle is not a number.
							//ptr += sprintf(ptr,"NOK ");
							leavePreviousValuesAlone = 1;
							ti->rotangle = 0.0; // By default, there is no rotation
						}
					}
				}
			}
		}
		break;
	case mouseHasJustGoneDown:
		// Change state but don't move the object
		*mouseState = mouseIsDown;
		//ptr += sprintf(ptr, "Just gone down, no movement\n");
		break;
	default:
		break;
	}
	if (!leavePreviousValuesAlone) {
		// Preserve the previous values of x y and z
		if (!ti->horrible4DFlag) {
			ti->prevxyz[0] = ti->currentxyz[0];
			ti->prevxyz[1] = ti->currentxyz[1];
			ti->prevxyz[2] = ti->currentxyz[2];
		} else {
			ti->prevMouse4D[0] = ti->currMouse4D[0];
			ti->prevMouse4D[1] = ti->currMouse4D[1];
			ti->prevMouse4D[2] = ti->currMouse4D[2];
		}
	}
//	ptr += sprintf(ptr," dotpr %8.5f rotang %8.5f\n",dotprod,ti->rotangle);
//	fputs(txt,pFile);
	return case4D;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

static void my_project_to_sphere2(struct trackballInfo *tbi, float *xyz)
{
	float d,dsquared;//,tanp,cosp;
	// xyz is a 3-vector containing the mouse x and y. z is then computed.
	// x and y are the x,y mouse positions. d is the (horizontal) distance of the mouse from the origin
	dsquared = xyz[0]*xyz[0] + xyz[1]*xyz[1];
	d = sqrt(dsquared);

	if (dsquared <= tbi->rsquared) {
		xyz[2] = sqrt(tbi->rsquared - dsquared);
	} else {
		xyz[2] = 0.0;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
static void
my_normalize_quat(float *q)
{
    float mag;

    mag = sqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
    q[0] /= mag; q[1] /= mag; q[2] /= mag; q[3] /= mag;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
// Fourot stuff here
////////////////////////////////////////////////////////

//float correctAngle(float oldAngle) {
double correctAngle(double oldAngle) {
	// Takes an angle, oldAngle, and reduces it to the "equivalent" angle in the range -pi to +pi
	double remainder;
	//remainder = fmodf(oldAngle, M_TWO_PI);
	remainder = fmod(oldAngle, M_TWO_PI);
	if (remainder > M_PI) {
		remainder -= M_TWO_PI;
	} else if (remainder <= -M_PI) {
		remainder += M_TWO_PI;
	}
	return remainder;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
float randomAngle()
{
	// Generates a floating point number in the range -pi to + pi
	float r = (float)rand()/(float)(RAND_MAX);
	float ang = r*M_TWO_PI - M_PI;
	return (ang);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
float randomAng(float minAng, float maxAng)
{
	// Generates a floating point number in the range minAng to maxAng
	float r = minAng + ((float)rand()/(float)RAND_MAX)*(maxAng - minAng);
	return (r);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void randomVec3D (float * vec) {
	// A random 3D unit vector is returned in vec
	float lngth;

	// First generate a random vector whose length is <= 1.0
	// Each component is in the range -1 to 1
	do {
		vec[0] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		vec[1] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		vec[2] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		lngth = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2];
	} while (lngth > 1.0);
	// Now normalise the vector
	lngth = sqrt(lngth);
	vec[0] /= lngth;
	vec[1] /= lngth;
	vec[2] /= lngth;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void randomVec4D (float * vec) {
	// A random 4D unit vector is returned in vec
	float lngth;
	// First generate a random vector whose length is <= 1.0
	// Each component is in the range -1 to 1
	do {
		vec[0] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		vec[1] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		vec[2] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		vec[3] = 1.0 - 2.0*(float)rand()/((float)RAND_MAX);
		lngth = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2] + vec[3]*vec[3];
	} while (lngth > 1.0);
	// Now normalise the vector
	lngth = sqrt(lngth);
	vec[0] /= lngth;
	vec[1] /= lngth;
	vec[2] /= lngth;
	vec[3] /= lngth;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void quatMult(float *p, float *q, float *result) {
	// A simple quaternion multiplication, assuming p and q point to quaternions
	// Result will contain the result of p*q as a quaternion multiplication
	// This works for both non-unit and unit quaternions
	result[0] = p[0]*q[0] -p[1]*q[1] -p[2]*q[2] -p[3]*q[3];
	result[1] = p[0]*q[1] +p[1]*q[0] +p[2]*q[3] -p[3]*q[2];
	result[2] = p[0]*q[2] -p[1]*q[3] +p[2]*q[0] +p[3]*q[1];
	result[3] = p[0]*q[3] +p[1]*q[2] -p[2]*q[1] +p[3]*q[0];
}

void quatMultPQInverse(float *p, float *q, float *result) {
	// A quaternion multiplication, assuming p and q point to UNIT quaternions
	// Result will contain the result of p*(q inverse) as a quaternion multiplication

	// This is the same as p*q multiplication, except that we substitute
	// -q[1] for q[1]
	// -q[2] for q[2]
	// -q[3] for q[3]
	result[0] = p[0]*q[0] +p[1]*q[1] +p[2]*q[2] +p[3]*q[3];
	result[1] =-p[0]*q[1] +p[1]*q[0] -p[2]*q[3] +p[3]*q[2];
	result[2] =-p[0]*q[2] +p[1]*q[3] +p[2]*q[0] -p[3]*q[1];
	result[3] =-p[0]*q[3] -p[1]*q[2] +p[2]*q[1] +p[3]*q[0];
}

float differenceBetweenTwoQuats(float *q1, float *q2, float *qDiff, float *qAxis) {
	// Calculate the quaternion required to go from q1 to q2, store it in qdiff.
	// Assumes that q1 and q2 are unit quaternions.
	// Calculate the axis and angle that correspond to qdiff. Store the axis in qaxis
	// the angle is returned to the caller.
	float temp, tempcos, tempsin;
	quatMultPQInverse(q2, q1, qDiff); // Calc the difference quaternion.
	temp = 1.0/sqrt(qDiff[0]*qDiff[0] + qDiff[1]*qDiff[1] + qDiff[2]*qDiff[2] + qDiff[3]*qDiff[3]); // temp is 1/length
	qDiff[0] *= temp; qDiff[1] *= temp; qDiff[2] *= temp; qDiff[3] *= temp;

	tempcos = qDiff[0]; // This is the cosine of the angle
	if (tempcos == 1) { // This is a zero rotation, so choose an arbitrary axis.
		qAxis[0] = 1; qAxis[1] = 0; qAxis[2] = 0;
	} else {
		tempsin = sqrt(1 - tempcos * tempcos);
		qAxis[0] = qDiff[1]/tempsin;
		qAxis[1] = qDiff[2]/tempsin;
		qAxis[2] = qDiff[3]/tempsin;
	}
	temp = angleFromCosSin(tempcos, tempsin);
	return temp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void dumpRotVertsToFile3D(struct Intersection3DInfo *i3D){
	int i;
	char txtout[1000];
	char *sptr = txtout;
	sptr += sprintf(sptr,"Number verts: %d\n",info3D.fig->numVerts);

	for (i = 0; i < info3D.fig->numVerts; ++i){
		sptr += sprintf(sptr,"%2d %9.5f %9.5f %9.5f\n",i,i3D->rotatedVerts[i][0],i3D->rotatedVerts[i][1],i3D->rotatedVerts[i][2]);
	}
	{if (pFile) fputs(txtout,pFile);}
}

void dumpQuat(float *q){
	char txtout[90];
	char *sptr = txtout;
	sptr += sprintf(sptr,"Q: %9.5f %9.5f %9.5f %9.5f Angle:%8.2f Z=%d\n", q[0],q[1],q[2],q[3],acos(q[0])*M_RADIANS_TO_DEGREES,(q[0] == 1.0));
	{if (pFile) fputs(txtout,pFile);}
}
void dumpOneVector(float *v){
	char txtout[90];
	char *sptr = txtout;
	sptr += sprintf(sptr,"%9.5f %9.5f %9.5f\n", v[0],v[1],v[2]);
	{if (pFile) fputs(txtout,pFile);}
}
void dumpRotor(struct Rotor4D *rot){
	char txtout[90];
	char *sptr = txtout;

	sptr += sprintf(sptr,"R: SC:%7.4f bv:%7.4f %7.4f %7.4f %7.4f %7.4f %7.4f i:%7.4f\n",
		rot->scalar, rot->b.e12, rot->b.e13, rot->b.e14, rot->b.e23, rot->b.e24, rot->b.e34, rot->e1234);
	{if (pFile) fputs(txtout,pFile);}
}
void dumpBivector(struct Bivector4D *biv){
	char txtout[90];
	char *sptr = txtout;

	sptr += sprintf(sptr,"B: %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f\n",
		biv->e12, biv->e13, biv->e14, biv->e23, biv->e24, biv->e34);
	{if (pFile) fputs(txtout,pFile);}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
float dotProdOnePointWithUserNormal3D(float *vert) {
	return (vert[0]*info3D.userPlaneNormal[0] +vert[1]*info3D.userPlaneNormal[1] +vert[2]*info3D.userPlaneNormal[2]); 
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcDotProdsOfPointsWithUserNormal3D(struct Intersection3DInfo *i3D) {
	int vInd, count;
	float dist;
	count = 0;
	i3D->firstCoincidentVert = -1;

	// Calc the distance of the rotated verts of the figure and target, from the user plane
	for (vInd = 0; vInd < info3D.fig->numVerts; ++vInd) {

		i3D->dotProdOfRotVertsWithUserNormal[vInd] = dotProdOnePointWithUserNormal3D(i3D->rotatedVerts[vInd]);
		dist = i3D->dotProdOfRotVertsWithUserNormal[vInd] - info3D.userPlaneDistance;
		i3D->distOfRotVertsFromUserPlane[vInd] = dist;
		if (dist == 0.0) {
			count++; // Count the number of verts that are coincident with the user plane.
			if (i3D->firstCoincidentVert < 0) {
				i3D->firstCoincidentVert = vInd; // Note the first coincident vertex found.
			}
		}
	}	
	i3D->numberCoincidentVerts = count;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcDotProdsOfPointsWithUserNormal4D(struct Intersection4DInfo *i4D) {
	int vInd, count;
	float dist;
	count = 0;

	// Calc the distance of the rotated verts of the figure and target, from the user plane
	for (vInd = 0; vInd < info4D.fig->numVerts; ++vInd) {
		do {
			i4D->dotProdOfRotVertsWithUserNormal[vInd] =
				i4D->rotatedVerts[vInd][0]*info4D.userSpaceNormal[0] +i4D->rotatedVerts[vInd][1]*info4D.userSpaceNormal[1] +
				i4D->rotatedVerts[vInd][2]*info4D.userSpaceNormal[2] +i4D->rotatedVerts[vInd][3]*info4D.userSpaceNormal[3];
			dist = i4D->dotProdOfRotVertsWithUserNormal[vInd] - info4D.userSpaceDistance;
			i4D->distOfRotVertsFromUserPlane[vInd] = dist;
			if (dist == 0.0) {
				count++; // Count the number of verts that are coincident with the user plane.
				i4D->rotatedVerts[vInd][3] += 0.0001; //An unashamed kludge. Increase the z value by 0.0001
			}
		} while (dist == 0.0);
	}	
	i4D->numberCoincidentVerts = count;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void setUserPlaneNormal3D() {

	// set the values of user plane normal according to the user plane declension.
	info3D.userPlaneNormal[0] = 0;
	info3D.userPlaneNormal[1] = cos(info3D.userPlaneDeclension);
	info3D.userPlaneNormal[2] = sin(info3D.userPlaneDeclension);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcEdgeLambda3D(struct Intersection3DInfo *i3D) {
	int j, vert1Ind, vert2Ind, intersectionIndex, coincidentEdgeIndex;//, coincidentVertexIndex;
	float dotProd1, dotProd2, dotDiff, lambda;
	char txtout[200];
	char *sptr;

	intersectionIndex = 0; // indexing edges that have a true intersection (not just a coincident vertex
	coincidentEdgeIndex = 0;
	//dumpRotVertsToFile3D(i3D);
	for (j = 0; j < info3D.fig->numEdges; ++j) { // loop round all the edges. Edges indexed by j
		sptr = txtout;
		vert1Ind = info3D.fig->edge[2*j];
		vert2Ind = info3D.fig->edge[2*j+1];
		dotProd1 = i3D->dotProdOfRotVertsWithUserNormal[vert1Ind];
		dotProd2 = i3D->dotProdOfRotVertsWithUserNormal[vert2Ind];
		dotDiff = dotProd2 - dotProd1;
//		sptr += sprintf(sptr,"Edge %2d Verts %2d %2d dp1 %9.5f dp2 %9.5f ddiff %9.5f ",
//			j,vert1Ind,vert2Ind,dotProd1,dotProd2,dotDiff);
		if (dotDiff == 0.0) {
			i3D->edgeLambda[j] = LAMBDA_FOR_PARALLEL; // Indicates parallel to user plane
			if (i3D->distOfRotVertsFromUserPlane[vert1Ind] == 0.0) {
				// We have found an edge that coincides with the user plane.
				coincidentEdgeIndex++;
				i3D->edgeLambda[j] = LAMBDA_FOR_COINCIDENCE; // Indicates a coincident edge (yes, it is a hack)
//				sptr +=sprintf(sptr,"Lambda coinc\n");
			} else {
//				sptr +=sprintf(sptr,"Lambda parll\n");
			}
		} else {
			lambda = (info3D.userPlaneDistance - dotProd1)/dotDiff;
			i3D->edgeLambda[j] = lambda;
			if (lambda > 0.0 && lambda < 1.0) {
			//	// There is a true intersection. Store the coordinates.
				if (intersectionIndex == 0) i3D->firstIntersectingEdge = j;
				++intersectionIndex;
//				sptr +=sprintf(sptr,"Lambda %9.5f Intersect\n",lambda);
			} else {
//				sptr +=sprintf(sptr,"Lambda %9.5f NonIntsct\n",lambda);
			}
		}
		//fputs(txtout,pFile);
	}
	i3D->numberIntersections = intersectionIndex;
	i3D->numberCoincidentEdges = coincidentEdgeIndex;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void createCellIntsct(struct Intersection4DInfo *i4D) {
	int fIntIndex, k, l,j, thisCell, foundACell, foundAFaceReference, fGlobalIndex;
	float xxx = 0.0;

	// Get the index of the face in faceIntsct
	fIntIndex = i4D->iObj.faceIntersectionIndex;
	// Get the global index of the face
	fGlobalIndex = i4D->iObj.faceIntsct[fIntIndex].globalFaceIndex;

	// Loop round all the cells for this face (should be just 2).
	for (j = 0; j <  info4D.fig->numCellsPerFace; ++j) {
		// We need to see if there is a reference to the cell
		// somewhere in cellIntsct
		foundACell = 0;
		thisCell = info4D.fig->faceToCell[fGlobalIndex*(info4D.fig->numCellsPerFace) + j]; // Get the global index of the current cell for the face
		// Search the existing entries for this cell in cellIntsct
		for (k = 0; k < i4D->iObj.cellIntersectionIndex; ++k) {
			if (i4D->iObj.cellIntsct[k].globalCellIndex == thisCell) {
				foundACell = 1;
				// This cell does have an existing entry in cellIntsct, now to find if that entry already references the face.
				foundAFaceReference = 0;
				// l is the index that loops round all the faceIntersection entries for this cell intersection
				for (l = 0; l<i4D->iObj.cellIntsct[k].faceIntersectionIndexInd; ++l) {
					if (i4D->iObj.cellIntsct[k].faceIntersectionIndex[l] == fIntIndex) {
						foundAFaceReference = 1;
						break;
					}
				}
				// If there is a reference to the face, there is nothing to do. Otherwise we create one.
				if (!foundAFaceReference) {
					if (l > info4D.fig->numFacesPerCell) xxx = 1/xxx; // Throw an exception, this should never happen.
					// Add a cell reference to the face
					i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndex[i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndexInd] = k;
					++i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndexInd;
					// Add a face reference to the cell. if this is the case, l will be the same as faceIntersectionIndexInd for this cell
					i4D->iObj.cellIntsct[k].faceIntersectionIndex[l] = fIntIndex;
					i4D->iObj.cellIntsct[k].faceIntersectionIndex1[l] = fIntIndex;
					++i4D->iObj.cellIntsct[k].faceIntersectionIndexInd;
				}
				break; // Break out of the loop, there won't be any duplicate cells
			}
		}
		if (!foundACell) {
			// If we didn't find the cell in cellIntsct, create a new entry for it in cellIntsct
			i4D->iObj.cellIntsct[i4D->iObj.cellIntersectionIndex].globalCellIndex = thisCell;
			i4D->iObj.cellIntsct[i4D->iObj.cellIntersectionIndex].faceIntersectionIndex[0] = fIntIndex;
			i4D->iObj.cellIntsct[i4D->iObj.cellIntersectionIndex].faceIntersectionIndex1[0] = fIntIndex; // Index1 is used later
			i4D->iObj.cellIntsct[i4D->iObj.cellIntersectionIndex].faceIntersectionIndexInd = 1;

			// Make the face intsct entry point to this cell
			i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndex[i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndexInd] = i4D->iObj.cellIntersectionIndex;
			++i4D->iObj.faceIntsct[fIntIndex].cellIntersectionIndexInd;
			++i4D->iObj.cellIntersectionIndex;
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void createFaceIntsct(struct Intersection4DInfo *i4D) {

	int eIntIndex, k, j, thisFace, foundAFace, foundAnEdgeReference, eGlobalIndex;//, faceIntersectIndex;
	float xxx = 0.0;

	/////////////////////////////////////////////
	// Get the index of the edge in edge edgeIntsct that this call comes from
	eIntIndex = i4D->iObj.edgeIntersectionIndex;
	// Get the global index of the edge that this call comes from
	eGlobalIndex = i4D->iObj.edgeIntsct[eIntIndex].globalEdgeIndex;

	// loop round all the faces that adjoin this edge
	for (j = 0; j <  info4D.fig->numFacesPerEdge; ++j) { //; //   (int)GeometryCount.FacesPerEdge; ++j)

		// Get the j'th face that adjoins the edge, from edgeToFace
		thisFace = info4D.fig->edgeToFace[eGlobalIndex*info4D.fig->numFacesPerEdge + j];

		// Now look for and entry for this face in faceIntsct
		foundAFace = 0;
		for (k = 0; k < i4D->iObj.faceIntersectionIndex; ++k) {
			if (i4D->iObj.faceIntsct[k].globalFaceIndex == thisFace) {
				foundAFace = 1; // An entry for this face already exists in faceIntsct
				// Now look for an edge reference already in this face
				// NB there should never be an existing reference to the edge, because the edges are processed serially
				// and should never be repeated, nevertheless, keep the old code.
				foundAnEdgeReference = 0;
				switch (i4D->iObj.faceIntsct[k].edgeIntersectionIndexInd) {
				case 0: xxx = 1/xxx;
					break; // should never happen, throw and exception
				case 1: if (i4D->iObj.faceIntsct[k].edgeIntersectionIndex[0] == eIntIndex)
							foundAnEdgeReference = 1;
					break;
				case 2: if (i4D->iObj.faceIntsct[k].edgeIntersectionIndex[0] == eIntIndex ||
							i4D->iObj.faceIntsct[k].edgeIntersectionIndex[1] == eIntIndex )
							foundAnEdgeReference = 1;
					break;
				default: xxx = 1/xxx;
					break;
				}
				if (!foundAnEdgeReference) {
					// Add an edge reference to this face intersection
					if (i4D->iObj.faceIntsct[k].edgeIntersectionIndexInd == 1) {
						// This is the only legit value.
						// Add the pointers from the edge intersection obj to the face obj
						i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndex[i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndexInd] = k;
						++i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndexInd;

						// Add the pointers from this face obj to the edge object
						i4D->iObj.faceIntsct[k].edgeIntersectionIndex[1] = eIntIndex;
						++i4D->iObj.faceIntsct[k].edgeIntersectionIndexInd;
					} else {
						xxx = 1/xxx; // Throw an exception
					}
				} else {
					xxx = 1/xxx; // Throw an exception
				}
				break; // Break out of the for loop. There are no further entries on faceIntsct that are 'thisFace'.
			}
		}
		if (!foundAFace) {
			// There is no face in the faceIntsct array that refereneces this edge, so insert one

			i4D->iObj.faceIntsct[i4D->iObj.faceIntersectionIndex].globalFaceIndex = thisFace;
			i4D->iObj.faceIntsct[i4D->iObj.faceIntersectionIndex].edgeIntersectionIndex[0] = eIntIndex;
			i4D->iObj.faceIntsct[i4D->iObj.faceIntersectionIndex].edgeIntersectionIndexInd = 1;
			i4D->iObj.faceIntsct[i4D->iObj.faceIntersectionIndex].cellIntersectionIndexInd = 0;

			// make the edge intsct entry point to this face
			i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndex[i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndexInd] = i4D->iObj.faceIntersectionIndex;
			++i4D->iObj.edgeIntsct[eIntIndex].faceIntersectionIndexInd;

			// Now put the cell references in
			createCellIntsct(i4D); // This bit remains to be done.
			++i4D->iObj.faceIntersectionIndex;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcEdgeLambda4D(struct Intersection4DInfo *i4D, int doStereo) {
	int j, vert1Ind, vert2Ind, coincidentEdgeIndex; //, edgeInd;//, coincidentVertexIndex;
	float dotProd1, dotProd2, dotDiff, lambda;
	char txtout[200];
	char *sptr;
	struct EdgeIntersection *ei;

	i4D->iObj.edgeIntersectionIndex = 0; // Initialise the edge index.
	i4D->iObj.faceIntersectionIndex = 0;
	i4D->iObj.cellIntersectionIndex = 0;

	//intersectionIndex = 0; // indexing edges that have a true intersection (not just a coincident vertex
	coincidentEdgeIndex = 0;
	for (j = 0; j < info4D.fig->numEdges; ++j) { // loop round all the edges. Edges indexed by j
		sptr = txtout;
		vert1Ind = info4D.fig->edge[2*j];
		vert2Ind = info4D.fig->edge[2*j+1];
		dotProd1 = i4D->dotProdOfRotVertsWithUserNormal[vert1Ind];
		dotProd2 = i4D->dotProdOfRotVertsWithUserNormal[vert2Ind];
		dotDiff = dotProd2 - dotProd1;
		//		sptr += sprintf(sptr,"Edge %2d Verts %2d %2d dp1 %9.5f dp2 %9.5f ddiff %9.5f ",
		//			j,vert1Ind,vert2Ind,dotProd1,dotProd2,dotDiff);
		if (dotDiff == 0.0) {
			i4D->edgeLambda[j] = LAMBDA_FOR_PARALLEL; // Indicates parallel to user plane
			if (i4D->distOfRotVertsFromUserPlane[vert1Ind] == 0.0) {
				// We have found an edge that coincides with the user plane.
				dotProd1 = 0.0; dotProd2 = 1/dotProd1; // Crash on error. The kludge should make sure this never happens.
			}
		} else {
			lambda = (info4D.userSpaceDistance - dotProd1)/dotDiff;
			i4D->edgeLambda[j] = lambda;
			if (lambda > 0.0 && lambda < 1.0) {
				// There is a genuine intersection on this edge

				ei = &(i4D->iObj.edgeIntsct[i4D->iObj.edgeIntersectionIndex]);
				ei->globalEdgeIndex = j;
				ei->faceIntersectionIndexInd = 0;
				ei->intersectionPoint[0] = i4D->rotatedVerts[vert1Ind][0]*(1.0-lambda) + i4D->rotatedVerts[vert2Ind][0]*lambda;
				ei->intersectionPoint[1] = i4D->rotatedVerts[vert1Ind][1]*(1.0-lambda) + i4D->rotatedVerts[vert2Ind][1]*lambda;
				ei->intersectionPoint[2] = i4D->rotatedVerts[vert1Ind][2]*(1.0-lambda) + i4D->rotatedVerts[vert2Ind][2]*lambda;
				ei->intersectionPoint[3] = i4D->rotatedVerts[vert1Ind][3]*(1.0-lambda) + i4D->rotatedVerts[vert2Ind][3]*lambda;

				if (doStereo) {
					projectOnePoint4Dto3DStereo2(ei->intersectionPoint,ei->intersectionPointProjTo3DLeftEye, 
						ei->intersectionPointProjTo3DRightEye, info4D.projectDist4D3D, info4D.rightEyeX3D2D); // should be eyex and eyez.
				} 
				else {
					projectOnePoint4Dto3D(ei->intersectionPoint, ei->intersectionPointProjTo3D, info4D.projectDist4D3D);
				}
				
				createFaceIntsct(i4D);
				++i4D->iObj.edgeIntersectionIndex;
			}
		}
		//fputs(txtout,pFile);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void populateIntersectingEdge(struct Intersection3DInfo *i3D, int iPointIndex, int edgeIndex) {
	float lambda;
	int vert1Ind, vert2Ind;

	vert1Ind = info3D.fig->edge[2*edgeIndex];
	vert2Ind = info3D.fig->edge[2*edgeIndex+1];

	lambda = i3D->edgeLambda[edgeIndex];
	i3D->iPoint[iPointIndex].iType = intersectingEdge; 
	i3D->iPoint[iPointIndex].objectIndex = edgeIndex;
	i3D->iPoint[iPointIndex].p[0] = i3D->rotatedVerts[vert1Ind][0]*(1.0 - lambda) + i3D->rotatedVerts[vert2Ind][0]*lambda;
	i3D->iPoint[iPointIndex].p[1] = i3D->rotatedVerts[vert1Ind][1]*(1.0 - lambda) + i3D->rotatedVerts[vert2Ind][1]*lambda;
	i3D->iPoint[iPointIndex].p[2] = i3D->rotatedVerts[vert1Ind][2]*(1.0 - lambda) + i3D->rotatedVerts[vert2Ind][2]*lambda;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void populateCoincidentVertex(struct Intersection3DInfo *i3D, int iPointIndex, int vertIndex) {

	i3D->iPoint[iPointIndex].iType = coincidentVertex; 
	i3D->iPoint[iPointIndex].objectIndex = vertIndex;
	i3D->iPoint[iPointIndex].p[0] = i3D->rotatedVerts[vertIndex][0];
	i3D->iPoint[iPointIndex].p[1] = i3D->rotatedVerts[vertIndex][1];
	i3D->iPoint[iPointIndex].p[2] = i3D->rotatedVerts[vertIndex][2];
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
int calcIntersectionFace3D(struct Intersection3DInfo *i3D) {
	int faceTraverseIndex;
	int edgeTraverseIndex;
	int idxToAccumulateIntersections; // Indexes the intersections as we tour round the intersecting face.
	int firstIndex;
	int face1Index;
	int previousFaceIndex; // Only used when the current object is an intersection edge
	int previousEdgeIndex; // Only used when the current object is a coincident vertex (part of a coincident edge)
	int candidateEdgeIndex;
	int candidateFaceIndex;
	int adjacentFaceIndex1;
	int adjacentFaceIndex2;
	int completedIntersectionFace; // Signals the end of the process
	int foundNextIntersection; // Set 1 for found
	enum IntersectionObjectType firstObject; 
	int tempObjectIndex;

	i3D->numberIntersectionsToBePlotted = 0;
	idxToAccumulateIntersections = 0; // Increases every time we find an intersection

	// Check on how many intersections were discovered during the search (in function 'calcEdgeLambda3D')
	if (i3D->numberIntersections < 1) {
		if (i3D->numberCoincidentVerts < 3) {
			// There are not enough intersections to make an intersection face. Return zero.
			return 0;
		} else { // Got the first coincident vertex that was found. Use it as a starting point.
			// First specify it as the starting point, so that we know when to finish (by being back at the starting point.)
			firstIndex = i3D->firstCoincidentVert;
			firstObject = coincidentVertex;	
			// Start to accumulate intersections by putting the first entry, a coincident vertex, into the array of intersections
			populateCoincidentVertex(i3D, idxToAccumulateIntersections, firstIndex);
		}
	} else { // Got the first intersecting edge that was found. Use it as a starting point.
		// First is to specify it as the starting point, so that we know when to finish (by being back at the starting point.)
		firstIndex = i3D->firstIntersectingEdge;
		firstObject = intersectingEdge;
		// Start to accumulate intersections by putting the first entry, an intersecting edge, into the array of intersections
		populateIntersectingEdge(i3D, idxToAccumulateIntersections, firstIndex);
	}
	idxToAccumulateIntersections++;

	// Debug only:
	//if (i3D->numberIntersections == 2 && i3D->numberCoincidentVerts == 2 ) {
	//	fclose(pFile);
	//	previousFaceIndex = -1;
	//	//exit(0);
	//}

	// Now to calculate the intersection face by 'tracing' our way round the intersections (or coincident vertices) until we have a closed figure
	completedIntersectionFace = 0; // Boolean to indicate when the process is complete (i.e. we have a closed face made of intersections)
	previousFaceIndex = -1; // So that when searching forward from an intersection, we don't waste time checking the face we have just finished
	previousEdgeIndex = -1; // So that when searching forward from an intersection, we don't waste time checking the edge we have just finished

	while (!completedIntersectionFace) { // Off we go round the big outer loop
		tempObjectIndex = i3D->iPoint[idxToAccumulateIntersections-1].objectIndex; // Get the index of the object we are going forward from
		if (i3D->iPoint[idxToAccumulateIntersections-1].iType == intersectingEdge) {
			// We are going forward from an edge intersection. So, unless this is first iteration, there will be a previous face
			// An edge has two adjoining faces, so find the face that is NOT the one that we have just looked at.
			face1Index = info3D.fig->edgeToFace[2*tempObjectIndex]; // Get the index of the candidate face
			if (face1Index == previousFaceIndex) { // Is it the previous face?
				face1Index = info3D.fig->edgeToFace[2*tempObjectIndex + 1]; // If so, use the other face that adjoins the edge.
			}
			// We have now got a face (face1Index) that adjoins the intersecting edge
			// Now look for an intersection by checking all the edges around the current face ('current' being indexed by face1Index)
			// In doing so, ignore the edge that we have just come from
			foundNextIntersection = 0; // Boolean to flag when we have found the next intersection
			for (faceTraverseIndex = 0; faceTraverseIndex < info3D.fig->numEdgesPerFace; ++faceTraverseIndex) { //Traverse the edges round the face
				candidateEdgeIndex = info3D.fig->face[face1Index*info3D.fig->numEdgesPerFace + faceTraverseIndex]; //Get a 'candidate' edge
				// Check this candidate edge against the previous edge. We know that the previous intersection object was an
				// Edge, otherwise we wouldn't be in this section of code
				if (candidateEdgeIndex != tempObjectIndex) {
					// We have found an edge that has not been examined. The candidate edge gets nearer to being the next intersecting edge!
					if (i3D->edgeLambda[candidateEdgeIndex] > 0.0 && i3D->edgeLambda[candidateEdgeIndex] < 1.0) {
						// we have found the next intersecting edge
						populateIntersectingEdge(i3D, idxToAccumulateIntersections, candidateEdgeIndex); 
						foundNextIntersection = 1; // an intersecting edge
					} else if (i3D->edgeLambda[candidateEdgeIndex] == 0.0) { 
						populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 0]); 
						foundNextIntersection = 1; // an intersection at vertex 1
					} else if (i3D->edgeLambda[candidateEdgeIndex] == 1.0) { 
						populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 1]); 
						foundNextIntersection = 1; // an intersection at vertex 2
					} else { } // The value of lambda must 0, 1, or between 0 and 1 for there to be an intersection, so continue traversing.
					if (foundNextIntersection) break; //If an intersection was found, exit the loop
					// nothing was found, so round the loop again
				} else { } // The candidate edge was the edge we just came from, so ignore it and continue traversing
			}

			//########################################
			// Get the color of this edge from the previousFaceIndex
			// The colour applies to the edge between this point and 
			// the previous point
			//########################################
			i3D->iPoint[idxToAccumulateIntersections].faceIndexForColour = face1Index;


			assert(foundNextIntersection); // This can't possibly happen, The geometry is such that there must be a next intersection.
			// We have found the next intersection
			// Check whether we have finished constructing the face: are we back at the starting intersection?
			if (i3D->iPoint[idxToAccumulateIntersections].iType == firstObject &&
				i3D->iPoint[idxToAccumulateIntersections].objectIndex == firstIndex) {
					completedIntersectionFace = 1; // All finished.
			} else {
				// Not finished yet, so carry on
				idxToAccumulateIntersections++;
				previousFaceIndex = face1Index;
				previousEdgeIndex = -1; // There wasnt a previous edge, it only exists if this was a coincident edge
			}

		} else if (i3D->iPoint[idxToAccumulateIntersections-1].iType == coincidentVertex) {
			// We are going forward from a coincident vertex
			// Firstly check the edges that go forward from this vertex to see if the next intersection is another vertex.
			// It could be a vertex diagonally across the face from the current vertex, or it could be the other end of a coincident edge
			// So tempObjectIndex refers to a vertex.
			foundNextIntersection = 0;
			for (edgeTraverseIndex = 0; edgeTraverseIndex < info3D.fig->numFacesPerVert; ++edgeTraverseIndex) {
				candidateEdgeIndex = info3D.fig->vertToEdge[tempObjectIndex*info3D.fig->numFacesPerVert + edgeTraverseIndex];
				if (candidateEdgeIndex != previousEdgeIndex) {
					// Note that there may not be a previous edge (so the index will be -1)
					if (i3D->edgeLambda[candidateEdgeIndex] == LAMBDA_FOR_COINCIDENCE) {
						// we have found the next edge which is coincident
						// Make the next object the far coincident vertex
						i3D->iPoint[idxToAccumulateIntersections].iType = coincidentVertex;

						if (info3D.fig->edge[2*candidateEdgeIndex + 0] == tempObjectIndex) {
							// Use the other vertex
							// If both vertices on the edge are the previous vertex. can't happen, crash the program
							assert (info3D.fig->edge[2*candidateEdgeIndex + 1] != tempObjectIndex);
							populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 1]); 
						} else {
							populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 0]); 
						}
						foundNextIntersection = 1; // 1 signifies an intersecting edge
						previousEdgeIndex = candidateEdgeIndex; //get ready for the next vertex
						previousFaceIndex = -1;

						//########################################
						// Get the color of this edge from previousEdgeIndex
						// Select the colour of the first face bordering the edge.
						// The colour applies to the edge between this point and 
						// the previous point
						//########################################
						i3D->iPoint[idxToAccumulateIntersections].faceIndexForColour = info3D.fig->edgeToFace[candidateEdgeIndex*2];


						break; // Exit the loop since we have found the next intersection
					} else {
						assert(1);
						// Since we go forward from a coincident vertex and are only looking in this loop at edges from that vertex
						// the next intersection cannot be an intersecting edge. (picture the geometry for yourself!)
					}
				}
			}
			if (!foundNextIntersection) {
				// We failed to find the next intersection in the edges radiating out from the current vertex. therefore
				// we need to look at faces surrounding the current vertex.
				// At this stage the remaining possibilities are 1, an intersecting edge in one of the surrounding faces. or
				// 2, a coincident vertex that is diagonally across from the current vertex in one of the surrounding faces.
				if (previousEdgeIndex >= 0) { // We go forward from a coincident vertex that was part of a coincident edge
					// If we are going forward from a coincident vertex that has a previous coincident edge, we can ignore the faces
					// that adjoin the previous edge.
					adjacentFaceIndex1 = info3D.fig->edgeToFace[previousEdgeIndex*2];
					adjacentFaceIndex2 = info3D.fig->edgeToFace[previousEdgeIndex*2 + 1];
				} else { // If there was a previous face (i.e. the intersection before this coincident vertex was an intersecting edge)
					// We can ignore that previous face.
					adjacentFaceIndex1 = previousFaceIndex;
					adjacentFaceIndex2 = -1;
				}
				for (faceTraverseIndex = 0; faceTraverseIndex < info3D.fig->numFacesPerVert; ++faceTraverseIndex) {
					candidateFaceIndex = info3D.fig->vertToFace[tempObjectIndex*info3D.fig->numFacesPerVert + faceTraverseIndex];
					if (!(candidateFaceIndex == adjacentFaceIndex1 || candidateFaceIndex == adjacentFaceIndex2)) {
						// We have found a face that is not the face that has been examined before
						// We traverse its edges to find the next intersection

						for (edgeTraverseIndex = 0; edgeTraverseIndex < info3D.fig->numFacesPerVert; ++edgeTraverseIndex) {
							candidateEdgeIndex = info3D.fig->face[candidateFaceIndex*info3D.fig->numEdgesPerFace + edgeTraverseIndex];
							// We now have an edge which may have and intersection on it, possibly a coincident index 
							if (i3D->edgeLambda[candidateEdgeIndex] > 0.0 && i3D->edgeLambda[candidateEdgeIndex] < 1.0) {
								// we have found the next intersecting edge
								populateIntersectingEdge(i3D, idxToAccumulateIntersections, candidateEdgeIndex); 
								foundNextIntersection = 1; 
							} else if (i3D->edgeLambda[candidateEdgeIndex] == 0.0) {
								if (info3D.fig->edge[2*candidateEdgeIndex + 0] != tempObjectIndex) {
									populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 0]); 
									foundNextIntersection = 1; 
								}
							} else if (i3D->edgeLambda[candidateEdgeIndex] == 1.0) { 
								if (info3D.fig->edge[2*candidateEdgeIndex + 1] != tempObjectIndex) {
									populateCoincidentVertex(i3D, idxToAccumulateIntersections, info3D.fig->edge[2*candidateEdgeIndex + 1]); 
									foundNextIntersection = 1; 
								}
							}
							if (foundNextIntersection) {
								previousFaceIndex = candidateFaceIndex;
								previousEdgeIndex = -1; // Because we must have found an 'edge' diagonally across a face

								//########################################
								// Get the color of this edge from the previousFaceIndex
								// The colour applies to the edge between this point and 
								// the previous point
								//########################################
								i3D->iPoint[idxToAccumulateIntersections].faceIndexForColour = candidateFaceIndex;

								break; // Exit the inner loop
							}
						}
						if (foundNextIntersection) break; // Exit the outer loop.
					}
				}
			}
			assert(foundNextIntersection); // Can't happen - but it did, once, and I couldn't discover the reason.
			// We have found the next intersection
			// Check whether we have finished constructing the face: are we back at the starting intersection?
			if (i3D->iPoint[idxToAccumulateIntersections].iType == firstObject &&
				i3D->iPoint[idxToAccumulateIntersections].objectIndex == firstIndex) {
					completedIntersectionFace = 1;
			} else {
				// Not finished yet, so carry on
				idxToAccumulateIntersections++;
			}
		}
	}
	i3D->numberIntersectionsToBePlotted = idxToAccumulateIntersections;
	return idxToAccumulateIntersections;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void createQuatFor3DRotation(float *axis, float angle, float *quat)
{// To rotate vectors, use: createQuatFor3DRotation, createColsForRots, calcRotatedVector, rotateManyVectors
	// Use This Function  !!!!!!!!! ////////////////////////////
	// The angle you enter as a parameter should be the full angle of rotation
	// It will be divided by two to get the half angle necessary for quaternion multiplication
	// Axis has 3 components
	// quat has 4 components.
	// This is the quaternion that goes on the left side of the double-sided multiplication
	float ha = angle*0.5;
	float sa = sin(ha);
	quat[0] = cos(ha);
	quat[1] = sa * axis[0];
	quat[2] = sa * axis[1];
	quat[3] = sa * axis[2];
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void createColsForRots(float *v, float *q, float *col)
{// A utility for use in quaternion rotation

	// v is the vector to be rotated. It has three components: x,y,z
	// q is the quaternion for rotation.

	col[0] = q[1]*v[0] + q[2]*v[1] + q[3]*v[2];
	col[1] = q[0]*v[0] + q[2]*v[2] - q[3]*v[1];
	col[2] = q[0]*v[1] - q[1]*v[2] + q[3]*v[0];
	col[3] = q[0]*v[2] + q[1]*v[1] - q[2]*v[0];

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcRotatedVector(float *col, float *q, float *result)
{
	// col has 4 components (it is calculated separately using the vector to be rotated)
	// q is a quaternion and has 4 components
	// result is the rotated vector and has 3 components
	//
	// Explanation:
	// To rotate a vector v rotated by a quaternion q do the following
	// 1. Create the quaternion's 4 components as follows
	//		q[0] = cos(theta/2), where theta is the rotation angle
	//		q[1] = s0 * sin(theta/2)
	//		q[2] = s1 * sin(theta/2)
	//		q[3] = s2 * sin(theta/2)
	//		where s0, s1, s2 are the three components of the axis of rotation, 
	//		such that s0^2 + s1^2 + s2^2 = 1.
	//		Then q[0]^2 + q[1]^2 + q[2]^2 + q[3]^2 will be =1 if the quaternion is constructed according to the above rules.
	//
	// 2. Create the conjugate, qc, of the quaternion q, i.e.:
	//		qc[0] = q[0]
	//		qc[1] = -q[1]
	//		qc[2] = -q[2]
	//		qc[3] = -q[3]
	//
	// 3. Get the vector to be rotated, as v0, v1, v2. Converted it to a quaternion vq with zero scalar component:
	//		vq[0] = 0
	//		vq[1] = v0
	//		vq[2] = v1
	//		vq[3] = v2
	//
	// 4. Do the following quaternion multiplication:
	//		qresult = q * vq * qc
	//
	// 5. qresult[0] will always be 0, and qresult[1], qresult[2] and qresult[3] will be
	//		the x, y and z components of the rotated vector. Call these resultx, resulty and resultz.
	//
	// If we name the components of q as q0, q1, q2 and q3  then
	//		resultx = -(-q1*v0-q2*v1-q3*v2)*q1 + (q0*v0+q2*v2-q3*v1)*q0 - (q0*v1-q1*v2+q3*v0)*q3 + (q0*v2+q1*v1-q2*v0)*q2
	//		resulty = -(-q1*v0-q2*v1-q3*v2)*q2 + (q0*v0+q2*v2-q3*v1)*q3 + (q0*v1-q1*v2+q3*v0)*q0 - (q0*v2+q1*v1-q2*v0)*q1
	//		resutlz = -(-q1*v0-q2*v1-q3*v2)*q3 - (q0*v0+q2*v2-q3*v1)*q2 + (q0*v1-q1*v2+q3*v0)*q1 + (q0*v2+q1*v1-q2*v0)*q0
	//
	// The above formulae were copied from MAPLE13, They can be rewritten more compactly as
	//		resultx = col0*q1 + col1*q0 - col2*q3 + col3*q2
	//		resulty = col0*q2 + col1*q3 + col2*q0 - col3*q1
	//		resutlz = col0*q3 - col1*q2 + col2*q1 + col3*q0
	//

	result[0] = col[0]*q[1] + col[1]*q[0] - col[2]*q[3] + col[3]*q[2];
	result[1] = col[0]*q[2] + col[1]*q[3] + col[2]*q[0] - col[3]*q[1];
	result[2] = col[0]*q[3] - col[1]*q[2] + col[2]*q[1] + col[3]*q[0];

	//sprintf(textout,"calcRotatedVector: lenquat %9.4f lenresult %9.4f\n",lenquat,lenresult);
	//fputs(textout,pFile);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void rotateOneVector(float *vector, float angle, float *axis, float *rotatedVector)
{
	// vector points to an array of 3d vectors: vector[n][3]
	// angle is the angle of rotation (we later divide it by 2 to get the half angle for quaternion rotation)
	// axis is 3-component vector giving the axis of rotation (it must be of length 1).
	// countofvectors is the number of vectors to rotate, taken from the array 'vector'
	// rotatedvector is where the results go, in the form of an n by 3 array

	float quat[4];
	float col[4];

	createQuatFor3DRotation( axis, angle, quat); // The rotation angle should be the full, not half, angle

	createColsForRots(vector, quat, col);

	calcRotatedVector(col, quat, rotatedVector);
//	sprintf(textout,"RotateOneVector: lenvector %9.5f angle %6.1f lenaxis %9.5f lenquat %9.5f lencol %9.5f lenrotated %9.5f\n",
//		lenvector,angle*M_RADIANS_TO_DEGREES,lenaxis, lenquat,lencol,lenrotated);
//	fputs(textout,pFile);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
void rotManyVec(int count, float *vec, float *rot, float *finalquat) {
	// Count is the number of vectors to be rotated
	// vect points to the vectors to be rotated
	// rot points to the results (the rotated vectors)
	// final quat points to the quaternion for rotation (it must be constructed using the half-angle)
	int i = 0;
	float col[4];

	while (count-- > 0) {
		createColsForRots(vec+i, finalquat, col);
		calcRotatedVector(col, finalquat, rot+i);
		i += 3;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void createQuatFromBasePosnQuatAxisAndAngle(float *axis, float angle, float *newquat) {
	// Creates a quaternion to achieve the following
	// 1. Rotate the figure (in the canonical position) to a 'base' position.
	// It is assumed that info3D.basePositionDemoQuat is a quaternion that already does this.
	// 2. Rotate the figure from the base position to a new position about the axis 'axis' by an angle 'angle'
	// This quaternion has to be calculated
	// 3. The quaternions from steps 1 and 2 are combined to form a new quaternion 'newquat'
	//
	float tempquat[4];

	// Firstly, create the new quaternion that is needed for step 2.
	createQuatFor3DRotation(axis, angle, tempquat); // The angle should be the full angle, not the half angle
	// Combine that quat with the quat to get to the basis position
	// Note the order.
	quatMult(tempquat, info3D.basePositionDemoQuat, newquat);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void rotateVectors3D_BAA(float oscAngle)//, int countOfNormals, float *rotatedNormals)
{
	// Use this!
	// vector points to an array of 3d vectors: vector[n][3]
	// countofvectors is the number of vectors to rotate, taken from the array 'vector'
	// rotatedvector is where the results go, in the form of an n by 3 array

	// This routine only called in demo mode, so copy the rotated vectors from fig to targ


	//fputs("BaseAxisOfDemo is: ",pFile);
	//dumpOneVector(info3D.baseAxisOfDemo);
	// create a quaternion, quat, that rotates about the base axis by a given angle, oscangle
	//createQuatFor3DRotation(info3D.baseAxisOfDemo, oscAngle, quat); // The angle should be the full angle, not the half angle

	createQuatFromBasePosnQuatAxisAndAngle(info3D.baseAxisOfDemo, oscAngle, info3DFig.finalPositionQuaternion);

	//sprintf(textout,"Angle of rot about base axis is %9.2f\n",oscAngle*M_RADIANS_TO_DEGREES);
	//fputs(textout,pFile);

	//fputs("Quat For BaseAxisOfDemo: ",pFile);
	//dumpQuat(quat);

	// Combine that quat with the quat to get to the basis position
	//quatMult(quat, info3D.basePositionDemoQuat, finalQuat);
	//fputs("Final Quat is ",pFile);
	//dumpQuat(finalQuat);
	

	// Rotate the vertices of the current fig.
	rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, &info3DFig.rotatedVerts[0][0], info3DFig.finalPositionQuaternion);
	// rotate the normals of the current fig
	rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DFig.rotatedFaceNormals[0][0], info3DFig.finalPositionQuaternion);

	// Copy the info from the fig to the targ, since these are the same for the demo.
	vcopy3Many(&info3DFig.rotatedVerts[0][0],&info3DTarg.rotatedVerts[0][0],info3D.fig->numVerts);
	vcopy3Many(&info3DFig.rotatedFaceNormals[0][0],&info3DTarg.rotatedFaceNormals[0][0],info3D.fig->numFaces);
	vcopy4(info3DFig.finalPositionQuaternion,info3DTarg.finalPositionQuaternion);
}


int signR(float Z) {
  if (Z > 0.0) return 1;
  if (Z < 0.0) return -1;
  return 0;
}

//float CBRT(double Z) {
//  float ret;
//	//const double THIRD = 1./3.;
//	//define cubic root as statement function
//	//SIGN has different meanings in both C and Fortran
//	// Was unable to use the sign command of C, so wrote my own
//	// that why a new variable needs to be introduced that keeps track of the sign of
//	// SIGN is supposed to return a 1, -1 or 0 depending on what the sign of the argument is
//	ret = fabs(pow(fabs(Z),THIRD)) * signR(Z);
//	return ret;
//}

//int cubicxxx(float A[4], float X[3], int* L) {
//  /*-------------------- Global Function Description Block ----------------------
//  *
//  *     ***CUBIC************************************************08.11.1986
//  *     Solution of a cubic equation
//  *     Equations of lesser degree are solved by the appropriate formulas.
//  *     The solutions are arranged in ascending order.
//  *     NO WARRANTY, ALWAYS TEST THIS SUBROUTINE AFTER DOWNLOADING
//  *     ******************************************************************
//  *     A(0:3)      (i)  vector containing the polynomial coefficients
//  *     X(1:L)      (o)  results
//  *     L           (o)  number of valid solutions (beginning with X(1))
//  *     ==================================================================
//  *  	17-Oct-2004 / Raoul Rausch
//  *		Conversion from Fortran to C
//  *
//  *
//  *-----------------------------------------------------------------------------
//  */
//	//const double PI = 3.1415926535897932;
//	//const float THIRD = 1./3.;
//	float U[3],W, P, Q, DIS, PHI;
//	int i;
//	
//	//using namespace std;
//
//	//define cubic root as statement function
//	// In C, the function is defined outside of the cubic fct
//
//	// ====determine the degree of the polynomial ====
//
//	if (A[3] != 0.0)
//	{
//		//cubic problem
//		W = A[2]/A[3]*THIRD;
//		P = pow((A[1]/A[3]*THIRD - pow(W,2)),3);
//		Q = -.5*(2.0*pow(W,3)-(A[1]*W-A[0])/A[3] );
//		DIS = pow(Q,2)+P;
//		if ( DIS < 0.0 )
//		{
//			//three real solutions!
//			//Confine the argument of ACOS to the interval [-1;1]!
//			PHI = acos(MIN(1.0,MAX(-1.0,Q/sqrt(-P))));
//
//			//P=2.0*pow((-P),(5.e-1*THIRD));
//			P = 2.0*pow(-P,(float)(0.1666666666666666666));
//			//P=2.0*pow((-P),(0.1));
//			//for (i=0;i<3;i++)	U[i] = P*cos((PHI+2*((double)i)*M_PI)*THIRD)-W;
//			for (i=0;i<3;i++)	U[i] = P*cos((PHI+2*i*M_PI)*THIRD)-W;
//			X[0] = MIN(U[0], MIN(U[1], U[2]));
//			X[1] = MAX(MIN(U[0], U[1]),MAX( MIN(U[0], U[2]), MIN(U[1], U[2])));
//			X[2] = MAX(U[0], MAX(U[1], U[2]));
//			*L = 3;
//		}
//		else
//		{
//			// only one real solution!
//			DIS = sqrt(DIS);
//			X[0] = CBRT(Q+DIS)+CBRT(Q-DIS)-W;
//			*L=1;
//		}
//	}
//	else if (A[2] != 0.0)
//	{
//		// quadratic problem
//		P = 0.5*A[1]/A[2];
//		DIS = pow(P,2)-A[0]/A[2];
//		if (DIS > 0.0)
//		{
//			// 2 real solutions
//			X[0] = -P - sqrt(DIS);
//			X[1] = -P + sqrt(DIS);
//			*L=2;
//		}
//		else
//		{
//			// no real solution
//			*L=0;
//		}
//	}
//	else if (A[1] != 0.0)
//	{
//		//linear equation
//		X[0] =A[0]/A[1];
//		*L=1;
//	}
//	else
//	{
//		//no equation
//		*L=0;
//	}
// /*
//  *     ==== perform one step of a newton iteration in order to minimize
//  *          round-off errors ====
//  */
//	for (i=0;i<*L;i++)
//	{
//		X[i] = X[i] - (A[0]+X[i]*(A[1]+X[i]*(A[2]+X[i]*A[3])))/(A[1]+X[i]*(2.0*A[2]+X[i]*3.0*A[3]));
//	//	printf("\n X inside cubic %.15e\n", X[i]);
//	}
//
//	return 0;
//}

//int quarticxxx(float dd[5], float sol[4], float soli[4], int* Nsol) {
//  /*-------------------- Global Function Description Block ----------------------
// *
// *     ***QUARTIC************************************************25.03.98
// *     Solution of a quartic equation
// *     ref.: J. E. Hacke, Amer. Math. Monthly, Vol. 48, 327-328, (1941)
// *     NO WARRANTY, ALWAYS TEST THIS SUBROUTINE AFTER DOWNLOADING
// *     ******************************************************************
// *     dd(0:4)     (i)  vector containing the polynomial coefficients
// *     sol(1:4)    (o)  results, real part
// *     soli(1:4)   (o)  results, imaginary part
// *     Nsol        (o)  number of real solutions 
// *     ==================================================================
// *  	17-Oct-2004 / Raoul Rausch
// *		Conversion from Fortran to C
// *
// * Coeffs of dd:
// * [0] is const, [1] is power 1, [2] is power 2, [3] is power 3, [4] is power 4
// *-----------------------------------------------------------------------------
// */
// 
//
//	float AA[4], z[3];
//	float a, b, c, d, f, p, q, r, zsol, xK2, xL, xK, sqp, sqm;
//	int ncube, i;
//	*Nsol = 0;
////		using namespace std;
//
//
//	if (dd[4] == 0.0)
//	{
//		printf("\n ERROR: NOT A QUARTIC EQUATION");
//		return 0;
//	}
//
//	a = dd[4];
//	b = dd[3];
//	c = dd[2];
//	d = dd[1];
//	f = dd[0];
//
//	p = (-3.0*pow(b,2) + 8.0 *a*c)/(8.0*pow(a,2));
//	q = (pow(b,3) - 4.0*a*b*c + 8.0 *d*pow(a,2)) / (8.0*pow(a,3));
//	r = (-3.0*pow(b,4) + 16.0 *a*pow(b,2)*c - 64.0 *pow(a,2)*b*d + 256.0 *pow(a,3)*f)/(256.0*pow(a,4));
//	
//	// Solve cubic resolvent
//	AA[3] = 8.0;
//	AA[2] = -4.0*p;
//	AA[1] = -8.0*r;
//	AA[0] = 4.0*p*r - pow(q,2);
//
//	//printf("\n bcubic %.4e\t%.4e\t%.4e\t%.4e ", AA[0], AA[1], AA[2], AA[3]);
//	cubicxxx(AA, z, &ncube);
//	//printf("\n acubic %.4e\t%.4e\t%.4e ", z[0], z[1], z[2]);
//	
//	zsol = - 1.e99;
//	for (i=0;i<ncube;i++)	zsol = MAX(zsol, z[i]);	//Not sure C has max fct
//	z[0] =zsol;
//	xK2 = 2.0*z[0] -p;
//	xK = sqrt(xK2);
//	xL = q/(2.0*xK);
//	sqp = xK2 - 4.0 * (z[0] + xL);
//	sqm = xK2 - 4.0 * (z[0] - xL);
//
//	for (i=0;i<4;i++)	soli[i] = 0.0;
//	if ( (sqp >= 0.0) && (sqm >= 0.0))
//	{
////		printf("\n case 1 ");
//		sol[0] = 0.5 * (xK + sqrt(sqp));
//		sol[1] = 0.5 * (xK - sqrt(sqp));
//		sol[2] = 0.5 * (-xK + sqrt(sqm));
//		sol[3] = 0.5 * (-xK - sqrt(sqm));
//		*Nsol = 4;
//	}
//	else if ( (sqp >= 0.0) && (sqm < 0.0))
//	{
////		printf("\n case 2 ");
//		sol[0] = 0.5 * (xK + sqrt(sqp));
//		sol[1] = 0.5 * (xK - sqrt(sqp));
//		sol[2] = -0.5 * xK;
//		sol[3] = -0.5 * xK;
//		soli[2] =  sqrt(-.25 * sqm);
//		soli[3] = -sqrt(-.25 * sqm);
//		*Nsol = 2;
//	}
//	else if ( (sqp < 0.0) && (sqm >= 0.0))
//	{
////		printf("\n case 3 ");
//		sol[0] = 0.5 * (-xK + sqrt(sqm));
//		sol[1] = 0.5 * (-xK - sqrt(sqm));
//		sol[2] = 0.5 * xK;
//		sol[3] = 0.5 * xK;
//		soli[2] =  sqrt(-0.25 * sqp);
//		soli[3] = -sqrt(-0.25 * sqp);
//		*Nsol = 2;
//	}
//	else if ( (sqp < 0.0) && (sqm < 0.0))
//	{
////		printf("\n case 4 ");
//		sol[0] = -0.5 * xK;
//		sol[1] = -0.5 * xK;
//		soli[0] =  sqrt(-0.25 * sqm);
//		soli[1] = -sqrt(-0.25 * sqm);
//		sol[2] = 0.5 * xK;
//		sol[3] = 0.5 * xK;
//		soli[2] =  sqrt(-0.25 * sqp);
//		soli[3] = -sqrt(-0.25 * sqp);
//		*Nsol = 0;
//	}	
//	for (i=0;i<4;i++)	sol[i] -= b/(4.0*a);
//	return 0;
//}

void dualOfBivector (struct Bivector4D *bIn, struct Bivector4D *bOut)
{	// Not used currently but keep for reference
	bOut->e12 = -bIn->e34;
	bOut->e13 =  bIn->e24;
	bOut->e14 = -bIn->e23;
	bOut->e23 = -bIn->e14;
	bOut->e24 =  bIn->e13;
	bOut->e34 = -bIn->e12;
}


void rotateBivectorByRotor( struct Bivector4D *b, struct Rotor4D *r, struct Bivector4D * result)
{
	// Currently unused but maybe keep for reference????

	float temp1,temp2,temp3,temp4,temp5,temp6,temp7,temp8;
	
temp1 = (-r->b.e12*b->e12 -r->b.e13*b->e13 -r->b.e14*b->e14 -r->b.e23*b->e23 -r->b.e24*b->e24 -r->b.e34*b->e34);
temp2 = (r->scalar*b->e12 -r->b.e13*b->e23 -r->b.e14*b->e24 +r->b.e23*b->e13 +r->b.e24*b->e14 -r->e1234*b->e34);
temp3 = (r->scalar*b->e13 +r->b.e12*b->e23 -r->b.e14*b->e34 -r->b.e23*b->e12 +r->b.e34*b->e14 +r->e1234*b->e24);
temp4 = (r->scalar*b->e14 +r->b.e12*b->e24 +r->b.e13*b->e34 -r->b.e24*b->e12 -r->b.e34*b->e13 -r->e1234*b->e23);
temp5 = (r->scalar*b->e23 -r->b.e12*b->e13 +r->b.e13*b->e12 -r->b.e24*b->e34 +r->b.e34*b->e24 -r->e1234*b->e14);
temp6 = (r->scalar*b->e24 -r->b.e12*b->e14 +r->b.e14*b->e12 +r->b.e23*b->e34 -r->b.e34*b->e23 +r->e1234*b->e13);
temp7 = (r->scalar*b->e34 -r->b.e13*b->e14 +r->b.e14*b->e13 -r->b.e23*b->e24 +r->b.e24*b->e23 -r->e1234*b->e12);
temp8 = (r->b.e12*b->e34  -r->b.e13*b->e24 +r->b.e14*b->e23 +r->b.e23*b->e14 -r->b.e24*b->e13 +r->b.e34*b->e12);

result->e12 = -temp1*r->b.e12 +temp2*r->scalar +temp3*r->b.e23  +temp4*r->b.e24  -temp5*r->b.e13  -temp6*r->b.e14  -temp7*r->e1234  +temp8*r->b.e34;
result->e13 = -temp1*r->b.e13 -temp2*r->b.e23  +temp3*r->scalar +temp4*r->b.e34  +temp5*r->b.e12  +temp6*r->e1234  -temp7*r->b.e14  -temp8*r->b.e24;
result->e14 = -temp1*r->b.e14 -temp2*r->b.e24  -temp3*r->b.e34  +temp4*r->scalar -temp5*r->e1234  +temp6*r->b.e12  +temp7*r->b.e13  +temp8*r->b.e23;
result->e23 = -temp1*r->b.e23 +temp2*r->b.e13  -temp3*r->b.e12  -temp4*r->e1234  +temp5*r->scalar +temp6*r->b.e34  -temp7*r->b.e24  +temp8*r->b.e14;
result->e24 = -temp1*r->b.e24 +temp2*r->b.e14  +temp3*r->e1234  -temp4*r->b.e12  -temp5*r->b.e34  +temp6*r->scalar +temp7*r->b.e23  -temp8*r->b.e13;
result->e34 = -temp1*r->b.e34 -temp2*r->e1234  +temp3*r->b.e14  -temp4*r->b.e13  +temp5*r->b.e24  -temp6*r->b.e23  +temp7*r->scalar +temp8*r->b.e12;
	
}

void rotateVectorBySimpleRotor(float *v1, struct Rotor4D *r1, float *result) {
// Dont use This function!! It is probably ok but it isn't tested
//	If you want a function that rotates by a simple rotor, just take the following function "rotateOneVectorByComplexRotor"
// which is tested,
// And knock out the references to e1234 (i.e. set e1234 zero)
float t1 = r1->scalar*v1[0]-r1->b.e12*v1[1]-r1->b.e13*v1[2]-r1->b.e14*v1[3];
float t2 = r1->scalar*v1[1]+r1->b.e12*v1[0]-r1->b.e23*v1[2]-r1->b.e24*v1[3];
float t3 = r1->scalar*v1[2]+r1->b.e13*v1[0]+r1->b.e23*v1[1]-r1->b.e34*v1[3];
float t4 = r1->scalar*v1[3]+r1->b.e14*v1[0]+r1->b.e24*v1[1]+r1->b.e34*v1[2];

float f1 = -r1->b.e12*v1[2]+r1->b.e13*v1[1]-r1->b.e23*v1[0];
float f2 = -r1->b.e12*v1[3]+r1->b.e14*v1[1]-r1->b.e24*v1[0];
float f3 = -r1->b.e13*v1[3]+r1->b.e14*v1[2]-r1->b.e34*v1[0];
float f4 = -r1->b.e23*v1[3]+r1->b.e24*v1[2]-r1->b.e34*v1[1];

result[0]=
	+(t1)*r1->scalar	//t1
	-(t2)*r1->b.e12	//t2	
	-(t3)*r1->b.e13	//t3
	-(t4)*r1->b.e14	//t4

	-(f1)*r1->b.e23	//f1
	-(f2)*r1->b.e24	//f2
	-(f3)*r1->b.e34;	//f3

result[1]=    
	+(t1)*r1->b.e12	//t1
	+(t2)*r1->scalar	//t2
	-(t3)*r1->b.e23	//t3
	-(t4)*r1->b.e24	//t4

	+(f1)*r1->b.e13	//f1
	+(f2)*r1->b.e14	//f2
	-(f4)*r1->b.e34;	//f4

result[2]=
	+(t1)*r1->b.e13	//t1
	+(t2)*r1->b.e23	//t2
	+(t3)*r1->scalar	//t3
	-(t4)*r1->b.e34	//t4

	-(f1)*r1->b.e12	//f1
	+(f3)*r1->b.e14	//f3
	+(f4)*r1->b.e24;	//f4

result[3]=   
	+(t1)*r1->b.e14	//t1
	+(t2)*r1->b.e24	//t2
	+(t3)*r1->b.e34	//t3
	+(t4)*r1->scalar	//t4

	-(f2)*r1->b.e12	//f2
	-(f3)*r1->b.e13	//f3
	-(f4)*r1->b.e23;	//f4

/////////////////////////// Ths following lines (excluding the comments) are
// copied from Maple and should be correct.
//
//result[0]=
//	+(r1->scalar*v1[0]-r1->b.e12*v1[1]-r1->b.e13*v1[2]-r1->b.e14*v1[3])*r1->scalar	//t1
//	-(r1->scalar*v1[1]+r1->b.e12*v1[0]-r1->b.e23*v1[2]-r1->b.e24*v1[3])*r1->b.e12	//t2	
//	-(r1->scalar*v1[2]+r1->b.e13*v1[0]+r1->b.e23*v1[1]-r1->b.e34*v1[3])*r1->b.e13	//t3
//	-(r1->scalar*v1[3]+r1->b.e14*v1[0]+r1->b.e24*v1[1]+r1->b.e34*v1[2])*r1->b.e14	//t4
//
//	-(-r1->b.e12*v1[2]+r1->b.e13*v1[1]-r1->b.e23*v1[0])*r1->b.e23	//f1
//	-(-r1->b.e12*v1[3]+r1->b.e14*v1[1]-r1->b.e24*v1[0])*r1->b.e24	//f2
//	-(-r1->b.e13*v1[3]+r1->b.e14*v1[2]-r1->b.e34*v1[0])*r1->b.e34;	//f3
//
//	
//result[1]=    
//	+(r1->scalar*v1[0]-r1->b.e12*v1[1]-r1->b.e13*v1[2]-r1->b.e14*v1[3])*r1->b.e12	//t1
//	+(r1->scalar*v1[1]+r1->b.e12*v1[0]-r1->b.e23*v1[2]-r1->b.e24*v1[3])*r1->scalar	//t2
//	-(r1->scalar*v1[2]+r1->b.e13*v1[0]+r1->b.e23*v1[1]-r1->b.e34*v1[3])*r1->b.e23	//t3
//	-(r1->scalar*v1[3]+r1->b.e14*v1[0]+r1->b.e24*v1[1]+r1->b.e34*v1[2])*r1->b.e24	//t4
//
//	+(-r1->b.e12*v1[2]+r1->b.e13*v1[1]-r1->b.e23*v1[0])*r1->b.e13	//f1
//	+(-r1->b.e12*v1[3]+r1->b.e14*v1[1]-r1->b.e24*v1[0])*r1->b.e14	//f2
//	-(-r1->b.e23*v1[3]+r1->b.e24*v1[2]-r1->b.e34*v1[1])*r1->b.e34;	//f4
//
//result[2]=
//	+(r1->scalar*v1[0]-r1->b.e12*v1[1]-r1->b.e13*v1[2]-r1->b.e14*v1[3])*r1->b.e13	//t1
//	+(r1->scalar*v1[1]+r1->b.e12*v1[0]-r1->b.e23*v1[2]-r1->b.e24*v1[3])*r1->b.e23	//t2
//	+(r1->scalar*v1[2]+r1->b.e13*v1[0]+r1->b.e23*v1[1]-r1->b.e34*v1[3])*r1->scalar	//t3
//	-(r1->scalar*v1[3]+r1->b.e14*v1[0]+r1->b.e24*v1[1]+r1->b.e34*v1[2])*r1->b.e34	//t4
//
//	-(-r1->b.e12*v1[2]+r1->b.e13*v1[1]-r1->b.e23*v1[0])*r1->b.e12	//f1
//	+(-r1->b.e13*v1[3]+r1->b.e14*v1[2]-r1->b.e34*v1[0])*r1->b.e14	//f3
//	+(-r1->b.e23*v1[3]+r1->b.e24*v1[2]-r1->b.e34*v1[1])*r1->b.e24;	//f4
//
//
//result[3]=   
//	+(r1->scalar*v1[0]-r1->b.e12*v1[1]-r1->b.e13*v1[2]-r1->b.e14*v1[3])*r1->b.e14	//t1
//	+(r1->scalar*v1[1]+r1->b.e12*v1[0]-r1->b.e23*v1[2]-r1->b.e24*v1[3])*r1->b.e24	//t2
//	+(r1->scalar*v1[2]+r1->b.e13*v1[0]+r1->b.e23*v1[1]-r1->b.e34*v1[3])*r1->b.e34	//t3
//	+(r1->scalar*v1[3]+r1->b.e14*v1[0]+r1->b.e24*v1[1]+r1->b.e34*v1[2])*r1->scalar	//t4
//
//	-(-r1->b.e12*v1[3]+r1->b.e14*v1[1]-r1->b.e24*v1[0])*r1->b.e12	//f2
//	-(-r1->b.e13*v1[3]+r1->b.e14*v1[2]-r1->b.e34*v1[0])*r1->b.e13	//f3
//	-(-r1->b.e23*v1[3]+r1->b.e24*v1[2]-r1->b.e34*v1[1])*r1->b.e23;	//f4
//

}

void rotateOneVectorByComplexRotorMk2(float *v, struct Rotor4D *r1, float *vresult) {
	// verified 22/2/2016

  float temp1 =  r1->scalar*v[0] -r1->b.e12*v[1] -r1->b.e13*v[2] -r1->b.e14*v[3];
  float temp2 =  r1->scalar*v[1] +r1->b.e12*v[0] -r1->b.e23*v[2] -r1->b.e24*v[3];
  float temp3 =  r1->scalar*v[2] +r1->b.e13*v[0] +r1->b.e23*v[1] -r1->b.e34*v[3];
  float temp4 =  r1->scalar*v[3] +r1->b.e14*v[0] +r1->b.e24*v[1] +r1->b.e34*v[2];
  float temp5 = -r1->b.e12*v[2]  +r1->b.e13*v[1] -r1->b.e23*v[0] +r1->e1234*v[3];
  float temp6 = -r1->b.e12*v[3]  +r1->b.e14*v[1] -r1->b.e24*v[0] -r1->e1234*v[2];
  float temp7 = -r1->b.e13*v[3]  +r1->b.e14*v[2] -r1->b.e34*v[0] +r1->e1234*v[1];
  float temp8 = -r1->b.e23*v[3]  +r1->b.e24*v[2] -r1->b.e34*v[1] -r1->e1234*v[0];


  vresult[0] = temp1*r1->scalar - temp2*r1->b.e12  - temp3*r1->b.e13  - temp4*r1->b.e14  - temp5*r1->b.e23 - temp6*r1->b.e24 - temp7*r1->b.e34 + temp8*r1->e1234;
  vresult[1] = temp1*r1->b.e12  + temp2*r1->scalar - temp3*r1->b.e23  - temp4*r1->b.e24  + temp5*r1->b.e13 + temp6*r1->b.e14 - temp7*r1->e1234 - temp8*r1->b.e34;
  vresult[2] = temp1*r1->b.e13  + temp2*r1->b.e23  + temp3*r1->scalar - temp4*r1->b.e34  - temp5*r1->b.e12 + temp6*r1->e1234 + temp7*r1->b.e14 + temp8*r1->b.e24;
  vresult[3] = temp1*r1->b.e14  + temp2*r1->b.e24  + temp3*r1->b.e34  + temp4*r1->scalar - temp5*r1->e1234 - temp6*r1->b.e12 - temp7*r1->b.e13 - temp8*r1->b.e23;

}

// Code below is from maple.
//(r1scalar*v[0]-r1be12*v[1]-r1be13*v[2]-r1be14*v[3])*r1scalar-(r1scalar*v[1]+r1be12*v[0]-r1be23*v[2]-r1be24*v[3])*r1be12-(r1scalar*v[2]+r1be13*v[0]+r1be23*v[1]-r1be34*v[3])*r1be13-(r1scalar*v[3]+r1be14*v[0]+r1be24*v[1]+r1be34*v[2])*r1be14-(-r1be12*v[2]+r1be13*v[1]-r1be23*v[0]+r1e1234*v[3])*r1be23-(-r1be12*v[3]+r1be14*v[1]-r1be24*v[0]-r1e1234*v[2])*r1be24-(-r1be13*v[3]+r1be14*v[2]-r1be34*v[0]+r1e1234*v[1])*r1be34+(-r1be23*v[3]+r1be24*v[2]-r1be34*v[1]-r1e1234*v[0])*r1e1234
//(r1scalar*v[0]-r1be12*v[1]-r1be13*v[2]-r1be14*v[3])*r1be12+(r1scalar*v[1]+r1be12*v[0]-r1be23*v[2]-r1be24*v[3])*r1scalar-(r1scalar*v[2]+r1be13*v[0]+r1be23*v[1]-r1be34*v[3])*r1be23-(r1scalar*v[3]+r1be14*v[0]+r1be24*v[1]+r1be34*v[2])*r1be24+(-r1be12*v[2]+r1be13*v[1]-r1be23*v[0]+r1e1234*v[3])*r1be13+(-r1be12*v[3]+r1be14*v[1]-r1be24*v[0]-r1e1234*v[2])*r1be14-(-r1be13*v[3]+r1be14*v[2]-r1be34*v[0]+r1e1234*v[1])*r1e1234-(-r1be23*v[3]+r1be24*v[2]-r1be34*v[1]-r1e1234*v[0])*r1be34
//(r1scalar*v[0]-r1be12*v[1]-r1be13*v[2]-r1be14*v[3])*r1be13+(r1scalar*v[1]+r1be12*v[0]-r1be23*v[2]-r1be24*v[3])*r1be23+(r1scalar*v[2]+r1be13*v[0]+r1be23*v[1]-r1be34*v[3])*r1scalar-(r1scalar*v[3]+r1be14*v[0]+r1be24*v[1]+r1be34*v[2])*r1be34-(-r1be12*v[2]+r1be13*v[1]-r1be23*v[0]+r1e1234*v[3])*r1be12+(-r1be12*v[3]+r1be14*v[1]-r1be24*v[0]-r1e1234*v[2])*r1e1234+(-r1be13*v[3]+r1be14*v[2]-r1be34*v[0]+r1e1234*v[1])*r1be14+(-r1be23*v[3]+r1be24*v[2]-r1be34*v[1]-r1e1234*v[0])*r1be24
//(r1scalar*v[0]-r1be12*v[1]-r1be13*v[2]-r1be14*v[3])*r1be14+(r1scalar*v[1]+r1be12*v[0]-r1be23*v[2]-r1be24*v[3])*r1be24+(r1scalar*v[2]+r1be13*v[0]+r1be23*v[1]-r1be34*v[3])*r1be34+(r1scalar*v[3]+r1be14*v[0]+r1be24*v[1]+r1be34*v[2])*r1scalar-(-r1be12*v[2]+r1be13*v[1]-r1be23*v[0]+r1e1234*v[3])*r1e1234-(-r1be12*v[3]+r1be14*v[1]-r1be24*v[0]-r1e1234*v[2])*r1be12-(-r1be13*v[3]+r1be14*v[2]-r1be34*v[0]+r1e1234*v[1])*r1be13-(-r1be23*v[3]+r1be24*v[2]-r1be34*v[1]-r1e1234*v[0])*r1be23

void rotateManyVectorsByComplexRotor(float *v1, int kount, struct Rotor4D *r1, float *vresult) {
	// Kount is the number of vertices, where each vertex is an array of four floats
	// Given a vector v, apply a rotor4D to it to get a result (a rotated vector) in vresult
	// This calculation is copied from Maple
	// It includes premultiplication by r1 and post multiplication by the inverse of r1.

	int i = 0;
	int kk = kount*4;

	while (i < kk) {
		rotateOneVectorByComplexRotorMk2(&v1[i],r1, &vresult[i]);
		i += 4;
	}
}

void gpOfTwoComplexRotors(struct Rotor4D *r1, struct Rotor4D *r2, struct Rotor4D *rr) {
	// Given two complex rotors r1 and r2, calculate their geometric product rr. (Checked 21/2/2016)

	rr->scalar= r1->scalar*r2->scalar -r1->b.e12*r2->b.e12 -r1->b.e13*r2->b.e13  -r1->b.e14*r2->b.e14  -r1->b.e23*r2->b.e23  -r1->b.e24*r2->b.e24  -r1->b.e34*r2->b.e34  +r1->e1234*r2->e1234;

	rr->b.e12 = r1->scalar*r2->b.e12 +r1->b.e12*r2->scalar -r1->b.e13*r2->b.e23  -r1->b.e14*r2->b.e24  +r1->b.e23*r2->b.e13  +r1->b.e24*r2->b.e14  -r1->b.e34*r2->e1234  -r1->e1234*r2->b.e34;
	rr->b.e13 = r1->scalar*r2->b.e13 +r1->b.e12*r2->b.e23  +r1->b.e13*r2->scalar -r1->b.e14*r2->b.e34  -r1->b.e23*r2->b.e12  +r1->b.e24*r2->e1234  +r1->b.e34*r2->b.e14  +r1->e1234*r2->b.e24;
	rr->b.e14 = r1->scalar*r2->b.e14 +r1->b.e12*r2->b.e24  +r1->b.e13*r2->b.e34  +r1->b.e14*r2->scalar -r1->b.e23*r2->e1234  -r1->b.e24*r2->b.e12  -r1->b.e34*r2->b.e13  -r1->e1234*r2->b.e23;
	rr->b.e23 = r1->scalar*r2->b.e23 -r1->b.e12*r2->b.e13  +r1->b.e13*r2->b.e12  -r1->b.e14*r2->e1234  +r1->b.e23*r2->scalar -r1->b.e24*r2->b.e34  +r1->b.e34*r2->b.e24  -r1->e1234*r2->b.e14;
	rr->b.e24 = r1->scalar*r2->b.e24 -r1->b.e12*r2->b.e14  +r1->b.e13*r2->e1234  +r1->b.e14*r2->b.e12  +r1->b.e23*r2->b.e34  +r1->b.e24*r2->scalar -r1->b.e34*r2->b.e23  +r1->e1234*r2->b.e13;
	rr->b.e34 = r1->scalar*r2->b.e34 -r1->b.e12*r2->e1234  -r1->b.e13*r2->b.e14  +r1->b.e14*r2->b.e13  -r1->b.e23*r2->b.e24  +r1->b.e24*r2->b.e23  +r1->b.e34*r2->scalar -r1->e1234*r2->b.e12;

	rr->e1234 = r1->scalar*r2->e1234 +r1->b.e12*r2->b.e34  -r1->b.e13*r2->b.e24  +r1->b.e14*r2->b.e23  +r1->b.e23*r2->b.e14  -r1->b.e24*r2->b.e13  +r1->b.e34*r2->b.e12  +r1->e1234*r2->scalar;
}

void calcBivector4DFromVectors (float *v1, float *v2, struct Bivector4D *biv) {
	// Note this only works for orthogonal vectors v1 and v2. (ok 22/2/2016)
	biv->e12  = v1[0]*v2[1]-v1[1]*v2[0];
	biv->e13  = v1[0]*v2[2]-v1[2]*v2[0];
	biv->e14  = v1[0]*v2[3]-v1[3]*v2[0];
	biv->e23  = v1[1]*v2[2]-v1[2]*v2[1];
	biv->e24  = v1[1]*v2[3]-v1[3]*v2[1];
	biv->e34  = v1[2]*v2[3]-v1[3]*v2[2];
}

void calcNormalBivector4DFromVectors (float *v1, float *v2, struct Bivector4D *biv) {
	float rlength;
	calcBivector4DFromVectors(v1,v2,biv);

	rlength =	biv->e12*biv->e12 +
				biv->e13*biv->e13 +
				biv->e14*biv->e14 +
				biv->e23*biv->e23 +
				biv->e24*biv->e24 +
				biv->e34*biv->e34;

	rlength = 1.0/sqrt(rlength);
	// Note this only works for  normalised, orthogonal vectors.
	biv->e12  *= rlength; //= v1[0]*v2[1]-v1[1]*v2[0];
	biv->e13  *= rlength; //= v1[0]*v2[2]-v1[2]*v2[0];
	biv->e14  *= rlength; //= v1[0]*v2[3]-v1[3]*v2[0];
	biv->e23  *= rlength; //= v1[1]*v2[2]-v1[2]*v2[1];
	biv->e24  *= rlength; //= v1[1]*v2[3]-v1[3]*v2[1];
	biv->e34  *= rlength; //= v1[2]*v2[3]-v1[3]*v2[2];
}

void calcCompRotorFromBivAndTwoAngles (struct Bivector4D *biv1, float angle1, float angle2, struct Rotor4D *rt)
{
	//Calculates a complex rotor from a single bivector and two angles.
	// The bivector and the first angle is used for the first simple rotor
	// The dual of the bivector and the second angle is used for the second simple rotor
	// The first rotor is then multiplied by the second rotor

	// Multiplications obtained from Maple
	float cosa1 = cos(angle1*0.5);
	float sina1 = sin(angle1*0.5);
	float cosa2 = cos(angle2*0.5);
	float sina2 = sin(angle2*0.5);
	float sina12 = sina1*sina2;
	float cosa1sina2 = cosa1*sina2;
	float cosa2sina1 = cosa2*sina1;

	rt->scalar =  cosa1*cosa2 + 2*sina12*(biv1->e12*biv1->e34 - biv1->e13*biv1->e24 + biv1->e14*biv1->e23);

	rt->b.e12 =  -cosa1sina2*biv1->e34 + cosa2sina1*biv1->e12;
	rt->b.e13 =   cosa1sina2*biv1->e24 + cosa2sina1*biv1->e13;
	rt->b.e14 =  -cosa1sina2*biv1->e23 + cosa2sina1*biv1->e14;
	rt->b.e23 =  -cosa1sina2*biv1->e14 + cosa2sina1*biv1->e23;
	rt->b.e24 =   cosa1sina2*biv1->e13 + cosa2sina1*biv1->e24;
	rt->b.e34 =  -cosa1sina2*biv1->e12 + cosa2sina1*biv1->e34;

	rt->e1234 =  -sina12*(
					biv1->e12*biv1->e12 + biv1->e13*biv1->e13 +
					biv1->e14*biv1->e14 + biv1->e23*biv1->e23 +
					biv1->e24*biv1->e24 + biv1->e34*biv1->e34  );
}

void calcRotorFromBivectorAngle(struct Bivector4D * biv, float angleInRadians, struct Rotor4D *rot)
{
	float angleInRadians2 = angleInRadians*0.5;

	// Calculates a simple rotor from a bivector and an angle
	float cosA = cos(angleInRadians2);
	float sinA = sin(angleInRadians2);

	rot->scalar = cosA;
	rot->b.e12 = sinA * biv->e12;
	rot->b.e13 = sinA * biv->e13;
	rot->b.e14 = sinA * biv->e14;
	rot->b.e23 = sinA * biv->e23;
	rot->b.e24 = sinA * biv->e24;
	rot->b.e34 = sinA * biv->e34;
	rot->e1234 = 0.0;
}

void copyRotor( struct Rotor4D *r1,  struct Rotor4D *r2)
{
	r2->scalar = r1->scalar;
	r2->b.e12 = r1->b.e12;
	r2->b.e13 = r1->b.e13;
	r2->b.e14 = r1->b.e14;
	r2->b.e23 = r1->b.e23;
	r2->b.e24 = r1->b.e24;
	r2->b.e34 = r1->b.e34;
	r2->e1234 = r1->e1234;
}

void copyBivector( struct Bivector4D *r1,  struct Bivector4D *r2)
{
	r2->e12 = r1->e12;
	r2->e13 = r1->e13;
	r2->e14 = r1->e14;
	r2->e23 = r1->e23;
	r2->e24 = r1->e24;
	r2->e34 = r1->e34;
}

void calcContrProjRejOfVectorOnBiv( float *vect, struct Bivector4D *biv, float *contr, float *proj, float *rej)
{
	// The following is based on calculations by Maple.
	//float vec[4], outr[4]; //, temp1,temp2, temp3, temp4;

	// Calculate the contraction
	contr[0] = -vect[1]*biv->e12 - vect[2]*biv->e13 - vect[3]*biv->e14;
	contr[1] =  vect[0]*biv->e12 - vect[2]*biv->e23 - vect[3]*biv->e24;
	contr[2] =  vect[0]*biv->e13 + vect[1]*biv->e23 - vect[3]*biv->e34;
	contr[3] =  vect[0]*biv->e14 + vect[1]*biv->e24 + vect[2]*biv->e34;

	// Calculate the projection
	proj[0] =   contr[1]*biv->e12 + contr[2]*biv->e13 + contr[3]*biv->e14;
	proj[1] =  -contr[0]*biv->e12 + contr[2]*biv->e23 + contr[3]*biv->e24;
	proj[2] =  -contr[0]*biv->e13 - contr[1]*biv->e23 + contr[3]*biv->e34;
	proj[3] =  -contr[0]*biv->e14 - contr[1]*biv->e24 - contr[2]*biv->e34;

	// Calculate the rejection
	rej[0] = vect[0] - proj[0];
	rej[1] = vect[1] - proj[1];
	rej[2] = vect[2] - proj[2];
	rej[3] = vect[3] - proj[3];
}

void calcProjectionOfVectorOnBiv( float *vect, struct Bivector4D *biv, float *proj, float *rej)
{
	// The following is based on calculations by Maple.
	float temp1, temp2, temp3, temp4;
	
	temp1 =  vect[0]*biv->e12 - vect[2]*biv->e23 - vect[3]*biv->e24;
	temp2 =  vect[0]*biv->e13 + vect[1]*biv->e23 - vect[3]*biv->e34;
	temp3 =  vect[0]*biv->e14 + vect[1]*biv->e24 + vect[2]*biv->e34;
	temp4 = -vect[1]*biv->e12 - vect[2]*biv->e13 - vect[3]*biv->e14;

	// Calculate the projection of vect onto the bivector
	proj[0] =  temp1*biv->e12 + temp2*biv->e13 + temp3*biv->e14;
	proj[1] = -temp4*biv->e12 + temp2*biv->e23 + temp3*biv->e24;
	proj[2] = -temp4*biv->e13 + temp1*biv->e23 + temp3*biv->e34;
	proj[3] = -temp4*biv->e14 + temp1*biv->e24 - temp2*biv->e34;

	// Calculate the rejection
	rej[0] = vect[0] - proj[0];
	rej[1] = vect[1] - proj[1];
	rej[2] = vect[2] - proj[2];
	rej[3] = vect[3] - proj[3];
}

void calcNewBivectors( struct Bivector4D *oldBiv, struct Bivector4D *newBiv) {
	float temp[4];
	float proj[4];
	float rej[4];

	// Step 1 create a random 4D vector, unit length, in temp.
	randomVec4D(temp);

	// Step 2 calculate the projection and rejection of the random vector on the old bivector
	calcProjectionOfVectorOnBiv(temp, oldBiv, proj, rej);

	// Step 3 create a new bivector from the projection and rejection
	calcNormalBivector4DFromVectors(proj,rej,newBiv);
}
////////////////////////////////////////////////////////////////////
void calcNewBivectorForEscape( struct Bivector4D *oldBiv, float cosangle, struct Bivector4D *newBiv) {
	float temp[4];
	float tmp2[4];
	float contr[4];
	float proj[4];
	float rej[4];
	float sina;

	// Step 1 create a random 4D vector, unit length.
	randomVec4D(temp);

	// Step 2 calculate the projection and rejection of the random vector on the old bivector
	calcContrProjRejOfVectorOnBiv(temp, oldBiv, contr, proj, rej);

	myNormaliseVector4D(contr);
	myNormaliseVector4D(rej);
	myNormaliseVector4D(proj);

	sina = sqrt(1 - cosangle*cosangle);

	// Get a vector at the required angle from the bivector by using proj and rej.
	tmp2[0] = proj[0] * cosangle + rej[0] * sina;
	tmp2[1] = proj[1] * cosangle + rej[1] * sina;
	tmp2[2] = proj[2] * cosangle + rej[2] * sina;
	tmp2[3] = proj[3] * cosangle + rej[3] * sina;

	// Step 3 create a new bivector from tmp2 and the contraction
	// This will be at an angle to the original bivector.
	calcNormalBivector4DFromVectors(tmp2, contr, newBiv);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void randBivector4D(	struct Bivector4D *result)
{
	// Generate two random 4d vectors v1 and v2. Create a bivector from these.

	float v1[4],v2[4],dotp;

	randomVec4D(v1); // Produces a normalised random vector  in v1

	do {
		randomVec4D(v2); // Produces a normalised random vector  in v2
		dotp = v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2] + v1[3]*v2[3];
	} while (dotp == 0);

	calcNormalBivector4DFromVectors(v1, v2, result);
}

void rotateVectors4D(float oscAng, float oscAngDual) {
	// first we have to apply the rotor to get from the canonical to the base position
	// Then from the base position to the current position
	// So, create the rotor that goes from the base position to the current position
	struct Rotor4D tempRot;
	char textout[250];
	char *sptr = textout;

		calcCompRotorFromBivAndTwoAngles ( &info4D.demoRotationPlanes, oscAng, oscAngDual, &tempRot);
		gpOfTwoComplexRotors(&tempRot, &info4D.basePosnRot, &info4D.compositeRot); // Note order: temp


		//sptr+= sprintf(sptr,"osc=%7.3f od=%7.3f temprot= %7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f baserot= %7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f comprot= %7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f%7.2f\n",
		//oscAng, oscAngDual,
		//tempRot.scalar, tempRot.b.e12, tempRot.b.e13, tempRot.b.e14, tempRot.b.e23, tempRot.b.e24, tempRot.b.e34, tempRot.e1234,
		//info4D.basePosnRot.scalar, info4D.basePosnRot.b.e12, info4D.basePosnRot.b.e13, info4D.basePosnRot.b.e14, info4D.basePosnRot.b.e23, info4D.basePosnRot.b.e24, info4D.basePosnRot.b.e34, info4D.basePosnRot.e1234,
		//info4D.compositeRot.scalar, info4D.compositeRot.b.e12, info4D.compositeRot.b.e13, info4D.compositeRot.b.e14, info4D.compositeRot.b.e23, info4D.compositeRot.b.e24, info4D.compositeRot.b.e34, info4D.compositeRot.e1234);

		//fputs(textout,pFile);

		rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &info4D.compositeRot, info4DFig.rotatedVerts[0]);
		rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &info4D.compositeRot, info4DFig.rotatedCellNormals[0]);
		rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &info4D.compositeRot, info4DTarg.rotatedVerts[0]);
		rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &info4D.compositeRot, info4DTarg.rotatedCellNormals[0]);
}

void projectOnePoint4Dto3D(float *v4D, float *v3D, float dPersp) {
	//dPersp is the distance of the projection point from the origin.
	// if dPersp is >= 100 it is taken to be infinity
	// if dPersp is <= -100, it is taken to be - infinity.
	//int i ;
	float scaleFactor;

	if (dPersp >= 100.0 || dPersp <= -100.0 ) {
		vcopy3(&v4D[0], &v3D[0]);
	} else {
		if (fabs(dPersp) < 0.01) {
			dPersp = (dPersp < 0.0 ? -0.01 : 0.01); // Don't allow zero perpective distance
		}
		scaleFactor = dPersp/(v4D[3] + dPersp);
		v3D[0] = v4D[0] * scaleFactor;
		v3D[1] = v4D[1] * scaleFactor;
		v3D[2] = v4D[2] * scaleFactor;
	}
}

void projectOnePoint4Dto3DStereo2(float *v4D, float *v3DLeft, float *v3DRight, float dPersp, float eyex3D) {
	//dPersp is the distance of the projection point from 4D to 3D, from the origin.
	// if dPersp is >= 100 it is taken to be infinity
	// if dPersp is <= -100, it is taken to be - infinity.
	// eyex3D is the displacement of the eye along the x axis (for stereo) when projecting 4D to 3D 
	// eyex4D is the displacement of the eye along the x axis (for stereo) when projecting 4D to 3D 
	//int i ;
	
	float scaleFactor4D3D;
	//int count;
	//int isOrthogonal;
	float vtemp[4];
	//float xEye;
	vtemp[0]=v4D[0];vtemp[1]=v4D[1];vtemp[2]=v4D[2];vtemp[3]=v4D[3];

	if (dPersp >= 100.0 || dPersp <= -100.0 ) { // An orthogonal projection
		scaleFactor4D3D = 1.0;
	} else {
		if (fabs(dPersp) < 0.01) {
			dPersp = (dPersp < 0.0 ? -0.01 : 0.01); // Don't allow zero perpective distance
		}
		scaleFactor4D3D = 1.0/(1.0 + v4D[3]/dPersp);
	}

	v3DLeft[1]  = v4D[1]* scaleFactor4D3D;	// y coord
	v3DLeft[2]  = v4D[2]* scaleFactor4D3D;	// z coord
	v3DRight[1] = v3DLeft[1];				// y
	v3DRight[2] = v3DLeft[2];				// z

	// Don't use 4D to 3D stereo.

	//v3DLeft[0] = (v4D[0] + eyex4D)*scaleFactor4D3D + eyex3D;
	//v3DRight[0] =(v4D[0] - eyex4D)*scaleFactor4D3D - eyex3D;

	v3DLeft[0] = (v4D[0] )*scaleFactor4D3D + eyex3D;
	v3DRight[0] =(v4D[0] )*scaleFactor4D3D - eyex3D;
}
void calcFrustum (struct Intersection4DInfoGeneral *info4DG, struct Intersection4DInfo *info4, int isStereo, int numbers, float radiusOf4D) {

	float max3DXValue;
	float beta; // Assumed value of 3d angle, see diag 1.
	float beta4; // Assumed value of 3d angle, see diag 1.
	float alpha; // Assumed value of 3d angle, see diag 1.
	float d,dsq; // see diag 1 and 2 
	float r,rsq; // see diag 1 and 2
	float cd; // see diag 1
	float e; // see diag 1
	float k,ksq; // see diag 2

	d = info4DG->projectDist3D2D;
	dsq = d*d;

	if (numbers) r = radiusOf4D*NUMBERSDISPLAY_DISTANCEFACTOR; // a smaller sphere if face numbers are being used.
	else r = radiusOf4D; // radius of 4d sphere


	rsq = r*r;

	e = info4DG->rightEyeX3D2D;
	beta4 = asin(r/info4DG->projectDist4D3D);
	max3DXValue = info4DG->projectDist4D3D * tan(beta4);


	// 4 lines to calculate the surround circle.
	ksq = dsq - rsq;
	k = sqrt(ksq);
	info4DG->surroundCircleZ = rsq/d;
	info4DG->surroundCircleRadius = k*r/d;

	if (isStereo) {
		// The stereo values calculated here are for the right eye.
		cd = sqrt(d*d + e*e);
		beta = asin(max3DXValue/cd);
		alpha = asin(e/cd);
		info4DG->frustum_ag = -((d - max3DXValue)*tan(beta + alpha) - e); // Left of frustum
		info4DG->frustum_bg = (d - max3DXValue)*tan(beta - alpha) + e; // Right of frustum
		info4DG->frustum_topf = (cd - max3DXValue)*tan(beta); // top of frustum
	} else {
		beta = asin(max3DXValue/d);
		info4DG->frustum_ag = -(d - max3DXValue)*tan(beta); // Left of frustum
		info4DG->frustum_bg = -info4DG->frustum_ag; // Right of frustum
		info4DG->frustum_topf = -info4DG->frustum_ag; // top of frustum
	}
	info4DG->frustum_botf = -info4DG->frustum_topf; // bottom of frustum

	info4DG->frustum_near = info4DG->projectDist3D2D - max3DXValue;
	info4DG->frustum_far = info4DG->projectDist3D2D + max3DXValue;
}

void project4Dto3DStereo2C(struct Intersection4DInfoGeneral *info4DG, struct Intersection4DInfo *info4, int isStereo) {
	// info4 is separate for the targ and the figure
	// info4DG is general info for both figures.
	float scaleFactor4D3D;
	int count;
	float tempx,tempy,tempz;
	//char txtout[150];

	count = info4DG->fig->numVerts;

	if (isStereo) {
		for (count = 0; count < info4DG->fig->numVerts; ++count) {

			scaleFactor4D3D =  info4DG->projectDist4D3D/(info4DG->projectDist4D3D + info4->rotatedVerts[count][3]);

			tempx = info4->rotatedVerts[count][0]*scaleFactor4D3D;
			tempy = info4->rotatedVerts[count][1]*scaleFactor4D3D;
			tempz = info4->rotatedVerts[count][2]*scaleFactor4D3D;

			info4->verts4DTo3DLeftEye[count][0]  =  tempx + info4DG->rightEyeX3D2D; // to be displayed on rhs of screen
			info4->verts4DTo3DLeftEye[count][1]  =  tempy;
			info4->verts4DTo3DLeftEye[count][2]  =  tempz;

			info4->verts4DTo3DRightEye[count][0] =  tempx - info4DG->rightEyeX3D2D; // to be displayed on lhs of screen
			info4->verts4DTo3DRightEye[count][1] =  tempy;
			info4->verts4DTo3DRightEye[count][2] =  tempz;
		}

	} else {
		// No stereo in here
		for (count = 0; count < info4DG->fig->numVerts; ++count) {

			scaleFactor4D3D =  info4DG->projectDist4D3D/(info4DG->projectDist4D3D + info4->rotatedVerts[count][3]);

			info4->verts4DProjectedTo3D[count][0] = info4->rotatedVerts[count][0]*scaleFactor4D3D;
			info4->verts4DProjectedTo3D[count][1] = info4->rotatedVerts[count][1]*scaleFactor4D3D;
			info4->verts4DProjectedTo3D[count][2] = info4->rotatedVerts[count][2]*scaleFactor4D3D;
		}
	}
} 


///////////////////////////////////////--------------- trackball.c





//////////////////////////////////////////////// Fourot stuff follows
////////////////////////////////////////////////
void populateStartColours();
void setupTrackballInfo();
void cb_reset3DSliders(Fl_Widget *w, void *param);
void cb_reset4DSliders(Fl_Widget *w, void *param);
void startNew4D();

enum TextOutputColour{
	twhite,
	tred,
	tblue,
	tgreen,
	tredblue,
	tredgreen,
	tbluegreen
};
void glTextOutput(float x, float y, char *string, TextOutputColour topc);

enum SelectedTabs {
	tabWelcome,
	tab2D,
	tab3D,
	tab4D
};

enum draw4DStereo {
	noStereo,
	rightEyeLeftScreenStereo,
	leftEyeRightScreenStereo
};

enum MovTarg {
	movOnly,
	movAndTargTogether,
	movAndTargSeparately,
	targOnly
};
enum LeftRight {  // Now deprecated
	leftOnly,
	leftAndRightTogether,
	leftAndRightSeparately,
	rightOnly
};
enum Mouse2DInsideOutsideCircle {
	mouseInsideCircle,
	mouseOutsideCircle
};
Mouse2DInsideOutsideCircle mouse2DInsideOutsideCircle;


enum StateDemoMotion { // Note the values are used in calculating the oscillation period.
	demoIsMoving = 1,
	demoIsSlow = 4,
	demoIsSlower = 10,
	demoIsStopped = 0
};
StateDemoMotion motionStateOfDemo2D,motionStateOfDemo3D,motionStateOfDemo4D;
float savedXXTime2D,savedXXTime3D,savedXXTime4D;// User this to preserve a time when the demo is stopped, rather than finding the current time.

enum StateFourot {
	twoD,
	threeD,
	fourD
};
StateFourot stateFourot;

enum State2DOverview {
	twoDDemo,
	twoDGame
};
State2DOverview state2DOverview;

enum State3DOverview {
	threeDDemo,
	threeDGame
};
State3DOverview state3DOverview;

enum State4DOverview {
	fourDDemo,
	fourDGame
};
State4DOverview state4DOverview;

enum State3DDisplayType {
	directus3D,
	dimidium3D,
	ludus3D
};
State3DDisplayType state3DDisplayType;

enum State4DDisplayType {
	directus4D,
	dimidium4D,
	ludus4D
};
State4DDisplayType state4DDisplayType;

enum State2DDisplay {
	all2D,
	mov2DTarg1D,
	all1D
};
State2DDisplay state2DDisplay;

enum State3DDisplay { //New many more options here
	all3D,
	mov3DTarg2D
};
State3DDisplay state3DDisplay;

StateMouseState stateMouseState;

int whichang, whichbiv, whichdisp;
int prevwhichang, prevwhichbiv, prevwhichdisp;
int escaping;
float escapeAngle;
float xxxtime;

enum State2DGamePlay {
	waitingForNew2D,
	countingDown2D,
	playing2D,
	showingResults
};
State2DGamePlay state2DGamePlay;

enum State3DGamePlay {
	waitingForNew3D,
	countingDown3D,
	playing3D,
	justSucceeded3D,
	haveSuccess3D
};
State3DGamePlay state3DGamePlay;

enum State4DGamePlay {
	waitingForNew4D,
	countingDown4D,
	playing4D,
	justSucceeded4D,
	haveSuccess4D,
	spinningTarget4D
};
State4DGamePlay state4DGamePlay;

enum State4DAutoSolve {
	notAutoSolving,
	autoSolving
};

enum State2DGameDetail {
	movingMovendum,
	justStartedMoving,
	notMovingMovendum,
	justSucceeded,
	haveSuccess
};
State2DGameDetail state2DGameDetail;

struct ColValue {
	float rCol;   
	float gCol;
	float bCol;
};

enum FigType {
	tetra = 0,
	cube = 1,
	octa = 2,
	dodeca = 3,
	icosa = 4,
	K005 = 5,
	K008 = 6,
	K016 = 7,
	K024 = 8,
	K120 = 9,
	K600 = 10
};

Fl_Window mainWindow(OUTERWINDOWWIDTH, OUTERWINDOWHEIGHT);
std::complex<double> eValue1;
std::complex<double> eValue2;
std::vector<std::complex<double> > evec1;
std::vector<std::complex<double> > evec2;
int denom1,denom2;

float ev1[4],ev2[4],ev3[4],ev4[4];
float dsolv12,dsolv13,dsolv14,dsolv23,dsolv24,dsolv34,lsolv1,lsolv2,lsolv3,lsolv4;

#define KBROTSTART 0.01
#define KBROTMAX KBROTSTART*10
#define KBROTMIN KBROTSTART/4


#define ESCAPEROTSTART 0.0
#define ESCAPEROTMAX 0.02
#define ESCAPEROTMIN ESCAPEROTSTART/4

float circlePoints[NUMBEROFLINESINCIRCLE][3];
float circlePointsGeneric[NUMBEROFLINESINCIRCLE][2];

float axisX4D [4] = {1.0, 0.0, 0.0, 0.0};
float axisY4D [4] = {0.0, 1.0, 0.0, 0.0};
float axisZ4D [4] = {0.0, 0.0, 1.0, 0.0};
float axisW4D [4] = {0.0, 0.0, 0.0, 1.0};

// The following are the vertices, x y pairs, of polygons with 3 to 8 sides.
// The first vertex is always 'top dead centre' and the others follow in an anticlockwise direction
float poly2D_3 [3][2] = {
 { 0.0000000,  1.0000000},
 {-0.8660254, -0.5000000},
 { 0.8660254, -0.5000000},
};
float poly2D_4 [4][2] = {
 { 0.0000000,  1.0000000},
 {-1.0000000,  0.0000000},
 {-0.0000000, -1.0000000},
 { 1.0000000, -0.0000000},
};
float poly2D_5 [5][2] = {
 { 0.0000000,  1.0000000},
 {-0.9510565,  0.3090170},
 {-0.5877853, -0.8090170},
 { 0.5877853, -0.8090170},
 { 0.9510565,  0.3090170},
};
float poly2D_6 [6][2] = {
 { 0.0000000,  1.0000000},
 {-0.8660254,  0.5000000},
 {-0.8660254, -0.5000000},
 {-0.0000000, -1.0000000},
 { 0.8660254, -0.5000000},
 { 0.8660254,  0.5000000},
};
float poly2D_7 [7][2] = {
 { 0.0000000,  1.0000000},
 {-0.7818315,  0.6234898},
 {-0.9749279, -0.2225209},
 {-0.4338837, -0.9009689},
 { 0.4338837, -0.9009689},
 { 0.9749279, -0.2225209},
 { 0.7818315,  0.6234898},
};
float poly2D_8 [8][2] = {
 { 0.0000000,  1.0000000},
 {-0.7071068,  0.7071068},
 {-1.0000000,  0.0000000},
 {-0.7071068, -0.7071068},
 {-0.0000000, -1.0000000},
 { 0.7071068, -0.7071068},
 { 1.0000000, -0.0000000},
 { 0.7071068,  0.7071068},
};

struct Intersection2DInfo intersection2DInfo;

Fl_Pixmap *infoPixMap = new Fl_Pixmap(infoImage);

static trackballInfo trackbI;
time_t myTime;
char myStringTime[70];
struct tm *tnow;

SquareMatrix sqm(4,MIZERO);

Fl_Tabs * mtabs;
Fl_Output * figRight;
Fl_Button * toggleFig2D;
Fl_Button * freeze2D;
Fl_Button * info2D;
Fl_Button * info3DBtn;
Fl_Button * info4DBtn;
Fl_Button * resetSlider;
Fl_Button * reset3DSliders;
Fl_Button * startAndStopGame;
Fl_Button * startGame3D;
Fl_Button * startGame4D;
Fl_Button * reset4DSliders;
Fl_Button * reset4DSlidersE3;
Fl_Button * reset4DSliderKey;
Fl_Button * reset4DSliderEsc;

Fl_Button * toggleFig3D;
Fl_Group * speed3D;
Fl_Button * toggleFig4D;
Fl_Group * speed4D;

Fl_Button *toggleCell4D;
char toggleCellLabel[12];
Fl_Check_Button *dbg4DButton;
Fl_Check_Button *dbg3DButton;

Fl_Radio_Round_Button * ros;
Fl_Radio_Round_Button * rop;
Fl_Radio_Round_Button * rol;

Fl_Radio_Round_Button * fig2D_3;
Fl_Radio_Round_Button * fig2D_4;
Fl_Radio_Round_Button * fig2D_5;
Fl_Radio_Round_Button * fig2D_6;
Fl_Radio_Round_Button * fig2D_7;
Fl_Radio_Round_Button * fig2D_8;

Fl_Radio_Round_Button * fig3D_tetra; //Tetrahedron
Fl_Radio_Round_Button * fig3D_cube; //Cube
Fl_Radio_Round_Button * fig3D_octa; //Octahedron
Fl_Radio_Round_Button * fig3D_dodeca; //Dodecahedron
Fl_Radio_Round_Button * fig3D_icosa; //Icosahedron

Fl_Radio_Round_Button * fig4D_5;
Fl_Radio_Round_Button * fig4D_8;
Fl_Radio_Round_Button * fig4D_16;
Fl_Radio_Round_Button * fig4D_24;
Fl_Radio_Round_Button * fig4D_120;
Fl_Radio_Round_Button * fig4D_600;

Fl_Radio_Round_Button * appearance3DDirectus;
Fl_Radio_Round_Button * appearance3DDimidium;
Fl_Radio_Round_Button * appearance3DLudus;

Fl_Radio_Round_Button * appearance4DDirectus;
Fl_Radio_Round_Button * appearance4DDimidium;
Fl_Radio_Round_Button * appearance4DLudus;

Fl_Radio_Round_Button * speed3DNormal;
Fl_Radio_Round_Button * speed3DSlow;
Fl_Radio_Round_Button * speed3DSlower;
Fl_Radio_Round_Button * freeze3D;

Fl_Radio_Round_Button * speed4DNormal;
Fl_Radio_Round_Button * speed4DSlow;
Fl_Radio_Round_Button * speed4DSlower;
Fl_Radio_Round_Button * freeze4D;

Fl_Check_Button * numbers3D;
Fl_Check_Button * numbers4D;
Fl_Check_Button * stereo4D;
Fl_Check_Button * auto4D;

Fl_Check_Button * wireFrame4D;
Fl_Check_Button * wireFrameOnly4D;
Fl_Check_Button * specialCell4D;
Fl_Check_Button * oppCell4D;

Fl_Output *countdownOutput2D;
Fl_Output *countdownOutput3D;
Fl_Output *countdownOutput4D;
Fl_Slider * line2DDisp;

Fl_Text_Display *explnGen;
Fl_Text_Buffer *txtbufGen;

Fl_Text_Display *expln2DT;
Fl_Text_Buffer *txtbuf2D;

Fl_Text_Display *expln3DT;
Fl_Text_Buffer *txtbuf3D;

Fl_Text_Display *expln4DT;
Fl_Text_Buffer *txtbuf4D;

Fl_Slider * distUser3D;
Fl_Slider * declUser3D;
Fl_Slider * escUser3D;

Fl_Slider * distUser4D; // The distance of the userspace from the 4D origin (affects the intersection)
Fl_Slider * projUser4D3D; // Distance of the 'eye' when projecting 4D to 3D
Fl_Slider * projUser3D2D; // Distance of the eye when projecting 3D to 2D
Fl_Slider * eyexUser4D3D; // Displacement of the right eye for stereo when projecting 4D to 3D
Fl_Slider * eyexUser3D2D; // Displacement of the right eye for stereo when projecting 3D to 2D
Fl_Slider * angleView3D; // Fisheye to telephoto view of the 3D scene
Fl_Slider * keySpeed4D; // How fast to rotate when using keys.
Fl_Slider * escapeSpeed4D; // How fast to rotate when using keys.

Fl_Output * mousePosnLabel;
Fl_Output * mousePosnVector[3];

Fl_Output * escapeRotLabel;
Fl_Output * escAngleOut;

Fl_Output * mouseKBMoveLabel;
Fl_Output * mouseKBMove[7];

Fl_Output * figPositionLabel;
Fl_Output * figPosition[8];

Fl_Output * targPositionLabel;
Fl_Output * targPosition[8];

Fl_Output * soln1PlaneLabel;
Fl_Output * soln1Plane[7];

Fl_Output * soln2PlaneLabel;
Fl_Output * soln2Plane[7];

Fl_Output * resultsLabel;
Fl_Output * solnAngle1;
Fl_Output * solnAngle2;
Fl_Output * solnAngleSum;
Fl_Output * cumulEscAng;
Fl_Output * timeTaken;
Fl_Output * angSpeed;
Fl_Output * angDistTrav;
Fl_Output * accurac;
Fl_Output * allowedError;
Fl_Output * reqdForSoln;
Fl_Output * finalScore;
Fl_Group *tgAutoSolveType; 

struct timespec gotres; // Use clock_getres
double doublegotres;
struct timespec ltinitial; // Use clock_gettime
struct timespec ltfreezediff2;//2D
struct timespec ltfreezediff3;//3D
struct timespec ltfreezediff4;//4D
struct timespec ltend;
struct timespec ltdiff;





/*
struct timespec tstart={0,0}, tend={0,0};
    clock_gettime(CLOCK_MONOTONIC, &tstart);
    some_long_computation();
    clock_gettime(CLOCK_MONOTONIC, &tend);
    printf("some_long_computation took about %.5f seconds\n",
           ((double)tend.tv_sec + 1.0e-9*tend.tv_nsec) - 
           ((double)tstart.tv_sec + 1.0e-9*tstart.tv_nsec));
*/



//LARGE_INTEGER tfreq;
//float floattfreq;
//LARGE_INTEGER tinitial;
//LARGE_INTEGER tfreezediff2;//2D
//LARGE_INTEGER tfreezediff3;//3D
//LARGE_INTEGER tfreezediff4;//4D
//LARGE_INTEGER tend;
//LARGE_INTEGER tdiff;
float oscillation_period2D;
float oscillation_period3D;
float oscillation_period4D;
float savedK_osc2D;
float savedK_osc3D;
float savedK_osc4D;

FigInfo *figInf; // Points to the information (number of edges, faces, etc) for the current figure.
int currFig2D = MIN_2D_SIDES;
int currFig3D = 0;
int currFig4D = 0;

char *figNames[NUMBEROFFIGS] = {
	"Tetrahedron",
	"Cube",
	"Octahedron",
	"Dodecahedron",
	"Icosahedron",
	"5-Cell",
	"8-Cell",
	"16-Cell",
	"24-Cell",
	"120-Cell",
	"600-Cell"
};

char *figNames2D[MAX_2D_SIDES- MIN_2D_SIDES + 1] = {
	"Triangle",
	"Square",
	"Pentagon",
	"Hexagon",
	"Heptagon",
	"Octagon"
};

char *gameDisplay2D[3] = {
	"Directus",
	"Dimidium",
	"Ludus"
};

char *gameDisplay3D[3] = {
	"Directus",
	"Dimidium",
	"Ludus"
};

float *figVerts2D[MAX_2D_SIDES- MIN_2D_SIDES + 1] = {
	poly2D_3[0],
	poly2D_4[0],
	poly2D_5[0],
	poly2D_6[0],
	poly2D_7[0],
	poly2D_8[0]
};

FigInfo *figp[NUMBEROFFIGS] = { // Info for all the different figures.
	&infoTetrahedron,
	&infoCube,
	&infoOctahedron,
	&infoDodecahedron,
	&infoIcosahedron,
	&infoK005,
	&infoK008,
	&infoK016,
	&infoK024,
	&infoK120,
	&infoK600
};

Fl_Window dbg4Dwindow(450,780); // This is used to dump information during 4d play.
Fl_Window explainWelcomeWindow(500,800); // General info
Fl_Window explain2DScoresWindow(500,800); // User info on 2D Game
Fl_Window explain3DScoresWindow(500,800); // User info on 3D Game
Fl_Window explain4DScoresWindow(500,800); // User info on 4D Game
Fl_Window resultsWindow(500,600); // This is used to test a pop up window. Maybe use it later for results.

float radiusOf4DSphere = 1.0;
float radiusOfExtended4D=1.01;

//static int left_mouse, middle_mouse, right_mouse; // These are set true/false (GL_TRUE/GL_FALSE) depending on the current mouse state

static int mouseHasMoved;
static int mousex, mousey;

struct ColValue *colPtr;

struct ColValue colTetra[4]; // Number of faces; 
struct ColValue colCube[6]; // Number of faces; 
struct ColValue colOcta[8]; // Number of faces; 
struct ColValue colDodeca[12]; // Number of faces; 
struct ColValue colIcosa[20]; // Number of faces; 
struct ColValue colK005[5]; // Number of cells; 
struct ColValue colK008[8]; // Number of cells; 
struct ColValue colK016[16]; // Number of cells; 
struct ColValue colK024[24]; // Number of cells; 
struct ColValue colK120[120]; // Number of cells; 
struct ColValue colK600[600]; // Number of cells; 

struct ColValue colPoly3[3] = {
	{1,1,0},
	{1,0,1},
	{0,1,1}
};
struct ColValue colPoly4[4] = {
	{1,1,0},
	{1,0,1},
	{0,1,1},
	{1,0,0}
};
struct ColValue colPoly5[5] = {
	{1,1,0},
	{1,0,1},
	{0,1,1},
	{1,0,0},
	{0,1,0}
};
struct ColValue colPoly6[6] = {
	{1,1,0},
	{1,0,1},
	{0,1,1},
	{1,0,0},
	{0,1,0},
	{0,0,1}
};
struct ColValue colPoly7[7] = {
	{1,1,0},
	{1,0,1},
	{0,1,1},
	{1,0,0},
	{0,1,0},
	{0,0,1},
	{0.5,0.5,0.5}
};
struct ColValue colPoly8[8] = {
	{1,1,0},
	{1,0,1},
	{0,1,1},
	{1,0,0},
	{0,1,0},
	{0,0,1},
	{0.8,0.8,0.8},
	{0.3,0.3,0.3}
};

struct ColValue *figColp2D[6] = {
	colPoly3,
	colPoly4,
	colPoly5,
	colPoly6,
	colPoly7,
	colPoly8
};
struct ColValue *figColp[NUMBEROFFIGS] = {
	colTetra,
	colCube,
	colOcta,
	colDodeca,
	colIcosa,
	colK005,
	colK008,
	colK016,
	colK024,
	colK120,
	colK600
};
struct ColValue randomColorsMov[MAX_4D_CELLS];
struct ColValue randomColorsTarg[MAX_4D_CELLS];

////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////


static long W = 400, H = 300;
static float acc,cht;
static GLint viewport[4];

static float aspectRatio;

#define srandom srand // No idea what this is

double dbl_timespec_diff(struct timespec *start, struct timespec *stop)
{
	struct timespec diff;
	register long nsecdiff = stop->tv_nsec - start->tv_nsec;
    if (nsecdiff < 0) {
        diff.tv_sec = stop->tv_sec - start->tv_sec - 1;
        diff.tv_nsec = nsecdiff + 1000000000;
    } else {
        diff.tv_sec = stop->tv_sec - start->tv_sec;
        diff.tv_nsec = nsecdiff;
    }
    return (diff.tv_sec + diff.tv_nsec/1000000000.0);
}

void timespec_diff(struct timespec *start, struct timespec *stop,
                   struct timespec *result)
{
	register long nsecdiff = stop->tv_nsec - start->tv_nsec;
    if (nsecdiff < 0) {
        result->tv_sec = stop->tv_sec - start->tv_sec - 1;
        result->tv_nsec = nsecdiff + 1000000000;
    } else {
        result->tv_sec = stop->tv_sec - start->tv_sec;
        result->tv_nsec = nsecdiff;
    }
//    if ((stop->tv_nsec - start->tv_nsec) < 0) {
//        result->tv_sec = stop->tv_sec - start->tv_sec - 1;
//        result->tv_nsec = stop->tv_nsec - start->tv_nsec + 1000000000;
//    } else {
//        result->tv_sec = stop->tv_sec - start->tv_sec;
//        result->tv_nsec = stop->tv_nsec - start->tv_nsec;
//    }
    return;
}

//------------------------------------------------------------------------------------------//  DRAWALL

void openFile() {
	time_t myTime1;
	char myStringTime1[70];
	struct tm *tnow1;

	time(&myTime1);
	tnow1 = localtime(&myTime1);

	if (pFile != 0) {
		fclose(pFile);
	}
	sprintf(myStringTime1,"Fourot%04d%02d%02d_%02d%02d%02d.txt",
		1900+tnow1->tm_year,1+tnow1->tm_mon,tnow1->tm_mday,tnow1->tm_hour,tnow1->tm_min,tnow1->tm_sec);
	pFile = fopen(myStringTime1,"w");

	sprintf(myStringTime1,"Fourot results. %04d %02d %02d   %02d:%02d:%02d\n\n",
		1900+tnow1->tm_year,1+tnow1->tm_mon,tnow1->tm_mday,tnow1->tm_hour,tnow1->tm_min,tnow1->tm_sec);
	fputs(myStringTime1,pFile);
}

void almostRandomColour(int numberOfColours, int index, int indexOfSingleColour, struct ColValue *result) {
	float bignum;
	float littlenum;
	float temp;
	
	// This function is Only used by function randcolours.
	// The result is three floating point numbers representing a colour.
	temp = index/(numberOfColours - 1.0);
	bignum = (1.0 - temp)*0.8 + 0.2;
	littlenum = temp*0.8;
	if (indexOfSingleColour == 0) {
		result->rCol = littlenum;
		result->gCol = bignum;
		result->bCol = bignum;
	} else if (indexOfSingleColour == 1) {
		result->rCol = bignum;
		result->gCol = littlenum;
		result->bCol = bignum;
	} else {
		result->rCol = bignum;
		result->gCol = bignum;
		result->bCol = littlenum;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void randColours(int numberColours, struct ColValue *resultMov, struct ColValue *resultTarg) {
	int i,j;
	int singleColourMov, singleColourTarg, startIndexMov, startIndexTarg; //0, 1, or 2

	singleColourMov = rand() % 3;
	singleColourTarg = singleColourMov + rand()%2 + 1;
	if (singleColourTarg >= 3) singleColourTarg -= 3;

	startIndexMov = rand() % numberColours;
	startIndexTarg = startIndexMov + rand()%(numberColours - 1) + 1;
	if (startIndexTarg >= numberColours) startIndexTarg -= numberColours;

	// Create Movendum colours
	for (i = 0; i < numberColours; ++i) {
		j = i + startIndexMov;
		if (j >= numberColours) j-=numberColours;
		almostRandomColour(numberColours, j, singleColourMov, &resultMov[i]);
	}
	// Create Target colours
	for (i = 0; i < numberColours; ++i) {
		j = i + startIndexTarg;
		if (j >= numberColours) j-=numberColours;
		almostRandomColour(numberColours, j, singleColourTarg, &resultTarg[i]);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xxcalc2DIntersections(struct Intersection2DInfo *i2D, MovTarg movTarg)
{
	// movTarg can be = 
	//movOnly,
	//movAndTargTogether,
	//movAndTargSeparately,
	//targOnly

	int countOfIntersections = 0;
	float d, nx, ny, sx, sy, v1x, v1y, v2x, v2y, lambda, mu, intx, inty;

	float lineHalfLength; // aka 'k'
	float denom, numer;
	int i,j, intersectIdx;

	i2D->countIntersectsions2DMov = 0;
	i2D->countIntersectsions2DTarg = 0;
	d = i2D->displacementLine2D;
	nx = i2D->normalVector2D[0]; // nx is also cos theta in the endpoint calculation
	ny = i2D->normalVector2D[1]; // ny is also sin theta in the endpoint calculation
	sx =  ny;
	sy = -nx;
	lineHalfLength = sqrt(INTERSECTION2DLINERADIUS*INTERSECTION2DLINERADIUS - d*d);
	i2D->lineHalfLength = lineHalfLength;

	i2D->lineEndPointsMov[0][0] = d*nx - lineHalfLength*ny;
	i2D->lineEndPointsMov[0][1] = d*ny + lineHalfLength*nx;
	i2D->lineEndPointsMov[1][0] = d*nx + lineHalfLength*ny;
	i2D->lineEndPointsMov[1][1] = d*ny - lineHalfLength*nx;

	intersectIdx = 0; // This is used for saving the intersection points.

	// Do Mov Intersections
	if (movTarg != targOnly) { 
		for (i = 0; i < i2D->sides; ++i) {
			if (i < i2D->sides - 1) {
				j = i + 1;
			} else {
				j = 0;
			}
			v1x = i2D->rotated2DMov[i][0];
			v1y = i2D->rotated2DMov[i][1];
			v2x = i2D->rotated2DMov[j][0];
			v2y = i2D->rotated2DMov[j][1];
			denom = sy*(v2x-v1x) - sx*(v2y-v1y);
			if (denom != 0.0) { // Otherwise, Lines are parallel, dont bother.
				numer = sy*(d*nx-v1x) - sx*(d*ny-v1y);
				lambda = numer/denom;
				if (lambda >= 0.0 && lambda <= 1.0) { // Otherwise, Intersection point is outside the line segment
					intx = v1x + lambda*(v2x-v1x);
					inty = v1y + lambda*(v2y-v1y);
					i2D->intersection2DMov[intersectIdx][0] = intx;
					i2D->intersection2DMov[intersectIdx][1] = inty;
					i2D->intersectionColorIndexMov[intersectIdx] = i;
					if (sx > 0.01) {
						mu = (v1x + lambda*(v2x - v1x) - nx*d)/sx; // Distance from the centre of the intersection line
					} else {
						mu = (v1y + lambda*(v2y - v1y) - ny*d)/sy; // Distance from the centre of the intersection line
					}
					i2D->muMov[intersectIdx] = mu;
					intersectIdx++;
				}
			}
		}
		i2D->countIntersectsions2DMov = intersectIdx;
	}

	if (movTarg == movAndTargTogether) {
		for (i = 0; i < intersectIdx; ++i) {
			i2D->intersection2DTarg[i][0] = i2D->intersection2DMov[i][0];
			i2D->intersection2DTarg[i][1] = i2D->intersection2DMov[i][1];
			i2D->muTarg[i] = i2D->muMov[i];
			i2D->intersectionColorIndexTarg[i] = i2D->intersectionColorIndexMov[i];
		}
		i2D->countIntersectsions2DTarg = intersectIdx;
	} else if (movTarg != movOnly) {
		intersectIdx = 0; // This is used for saving the intersection points.
		for (i = 0; i < i2D->sides; ++i) {
			if (i < i2D->sides - 1) {
				j = i + 1;
			} else {
				j = 0;
			}
			v1x = i2D->rotated2DTarg[i][0];
			v1y = i2D->rotated2DTarg[i][1];
			v2x = i2D->rotated2DTarg[j][0];
			v2y = i2D->rotated2DTarg[j][1];
			denom = sy*(v2x-v1x) - sx*(v2y-v1y);
			if (denom != 0.0) { // Otherwise, Lines are parallel, dont bother.
				numer = sy*(d*nx-v1x) - sx*(d*ny-v1y);
				lambda = numer/denom;
				if (lambda >= 0.0 && lambda <= 1.0) { // Otherwise, Intersection point is outside the line segment
					intx = v1x + lambda*(v2x-v1x);
					inty = v1y + lambda*(v2y-v1y);
					i2D->intersection2DTarg[intersectIdx][0] = intx;
					i2D->intersection2DTarg[intersectIdx][1] = inty;
					i2D->intersectionColorIndexTarg[intersectIdx] = i;
					if (sx > 0.01) {
						mu = (v1x + lambda*(v2x - v1x) - nx*d)/sx; // Distance from the centre of the intersection line
					} else {
						mu = (v1y + lambda*(v2y - v1y) - ny*d)/sy; // Distance from the centre of the intersection line
					}
					i2D->muTarg[intersectIdx] = mu;
					intersectIdx++;
				}
			}
		}
		i2D->countIntersectsions2DTarg = intersectIdx;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xrotate2DFigure(struct Intersection2DInfo *i2D, MovTarg movTarg) // float angle, int sides, float* verts, float *rotatedVerts)
{
	// leftRight can be = 
	//leftOnly,
	//leftAndRightTogether,
	//leftAndRightSeparately,
	//rightOnly


	// Rotates a set of vertices (2D verts in 'verts', with n='sides' pairs) according to the angle 'angle'
	// results are put in 'rotatedverts'
	
	float sinangleMov, sinangleTarg, cosangleMov, cosangleTarg;
	//float newx, newy;
	int i;
	int mySides = i2D->sides;
	if (movTarg != targOnly) {
		// Calc the intersections of the Mov figure
		sinangleMov = sin(i2D->angle2DMov);
		cosangleMov = cos(i2D->angle2DMov);
		for (i = 0; i < i2D->sides; ++i) {
			i2D->rotated2DMov[i][0] = i2D->verts[i+i] * cosangleMov - i2D->verts[i+i+1] * sinangleMov;
			i2D->rotated2DMov[i][1] = i2D->verts[i+i] * sinangleMov + i2D->verts[i+i+1] * cosangleMov;
		}
	}
	if (movTarg == movAndTargTogether) {
		// Duplicate the Mov intersections on the Targ figure
		for (i = 0; i < i2D->sides; ++i) {
			i2D->rotated2DTarg[i][0] = i2D->rotated2DMov[i][0];
			i2D->rotated2DTarg[i][1] = i2D->rotated2DMov[i][1];
		}
	} else if (movTarg == movAndTargSeparately || movTarg == targOnly) {
		// Calc the Targ intersections
		sinangleTarg = sin(i2D->angle2DTarg);
		cosangleTarg = cos(i2D->angle2DTarg);
		for (i = 0; i < i2D->sides; ++i) {
			i2D->rotated2DTarg[i][0] = i2D->verts[i+i] * cosangleTarg - i2D->verts[i+i+1] * sinangleTarg;
			i2D->rotated2DTarg[i][1] = i2D->verts[i+i] * sinangleTarg + i2D->verts[i+i+1] * cosangleTarg;
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void angleFromTime4D(float xSeconds, float *oscAng, float *oscAngDual)
{
	float tempTime, t1, theta1, ct, tct;
	float tempOscAng,tempOscAngDual;
	struct Bivector4D tempBiv;
	struct Rotor4D tempRot, newBasePosnRot;
	int turningPoint;
	char textout[350];
	char *sptr=textout;

	turningPoint = 0;
	info4D.reducedTime = fmodf(xSeconds, oscillation_period4D);
	tempTime = info4D.reducedTime - oscillation_period4D*0.5;
	if (tempTime < 0 ) { // In the first half of the cycle
		t1 = info4D.reducedTime/(oscillation_period4D*0.5); // t1 is in the range 0 to 1
		// In the first half, the oscillation is in the positive direction (OSCILLATION_ANGLE4D_1, which is positive)
		tempOscAng = OSCILLATION_ANGLE4D_1; // ranges 0 to the maximum oscillation angle
		tempOscAngDual = OSCILLATION_ANGLE4D_1_DUAL; // ranges 0 to the maximum oscillation angle
		if (info4D.reducedTime < info4D.previousReducedTime) {
			// The above works because the previous reduced time was calculated at the end of the cycle (near 8 seconds)
			// whereas just after the turning point the reduced time will be near to zero
			// Need to calculate a new axis for subsequent rotations.
			turningPoint = 1;
		}
	} else {
		t1 = tempTime/(oscillation_period4D*0.5); // t1 is in the range 0 to 1
		// In the second half, the oscillation is in the negative direction (OSCILLATION_ANGLE3D_2, which is negative)
		tempOscAng = OSCILLATION_ANGLE4D_2; // ranges 0 to the maximum oscillation angle
		tempOscAngDual = OSCILLATION_ANGLE4D_2_DUAL; // ranges 0 to the maximum oscillation angle
		if (info4D.previousReducedTime < oscillation_period4D*0.5) {
			// This turning point occurs halfway through the cycle (at around 4 seconds).
			// Need to calculate a new axis for subsequent rotations.
			turningPoint = 2;
		}
	}

	theta1 = t1 * M_PI; // Theta1 is in the range 0 to Pi

	ct = cos(theta1); // ranges 1 to -1
	tct = (1 - ct)*0.5; // ranges 0 to 1
	*oscAng = tct*tempOscAng;
	*oscAngDual = tct*tempOscAngDual;
	if (turningPoint > 0) {
		// Need to calculate a new pair of bivectors for the rotations in this phase

		// First we need to get the new base position
		// create temprot that rotates from the existing base position to the new base position (at the current time,
		// the figure will be very close to the new base position).

		calcCompRotorFromBivAndTwoAngles (&info4D.demoRotationPlanes,
			turningPoint==2?OSCILLATION_ANGLE4D_1:OSCILLATION_ANGLE4D_2,
			turningPoint==2?OSCILLATION_ANGLE4D_1_DUAL:OSCILLATION_ANGLE4D_2_DUAL,&tempRot);

		gpOfTwoComplexRotors( &tempRot, &info4D.basePosnRot, &newBasePosnRot);

		calcNewBivectors( &info4D.demoRotationPlanes, &tempBiv);
		info4D.demoRotationPlanes = tempBiv; // We now have the new rotation planes

		//sptr+= sprintf(sptr,
		//	"redtime=%7.3f temptime=%7.3f t1=%7.3f theta1=%7.3f tct=%7.3f trn=%d osc=%7.3f od=%7.3f \n   temprot= %7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f\n   baserot= %7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f\nnewbaserot= %7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f%7.3f\n",
		//	info4D.reducedTime,tempTime,t1,theta1,tct,turningPoint, *oscAng, *oscAngDual,
		//	           tempRot.scalar,           tempRot.b.e12,           tempRot.b.e13,           tempRot.b.e14,           tempRot.b.e23,           tempRot.b.e24,           tempRot.b.e34,           tempRot.e1234,
		//	info4D.basePosnRot.scalar,info4D.basePosnRot.b.e12,info4D.basePosnRot.b.e13,info4D.basePosnRot.b.e14,info4D.basePosnRot.b.e23,info4D.basePosnRot.b.e24,info4D.basePosnRot.b.e34,info4D.basePosnRot.e1234,
		//	    newBasePosnRot.scalar,    newBasePosnRot.b.e12,    newBasePosnRot.b.e13,    newBasePosnRot.b.e14,    newBasePosnRot.b.e23,    newBasePosnRot.b.e24,    newBasePosnRot.b.e34,    newBasePosnRot.e1234);
		//fputs(textout,pFile);
		info4D.basePosnRot = newBasePosnRot; // The previous position becomes the new base position.
	} else {
		//sptr+= sprintf(sptr,
		//	"trn=%d osc=%7.3f od=%7.3f\n",
		//	turningPoint, *oscAng, *oscAngDual);
		//fputs(textout,pFile);
	}

	info4D.previousReducedTime = info4D.reducedTime;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
float angleFromTime3D(float xSeconds)
{
	float tempTime, t1, theta1, oscAngle, ct, tct;
	float tempAxis[3], unusedRej[3];
	float newAxis[3];
	float tempBaseQuat[4];
	float randomRotationAngle;
	float lentemp, lennew;
	int turningPoint = 0;

	info3D.reducedTime = fmodf(xSeconds, oscillation_period3D);
	tempTime = info3D.reducedTime - oscillation_period3D*0.5;
	if (tempTime < 0 ) { // In the first half of the cycle
		t1 = info3D.reducedTime/(oscillation_period3D*0.5); // t1 is in the range 0 to 1
		// In the first half, the oscillation is in the positive direction (OSCILLATION_ANGLE3D_1, which is positive)
		oscAngle = OSCILLATION_ANGLE3D_1; // ranges 0 to the maximum oscillation angle
		if (info3D.reducedTime < info3D.previousReducedTime) {
			// The above works because the previous reduced time was calculated at the end of the cycle (near 8 seconds)
			// whereas just after the turning point the reduced time will be near to zero
			// Need to calculate a new axis for subsequent rotations.
			turningPoint = 1;
		}
	} else {
		t1 = tempTime/(oscillation_period3D*0.5); // t1 is in the range 0 to 1
		// In the second half, the oscillation is in the negative direction (OSCILLATION_ANGLE3D_2, which is negative)
		oscAngle = OSCILLATION_ANGLE3D_2; // ranges 0 to the maximum oscillation angle 2 (which is a negative angle)
		if (info3D.previousReducedTime < oscillation_period3D*0.5) {
			// At this point we know we are in the second half of the cycle, so the reduced time is between, say, 4 and 8.
			// and is increasing,
			// but if the previous reduced time is <4, we know that we have just crossed the boundary.
			// Need to calculate a new axis for subsequent rotations.
			turningPoint = 2;
		}
	}

	theta1 = t1 * M_PI; // Theta1 is in the range 0 to Pi

	ct = cos(theta1); // ranges 1 to -1
	tct = (1 - ct)*0.5; // ranges 0 to 1
	oscAngle *= tct; // ranges 0 to oscangle1 or 0 to - oscangle2
	if (turningPoint > 0) {
		// Need to calculate a new axis for subsequent rotations


		//// Rotate the vector defining tempAxis, by an angle (randomRotationAngle), around an axis (baseAxisOfDemo)
		//// To create a new axis (newAxis) around which the demo figure will oscillate.
		vangle3D(info3D.baseAxisOfDemo,  AXISSHIFTIN3DDEMO, unusedRej, tempAxis, 0);
		vcopy3(tempAxis,newAxis);

		myNormaliseVector3D(newAxis); // This is needed

		// NewAxis is now the axis around which subsequent oscillations take place. Now we need to create a quaternion that
		// rotates the figure from its initial position (i.e. as given in the vertex matrices (e.g. vertexTetrahedron)) to the 
		// basis position for the oscillation. There is already a quaternion that does this for the current oscillation
		// (i.e. the oscillation that has just ended), it is
		// info3D.basePositionDemoQuat, so we update that quaternion.

		//Create a quaternion that rotates around the current base axis to the end of the current oscillation

		createQuatFromBasePosnQuatAxisAndAngle(info3D.baseAxisOfDemo, turningPoint==2?OSCILLATION_ANGLE3D_1:OSCILLATION_ANGLE3D_2, tempBaseQuat);

		my_normalize_quat(tempBaseQuat); // Normalise the quaternion to stop it drifting out of control.
		info3D.basePositionDemoQuat[0] = tempBaseQuat[0]; info3D.basePositionDemoQuat[1] = tempBaseQuat[1];
		info3D.basePositionDemoQuat[2] = tempBaseQuat[2]; info3D.basePositionDemoQuat[3] = tempBaseQuat[3];
		info3D.baseAxisOfDemo[0] = newAxis[0]; info3D.baseAxisOfDemo[1] = newAxis[1];
		info3D.baseAxisOfDemo[2] = newAxis[2];
		//sprintf(textout,
		//	"AFromTim t=%9.4f TurnPt %d randAng%7.2f lentemp %7.4f lennew %7.4f cost %8.5f cosn %8.5f\n",
		//	xSeconds,turningPoint, randomRotationAngle*M_RADIANS_TO_DEGREES,
		//	lentemp,lennew,costempangle, cosrotangle);
		//fputs(textout,pFile);
	}

	info3D.previousReducedTime = info3D.reducedTime;
	return oscAngle;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
double angleFromTime2D(double xSeconds)
{
	// Controls the oscillations of the 2D figures in the demo part.

	double k1,k2,k3;

	k1 = M_TWO_PI/OSCILLATION_PERIOD_SECONDS;
	k2 = k1*CONSTANT_DEGREES_PER_OSCILLATION/360.0;
	k3 = BASE_DEGREES_PER_OSCILLATION*M_DEGREES_TO_RADIANS*0.5;

	return (correctAngle( k3*cos(k1*xSeconds) + k2*xSeconds));
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void draw2DConnector(struct Intersection2DInfo *i2D, int toCentre){
	// Draws a line from the mouse pointer to the circle surrounding the left hand figure.
	// ToCentre is 1 when the left mouse is currently down.

	float mousePoint[2];
	float circlePoint[2];
	//float factor;

	// Get the current position of the mouse in 3D
	mousePoint[0] = i2D->mouse3DxInitialPosition;
	mousePoint[1] = i2D->mouse3DyInitialPosition;

	circlePoint[0] = 0;
	circlePoint[1] = 0;
	if (toCentre) {
		glLineWidth(2);
		glBegin(GL_LINES);
		glColor3f(0.3,0.4,1.0);
	} else {
		glLineWidth(1);
		glBegin(GL_LINES);
		glColor3f(0.3,0.3,0.9);
	}
	glVertex2fv(mousePoint);
	glVertex2fv(circlePoint);
	glEnd();

}

void drawAccuracy2DNew(float acc1, float acc2, LeftRight lr) {
	//////////////////////////////////// new version
	// Accuracy ranges from 0.0 (total accuracy) to 1.0 (total inaccuracy)
	float inaccuratePoint[2];
	float accuratePoint[2];

	glLineWidth(POLYGONLINEWIDTH);
	glBegin(GL_LINES);

	inaccuratePoint[1] = ACCURACYBARTOP; // y value
	accuratePoint[1] = ACCURACYBARTOP; // y value

	inaccuratePoint[0] = MAXACCURACYXVALUE - acc1*2*MAXACCURACYXVALUE; // x value
	accuratePoint[0] = MAXACCURACYXVALUE; // x value
	if (lr == rightOnly) { //Mirror image of left
		inaccuratePoint[0] = -inaccuratePoint[0]; // x value
		accuratePoint[0] = -accuratePoint[0]; // x value
	}

	if (acc1 > ACCURACYGREENPROPORTION){
		// If the user is still inaccurate, colour is red
		glColor3f(1.0,0.1,0.1);// Red
	} else {
		glColor3f(0.1,1.0,0.1);//Green
	}

	glVertex2fv(inaccuratePoint);
	glVertex2fv(accuratePoint);

	inaccuratePoint[1] = ACCURACYBARMIDDLE; // y value
	accuratePoint[1] = ACCURACYBARMIDDLE; // y value 

	glVertex2fv(inaccuratePoint);
	glVertex2fv(accuratePoint);


	inaccuratePoint[1] = ACCURACYBARBOTTOM; // y value
	accuratePoint[1] = ACCURACYBARBOTTOM; // y value 

	glVertex2fv(inaccuratePoint);
	glVertex2fv(accuratePoint);

	glEnd();
	//////////////////////////////////// new version
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawSurroundCircle(int brightness, int solid, float distance, float angle, float *axis) {
	int i;
	// Draw the circle surrounding th figure, in whichever is the current viewport.
	if (brightness) {
		glColor3f(0.4,0.4,1.0);
		glLineWidth(1.1);
		//fl_cursor(FL_CURSOR_DEFAULT);
	} else {
		glColor3f(0.2,0.2,0.8);
		glLineWidth(1.0);
		//fl_cursor(FL_CURSOR_MOVE);
	}

	if (angle == 0.0 && distance == 0.0) {
		glBegin(GL_LINES);
		for (i=0; i < NUMBEROFLINESINCIRCLE; ++i) {
			glVertex3fv(circlePoints[i]);
			if (i == NUMBEROFLINESINCIRCLE - 1) {
				glVertex3fv(circlePoints[0]); //Last line
			} else {
				glVertex3fv(circlePoints[i+1]); //Other lines
			}
		}
		glEnd();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawSurroundCircle3(float *colourTop, float *colourBottom, float lineWidth, int solid, float distance, float declension1) {
	// Colour gives the colour of the circle
	// Solid = 0 if the circle is to be open, and =1 if it is to be a solid circle
	// Distance is the distance of the circle centre from the origin.
	// 
	// The y axis is declension 0, The z or x axis is declension Pi/2.
	//
	float rotAxis[3];
	float quat1[4];
	int i;
	float newradius;
	float angle;
	static float xcirclePoints[NUMBEROFLINESINCIRCLE+1][3];
	static float xcirclePointsRotated[NUMBEROFLINESINCIRCLE+1][3];

	// quaternion to rotate about the x axis by an angle M_PI_2 - DECLENSION
	rotAxis[0] = 1.0; 
	rotAxis[1] = 0.0; 
	rotAxis[2] = 0.0; 
	createQuatFor3DRotation(rotAxis, declension1 - M_PI_2, quat1); // quat1 to rotate about the x axis.

	// This is the radius of the circle which changes with the distance from the origin
	newradius = sqrt(INTERSECTION2DLINERADIUS*INTERSECTION2DLINERADIUS - distance*distance);

	for (i = 0; i < NUMBEROFLINESINQUADRANT+1; ++i) {
		angle = i*M_PI_2/NUMBEROFLINESINQUADRANT;
		// First quadrant
		xcirclePoints[i][0] = newradius * cos(angle);
		xcirclePoints[i][1] = newradius * sin(angle);
		xcirclePoints[i][2] = distance;

		// Second quadrant
		xcirclePoints[2*NUMBEROFLINESINQUADRANT - i][0] = -xcirclePoints[i][0];
		xcirclePoints[2*NUMBEROFLINESINQUADRANT - i][1] = xcirclePoints[i][1];
		xcirclePoints[2*NUMBEROFLINESINQUADRANT - i][2] = distance;

		// Third quadrant
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][0] = -xcirclePoints[i][0];
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][1] = -xcirclePoints[i][1];
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][2] = distance;

		// Fourth quadrant
		xcirclePoints[4*NUMBEROFLINESINQUADRANT - i][0] = xcirclePoints[i][0];
		xcirclePoints[4*NUMBEROFLINESINQUADRANT - i][1] = -xcirclePoints[i][1];
		xcirclePoints[4*NUMBEROFLINESINQUADRANT - i][2] = distance;
	}
	rotManyVec(NUMBEROFLINESINCIRCLE,xcirclePoints[0],xcirclePointsRotated[0],quat1);

	glColor3fv(colourTop);
	if (solid == 0) {
		// We are only doing lines
		glLineWidth(lineWidth);
		glBegin(GL_LINES);

		for (i=0; i < NUMBEROFLINESINCIRCLE; ++i) {
			glVertex3fv(xcirclePointsRotated[i]);
			glVertex3fv(xcirclePointsRotated[i+1]);
		}
		glEnd();
	} else {
		glBegin(GL_POLYGON);
		// Do the top face of the polygon
		for (i=0; i < NUMBEROFLINESINCIRCLE; ++i) {
			glVertex3fv(xcirclePointsRotated[i]);
		}
		glEnd();
		// Do the bottom face of the polygon. Trace it in reverse order to the top half
		glColor3fv(colourBottom);
		glBegin(GL_POLYGON);
		for (i=0; i < NUMBEROFLINESINCIRCLE; ++i) {
			glVertex3fv(xcirclePointsRotated[NUMBEROFLINESINCIRCLE-1-i]);
		}
		glEnd();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawSurroundCircle4 (struct Intersection4DInfoGeneral *info4DG, int brightness, enum draw4DStereo isStereo) {
	// 
	// The y axis is declension 0, The z or x axis is declension Pi/2.
	//
	char txtout[20];
	int viewpor[4];
	char *sptr;
	int i,j;
	static float xcirclePoints[NUMBEROFLINESINCIRCLE][3];
	float stereoCorrection;
	//sptr = txtout;

	switch(isStereo) {
	case noStereo:
		stereoCorrection = 0.0;
		break;
	case leftEyeRightScreenStereo:
		stereoCorrection = info4DG->rightEyeX3D2D;
		break;
	case rightEyeLeftScreenStereo:
		stereoCorrection = -info4DG->rightEyeX3D2D;
		break;
	default:
		break;
	}


	for (i = 0; i < NUMBEROFLINESINQUADRANT; ++i) {
		// First quadrant
		xcirclePoints[i][0] = circlePointsGeneric[i][0] * info4DG->surroundCircleRadius;
		xcirclePoints[i][1] = circlePointsGeneric[i][1] * info4DG->surroundCircleRadius;
		xcirclePoints[i][2] = info4DG->surroundCircleZ;

		// Second quadrant
		xcirclePoints[NUMBEROFLINESINQUADRANT + i][0] = -xcirclePoints[i][1] + stereoCorrection;
		xcirclePoints[NUMBEROFLINESINQUADRANT + i][1] = xcirclePoints[i][0];
		xcirclePoints[NUMBEROFLINESINQUADRANT + i][2] = info4DG->surroundCircleZ;

		// Third quadrant
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][0] = -xcirclePoints[i][0] + stereoCorrection;
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][1] = -xcirclePoints[i][1];
		xcirclePoints[2*NUMBEROFLINESINQUADRANT + i][2] = info4DG->surroundCircleZ;

		// Fourth quadrant
		xcirclePoints[3*NUMBEROFLINESINQUADRANT + i][0] = xcirclePoints[i][1] + stereoCorrection;
		xcirclePoints[3*NUMBEROFLINESINQUADRANT + i][1] = -xcirclePoints[i][0];
		xcirclePoints[3*NUMBEROFLINESINQUADRANT + i][2] = info4DG->surroundCircleZ;

		xcirclePoints[i][0] += stereoCorrection;
	}


	sptr = txtout;
	glGetIntegerv(GL_VIEWPORT, viewpor);
	//sptr += sprintf(sptr,"VP %4d %4d %4d %4d\n",viewpor[0],viewpor[1],viewpor[2],viewpor[3]);
	//for (i = 0; i < NUMBEROFLINESINQUADRANT; ++i) {
		// First quadrant only
	//	sptr += sprintf(sptr,"xCP[%2d] %6.3f %6.3f %6.3f\n",i,xcirclePoints[i][0],xcirclePoints[i][1],xcirclePoints[i][2]);
	//}

	glLineWidth(2.0);

	j = -1;
	i = 0;
	do {
		j = -j;

		if ( brightness == 0) {
			if (j > 0) glColor3f(1.0,1.0,0.0); else glColor3f(0.0,0.5,1.0);
		} else {
			if (j > 0) glColor3f(1.0,1.0,0.7); else glColor3f(0.0,0.7,1.0);
		}
		glBegin(GL_LINES);
		glVertex3fv(xcirclePoints[i]);
		glVertex3fv(xcirclePoints[i+1]);
		//sptr += sprintf(sptr,"%2d %6.3f %6.3f %6.3f , %6.3f %6.3f %6.3f\n",i,xcirclePoints[i][0],
		//	xcirclePoints[i][1],xcirclePoints[i][2],xcirclePoints[i+1][0],xcirclePoints[i+1][1],xcirclePoints[i+1][2]);

		glVertex3fv(xcirclePoints[i+1]);
		//sptr += sprintf(sptr,"%2d %6.3f %6.3f %6.3f , ",i+1,xcirclePoints[i+1][0],xcirclePoints[i+1][1],xcirclePoints[i+1][2]);
		if ( i < NUMBEROFLINESINCIRCLE-2) {
			glVertex3fv(xcirclePoints[i+2]);
			//sptr += sprintf(sptr,"%6.3f %6.3f %6.3f\n",xcirclePoints[i+2][0],xcirclePoints[i+2][1],xcirclePoints[i+2][2]);
		} else {
			glVertex3fv(xcirclePoints[0]);
			//sptr += sprintf(sptr,"%6.3f %6.3f %6.3f\n",xcirclePoints[0][0],xcirclePoints[0][1],xcirclePoints[0][2]);
		}
		glEnd();
		i += 2;
	} while (i < NUMBEROFLINESINCIRCLE);


	glBegin(GL_LINES);
	glVertex3fv(xcirclePoints[0]);
	glVertex3fv(xcirclePoints[2*NUMBEROFLINESINQUADRANT]);
	glVertex3fv(xcirclePoints[NUMBEROFLINESINQUADRANT]);
	glVertex3fv(xcirclePoints[3*NUMBEROFLINESINQUADRANT]);
	glEnd();
	
	//sptr += sprintf(sptr,"%2d %6.3f %6.3f %6.3f , %6.3f %6.3f %6.3f\n",i,xcirclePoints[i][0],
		//	xcirclePoints[i][1],xcirclePoints[i][2],xcirclePoints[i+1][0],xcirclePoints[i+1][1],xcirclePoints[i+1][2]);

	if (sptr != txtout) {
		if (pFile) fputs(txtout,pFile);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawAccuracy4D ( enum draw4DStereo isStereo, float accuracy) {
	// Accuracy is in the range 0 (completely accurate) to 1 (completely inaccurate).
	int i,j;
	float stereoCorrection;
	float value;

	value = info4D.surroundCircleRadius * accuracy;
	switch(isStereo) {
	case noStereo:
		stereoCorrection = 0.0;
		break;
	case leftEyeRightScreenStereo:
		stereoCorrection = info4D.rightEyeX3D2D;
		break;
	case rightEyeLeftScreenStereo:
		stereoCorrection = -info4D.rightEyeX3D2D;
		break;
	default:
		break;
	}

	if (accuracy < 0.05) glColor3f(0.0f, 1.0f, 0.0f); else glColor3f(1.0f, 0.0f, 0.0f); 
	glBegin(GL_QUADS);

	glVertex3f(-accuracy + stereoCorrection, -10.0, info4D.surroundCircleZ);
	glVertex3f(+accuracy + stereoCorrection, -10.0, info4D.surroundCircleZ);
	glVertex3f(+accuracy + stereoCorrection, +10.0, info4D.surroundCircleZ);
	glVertex3f(-accuracy + stereoCorrection, +10.0, info4D.surroundCircleZ);
	glEnd();

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawMovendumPolygon(float lineWidth, struct ColValue * cols) {
	int i;
	glLineWidth(lineWidth);
	glBegin(GL_LINES);
	for (i = 0; i < intersection2DInfo.sides; ++i) {
		glColor3f(cols[i].rCol, cols[i].gCol, cols[i].bCol);
		glVertex2fv(intersection2DInfo.rotated2DMov[i]); // Need to rotate before doing this
		if (i == intersection2DInfo.sides - 1) 
			glVertex2fv(intersection2DInfo.rotated2DMov[0]);
		else glVertex2fv(intersection2DInfo.rotated2DMov[i+1]);  //Other lines
	}
	glEnd();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawTargetPolygon(float lineWidth, struct ColValue * cols) {
	int i;
	glLineWidth(lineWidth);
	glBegin(GL_LINES);
	for (i = 0; i < intersection2DInfo.sides; ++i) {
		glColor3f(cols[i].rCol, cols[i].gCol, cols[i].bCol);
		glVertex2fv(intersection2DInfo.rotated2DTarg[i]); // Need to rotate before doing this
		if (i == intersection2DInfo.sides - 1) 
			glVertex2fv(intersection2DInfo.rotated2DTarg[0]);
		else glVertex2fv(intersection2DInfo.rotated2DTarg[i+1]);  //Other lines
	}
	glEnd();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawIntersectionLineAndPointsMov2D() {
	int i,j;
	struct ColValue *colPoint; 

	colPoint = figColp2D[intersection2DInfo.sides - MIN_2D_SIDES];

	glLineWidth(0.1);
	glBegin(GL_LINES);
	glColor3f(1.0,1.0,1.0); // intersection line is all bright on the Mov
	// Draw the intersection line for the movendum
	glVertex2fv(intersection2DInfo.lineEndPointsMov[0]);
	glVertex2fv(intersection2DInfo.lineEndPointsMov[1]);
	glEnd();

	if (intersection2DInfo.countIntersectsions2DMov > 0) {
		// Draw the intersection points.
		glPointSize(GLPOINTSIZE);
		glBegin(GL_POINTS);
		for (i = 0; i < intersection2DInfo.countIntersectsions2DMov; ++i){
			j = intersection2DInfo.intersectionColorIndexMov[i];
			glColor3f(   colPoint[j].rCol,colPoint[j].gCol,colPoint[j].bCol);
			glVertex2fv(intersection2DInfo.intersection2DMov[i]);
		}
		glEnd();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawIntersectionLineAndPointsTarg2D() {

	int i,j;
	struct ColValue *colPoint; 

	float endvertsl[2] = {-INTERSECTION2DLINERADIUS,0.0};
	float endvertsr[2] = {+INTERSECTION2DLINERADIUS,0.0};
	colPoint = figColp2D[intersection2DInfo.sides - MIN_2D_SIDES];

	// Draw the line of the target (It is different from the line of the movendum.)
	glLineWidth(0.1);
	glBegin(GL_LINES);
	glColor3f(0.3,0.3,0.1); // Draw a feint line (outer line)
	glVertex2fv(endvertsl);
	endvertsl[0] = -intersection2DInfo.lineHalfLength;
	glVertex2fv(endvertsl);

	glVertex2fv(endvertsr);
	endvertsr[0] = intersection2DInfo.lineHalfLength;
	glVertex2fv(endvertsr);

	// Draw the intersection line of the target
	glColor3f(1.0,1.0,1.0); // Draw a brighter line (inner line)
	glVertex2fv(endvertsl);
	glVertex2fv(endvertsr);
	glEnd();
	// Draw the intersection points of the target
	if (intersection2DInfo.countIntersectsions2DTarg > 0) {
		glPointSize(GLPOINTSIZE);
		glBegin(GL_POINTS);
		endvertsl[1] = 0.0; // Re-use endverts, set the y coord zero
		for (i = 0; i < intersection2DInfo.countIntersectsions2DTarg; ++i){
			j = intersection2DInfo.intersectionColorIndexTarg[i];
			glColor3f(colPoint[j].rCol,colPoint[j].gCol,colPoint[j].bCol); // Use the same colours as the movendum
			endvertsl[0] = intersection2DInfo.muTarg[i];
			glVertex2fv(endvertsl);
		}
		glEnd();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawCountdown2D( MovTarg movTarg) {
	int i;

	//Draws the two figures during the countdown phase.

	//glDisable( GL_DEPTH_TEST ) ; // also disable the depth test so renders on top
	glLineWidth(POLYGONLINEWIDTH);
	glBegin(GL_LINES);// Left lines
	if (movTarg == movOnly) {
		for (i = 0; i < intersection2DInfo.sides; ++i) {
			glColor3f(randomColorsMov[i].rCol,randomColorsMov[i].gCol,randomColorsMov[i].bCol);
			glVertex2fv(intersection2DInfo.rotated2DMov[i]); // Need to rotate before doing this
			if (i == intersection2DInfo.sides - 1) glVertex2fv(intersection2DInfo.rotated2DMov[0]); else glVertex2fv(intersection2DInfo.rotated2DMov[i+1]);  //Other lines
		}
	} else {
		//glEnd();
		//glBegin(GL_LINES);// Right Lines
		for (i = 0; i < intersection2DInfo.sides; ++i) {
			glColor3f(randomColorsTarg[i].rCol,randomColorsTarg[i].gCol,randomColorsTarg[i].bCol);
			glVertex2fv(intersection2DInfo.rotated2DTarg[i]); // Need to rotate before doing this
			if (i == intersection2DInfo.sides - 1) glVertex2fv(intersection2DInfo.rotated2DTarg[0]); else glVertex2fv(intersection2DInfo.rotated2DTarg[i+1]);  //Other lines
		}
	}
	glEnd();
	//glEnable(GL_DEPTH_TEST);
	return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawEdges3D(struct Intersection3DInfo *i3D) {
	int iedge,ivert;
	// Draw the edges of the 3D figure. It helps to accentuate the different faces.
	glColor3ub(127,127,127);
	glLineWidth(3.0);
	for (iedge = 0; iedge < info3D.fig->numEdges; ++iedge) {
		glBegin(GL_LINES);
		ivert = info3D.fig->edge[iedge*2];
		glVertex3fv(&i3D->rotatedVerts[ivert][0]);
		ivert = info3D.fig->edge[iedge*2+1];
		glVertex3fv(&i3D->rotatedVerts[ivert][0]);
		glEnd();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawFaces3D(struct Intersection3DInfo *i3D, int drawFaceNumbers, int drawVertsNumbers, int useRandomColours){
	int iface, ivert, vertnum;
	int numVertsPerFace;
	struct ColValue *colsFig;
	float myLocalVerts[3];
	char numString[5];
	char txtout[50];
	char *sptr;
	int colorSum;
	float temp;
	int diddraw = 0;

	sptr = txtout;
	// Draw the faces

	numVertsPerFace = info3D.fig->numEdgesPerFace;
	colsFig = figColp[currFig3D];
	for (iface = 0; iface < info3D.fig->numFaces; ++iface)
	{
		diddraw = 1;
		if (useRandomColours) {
			glColor3f(i3D->randomColors[iface].rCol,i3D->randomColors[iface].gCol,i3D->randomColors[iface].bCol);
			colorSum = 255*(i3D->randomColors[iface].rCol + i3D->randomColors[iface].gCol + i3D->randomColors[iface].bCol);
		} else {
			glColor3ub((unsigned char)colsFig[iface].rCol,(unsigned char)colsFig[iface].gCol,(unsigned char)colsFig[iface].bCol);
			colorSum = (unsigned char)colsFig[iface].rCol+(unsigned char)colsFig[iface].gCol+(unsigned char)colsFig[iface].bCol;
		}
		glBegin(GL_POLYGON);

		glNormal3fv(&i3D->rotatedFaceNormals[iface][0]);
		for (ivert=0; ivert < numVertsPerFace; ++ivert) {
			vertnum = info3D.fig->faceToVert[iface*numVertsPerFace + ivert]; // The number of the vertex for this face
			glVertex3fv(&i3D->rotatedVerts[vertnum][0]);
		}
		glEnd();

		if (drawFaceNumbers) {
			// Now do face numbers
			//glDisable(GL_DEPTH_TEST);
			temp = info3D.fig->faceCentreRadius*4.25/(3.0667 + info3D.fig->faceCentreRadius);
			myLocalVerts[0] = i3D->rotatedFaceNormals[iface][0] * temp;
			myLocalVerts[1] = i3D->rotatedFaceNormals[iface][1] * temp;
			myLocalVerts[2] = i3D->rotatedFaceNormals[iface][2] * temp + 0.3;  // Bring the numbers towards the viewer ( +0.3)
			
			gl_font(1,24);
				glColor3ub(255,255,255);
			glRasterPos3fv(myLocalVerts);
			sprintf(numString,"%d",iface);
			gl_draw(numString,strlen(numString));
			//glEnable(GL_DEPTH_TEST);
		}
	}

	if (drawVertsNumbers) { // Draw vertex numbers
		glDisable(GL_LIGHTING);
		glColor3ub(127,127,127);
		gl_font(2,28);
		temp = 1.1;
		for (ivert = 0; ivert < info3D.fig->numVerts; ++ivert) {
			myLocalVerts[0] = i3D->rotatedVerts[ivert][0] * temp - 0.05;
			myLocalVerts[1] = i3D->rotatedVerts[ivert][1] * temp;
			myLocalVerts[2] = i3D->rotatedVerts[ivert][2] * temp;

			glRasterPos3fv(myLocalVerts);
			sprintf(numString,"%d",ivert);
			gl_draw(numString,strlen(numString));
		}
	}
}

void showAngle(float angle, Fl_Output ** op) {
	char txt[20];
	// Show angle
	sprintf(txt, "%9.2f", angle* M_RADIANS_TO_DEGREES);
	op[0]->value(txt);
}

void showBiv(struct Bivector4D *bv,Fl_Output ** op) {
	char txt[20]; // display a bivector
	if (bv->e12 != 0.0) sprintf(txt, "%9.6f", bv->e12); else txt[0] = '\0';
	op[0]->value(txt);

	if (bv->e13 != 0.0) sprintf(txt, "%9.6f", bv->e13); else txt[0] = '\0';
	op[1]->value(txt);

	if (bv->e14 != 0.0) sprintf(txt, "%9.6f", bv->e14); else txt[0] = '\0';
	op[2]->value(txt);

	if (bv->e23 != 0.0) sprintf(txt, "%9.6f", bv->e23); else txt[0] = '\0';
	op[3]->value(txt);

	if (bv->e24 != 0.0) sprintf(txt, "%9.6f", bv->e24); else txt[0] = '\0';
	op[4]->value(txt);

	if (bv->e34 != 0.0) sprintf(txt, "%9.6f", bv->e34); else txt[0] = '\0';
	op[5]->value(txt);
}

void showVec3(float *v, Fl_Output ** op) {
	char txt[20]; // display a 3 component vector
	if (v[0] != 0.0) sprintf(txt, "%9.6f", v[0]); else txt[0] = '\0';
	op[0]->value(txt);

	if (v[1] != 0.0) sprintf(txt, "%9.6f", v[1]); else txt[0] = '\0';
	op[1]->value(txt);

	if (v[2] != 0.0) sprintf(txt, "%9.6f", v[2]); else txt[0] = '\0';
	op[2]->value(txt);
}

void showRotor(struct Rotor4D * r, Fl_Output ** op) {
	char txt[20];          

	if (r->scalar != 0.0) sprintf(txt, "%9.6f", r->scalar); else txt[0] = '\0';
	op[0]->value(txt);

	if (r->b.e12 != 0.0) sprintf(txt, "%9.6f", r->b.e12); else txt[0] = '\0';
	op[1]->value(txt);

	if (r->b.e13 != 0.0) sprintf(txt, "%9.6f", r->b.e13); else txt[0] = '\0';
	op[2]->value(txt);

	if (r->b.e14 != 0.0) sprintf(txt, "%9.6f", r->b.e14); else txt[0] = '\0';
	op[3]->value(txt);

	if (r->b.e23 != 0.0) sprintf(txt, "%9.6f", r->b.e23); else txt[0] = '\0';
	op[4]->value(txt);

	if (r->b.e24 != 0.0) sprintf(txt, "%9.6f", r->b.e24); else txt[0] = '\0';
	op[5]->value(txt);

	if (r->b.e34 != 0.0) sprintf(txt, "%9.6f", r->b.e34); else txt[0] = '\0';
	op[6]->value(txt);

	if (r->e1234 != 0.0) sprintf(txt, "%9.6f", r->e1234); else txt[0] = '\0';
	op[7]->value(txt);

}


////////////////////////////////////////////////////////////////////////////////////
void drawIntersectionPlane3D(struct Intersection3DInfo *i3D,int flattened, int numbers, unsigned char * myColours){
	int iedge, v1, v2;
	int faceForColour;
	int edgesAnticlockwise;
	struct ColValue *colsFig;
	float localVerts[20][3];
	float edgeVector[20][3];
	float edgeCentre[3];
	float normalVec[3];
	float crossV[3];
	float posnOfDigit[3];
	float temp;
	char faceNumString[5];


	// Draw the intersection polygon (where the edges all have different colours
	if (i3D->numberIntersectionsToBePlotted <= 2) return;

	colsFig = figColp[currFig3D];
	if (flattened) glLineWidth(15); else glLineWidth(5.0);


	if (!flattened ) {
		for (iedge = 0; iedge < i3D->numberIntersectionsToBePlotted; ++iedge)
		{
			v1 = iedge; v2 = iedge+1;
			faceForColour = i3D->iPoint[v2].faceIndexForColour;
			if (!myColours) {
				glColor3ub(colsFig[faceForColour].rCol,colsFig[faceForColour].gCol,colsFig[faceForColour].bCol);
			} else {
				glColor3ubv(myColours);
			}
			glBegin(GL_LINES);
			glVertex3fv(i3D->iPoint[v1].p);
			glVertex3fv(i3D->iPoint[v2].p);
			glEnd();
		}
	} else{
		//the intersection plane is drawn flat to the viewer (declension of PI/2)

		for (iedge = 0; iedge < i3D->numberIntersectionsToBePlotted; ++iedge)
		{
			localVerts[iedge][0] = i3D->iPoint[iedge].p[0] - info3D.userPlaneNormal[0]*info3D.userPlaneDistance;
			localVerts[iedge][1] = i3D->iPoint[iedge].p[1] - info3D.userPlaneNormal[1]*info3D.userPlaneDistance;
			localVerts[iedge][2] = i3D->iPoint[iedge].p[2] - info3D.userPlaneNormal[2]*info3D.userPlaneDistance;

			if (fabs(info3D.userPlaneNormal[2]) <= 0.001) { // Magic number seems to work
				localVerts[iedge][1] = -localVerts[iedge][2];
			} else {
				localVerts[iedge][1] /= info3D.userPlaneNormal[2];
			}
			localVerts[iedge][2] = 0;
			// Store the edge vertices
			if (iedge > 0) {
				vsub3(localVerts[iedge], localVerts[iedge-1],edgeVector[iedge-1]);
			}
		}
		vsub3(localVerts[0], localVerts[iedge-1], edgeVector[iedge-1]); // This is for the last edge vector that links back to zero
		vcopy3(localVerts[0],localVerts[iedge]);

		// Localverts now contains the vertices of the flattened intersection point. They trace out a convex figure
		// Edge vector contains the the edge vectors (surprise0
		vcross(edgeVector[0],edgeVector[1],crossV);
		if (crossV[2] > 0) {
			edgesAnticlockwise = 1;// The edges go in an anticlockwise order
		} else {
			edgesAnticlockwise = -1;// The edges go in a clockwise order
		}

		for (iedge = 0; iedge < i3D->numberIntersectionsToBePlotted; ++iedge)
		{
			faceForColour = i3D->iPoint[iedge+1].faceIndexForColour;

			if (!myColours) {
				glColor3ub(colsFig[faceForColour].rCol,colsFig[faceForColour].gCol,colsFig[faceForColour].bCol);
			} else {
				glColor3ubv(myColours);
			}
			glBegin(GL_LINES);
			glVertex3fv(localVerts[iedge]);
			glVertex3fv(localVerts[iedge+1]);
			glEnd();

			if (numbers) {
				// Get the normal to to the edge that is to be numbered
				normalVec[0] = edgeVector[iedge][1];
				normalVec[1] = -edgeVector[iedge][0];
				normalVec[2] = 0.0;
				temp = sqrt(normalVec[0]*normalVec[0] + normalVec[1]*normalVec[1]);
				normalVec[0] /= temp;
				normalVec[1] /= temp; // normal vec is now of length 1
				// Get the centre of the edge.
				edgeCentre[0] = (localVerts[iedge][0] + localVerts[iedge+1][0])*0.5;
				edgeCentre[1] = (localVerts[iedge][1] + localVerts[iedge+1][1])*0.5;
				edgeCentre[2] = 0.0;

				// The position of the digit is the centre plus 0.15 of the normal vector, to put the digit beyond the edge itself
				posnOfDigit[0] = edgeCentre[0] + edgesAnticlockwise*normalVec[0]*0.15 - 0.05; // User a magic number to shift the position left a bit
				posnOfDigit[1] = edgeCentre[1] + edgesAnticlockwise*normalVec[1]*0.15;
				posnOfDigit[2] = 0.0;
				// Now to draw the integer for the edge
				gl_font(1,24);
				glColor3ub(255,255,255); // The edge integers are in white
				glRasterPos3fv(posnOfDigit);
				sprintf(faceNumString,"%d",faceForColour);
				gl_draw(faceNumString,strlen(faceNumString));
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////
void drawWireFrame4D(struct Intersection4DInfo *i4D, int specialCellNum, int eyeStereo)
{
	// Make specialCellNum < 0 to switch off the drawing of the special cell
	// The special cell is drawn in brighter colours than normal so it will stand out.
	// The opposite cell is the cell opposite the special cell.
	// If the opposite cell is requested, it is drawn on colours brighter than normal but not the 
	// same colours as the special cell.
	draw4DStereo eStereo = (draw4DStereo)eyeStereo;
	int edgeNumGlobal;
	int intersectingEdgeIndex;
	int cellToEdgeIndex;
	int oppositeCellToEdgeIndex;
	int specialCell, specialCellIndicator, edgeOffset, oppositeCellNum, edgeOffsetOpposite;
	int v1,v2; // indices of the vertices of the endpoints of the edge.
	//float local3DVert[3];
	//float local3DIntersectionPt[3];

	glLineWidth(2);

	// Set specialCell according to the requirements for drawing a special cell and its opposite
	// SpecialCell is set to 0 if there is no requirement to draw a special cell or its opposite.
	// SpecialCell is set to 1 if the special cell is to be drawn.
	// SpecialCell is set to 2 if the special cell and its opposite is to be drawn.

	specialCell = 0;
	if (specialCell4D->active()) {
		if (specialCell4D->value()) {
			if (specialCellNum >= 0 && specialCellNum < info4D.fig->numCells) {
				specialCell = 1;
			}
		}
	}
	oppositeCellNum = 0;
	if (info4D.fig->numCells > 5) { // Only do opposite cells for figures with more than 5 cells.
		if (specialCell) {
			if (oppCell4D->active()) {
				if (oppCell4D->value()) {
					specialCell = 2;
					if (info4D.fig->numCells > 5 ) { // Don't do the opposite if this is the 5-cell (there isn't an opposite in the 5-cell!)
						oppositeCellNum = info4D.fig->cellToOpposite[specialCellNum];
					}
				}
			}
		}
	}

	edgeOffset = specialCellNum * info4D.fig->numEdgesPerCell;
	edgeOffsetOpposite = oppositeCellNum * info4D.fig->numEdgesPerCell;
	cellToEdgeIndex = 0;
	oppositeCellToEdgeIndex = 0;
	intersectingEdgeIndex = 0;

	for (edgeNumGlobal = 0; edgeNumGlobal < info4D.fig->numEdges; ++edgeNumGlobal) {
		specialCellIndicator = 0; // This is calculated for each edge in the 
		v1 = info4D.fig->edge[edgeNumGlobal*2];
		v2 = info4D.fig->edge[edgeNumGlobal*2 + 1];

		if (specialCell > 0) { 
			// Set the colours of the special cell and its opposite
			if (cellToEdgeIndex < info4D.fig->numEdgesPerCell) {
				if (edgeNumGlobal == info4D.fig->cellToEdge[edgeOffset + cellToEdgeIndex]) {
					// This edge is indeed one of the edges of the special cell
					specialCellIndicator = 1; // Codes the special cell
					if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(255,0,200); else glColor3ub(0,255,200);
					glLineWidth(4);
					cellToEdgeIndex++;
				}
			}
			if (specialCell == 2) {
				// See if the edge is in the opposite cell
				if (oppositeCellToEdgeIndex < info4D.fig->numEdgesPerCell) {
					if (edgeNumGlobal == info4D.fig->cellToEdge[edgeOffsetOpposite + oppositeCellToEdgeIndex]) {
						// This edge is one of the edges on the cell opposite the special cell
						specialCellIndicator = 2; // Codes the opposite cell.
						if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(200,0,255); else glColor3ub(0,200,255);
						glLineWidth(4);
						oppositeCellToEdgeIndex++;
					}
				}
			}
		}
		if (specialCellIndicator == 0) {
			if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(150,0,0); else glColor3ub(0,150,0);
			glLineWidth(2);
		}

		if (intersectingEdgeIndex < i4D->iObj.edgeIntersectionIndex && i4D->iObj.edgeIntsct[intersectingEdgeIndex].globalEdgeIndex == edgeNumGlobal) {
			// This is an intersecting edge and needs special treatment
			// Two parts of the edge must be in different colours

			// Draw the first part (i.e. the 'ANA' part)
			glBegin(GL_LINES);
			switch (eStereo) {
			case rightEyeLeftScreenStereo:
				glVertex3fv(i4D->verts4DTo3DRightEye[v1]);
				glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3DRightEye);
				break;
			case leftEyeRightScreenStereo:
				glVertex3fv(i4D->verts4DTo3DLeftEye[v1]);
				glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3DLeftEye);
				break;
			default: // no stereo
				glVertex3fv(i4D->verts4DProjectedTo3D[v1]);
				glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3D);
				break;
			}
			glEnd();

			// Set up the colour and draw the second part of the edge (the KATA part).
			if (specialCellIndicator == 1) {
				if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(0,255,200); else glColor3ub(255,0,200);
			} else if (specialCellIndicator == 2) {
				if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(0,200,255); else glColor3ub(200,0,255);
			} else {
				if (i4D->distOfRotVertsFromUserPlane[v1] >= 0.0) glColor3ub(0,150,0); else glColor3ub(150,0,0);
			}

			glBegin(GL_LINES);
			switch (eStereo) {
			case rightEyeLeftScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3DRightEye);
				glVertex3fv(i4D->verts4DTo3DRightEye[v2]);
				break;
			case leftEyeRightScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3DLeftEye);
				glVertex3fv(i4D->verts4DTo3DLeftEye[v2]);
				break;
			default: // no stereo
			glVertex3fv(i4D->iObj.edgeIntsct[intersectingEdgeIndex].intersectionPointProjTo3D);
			glVertex3fv(i4D->verts4DProjectedTo3D[v2]);
				break;
			}
			glEnd();
			intersectingEdgeIndex++;
		} else {
			// Draw this edge in a normal fashion, it is not an intersection edge
			// i.e. the whole edge is in one colour.
			glBegin(GL_LINES);

			switch (eStereo) {
			case rightEyeLeftScreenStereo:
				glVertex3fv(i4D->verts4DTo3DRightEye[v1]);
				glVertex3fv(i4D->verts4DTo3DRightEye[v2]);
				break;
			case leftEyeRightScreenStereo:
				glVertex3fv(i4D->verts4DTo3DLeftEye[v1]);
				glVertex3fv(i4D->verts4DTo3DLeftEye[v2]);
				break;
			default: // no stereo
				glVertex3fv(i4D->verts4DProjectedTo3D[v1]);
				glVertex3fv(i4D->verts4DProjectedTo3D[v2]);
				break;
			}

			glEnd();
		}
	}
}
//
void drawFaces4D(struct Intersection4DInfo *i4D, int drawFaceNumbers, int useRandomColours, int eyeStereo)
{
	draw4DStereo eStereo = (draw4DStereo)eyeStereo;
	int cellIndx; // Used to loop round all the cells that intersect the user space. The big outer loop through the array cellInsct.
	int cellNumGlobal; // The 'global' cell index, i.e. the index (in the array cellK005, cellK008 etc) of the current cell. 
	int facIndx; // Used to loop round all the faces of the current cell that intersect with the user space
	int isctEdgeIndex; // starts at 0 for each cell and stores the indices of the intersecting edges for the cell intersection
	int isctEdges [20]; // edge index numbers (2 for each face). Max of 10 intersections per cell
	int alreadyGotCount; // Counts the intersecting faces, for the current cell, that have been processed.
	int xFaceIndex; // Index of a face in the faceIntsct array (an array of all the face intersections, as opposed to the face intersections for the current cell)
	bool gotAFace; // Temp for processing faces of a cell.

	float tmpv1[3]; // the first  edge in the polygon constructed from the intersecting edges, i.e. vertex2 - vertex1. 
	float tmpv2[3]; // the second edge in the polygon constructed from the intersecting edges, i.e. vertex3 - vertex2.
	float crosstest[3]; // The cross product of tmpv1 and tmpv2, used in calculating the correct order (clock or anticlock) for listing the vertices.
	float firstTriangleVertex[3];
	float secondTriangleVertex[3];
	float thirdTriangleVertex[3];
	float s1,s2,s3,s;
	float area,cumulativeArea;
	float dotProd; // Used in calculating the correct order (clock or anticlock)
	bool reverseit; // Used in calculating clock or anticlock
	int j,numOfVertsInIntersectionFace; // Used in drawing the each face.
	struct ColValue *colsFig; // Array of colours for each cell. the faces of the intersection take on the colours of the parent cell.
	float centrePolygonCurrent[3],centrePolygonCumulative[3];
	float polyDist, temp1, temp2;
	float numbersLoc[3];
	int myIndex; // Used when drawing the intersection polygon
	char numstring[5];
	char txtout[5000];
	char * sptr = txtout;
	int loopsCount, loopsMin, loopsMax, loopsTot; float loopsAvg; // for debug

	float minz;
	switch (info4D.fig->numCells) { // This is used for drawing face numbers in stereo. It sort of works.
		case 5: minz = -1.0; break;
		case 8: minz = -1.0; break;
		case 16: minz = 0.0; break;
		case 24: minz = 0.0; break;
		case 120: minz = 0.2; break;
		case 600: minz = 0.4; break;
		default: break;
	}

	if (i4D->iObj.cellIntersectionIndex == 0) return;

	colsFig = figColp[currFig4D];
	loopsMin = 1000000; loopsMax = -1000000; loopsTot= 0;
	//if (drawFaceNumbers) sptr += sprintf(sptr," To DrawFN ");
	// loop round each cell that is involved in an intersection
	for (cellIndx = 0; (cellIndx < i4D->iObj.cellIntersectionIndex) || (cellIndx < 1); ++cellIndx) 
	{
		cellNumGlobal =  i4D->iObj.cellIntsct[cellIndx].globalCellIndex; // The global number of the cell
		alreadyGotCount = 0; // count of faces that have been processed
		isctEdgeIndex = 0; // This is for storing the intersection points of the edges.
		loopsCount = 0; // for debug
		////////////////////////////////////////////////////////////////////////////////////////////////////


		// Clear the -1 flags from faceIntersectionIndex1 (used later)
		for (facIndx = 0; facIndx < i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndexInd; ++facIndx) {
			i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndex1[facIndx] = 
				i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndex[facIndx];
		}


		// Construct the face that is the intersection of this cell with the user space.
		// We need to look at all the faces, each face giving two intersection points.
		// Arrange these intersection points in order so that they form the boundary of the intersection face
		while (alreadyGotCount < i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndexInd) {
			// loop until the number of faces that have been processed is the same as the number of intersecting
			// faces in this cell.
			// Loop round all the intersecting faces. This may have to be done more than once in order to get
			// the intersection points into the right order to form a boundary of an intersection face
			for (facIndx = 0; facIndx < i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndexInd; ++facIndx) {
				// xFaceIndex is the index of the face (which is part of this cube) in
				// the face intersection array
				xFaceIndex = i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndex1[facIndx];
				if (xFaceIndex < 0)
					continue; // This face has already been processed in a previous pass round this loop.

				gotAFace = 0;
				// Look for a face that contains an edge that is the same as the last edge, so buid up a
				// continuous polygon.
				if ((facIndx == 0 && alreadyGotCount == 0) || // If this is the first face, or...
					(i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[0] ==
					isctEdges[isctEdgeIndex - 1])) //There is a matching edge on this face for the previous edge
				{
					// This configuration (i.e. the order of the intersecting edges) is fine as it is.
					isctEdges[isctEdgeIndex++] = i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[0];
					isctEdges[isctEdgeIndex++] = i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[1];
					gotAFace = true;
				} else {
					// We didn't get a match of edge [0] for this face, so try edge [1]
					if (i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[1] == isctEdges[isctEdgeIndex - 1]) {
						// Edge 1 matches, so record the edges in the reverse order
						isctEdges[isctEdgeIndex++] = i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[1];
						isctEdges[isctEdgeIndex++] = i4D->iObj.faceIntsct[xFaceIndex].edgeIntersectionIndex[0];
						gotAFace = true;
					}
				}
				if (gotAFace) {
					i4D->iObj.cellIntsct[cellIndx].faceIntersectionIndex1[facIndx] = -1; // mark the face as processed
					++alreadyGotCount; // Count up the faces that have been processed.
				}
			}
			// If we drop out of the face loop to here, we have completed a loop around all the intersecting faces for
			// this cell. But because the order of the faces may be wrong (in terms of getting a continuous border of a polygon)
			// we may have to continue (from the start again) looking. Hence we have the 'while' loop.
			loopsCount++; // Normally, the number of loops is a maximum of about 8, and that is only in the case of the 120 cell or the 600 cell
			// if the number of loops reaches 100, there is a bug.
			// This has happened a few times and I have not yet found the bug. I just crash the program.
			if (loopsCount == 100) loopsCount /= (loopsCount-100);
		}
		loopsTot += loopsCount;
		if (loopsCount < loopsMin) loopsMin= loopsCount;
		if (loopsCount > loopsMax) loopsMax= loopsCount;

		// Now we have a list if intersecting edges in isctEdges, in a continuous order, so the intersecting points can be
		// drawn to form a face of the final 3D intersection figure. First we need to get the normal of this face to discover the
		// correct order of drawing it (clock or anticlock) 

		// First, the intersection points are all in 4D space so we need to just use the first 3 coordinates.
		// This assumes that the normal of the user space is [0,0,0,1], but that is always the case in this implementation

		// Use the first 3 coords of the first three points of the intersecting polygon to form two edge vectors
		// Get two vectors that are within the intersection plane.

		switch (eStereo) {
		case rightEyeLeftScreenStereo:
			tmpv1[0] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[0] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DRightEye[0];
			tmpv1[1] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[1] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DRightEye[1];
			tmpv1[2] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[2] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DRightEye[2];
			tmpv2[0] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DRightEye[0] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[0];
			tmpv2[1] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DRightEye[1] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[1];
			tmpv2[2] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DRightEye[2] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DRightEye[2];
			break;
		case leftEyeRightScreenStereo:
			tmpv1[0] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[0] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DLeftEye[0];
			tmpv1[1] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[1] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DLeftEye[1];
			tmpv1[2] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[2] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3DLeftEye[2];
			tmpv2[0] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DLeftEye[0] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[0];
			tmpv2[1] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DLeftEye[1] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[1];
			tmpv2[2] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3DLeftEye[2] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3DLeftEye[2];
			break;
		default: // no stereo
			tmpv1[0] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[0] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3D[0];
			tmpv1[1] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[1] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3D[1];
			tmpv1[2] = i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[2] - i4D->iObj.edgeIntsct[isctEdges[0]].intersectionPointProjTo3D[2];
			tmpv2[0] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3D[0] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[0];
			tmpv2[1] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3D[1] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[1];
			tmpv2[2] = i4D->iObj.edgeIntsct[isctEdges[4]].intersectionPointProjTo3D[2] - i4D->iObj.edgeIntsct[isctEdges[2]].intersectionPointProjTo3D[2];
			break;
		}
		vcross(tmpv1, tmpv2, crosstest);
		// The first three components of rotatedcellNormals are the projection of the cell normal onto the user space
		// Which always has a normal of 0,0,0,1
		dotProd = vdot3( crosstest,i4D->rotatedCellNormals[cellNumGlobal]);
		//myNormaliseVector3D(crosstest); // Need this for a normal of the face (although not used at the moment)
		if (dotProd > 0) { //  the '>0' test gives good results, but the geometry is a little confusing. Stick with what works.
			reverseit = false;/////////////////////////////////////
			crosstest[0] = -crosstest[0]; crosstest[1] = -crosstest[1]; crosstest[2] = -crosstest[2];
		} else {
			reverseit = true;////////////////////////////////////////
		}

		// Now draw the solid intersection

		if (useRandomColours) {
			glColor3f(i4D->randomColors[cellNumGlobal].rCol,i4D->randomColors[cellNumGlobal].gCol,i4D->randomColors[cellNumGlobal].bCol);
		} else {
			glColor3ub((unsigned char)colsFig[cellNumGlobal].rCol,(unsigned char)colsFig[cellNumGlobal].gCol,(unsigned char)colsFig[cellNumGlobal].bCol);
		}

		glBegin(GL_POLYGON);
		glNormal3fv(crosstest);

		// The division by two below, and the increment of the j index by two ( also below ) is because each vertex is stored twice.
		// This redundancy could be cleaned up, but it works as it is and 'fixing' the code is low priority.
		numOfVertsInIntersectionFace = isctEdgeIndex/2;
		j = 0;
		while (j < isctEdgeIndex) {
			// The reverseit flag indicates whether the polygon should be plotted in reverse order in order to 
			// get the correct outward facing normal.
			myIndex = reverseit ? isctEdgeIndex - j - 2 : j;

			switch (eStereo) {
			case rightEyeLeftScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye);			
				break;
			case leftEyeRightScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye);			
				break;
			default: // no stereo
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D);			
				break;
			}
			j+=2;
		}
		glEnd();

		// Now draw the edges of the intersection
		glColor3ub(127,127,127);
		glLineWidth(3.0);
		glBegin(GL_LINE_LOOP);
		j = 0;
		while (j < isctEdgeIndex) {
			myIndex = reverseit ? isctEdgeIndex - j - 2 : j;
			switch (eStereo) {
			case rightEyeLeftScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye);
				break;
			case leftEyeRightScreenStereo:
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye);
				break;
			default: // no stereo
				glVertex3fv(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D);
				break;
			}
			j+=2;
		}
		glEnd();

		if (drawFaceNumbers) {
			// Now calculate the centroid of the polygon
			// Using a triangle fan, calculate the centroid of each triangle and cumulate them
			// into the centroid of the polygon. The Idea is that the number will hover above the centroid
			// of the polygon.
			j = 0;
			vzero3(centrePolygonCumulative);
			cumulativeArea = 0;
			while (j < isctEdgeIndex) {
				myIndex = reverseit ? isctEdgeIndex - j - 2 : j;
				if (j == 0) { // 1st vertex
					switch (eStereo) {
					case rightEyeLeftScreenStereo:
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye, firstTriangleVertex);
						break;
					case leftEyeRightScreenStereo:
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye, firstTriangleVertex);
						break;
					default: // no stereo
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D, firstTriangleVertex);
						break;
					}
				} else if (j == 2) { // 2nd vertex
					switch (eStereo) {
					case rightEyeLeftScreenStereo:
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye, secondTriangleVertex);
						break;
					case leftEyeRightScreenStereo:
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye, secondTriangleVertex);
						break;
					default: // no stereo
						vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D, secondTriangleVertex);
						break;
					}
					s1 = vlengthdiff3(secondTriangleVertex, firstTriangleVertex);
				} else {
					// Can calc a triangle only after the third vertex of the polygon
					if (j == 4) { // 3rd vertex
						switch (eStereo) {
						case rightEyeLeftScreenStereo:
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye, thirdTriangleVertex);
							break;
						case leftEyeRightScreenStereo:
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye, thirdTriangleVertex);
							break;
						default: // no stereo
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D, thirdTriangleVertex);
							break;
						}
						s2 = vlengthdiff3(thirdTriangleVertex, secondTriangleVertex);
						s3 = vlengthdiff3(firstTriangleVertex, thirdTriangleVertex);
					} else { // 4th and later vertices
						vcopy3(thirdTriangleVertex, secondTriangleVertex);
						switch (eStereo) {
						case rightEyeLeftScreenStereo:
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DRightEye, thirdTriangleVertex);
							break;
						case leftEyeRightScreenStereo:
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3DLeftEye, thirdTriangleVertex);
							break;
						default: // no stereo
							vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D, thirdTriangleVertex);
							break;
						}
						//vcopy3(i4D->iObj.edgeIntsct[isctEdges[myIndex]].intersectionPointProjTo3D, thirdTriangleVertex);
						s1 = s3;
						s2 = vlengthdiff3(thirdTriangleVertex, secondTriangleVertex);
						s3 = vlengthdiff3(firstTriangleVertex, thirdTriangleVertex);
					}
					s3 = vlengthdiff3( firstTriangleVertex, thirdTriangleVertex);
					s = (s1 + s2 + s3)*0.5;
					area = sqrt(s*(s - s1)*(s - s2)*(s - s3)); // Area of a triangle by Heron's formula
					vcentretriangle3(firstTriangleVertex, secondTriangleVertex, thirdTriangleVertex, centrePolygonCurrent);
					temp1 = cumulativeArea/(cumulativeArea + area);
					temp2 = area/(cumulativeArea + area);
					// To calculate the centroid, weight the previous centroid and the current centroid by the relative areas.
					centrePolygonCumulative[0] = centrePolygonCumulative[0] * temp1 + centrePolygonCurrent[0] * temp2;
					centrePolygonCumulative[1] = centrePolygonCumulative[1] * temp1 + centrePolygonCurrent[1] * temp2;
					centrePolygonCumulative[2] = centrePolygonCumulative[2] * temp1 + centrePolygonCurrent[2] * temp2;
					cumulativeArea += area;
				}
				j+=2;
			}

			polyDist = vlength3(centrePolygonCumulative);
			// The following are hacks that more or less work
			numbersLoc[0] = centrePolygonCumulative[0] * NUMBERSDISPLAY_DISTANCEFACTOR + NUMBERSDISPLAY_EXTRA_X;
			numbersLoc[1] = centrePolygonCumulative[1] * NUMBERSDISPLAY_DISTANCEFACTOR + NUMBERSDISPLAY_EXTRA_Y;
			numbersLoc[2] = centrePolygonCumulative[2] * NUMBERSDISPLAY_DISTANCEFACTOR + NUMBERSDISPLAY_EXTRA_Z;

			if (numbersLoc[2] > minz) {
				gl_font(1,(info4D.fig->numCells > 100? 18 : 24)); // Smaller font for 120 and 600 cells figures.
				glColor3ub(255,255,255); // Numbers are white
				sprintf(numstring,"%d",cellNumGlobal);
				glRasterPos3fv(numbersLoc);
				gl_draw(numstring,strlen(numstring));
				//sptr += sprintf(sptr,"x");
				//sptr += sprintf(sptr,"%7.3f %7.3f %7.3f %7.3f\n",numbersLoc[0],numbersLoc[1],numbersLoc[2],minz);
			}
		}
	} // End of the loop for the intersecting cells
	loopsAvg = (float)loopsTot/(float)i4D->iObj.cellIntersectionIndex;  // Just debug and monitoring.
	if (drawFaceNumbers) {
		//sptr += sprintf(sptr,"\n");
		//sprintf(txtout,"lmin=%3d, max=%4d, avg=%6.3f\n",loopsMin, loopsMax, loopsAvg); // for debug
		//fputs(txtout,pFile);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawAccuracy3D(float angle, float xxtime, int onTheLeft)
{
	char counting[25];
	float tempVal;

	// Draw the accuracy
	tempVal = correctAngle(angle);
	if (onTheLeft) {
		sprintf(counting, "Angle:%5.1f", tempVal*M_RADIANS_TO_DEGREES);
		glTextOutput(0.81, ANGULARDISTANCEYVALUE, counting, twhite);
		sprintf(counting, "Time:%5.0f", xxtime);
		glTextOutput(0.81, ANGULARDISTANCEYVALUE-0.1, counting, twhite);
		drawAccuracy2DNew(fabs(tempVal*M_1_PI),0.0,leftOnly);
	} else {
		drawAccuracy2DNew(fabs(tempVal*M_1_PI),0.0,rightOnly);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void createRotMatFromRotor(struct Rotor4D *r) {
	// Creates a rotation matrix in sqm from the indicated rotor
	float scalarsquared = r->scalar*r->scalar;

	float e12sq = r->b.e12 * r->b.e12;
	float e13sq = r->b.e13 * r->b.e13;
	float e14sq = r->b.e14 * r->b.e14;
	float e23sq = r->b.e23 * r->b.e23;
	float e24sq = r->b.e24 * r->b.e24;
	float e34sq = r->b.e34 * r->b.e34;

	float e1234sq = r->e1234 * r->e1234;

	float sc12 = r->scalar * r->b.e12;
	float sc13 = r->scalar * r->b.e13;
	float sc14 = r->scalar * r->b.e14;
	float sc23 = r->scalar * r->b.e23;
	float sc24 = r->scalar * r->b.e24;
	float sc34 = r->scalar * r->b.e34;

	float e12_13 = r->b.e12 * r->b.e13;
	float e12_14 = r->b.e12 * r->b.e14;
	float e12_23 = r->b.e12 * r->b.e23;
	float e12_24 = r->b.e12 * r->b.e24;
	float e12_34 = r->b.e12 * r->b.e34;

	float e13_14 = r->b.e13 * r->b.e14;
	float e13_23 = r->b.e13 * r->b.e23;
	float e13_24 = r->b.e13 * r->b.e24;
	float e13_34 = r->b.e13 * r->b.e34;

	float e14_23 = r->b.e14 * r->b.e23;
	float e14_24 = r->b.e14 * r->b.e24;
	float e14_34 = r->b.e14 * r->b.e34;

	float e23_24 = r->b.e23 * r->b.e24;
	float e23_34 = r->b.e23 * r->b.e34;

	float e24_34 = r->b.e24 * r->b.e34;

	float e12_1234 = r->b.e12 * r->e1234;
	float e13_1234 = r->b.e13 * r->e1234;
	float e14_1234 = r->b.e14 * r->e1234;
	float e23_1234 = r->b.e23 * r->e1234;
	float e24_1234 = r->b.e24 * r->e1234;
	float e34_1234 = r->b.e34 * r->e1234;

// e1 rotated:
//e1    r1scalar^2 - r1be12^2 - r1be13^2 - r1be14^2 + r1be23^2 + r1be24^2 + r1be34^2 - r1e1234^2
//e2    2*r1scalar*r1be12 -2*r1be13*r1be23 -2*r1be14*r1be24 +2*r1be34*r1e1234
//e3    2*r1scalar*r1be13 +2*r1be12*r1be23 -2*r1be14*r1be34 -2*r1be24*r1e1234
//e4    2*r1scalar*r1be14 +2*r1be12*r1be24 +2*r1be13*r1be34 +2*r1be23*r1e1234

	sqm.setElement(0,0, scalarsquared -e12sq -e13sq -e14sq +e23sq +e24sq +e34sq -e1234sq);
	sqm.setElement(1,0, 2*sc12 -2*e13_23 -2*e14_24 +2*e34_1234);
	sqm.setElement(2,0, 2*sc13 +2*e12_23 -2*e14_34 -2*e24_1234);
	sqm.setElement(3,0, 2*sc14 -2*e12_24 +2*e13_34 +2*e23_1234);

// e2 rotated:
//e1    -2*r1scalar*r1be12 -2*r1be13*r1be23 -2*r1be14*r1be24 -2*r1be34*r1e1234
//e2    r1scalar^2 - r1be12^2 - r1be23^2 - r1be24^2 + r1be13^2 + r1be14^2 - r1e1234^2 + r1be34^2
//e3    2*r1scalar*r1be23 -2*r1be12*r1be13 -2*r1be24*r1be34 +2*r1be14*r1e1234
//e4    2*r1scalar*r1be24 -2*r1be12*r1be14 +2*r1be23*r1be34 -2*r1be13*r1e1234

	sqm.setElement(0,1,-2*sc12 -2*e13_23 -2*e14_24 -2*e34_1234);
	sqm.setElement(1,1, scalarsquared -e12sq +e13sq +e14sq -e23sq -e24sq +e34sq -e1234sq);
	sqm.setElement(2,1, 2*sc23 +2*e12_13 -2*e24_34 +2*e14_1234);
	sqm.setElement(3,1, 2*sc24 -2*e12_14 +2*e23_34 -2*e13_1234);

// e3 rotated:
//e1    -2*r1scalar*r1be13 +2*r1be12*r1be23   -2*r1be14*r1be34   +2*r1be24*r1e1234
//e2    -2*r1be12*r1be13   -2*r1scalar*r1be23 -2*r1be24*r1be34   -2*r1be14*r1e1234
//e3    -r1be13^2 -r1be23^2 +r1scalar^2 -r1be34^2 +r1be12^2 -r1e1234^2 +r1be14^2 +r1be24^2
//e4    -2*r1be13*r1be14   -2*r1be23*r1be24   +2*r1scalar*r1be34 +2*r1be12*r1e1234

	sqm.setElement(0,2,-2*sc13 +2*e12_23 -2*e14_34 +2*e24_1234);
	sqm.setElement(1,2,-2*sc23 -2*e12_13 -2*e24_34 -2*e14_1234);
	sqm.setElement(2,2, scalarsquared +e12sq -e13sq +e14sq -e23sq +e24sq -e34sq -e1234sq);
	sqm.setElement(3,2, 2*sc34 -2*e13_14 -2*e23_24 +2*e12_1234);

// e4 rotated:
//e1    -2*r1scalar*r1be14 +2*r1be12*r1be24 +2*r1be13*r1be34   -2*r1be23*r1e1234
//e2    -2*r1scalar*r1be24 -2*r1be12*r1be14 +2*r1be23*r1be34   +2*r1be13*r1e1234
//e3    -2*r1be13*r1be14   -2*r1be23*r1be24 -2*r1scalar*r1be34 -2*r1be12*r1e1234
//e4    -r1be14^2 -r1be24^2 -r1be34^2 +r1scalar^2 -r1e1234^2 +r1be12^2 +r1be13^2 +r1be23^2

	sqm.setElement(0,3,-2*sc14 +2*e12_24 +2*e13_34 -2*e23_1234);
	sqm.setElement(1,3,-2*sc24 -2*e12_14 +2*e23_34 +2*e13_1234);
	sqm.setElement(2,3,-2*sc34 -2*e13_14 -2*e23_24 -2*e12_1234);
	sqm.setElement(3,3, scalarsquared +e12sq -e13sq -e14sq +e23sq -e24sq -e34sq -e1234sq);


}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mouseCalcs () {
//	if (left_mouse) {
	if (left_mouse || right_mouse) {
		switch (stateMouseState) {
		case mouseHasJustGoneUp:
		case mouseIsUp:
			stateMouseState = mouseHasJustGoneDown;
			break;
		case mouseHasJustGoneDown:
			stateMouseState = mouseIsDown;
			break;
		default:
			break;
		}
	} else {
		switch (stateMouseState) {
		case mouseHasJustGoneDown:
		case mouseIsDown:
			stateMouseState = mouseHasJustGoneUp;
			break;
		case mouseHasJustGoneUp:
			stateMouseState = mouseIsUp;
			break;
		default:
			break;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
int getKeyboardStates() {
	// Set the keyboard states
	// Returns the number of keys pressed that are involved with figure manipulation.
	char txtout[30];
	char *ptr = txtout;
	ptr+=sprintf(ptr,"* ");
	int countOfKeys = 0;


//	if (GetKeyState(VK_CONTROL) & 0x8000) {
	if (0) {
		// If the control key is down, don't bother with the rest since only the mouse is used.
		info4D.keyDownCtrl = 1;
		ptr += sprintf(ptr,"/");
	}  else {
		info4D.keyDownCtrl = 0;

//		if (GetKeyState(VK_SHIFT) & 0x8000) {
		if (0) {
			info4D.keyDownShift = 1;
			ptr += sprintf(ptr,"_");
		}  else {
			info4D.keyDownShift = 0;
		}

		// if ((GetKeyState('Z') & 0x8000) ||
			// (GetKeyState('A') & 0x8000) ||
			// (GetKeyState('Q') & 0x8000) ||
			// (GetKeyState('1') & 0x8000) ||
			// (GetKeyState('J') & 0x8000) ||
			// (GetKeyState('I') & 0x8000) ||
			// (GetKeyState('8') & 0x8000)) {
		if (0) {
				info4D.keyDownXAxis = 1;
				ptr += sprintf(ptr,"X");
				countOfKeys++;
		} else {
			info4D.keyDownXAxis = 0;
		}

		// if ((GetKeyState('X') & 0x8000) ||
			// (GetKeyState('S') & 0x8000) ||
			// (GetKeyState('W') & 0x8000) ||
			// (GetKeyState('2') & 0x8000) ||
			// (GetKeyState('K') & 0x8000) ||
			// (GetKeyState('O') & 0x8000) ||
			// (GetKeyState('9') & 0x8000)) {
		if (0) {
				info4D.keyDownYAxis = 1;
				ptr += sprintf(ptr,"Y");
				countOfKeys++;
		} else {
			info4D.keyDownYAxis = 0;
		}

		// if (//(GetKeyState('C') & 0x8000) ||
			// (GetKeyState('D') & 0x8000) ||
			// (GetKeyState('E') & 0x8000) ||
			// (GetKeyState('3') & 0x8000) ||
			// (GetKeyState('L') & 0x8000) ||
			// (GetKeyState('P') & 0x8000) ||
			// (GetKeyState('0') & 0x8000)) {
		if (0) {
				info4D.keyDownZAxis = 1;
				ptr += sprintf(ptr,"Z");
				countOfKeys++;
		} else {
			info4D.keyDownZAxis = 0;
		}

//		if (GetKeyState(' ') & 0x8000) {
		if (0) {
			info4D.keyDownWAxis = 1;
			ptr += sprintf(ptr,"W");
			countOfKeys++;
		} else {
			info4D.keyDownWAxis = 0;
		}

//		if ((GetKeyState('Z') & 0x8000) ||
//			(GetKeyState('N') & 0x8000)) {
		if (0) {
				info4D.keyDownSpeedUp = 1;
				//countOfKeys++;
		} else {
			info4D.keyDownSpeedUp = 0;
		}
//		if ((GetKeyState('X') & 0x8000) ||
//			(GetKeyState('M') & 0x8000)) {
		if (0) {
				info4D.keyDownSlowDown = 1;
				//countOfKeys++;
		} else {
			info4D.keyDownSlowDown = 0;
		}
	}

	//if (ptr > txtout+2) {
	//ptr += sprintf(ptr," Keycnt=%d\n",countOfKeys);
	//fputs(txtout,pFile);
	//}
	return countOfKeys;
}
/////////////////////////////////////////////////////////////
void disp4DResults()
{
	char txtout[300];
	char dispres[20];
	char * sptr;
	sptr = txtout;
	float sumOfDiffs = fabs(info4D.initialAngularDifference1)+fabs(info4D.initialAngularDifference2); 


	// The difference between the figure initial position and the target initial position is
	// two planes of rotation and two angles
	// This is the first angular distance
	sprintf(dispres,"%7.2f",fabs(info4D.initialAngularDifference1)*M_RADIANS_TO_DEGREES);
	solnAngle1->value(dispres);
	// This is the second angular distance
	sprintf(dispres,"%7.2f",fabs(info4D.initialAngularDifference2)*M_RADIANS_TO_DEGREES);
	solnAngle2->value(dispres);

	sptr += sprintf(sptr,"Calculated initial diff deg %6.2f + %6.2f = %6.2f %c\n",
		fabs(info4D.initialAngularDifference1)*M_RADIANS_TO_DEGREES,
		fabs(info4D.initialAngularDifference2)*M_RADIANS_TO_DEGREES, sumOfDiffs*M_RADIANS_TO_DEGREES,176);

	// The sum of the two angular distances, which may include the cumulative escape angle if escape angle is non-zero
	// This is the total cumulative difference between the figure and the target
	// Note that when the target is 'escaping', this calculation is somewhat dubious since there is (I beleive) no 'correct'
	// way to calculate the cumulative distance between the figure and the target.
	//sumOfDiffs = abs(info4D.initialAngularDifference1)+abs(info4D.initialAngularDifference2); //+ info4D.cumulativeAngularEscape;
	//sumOfDiffs = abs(info4D.initialAngularDifference1)+abs(info4D.initialAngularDifference2)+ info4D.cumulativeAngularEscape;
	sprintf(dispres,"%7.2f",sumOfDiffs*M_RADIANS_TO_DEGREES);
	solnAngleSum->value(dispres);


	// This is the accuracy angle, or the permitted error for solution. If the figure gets this close to the target,
	// The puzzle is deemed to be solved.
	sprintf(dispres,"%7.2f",ACCURACYANGLE4D*M_RADIANS_TO_DEGREES);
	allowedError->value(dispres);

	if (info4D.cumulativeAngularEscape > 0.0) {
		// This is the cumulative angular distance traveled by the target while 'escaping'.
		sprintf(dispres,"%9.2f",info4D.cumulativeAngularEscape*M_RADIANS_TO_DEGREES);
		cumulEscAng->value(dispres);
	} else {
		sprintf(dispres," ");
		cumulEscAng->value(dispres);
	}

	// The total travel angle required for solution is the initial difference plus the cumulative escape angle less
	// the accuracy angle.
	//info4D.requiredAngle = sumOfDiffs - ACCURACYANGLE4D;
	sprintf(dispres,"%7.2f",info4D.requiredAngle*M_RADIANS_TO_DEGREES);
	reqdForSoln->value(dispres);


	sptr += sprintf(sptr,"Required Angle: %7.1f %c",info4D.requiredAngle*M_RADIANS_TO_DEGREES,176);
	sptr += sprintf(sptr,"Cumulative Escape Angle: %9.1f %c",info4D.cumulativeAngularEscape*M_RADIANS_TO_DEGREES,176);


	// The time it took to solve the problem, in seconds
	sprintf(dispres,"%8.2f",info4D.successTime);
	timeTaken->value(dispres);

	// This is the total angular distance traveled by the figure
	sprintf(dispres,"%7.2f",info4D.cumulativeAngularTravel*M_RADIANS_TO_DEGREES);
	angDistTrav->value(dispres);

	// This is the average NECESSARY speed that the figure traveled, NOT its cumulative angular travel divided by the time taken.
	// It is the angle required for solution divided by the time taken.
	//info4D.fspeed = info4D.requiredAngle*M_RADIANS_TO_DEGREES/info4D.successTime;
	sprintf(dispres,"%7.2f",info4D.fspeed);
	angSpeed->value(dispres);

	// The accuracy, as a percentage, of the solution. This value is good when the target is not escaping, but
	// when the target is escaping it is possible that the figure travels less than the required angle and
	// scores an accuracy greater than 100. This is because the escape algorithm picks an escape rotation that is close to
	// the rotation that would maximally distance the target from the figure, but is not the actual best. Hence the
	// figure can outdo the escape algorithm and score > 100 (if the autosolve is set to 'best' , the figure will normally
	// outdo the escape algorithm in terms of accuracy)
	//info4D.faccuracy = 100.0*info4D.requiredAngle/info4D.cumulativeAngularTravel;
	sprintf(dispres,"%7.2f",info4D.faccuracy);
	accurac->value(dispres);

	//info4D.fscore = info4D.faccuracy * info4D.fspeed;
	sprintf(dispres,"%8.2f", info4D.fscore);
	finalScore->value(dispres);

	sptr += sprintf(sptr,"Time: %7.1f s\nAngular Travel: %8.1f %c\nSpeed: %7.2f %c/s\nAccuracy:%6.1f%%\nScore:%8.2f\n",
		info4D.successTime,info4D.cumulativeAngularTravel*M_RADIANS_TO_DEGREES,176,
		info4D.fspeed,176,info4D.faccuracy, info4D.fscore);
	if (pFile) fputs(txtout,pFile);
}
////////////////////////////////////////////////////////////////////////

void drawAcc4D(float currang) {
	glLineWidth(POLYGONLINEWIDTH);
	glBegin(GL_LINES);

	// If the user is still inaccurate, colour is red

	if (currang < ACCURACYANGLE4D* 1.5) {
		glColor3f(1.0,1.0,1.0);//White
	} else {
		if (currang < ACCURACYANGLE4D* 2) {
			glColor3f(0.1,1.0,0.1);//Green
		} else {
			glColor3f(1.0,0.1,0.1);// Red
		}
	}

	glVertex2f(-0.1*currang/M_2_PI, 0.0);
	glVertex2f(+0.1*currang/M_2_PI, 0.0);
	glEnd();
}
/////////////////////////////////////////////////////////////
void kbSpeed() {
	if (info4D.keyDownSlowDown) { // Slow down takes precedence over speed up.
		info4D.kbRotation /= 1.02;
		if (info4D.kbRotation < KBROTMIN) info4D.kbRotation = KBROTMIN;
	} else {
		if (info4D.keyDownSpeedUp) {
			info4D.kbRotation *= 1.02;
			if (info4D.kbRotation > KBROTMAX) info4D.kbRotation = KBROTMAX;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////
void redraw4D(float old_xxtime, int doStereo)
{
	float oscAngle,oscAngleDual;
	char txtout[300];
	char dispNum[5];
	char dispres[50];
	char *sptr = txtout;
	unsigned char myLineCols[3] = {0,0,0};
	float tempVal, tempProportion, propFalseStartTarg1, propFalseStartFig1, propFalseStartTarg2, propFalseStartFig2;
	long q;
	int case4D;
	float tempv3[4];
	float currentAngle, sumOfDiffs;
	struct Bivector4D tempBvD,*tempPtr;
	int keycount;
	bool solvres;
	struct Rotor4D tempRotor4D, tempTargRotor4D, tempFigRotor4D;
	int whichbiv1, whichbiv2;
	float maxval1;
	float maxval2;

	mouseCalcs(); // set the mouse states (up down etc

	switch (state4DOverview) {
	case fourDDemo:
		angleFromTime4D(xxxtime,&oscAngle,&oscAngleDual);
		rotateVectors4D(oscAngle,oscAngleDual);
		calcDotProdsOfPointsWithUserNormal4D(&info4DFig);
		calcEdgeLambda4D(&info4DFig, doStereo);
		calcDotProdsOfPointsWithUserNormal4D(&info4DTarg);
		calcEdgeLambda4D(&info4DTarg, doStereo);

		calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);

		project4Dto3DStereo2C(&info4D, &info4DFig, (doStereo ? 1 : 0));
		project4Dto3DStereo2C(&info4D, &info4DTarg,(doStereo ? 2 : 0));
		break;
	case fourDGame:
		switch (state4DGamePlay) {
		case waitingForNew4D:
			calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);
			break;
		case countingDown4D:
			if (xxxtime <= COUNTDOWNDURATION ) {
				// We need to calculate a proportion of the false start angle
				tempVal = COUNTDOWNDURATION - xxxtime;
				tempProportion = tempVal/COUNTDOWNDURATION;

				// Calculations for the position of the target
				propFalseStartTarg1 = info4D.falseStartTargAngle1*tempProportion;
				propFalseStartTarg2 = info4D.falseStartTargAngle2*tempProportion;

				calcCompRotorFromBivAndTwoAngles(&info4D.falseStartBivTarg,
					propFalseStartTarg1, propFalseStartTarg2, &tempRotor4D);
				// First apply the trueStart, then the falseStart to get a rotor for moving the targ
				gpOfTwoComplexRotors( &info4D.trueStartRotTarg,&tempRotor4D, &tempTargRotor4D); // Note order
				rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &tempTargRotor4D, info4DTarg.rotatedVerts[0]);
				rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &tempTargRotor4D, info4DTarg.rotatedCellNormals[0]);


				// Calculations for the position of the figure
				propFalseStartFig1 = info4D.falseStartFigAngle1*tempProportion;
				propFalseStartFig2 = info4D.falseStartFigAngle2*tempProportion;

				calcCompRotorFromBivAndTwoAngles(&info4D.falseStartBivFig,
					propFalseStartFig1, propFalseStartFig2, &tempRotor4D);
				// First apply the trueStart, then the falseStart to get a rotor for moving the fig
				gpOfTwoComplexRotors( &info4D.trueStartRotFig,&tempRotor4D, &tempFigRotor4D); // Note order
				rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &tempFigRotor4D, info4DFig.rotatedVerts[0]);
				rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &tempFigRotor4D, info4DFig.rotatedCellNormals[0]);


				calcDotProdsOfPointsWithUserNormal4D(&info4DFig);
				calcEdgeLambda4D(&info4DFig, doStereo);
				calcDotProdsOfPointsWithUserNormal4D(&info4DTarg);
				calcEdgeLambda4D(&info4DTarg, doStereo);

				calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);

				project4Dto3DStereo2C(&info4D, &info4DFig, (doStereo ? 1 : 0));
				project4Dto3DStereo2C(&info4D, &info4DTarg,(doStereo ? 2 : 0));
				info4D.displayNumber = 1 + floor(tempVal);

				countdownOutput4D->color(FL_YELLOW);
				if (info4D.displayNumber != info4D.prevDisplayNumber) {
					sprintf(dispNum,"%2d",info4D.displayNumber);
					countdownOutput4D->value(dispNum);
				}
				info4D.prevDisplayNumber = info4D.displayNumber;
			} else {
				// Switch to game playing state.
				state4DGamePlay = playing4D;
				countdownOutput4D->color(FL_BACKGROUND_COLOR);
				countdownOutput4D->value("");
				countdownOutput4D->redraw();

				// The next line is so that keyboard events are not sent to the GUI once the game starts.
				glut_window->take_focus(); /// Be very careful of this!!!!!

				rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &info4D.trueStartRotTarg, info4DTarg.rotatedVerts[0]);
				rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &info4D.trueStartRotTarg, info4DTarg.rotatedCellNormals[0]);
				rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &info4D.trueStartRotFig, info4DFig.rotatedVerts[0]);
				rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &info4D.trueStartRotFig, info4DFig.rotatedCellNormals[0]);

				info4D.cumulativeAngularTravel = 0.0;
				info4D.cumulativeAngularEscape = 0.0;
				ltinitial.tv_sec = ltend.tv_sec;
				ltinitial.tv_nsec = ltend.tv_nsec;
				//tinitial.QuadPart = tend.QuadPart; // Zero the clock
			}
			break;
		case playing4D:
			trackbI.horrible4DFlag = 1; // This flag Signals to 'mytrackball3D' that this is in fact a 4D game
			keycount = getKeyboardStates();
			// Zero the bivector that represents the user input: either mouse motion or keyboard input.
			tempBvD.e12 = 0.0;tempBvD.e13 = 0.0;tempBvD.e14 = 0.0;tempBvD.e23 = 0.0;tempBvD.e24 = 0.0;tempBvD.e34 = 0.0; 
			//sptr += sprintf(txtout," KC=",%d);
			/////////////////////////////////////////////
			if (keycount == 0) { // The user has not pressed any keys to control the figure movement.
				// Only look at the mouse (i.e. trackball) if the keyboard is inactive.
				// mytrackball3D does rotations involving 4D as well as 3D.
				case4D = mytrackball3D(&trackbI, &stateMouseState); //calculate trackball movement.
				switch (case4D) {
				case 1: // Control key is down (hence 4th dim is being used). Mouse is inside trackball area
					// Calculate the axis of rotation of the mouse in 3D
					vcross(trackbI.normalisedPrev, trackbI.normalisedCurr, trackbI.axis);
					// Then get the vector that is orthogonal to both that axis and the z-axis
					vcross(axisZ4D, trackbI.axis, tempv3);
					// Combine that vector with the w-axis to get a bivector for rotating the figure
					calcNormalBivector4DFromVectors(tempv3,axisW4D,&tempBvD);
					break;
				case 2: // Control key is down (hence 4th dim is being used). Mouse is outside trackball area
					tempBvD.e34 = 1.0; // Always rotate in the e34 plane.
					break;
				case 3: // Control key is up. Mouse is inside trackball area. This is a mouse controlled 3D rotation
					calcNormalBivector4DFromVectors(trackbI.normalisedPrev,trackbI.normalisedCurr,&tempBvD);
					break;
				case 4: // Control key is up. Mouse is outside trackball area
					tempBvD.e12 = 1.0; // Always rotate in the e12 plane
					break;
				default: // Anything else, do nothing.
					break;
				}
			} else {
				// Do keyboard rotations here
				trackbI.rotangle = 0.0;
				kbSpeed();
				if (keycount == 2 || (keycount == 3 && info4D.keyDownShift==1)) {
					// There is a valid keyboard command. The shift key controls the direction of rotation
					if (info4D.keyDownShift==1){trackbI.rotangle = -info4D.kbRotation;} else {trackbI.rotangle = info4D.kbRotation;} // +ve versus -ve rotations.
					// The user's rotation bivector 'tempBvD' has already been set to zero.
					// Here we just set the required components to 1 according to the keys that are pressed.
					if (info4D.keyDownXAxis == 1) {
						if (info4D.keyDownYAxis == 1) {
							tempBvD.e12 = 1.0;
						} else {
							if (info4D.keyDownZAxis == 1) {tempBvD.e13 = 1.0;} else {tempBvD.e14 = 1.0;}
						}
					} else {
						if (info4D.keyDownYAxis == 1) {
							if (info4D.keyDownZAxis == 1) {tempBvD.e23 = 1.0;} else {tempBvD.e24 = 1.0;}
						} else {
							tempBvD.e34 = 1.0;
						}
					}
				}
			} // if keycount == 0
			if (trackbI.rotangle == 0.0 && info4D.autosolve4D == autoSolving) {
				// There is no user input so do autosolve if requested
				int chooser;
				// When autosolving, ignore any mouse or kb input that tries to move the figure.
				// Set the figure movement according to the solution of the puzzle that was calculated on the 
				// previous passage through this loop.

				tempPtr = whichang == 1 ? &info4D.solvBiv1:&info4D.solvBiv2;

				if (info4D.solveType4D == 1) { // Best, i.e. a smooth solving
					tempBvD.e12=tempPtr->e12;tempBvD.e13=tempPtr->e13;tempBvD.e14=tempPtr->e14;
					tempBvD.e23=tempPtr->e23;tempBvD.e24=tempPtr->e24;tempBvD.e34=tempPtr->e34; 
				} else {
					if (info4D.solveType4D == 3) { // Random
						chooser = rand()%6 + 1; // Choose one of the six planes at random, but rotate in the correct direction
					} else {
						// This is selected by the keys option. The only allowed planes of rotation are those
						// selectable by the keyboare, i.e. the canonical planes.
						chooser = whichbiv; // Choose the best plane and rotate in the correct direction.
					}
					switch (chooser) {
					case 1: tempBvD.e12 = signR(tempPtr->e12); break;
					case 2: tempBvD.e13 = signR(tempPtr->e13); break;
					case 3: tempBvD.e14 = signR(tempPtr->e14); break;
					case 4: tempBvD.e23 = signR(tempPtr->e23); break;
					case 5: tempBvD.e24 = signR(tempPtr->e24); break;
					case 6: tempBvD.e34 = signR(tempPtr->e34); break;
					default: break;
					}
				}
				trackbI.rotangle = info4D.kbRotation;
				kbSpeed(); // This alters the speed at which the figure rotates during autosolve, according to kb input
			}
			// if (escaping)
			if (info4D.escRotation > 0.0) {
				if ( !(info4D.solvangle1 == 0.0 && info4D.solvangle2 == 0.0 )) {
					if (info4D.firstEscape || (xxxtime - info4D.startEscapeTime) >= 2.0) {
						tempPtr = whichang == 1 ? &info4D.solvBiv2:&info4D.solvBiv1; // Choose the plane with the smaller difference.

						calcNewBivectorForEscape( tempPtr, COSINE45/*cosangle for 45 deg*/, &info4D.escapeBiv);
						calcRotorFromBivectorAngle(&info4D.escapeBiv, info4D.escRotation, &info4D.escapeRotor); /* angle of rotation to escape*/
						info4D.startEscapeTime = xxxtime;
						info4D.firstEscape = 0;
					}
					gpOfTwoComplexRotors( &info4D.trueStartRotTarg,&info4D.escapeRotor, &tempTargRotor4D); // Note order

					info4D.cumulativeAngularEscape += info4D.escRotation; // need escape angle
					copyRotor(&tempTargRotor4D,&info4D.trueStartRotTarg);
				}
			} // if escaping
			

			calcRotorFromBivectorAngle(&tempBvD,trackbI.rotangle,&info4D.figRotor);

			gpOfTwoComplexRotors( &info4D.trueStartRotFig,&info4D.figRotor, &tempFigRotor4D); // Note order

			rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &tempFigRotor4D, info4DFig.rotatedVerts[0]);
			rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &tempFigRotor4D, info4DFig.rotatedCellNormals[0]);

			//////////////// This is where the target is calculated
			rotateManyVectorsByComplexRotor(info4D.fig->vertex, info4D.fig->numVerts, &info4D.trueStartRotTarg, info4DTarg.rotatedVerts[0]);
			rotateManyVectorsByComplexRotor(info4D.fig->cellNormal, info4D.fig->numCells, &info4D.trueStartRotTarg, info4DTarg.rotatedCellNormals[0]);
			/////////////////////////////////////////////////////////

			copyRotor(&tempFigRotor4D, &info4D.trueStartRotFig);
			tempVal = myNormaliseRotor(&info4D.trueStartRotFig); // Make sure this doesn't creep into instability.

			calcDotProdsOfPointsWithUserNormal4D(&info4DFig);
			calcEdgeLambda4D(&info4DFig, doStereo);
			calcDotProdsOfPointsWithUserNormal4D(&info4DTarg);
			calcEdgeLambda4D(&info4DTarg, doStereo);

			project4Dto3DStereo2C(&info4D, &info4DFig, (doStereo ? 1 : 0));
			project4Dto3DStereo2C(&info4D, &info4DTarg,(doStereo ? 2 : 0));

			calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);

			// Now to calculate how close we are to a solution.
			// The rotor defining the target position is info4D.trueStartRotTarg
			// The rotor defining the figure position is info4D.trueStartRotFig
			// The rotor defining the path from figure position to target position is:
			//		inverse(info4D.trueStartRotFig) *geom prod* info4D.trueStartRotTarg
			// (in words: undo the Fig position, then apply the target position).

			// Now get the inverse of trueStartRotFig in temprotor4D
			tempRotor4D.scalar=  info4D.trueStartRotFig.scalar; tempRotor4D.b.e12 = -info4D.trueStartRotFig.b.e12;
			tempRotor4D.b.e13 = -info4D.trueStartRotFig.b.e13;  tempRotor4D.b.e14 = -info4D.trueStartRotFig.b.e14;
			tempRotor4D.b.e23 = -info4D.trueStartRotFig.b.e23;  tempRotor4D.b.e24 = -info4D.trueStartRotFig.b.e24;
			tempRotor4D.b.e34 = -info4D.trueStartRotFig.b.e34;  tempRotor4D.e1234 =  info4D.trueStartRotFig.e1234;

			gpOfTwoComplexRotors( &tempRotor4D, &info4D.trueStartRotTarg, &info4D.solutionRotor); // Calculate the solution rotor.

			// Unfortunately I don't know how to decompose a complex rotor into two simple rotors, so I
			// convert the rotor into a rotation matrix and solve the eigenvalue problem. There must be a better way but
			// at least it works.
			createRotMatFromRotor(&info4D.solutionRotor); // This creates a rotation matrix sqm from the solution rotor.
			sqm.grammSchmidt(); // This stops the single precision arithmetic from diverging (I hope)

			solvres = sqm.solveRotMat(eValue1, eValue2, evec1, evec2, denom1, denom2); // Get the eigenvalues and vectors of sqm.

			// The solution is from the eigenblades of the solution rotor.
			// I haven't discovered a way of getting the eigenblades from the rotor, so the rotor is converted into a rotation 
			// matrix and the eigenvalues and vectors are computed.
			// ev1 and ev2 can be formed into a bivector that defines the first eigenblade
			// ev3 and ev4 can be formed into a bivector that defines the second eigenblade
			// The corresponding eigenvalues give us the rotation angles in the eigenblades.
			ev1[0] = evec1[0].real(); ev1[1] = evec1[1].real(); ev1[2] = evec1[2].real(); ev1[3] = evec1[3].real();
			myNormaliseVector4D(ev1); 
			ev2[0] = evec1[0].imag(); ev2[1] = evec1[1].imag(); ev2[2] = evec1[2].imag(); ev2[3] = evec1[3].imag();
			myNormaliseVector4D(ev2);
			ev3[0] = evec2[0].real(); ev3[1] = evec2[1].real(); ev3[2] = evec2[2].real(); ev3[3] = evec2[3].real();
			myNormaliseVector4D(ev3);
			ev4[0] = evec2[0].imag(); ev4[1] = evec2[1].imag(); ev4[2] = evec2[2].imag(); ev4[3] = evec2[3].imag();
			myNormaliseVector4D(ev4);

			info4D.solvangle1 = angleFromCosSin(eValue1.real(), eValue1.imag());
			info4D.solvangle2 = angleFromCosSin(eValue2.real(), eValue2.imag());

			currentAngle = fabs(info4D.solvangle1) + fabs(info4D.solvangle2);

			calcNormalBivector4DFromVectors(ev2,ev1,&info4D.solvBiv1);
			calcNormalBivector4DFromVectors(ev4,ev3,&info4D.solvBiv2);

			if (currentAngle <= ACCURACYANGLE4D) { // Is the figure close enough to the target to be a success.
				state4DGamePlay = justSucceeded4D;
				info4D.successTime = xxxtime;
			}

			//The following code is an attempt to improve the 'debug display', which shows the two solution bivectors and angles.
			maxval1 = 0;
			maxval2 = 0;
			if (fabs(info4D.solvBiv1.e12) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e12); whichbiv1 = 1;}
			if (fabs(info4D.solvBiv1.e13) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e13); whichbiv1 = 2;}
			if (fabs(info4D.solvBiv1.e14) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e14); whichbiv1 = 3;}
			if (fabs(info4D.solvBiv1.e23) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e23); whichbiv1 = 4;}
			if (fabs(info4D.solvBiv1.e24) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e24); whichbiv1 = 5;}
			if (fabs(info4D.solvBiv1.e34) > maxval1) {maxval1 = fabs(info4D.solvBiv1.e34); whichbiv1 = 6;}

			if (fabs(info4D.solvBiv2.e12) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e12); whichbiv2 = 1;}
			if (fabs(info4D.solvBiv2.e13) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e13); whichbiv2 = 2;}
			if (fabs(info4D.solvBiv2.e14) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e14); whichbiv2 = 3;}
			if (fabs(info4D.solvBiv2.e23) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e23); whichbiv2 = 4;}
			if (fabs(info4D.solvBiv2.e24) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e24); whichbiv2 = 5;}
			if (fabs(info4D.solvBiv2.e34) > maxval2) {maxval2 = fabs(info4D.solvBiv2.e34); whichbiv2 = 6;}

			// Work out the best canonical unit bivector to use.
			// This is done by finding the largest component ( of e12...e34) and multiplying by the angle
			// This is a rough calculation, not a 'correct' calculation
			// This solution is then highlighted in yellow on the debug screen as a possible guide to the user
			// if he is using keyboard input
			if (maxval1*fabs(info4D.solvangle1) >= maxval2*fabs(info4D.solvangle2)) {
				whichang=1; 
				whichbiv = whichbiv1;
			} else {
				whichang=2; 
				whichbiv = whichbiv2;
			}
			// The next bit calculates the scalar product of the current solution plane 1 with the previous solution plane 1
			maxval1 = // re-use maxval to calculate something else: the cosine of the angle between the planes.
				info4D.solvBiv1.e12 * info4D.prevSolvBiv1.e12 +
				info4D.solvBiv1.e13 * info4D.prevSolvBiv1.e13 +
				info4D.solvBiv1.e14 * info4D.prevSolvBiv1.e14 +
				info4D.solvBiv1.e23 * info4D.prevSolvBiv1.e23 +
				info4D.solvBiv1.e24 * info4D.prevSolvBiv1.e24 +
				info4D.solvBiv1.e34 * info4D.prevSolvBiv1.e34;
			if (fabs(maxval1) > 0.7) { // current solvbiv1 is approximately the same plane as the previous solvbiv1
				// Therefore should be displayed in the same display position
				info4D.displayPositionOfSolvBiv1 = info4D.prevDisplayPositionOfSolvBiv1;
			} else { // current solvbiv1 is approximately the same plane as previous solvbiv2, so switch positions.
				info4D.displayPositionOfSolvBiv1 = 3 - info4D.prevDisplayPositionOfSolvBiv1; // toggle 1 and 2
			}
			// Set the previously yellow field to the background colour
			if (prevwhichang == 1) {
				if (info4D.prevDisplayPositionOfSolvBiv1 == 1) {
					soln1Plane[prevwhichbiv]->color(FL_BACKGROUND2_COLOR);
				} else {
					soln2Plane[prevwhichbiv]->color(FL_BACKGROUND2_COLOR);
				}
			} else {
				if (info4D.prevDisplayPositionOfSolvBiv1 == 1) {
					soln2Plane[prevwhichbiv]->color(FL_BACKGROUND2_COLOR);
				} else {
					soln1Plane[prevwhichbiv]->color(FL_BACKGROUND2_COLOR);
				}
			}
			// Set the solution field to yellow
			if (whichang == 1) {
				if (info4D.displayPositionOfSolvBiv1 == 1) {
					soln1Plane[whichbiv]->color(FL_YELLOW);
				} else {
					soln2Plane[whichbiv]->color(FL_YELLOW);
				}
			} else {
				if (info4D.displayPositionOfSolvBiv1 == 1) {
					soln2Plane[whichbiv]->color(FL_YELLOW);
				} else {
					soln1Plane[whichbiv]->color(FL_YELLOW);
				}
			}
			if (dbg4Dwindow.visible()) {
				showVec3(trackbI.normalisedCurr, &mousePosnVector[0]);
				showRotor( &info4D.trueStartRotFig, &figPosition[0] );
				showRotor( &info4D.trueStartRotTarg, &targPosition[0] );
				if (info4D.escRotation != 0.0) sprintf(dispres,"%9.5f",info4D.escRotation*M_RADIANS_TO_DEGREES); else dispres[0] = '\0';
				escAngleOut->value(dispres);

				if (info4D.displayPositionOfSolvBiv1 == 1) {
					showAngle( info4D.solvangle1, &soln1Plane[0]);
					showBiv( &info4D.solvBiv1, &soln1Plane[1]); 
					showAngle( info4D.solvangle2, &soln2Plane[0]);
					showBiv( &info4D.solvBiv2, &soln2Plane[1]); 
				} else {
					showAngle( info4D.solvangle1, &soln2Plane[0]);
					showBiv( &info4D.solvBiv1, &soln2Plane[1]); 
					showAngle( info4D.solvangle2, &soln1Plane[0]);
					showBiv( &info4D.solvBiv2, &soln1Plane[1]); 
				}
				if (trackbI.rotangle != 0.0) {
					showAngle( trackbI.rotangle, &mouseKBMove[0]);
					showBiv( &tempBvD, &mouseKBMove[1]); 
				}
								// The time it took to solve the problem, in seconds
				sprintf(dispres,"%8.0f",xxxtime);
				timeTaken->value(dispres);

				// This is the total angular distance traveled by the figure
				sprintf(dispres,"%7.2f",info4D.cumulativeAngularTravel*M_RADIANS_TO_DEGREES);
				angDistTrav->value(dispres);

				sprintf(dispres,"%9.1f",info4D.cumulativeAngularEscape*M_RADIANS_TO_DEGREES);
				cumulEscAng->value(dispres);
			}
			// The next few lines are to store info about the current display so that the next display can be more continuous.
			copyBivector (&info4D.solvBiv1, &info4D.prevSolvBiv1);
			prevwhichang = whichang;
			prevwhichbiv = whichbiv;
			info4D.prevDisplayPositionOfSolvBiv1 = info4D.displayPositionOfSolvBiv1;
			info4D.prevangle = currentAngle;
			info4D.cumulativeAngularTravel += fabs(trackbI.rotangle);

			break;
		case justSucceeded4D:
			calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);
			if (info4D.autosolve4D == autoSolving) {
				
				clock_gettime(CLOCK_REALTIME, &ltinitial);
				
				
				//QueryPerformanceCounter(&tinitial); // Initialise the timer to time 5 secs to display the results.
			}

			info4D.firstEscape = 1;

			state4DGamePlay = haveSuccess4D;

			sumOfDiffs = fabs(info4D.initialAngularDifference1)+fabs(info4D.initialAngularDifference2); 
			info4D.requiredAngle = sumOfDiffs - ACCURACYANGLE4D;
			info4D.fspeed = info4D.requiredAngle*M_RADIANS_TO_DEGREES/info4D.successTime;
			info4D.faccuracy = 100.0*info4D.requiredAngle/info4D.cumulativeAngularTravel;
			info4D.fscore = info4D.faccuracy * info4D.fspeed;

			disp4DResults();

			break;
		case haveSuccess4D:
			calcFrustum (&info4D, &info4DFig, doStereo, numbers4D->value(),radiusOf4DSphere);

			if (info4D.autosolve4D == autoSolving) {
				if (xxxtime > 4.0) { // display the solution for 4 seconds then start a new puzzle.
					startNew4D();
				}
			}
			break;
		default:
			break;
		}
	default:
		break;
	}

	// The function above this line does calculations and also some debug output (text displays)
	// Below this line is the opengl output

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Set up the viewport for the left side of the screen

	// The half-screen width is W and the screen height is H
	// q is the width, within each half-screen, of figure display
	// B is the margin to the outside of figure display
	// d is the margin to the centre of the figure display
	// ( Hence q = w - b - d )
	// C is the height of the figure display
	// acc is the height of the strip at the top of the screen reserved for the accuracy display.
	// ( Hence c = H - acc)

	q = W;
	acc = 15;

	if (doStereo && state4DOverview == fourDGame) {
		cht = (H - acc)/2;
	} else {
		cht = H - acc;
	}

	// new version
	aspectRatio = (float)cht/(float)q;  // Aspect ratio = ht/width.

	if (aspectRatio >= 1.0) { // Tall and thin
		glViewport(0, 0,	// Specify the lower left corner of the viewport, x and y.
			q, cht);		// Specify the width and height of the viewport.
		info4D.frustum_topf *= aspectRatio;
		info4D.frustum_botf *= aspectRatio;
	} else { // short and fat
		glViewport(q-cht, 0,	// Specify the lower left corner of the viewport, x and y.
			cht, cht);		// Specify the width and height of the viewport.
	}

	///////////////////////// End of new version

	// Now to do the left sided display, The viewport depends on if this is gameplay and stereo
	// if both gameplay and stereo, we have four viewports where the stereo figure is in the top two
	// and the stereo target is in the bottom two.
	//

	glMatrixMode(GL_PROJECTION); // This sets the viewing frustrum.
	glLoadIdentity(); // sets the projection matrix to the identity
	//glGetIntegerv(GL_VIEWPORT, viewport);
	// Shift the frustum to correct for the position of the object
	if (doStereo) {
		info4D.frustum_ag = info4D.frustum_ag - info4D.rightEyeX3D2D;
		info4D.frustum_bg = info4D.frustum_bg - info4D.rightEyeX3D2D;
	}

	// Implement the frustum for the left screen
	glFrustum(
		info4D.frustum_ag , 
		info4D.frustum_bg ,
		info4D.frustum_botf,
		info4D.frustum_topf,
		info4D.frustum_near, // near
		info4D.frustum_far); // far
	//sptr += sprintf(sptr, "LHScreen l=%8.4f r=%8.4f b=%8.4f t=%8.4f n=%8.4f f=%8.4f\n",info4D.frustum_ag,info4D.frustum_bg,
	//	info4D.frustum_botf,info4D.frustum_topf,info4D.frustum_near,info4D.frustum_far);
	//sptr += sprintf(sptr,"VP %d, 0, %d, %d\n",0,q,c);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0, 0, -info4D.projectDist3D2D);
	glEnable(GL_DEPTH_TEST);
	glDisable(GL_LIGHTING);

	//+++===================================================================================================
	switch (state4DOverview) {
	case fourDDemo:
		if (info4D.currentCellInWireframe >= info4D.fig->numCells) info4D.currentCellInWireframe = info4D.fig->numCells-1;
		switch (state4DDisplayType) {
		case directus4D:
			/////////////////////////////////////////// Draw lhs
			sptr += sprintf(sptr," :To draw faces 4D Demo:\n");
			drawFaces4D(&info4DFig,numbers4D->value(),0,(int)rightEyeLeftScreenStereo * doStereo); // LHS solid
			if (wireFrame4D->value()) {
				drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo * doStereo); // LHS wireframe
			}
			if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); ////////////////// Draw RHS
			if (doStereo) {
				glMatrixMode(GL_PROJECTION);
				glLoadIdentity();
				glFrustum(
					-info4D.frustum_bg ,
					-info4D.frustum_ag , 
					info4D.frustum_botf,
					info4D.frustum_topf,
					info4D.frustum_near,  // near
					info4D.frustum_far ); // far

				glMatrixMode(GL_MODELVIEW);
				glLoadIdentity();
				glTranslatef(0, 0, -info4D.projectDist3D2D);
			}
			if (!(wireFrame4D->value() && wireFrameOnly4D->active() && wireFrameOnly4D->value())) {
				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)leftEyeRightScreenStereo * doStereo); // RHS solid, unless it has been excluded by user choices.
			}
			if (wireFrame4D->value()) {
				drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo * doStereo); // RHS wireframe
			}
			break;
		default:
			break;
		}
		break;
	case fourDGame:
		switch (state4DGamePlay) {
		case waitingForNew4D:
			if (doStereo) {
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);

				if (aspectRatio >= 1) glViewport(0, cht+acc, q, cht); else glViewport(q-cht,cht+acc,cht,cht); ////////////////// Draw on lhS
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);

				if (aspectRatio >= 1) glViewport(0, cht, q, acc); else glViewport(q-cht,cht,cht,acc); ////////////////// Draw on lHS
				drawAccuracy4D(rightEyeLeftScreenStereo, 1.0);// 2nd param is accuracy value

				// Now to do rhs.
				glMatrixMode(GL_PROJECTION);
				glLoadIdentity();
				glFrustum(
					-info4D.frustum_bg ,
					-info4D.frustum_ag , 
					info4D.frustum_botf,
					info4D.frustum_topf,
					info4D.frustum_near,  // near
					info4D.frustum_far ); // far
				glMatrixMode(GL_MODELVIEW);
				glLoadIdentity();
				glTranslatef(0, 0, -info4D.projectDist3D2D);

				if (aspectRatio >= 1) glViewport(q,0,q,cht); else glViewport(q,0,cht,cht); ////////////////// Draw RHS
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				if (aspectRatio >= 1) glViewport(q,cht+acc,q,cht); else glViewport(q,cht+acc,cht,cht); ////////////////// Draw RHS
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				if (aspectRatio >= 1) glViewport(q,cht,q,acc); else glViewport(q,cht,cht,acc); ////////////////// Draw RHS
				drawAccuracy4D(leftEyeRightScreenStereo, 1.0);
			} else {
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0,noStereo); // lhs (this is non stereo)
				if (aspectRatio >= 1) glViewport(0, cht, q, acc); else glViewport(q-cht,cht,cht,acc); //top lhs (the accuracy)
				drawAccuracy4D(noStereo, 1.0); // LHS
				if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //low rhs
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
				if (aspectRatio >= 1) glViewport(q, cht, q, acc); else glViewport(q,cht,cht,cht); //top lhs (the accuracy)
				drawAccuracy4D(noStereo, 1.0);
			}
			break;
		case countingDown4D:

			if (info4D.currentCellInWireframe >= info4D.fig->numCells) info4D.currentCellInWireframe = info4D.fig->numCells-1;
			switch (state4DDisplayType) {
			case directus4D:
				/////////////////////////////////////////// Draw lhs

				if (doStereo) { // The viewport is currently set up draw on the left side of the screen at the bottom
					/////////////////////////////////////////// Draw lhs target at the bottom

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);
					drawFaces4D(&info4DTarg,0,1,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
					}
					/////////////////////////////////////////// Draw lhs figure at the top
					if (aspectRatio >= 1) glViewport(0, cht+acc, q, cht); else glViewport(q-cht,cht+acc,cht,cht); //top lhs (the accuracy)

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);
					drawFaces4D(&info4DFig,0,1,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
					}

					////////////////////// Get ready for drawing the other half of the stereo pair.
					glMatrixMode(GL_PROJECTION);
					glLoadIdentity();
					glFrustum(
						-info4D.frustum_bg ,
						-info4D.frustum_ag , 
						info4D.frustum_botf,
						info4D.frustum_topf,
						info4D.frustum_near,  // near
						info4D.frustum_far ); // far
					glMatrixMode(GL_MODELVIEW);
					glLoadIdentity();
					glTranslatef(0, 0, -info4D.projectDist3D2D);

					/////////////////////////////////////////// Draw rhs target at the bottom

					if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //bottom rt

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
					drawFaces4D(&info4DTarg,0,1,(int)leftEyeRightScreenStereo); // RHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // RHS wireframe if needed
					}

					/////////////////////////////////////////// Draw rhs figure at the top

					if (aspectRatio >= 1) glViewport(q, cht+acc, q, cht); else glViewport(q,cht+acc,cht,cht); //bottom rt

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
					drawFaces4D(&info4DFig,0,1,(int)leftEyeRightScreenStereo); // LHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // LHS wireframe if needed
					}

				} else { // not stereo.
					// Do the figure on the left hand side

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
					drawFaces4D(&info4DFig,0,1,noStereo); // LHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,noStereo); // LHS wireframe
					}
					// Do the target on the right hand side
					if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //top lhs (the accuracy)

					drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
					drawFaces4D(&info4DTarg,0,1,(int)noStereo); // RHS solid, no face numbers when counting down
					if (wireFrame4D->value()) {
						drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,noStereo); // RHS wireframe if needed
					}
				}
				break;
			default:
				break;
			}
			break;
		case  playing4D:

			if (doStereo) { // The viewport is currently set up draw on the left side of the screen at the bottom
				/////////////////////////////////////////// Draw lhs target at the bottom

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);

				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
				}
				/////////////////////////////////////////// Draw lhs figure at the top
				if (aspectRatio >= 1) glViewport(0, cht+acc, q, cht); else glViewport(q-cht,cht+acc,cht,cht); //top lhs (the accuracy)

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
				}

				////////////////////// Get ready for drawing the other half of the stereo pair.
				glMatrixMode(GL_PROJECTION);
				glLoadIdentity();
				glFrustum(
					-info4D.frustum_bg ,
					-info4D.frustum_ag , 
					info4D.frustum_botf,
					info4D.frustum_topf,
					info4D.frustum_near,  // near
					info4D.frustum_far ); // far
				glMatrixMode(GL_MODELVIEW);
				glLoadIdentity();
				glTranslatef(0, 0, -info4D.projectDist3D2D);

				/////////////////////////////////////////// Draw rhs target at the bottom

				if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //bottom rt

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)leftEyeRightScreenStereo); // RHS solid
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // RHS wireframe if needed
				}

				/////////////////////////////////////////// Draw rhs figure at the top

				if (aspectRatio >= 1) glViewport(q, cht+acc, q, cht); else glViewport(q,cht+acc,cht,cht); //bottom rt

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,(int)leftEyeRightScreenStereo); // LHS solid
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // LHS wireframe if needed
				}


				///// Draw accuracy
				if (aspectRatio >= 1) glViewport(q, cht, q, acc); else glViewport(q,cht,cht,acc); //rhs accuracy
				drawAcc4D(currentAngle);
				if (aspectRatio >= 1) glViewport(0, cht, q, acc); else glViewport(q-cht,cht,cht,acc); //lhs (the accuracy)
				drawAcc4D(currentAngle);

			} else { // Non stereo: 
				// Do the figure on the left hand side
				sptr += sprintf(sptr," :To draw faces 4D Playing:\n");
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,noStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,noStereo); // LHS wireframe
				}

				// Do the target on the right hand side
				if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //top lhs (the accuracy)
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);

				if (!(wireFrame4D->value() && wireFrameOnly4D->active() && wireFrameOnly4D->value())) {
					drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)leftEyeRightScreenStereo * doStereo); // RHS solid, unless it has been excluded by user choices.
				}
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo * doStereo); // RHS wireframe
				}

				// set the viewport for the purpose of doing the raster text output
				if (aspectRatio >= 1) glViewport(0, 0, q, cht); else glViewport(0,0,cht,cht); 
				sprintf(dispres, "Angle:%6.1f", currentAngle*M_RADIANS_TO_DEGREES);
				glTextOutput(0.7, 0.9, dispres, twhite);
				sprintf(dispres,"Time:%8.0f",xxxtime);
				glTextOutput(0.7, 0.8, dispres, twhite);

				// Do the accuracy on the LHS
				if (aspectRatio >= 1.0) glViewport(0, cht, q, acc); else glViewport(q-cht, cht, cht, acc);
				drawAcc4D(currentAngle);
			}
			break;
		case justSucceeded4D:
		case haveSuccess4D:
			if (doStereo) { // The viewport is currently set up draw on the left side of the screen at the bottom
				/////////////////////////////////////////// Draw lhs target at the bottom

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);

				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
				}
				/////////////////////////////////////////// Draw lhs figure at the top
				if (aspectRatio >= 1) glViewport(0, cht+acc, q, cht); else glViewport(q-cht,cht+acc,cht,cht); //top lhs (the accuracy)

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, rightEyeLeftScreenStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,(int)rightEyeLeftScreenStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)rightEyeLeftScreenStereo); // LHS wireframe if needed
				}

				////////////////////// Get ready for drawing the other half of the stereo pair.
				glMatrixMode(GL_PROJECTION);
				glLoadIdentity();
				glFrustum(
					-info4D.frustum_bg ,
					-info4D.frustum_ag , 
					info4D.frustum_botf,
					info4D.frustum_topf,
					info4D.frustum_near,  // near
					info4D.frustum_far ); // far
				glMatrixMode(GL_MODELVIEW);
				glLoadIdentity();
				glTranslatef(0, 0, -info4D.projectDist3D2D);

				/////////////////////////////////////////// Draw rhs target at the bottom

				if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //bottom rt

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)leftEyeRightScreenStereo); // RHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // RHS wireframe if needed
				}

				/////////////////////////////////////////// Draw rhs figure at the top

				if (aspectRatio >= 1) glViewport(q, cht+acc, q, cht); else glViewport(q,cht+acc,cht,cht); //bottom rt

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, leftEyeRightScreenStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,(int)leftEyeRightScreenStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,(int)leftEyeRightScreenStereo); // LHS wireframe if needed
				}

				///// Draw accuracy
				if (aspectRatio >= 1) glViewport(q, cht, q, acc); else glViewport(q,cht,cht,acc); //rhs accuracy
				drawAcc4D(currentAngle);
				if (aspectRatio >= 1) glViewport(0, cht, q, acc); else glViewport(q-cht,cht,cht,acc); //lhs (the accuracy)
				drawAcc4D(currentAngle);

			} else { // Non stereo: 
				// Do the figure on the left hand side
				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
				drawFaces4D(&info4DFig,numbers4D->value(),0,noStereo); // LHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DFig,info4D.currentCellInWireframe,noStereo); // LHS wireframe
				}

				// Do the target on the right hand side
				if (aspectRatio >= 1) glViewport(q, 0, q, cht); else glViewport(q,0,cht,cht); //top lhs (the accuracy)

				drawSurroundCircle4(&info4D, trackbI.currMouse4D[2] <= 0.0 ? 1:0, noStereo);
				drawFaces4D(&info4DTarg,numbers4D->value(),0,(int)noStereo); // RHS solid, no face numbers when counting down
				if (wireFrame4D->value()) {
					drawWireFrame4D(&info4DTarg,info4D.currentCellInWireframe,noStereo); // RHS wireframe if needed
				}

				if (aspectRatio >= 1) glViewport(0, 0, q, cht); else glViewport(0,0,cht,cht); //top lhs (the accuracy)
				sprintf(dispres,"Required angle:%7.2f %c",info4D.requiredAngle*M_RADIANS_TO_DEGREES,176);
				glTextOutput(0.7, 0.92, dispres, twhite);

				sprintf(dispres,"Time:%8.2f s",info4D.successTime);
				glTextOutput(0.7, 0.84, dispres, twhite);
				sprintf(dispres,"Speed:%7.2f %c/s",info4D.fspeed,176);
				glTextOutput(0.74, 0.76, dispres, tredgreen);


				sprintf(dispres,"Accuracy:%7.2f%%",info4D.faccuracy);
				glTextOutput(0.75, 0.68, dispres, tredgreen);
				sprintf(dispres,"Score:%8.2f", info4D.fscore);
				glTextOutput(0.79, 0.60, dispres, twhite);

				// Do the accuracy on the LHS
				if (aspectRatio >= 1.0) glViewport(0, cht, q, acc); else glViewport(q-cht, cht, cht, acc);
				drawAcc4D(currentAngle);
			}
			break;
		default:
			break;
		}
	default:
		break;
	}
	glutSwapBuffers();
	glPopAttrib();
}

void displayDebugResults3D() {
	struct Bivector4D tempBvD; // Use this only to display in the debug window
	struct Rotor4D tempRot; // Use this only to display in the debugt window.
	char dispres[20];
	if (dbg4Dwindow.visible()) {
		tempRot.e1234 = 0.0;
		tempRot.b.e14 = 0.0;tempRot.b.e24 = 0.0;tempRot.b.e34 = 0.0;
		if (trackbI.rotangle != 0.0) {
			showVec3(trackbI.normalisedCurr, &mousePosnVector[0]);

			tempRot.b.e12 =  info3DFig.trueStartQuat[3]; // z axis
			tempRot.b.e13 = -info3DFig.trueStartQuat[2]; // y axis
			tempRot.b.e23 =  info3DFig.trueStartQuat[1]; // z axis
			tempRot.scalar = info3DFig.trueStartQuat[0]; // scalar
			showRotor( &tempRot, &figPosition[0]);
		}

		tempRot.b.e12 =  info3DTarg.trueStartQuat[3]; // z axis
		tempRot.b.e13 = -info3DTarg.trueStartQuat[2]; // y axis
		tempRot.b.e23 =  info3DTarg.trueStartQuat[1]; // z axis
		tempRot.scalar = info3DTarg.trueStartQuat[0]; // scalar
		showRotor( &tempRot, &targPosition[0]);

		sprintf(dispres,"%9.5f",info3D.escapeAngle*M_RADIANS_TO_DEGREES);
		escAngleOut->value(dispres);

		if (trackbI.rotangle != 0.0) {
			showAngle( trackbI.rotangle, &mouseKBMove[0]);
			tempBvD.e12 =  trackbI.axis[2];  // z axis
			tempBvD.e13 = -trackbI.axis[1];  // y axis
			tempBvD.e23 =  trackbI.axis[0];  // x axis
			tempBvD.e14 = 0.0;tempBvD.e24 = 0.0;tempBvD.e34 = 0.0;
			showBiv(&tempBvD,  &mouseKBMove[1]);
		}

		if (trackbI.rotangle != 0.0 || info3D.escapeAngle != 0.0) {
			showAngle( info3D.diffAngle, &soln1Plane[0]);
			tempBvD.e12 =  info3D.diffAxis[2];  // z axis
			tempBvD.e13 = -info3D.diffAxis[1];  // y axis
			tempBvD.e23 =  info3D.diffAxis[0];  // x axis
			tempBvD.e14 = 0.0;tempBvD.e24 = 0.0;tempBvD.e34 = 0.0;
			showBiv(&tempBvD, &soln1Plane[1]); 
		}

		showAngle( 0.0, &soln2Plane[0]);
		tempBvD.e12 = 0.0;tempBvD.e13 = 0.0;tempBvD.e23 = 0.0;
		tempBvD.e14 = 0.0;tempBvD.e24 = 0.0;tempBvD.e34 = 0.0;
		showBiv(&tempBvD, &soln2Plane[1]); 

		sprintf(dispres,"%9.1f",info3D.cumulativeAngularTravel*M_RADIANS_TO_DEGREES);
		angDistTrav->value(dispres);

		// The time it took to solve the problem, in seconds
		sprintf(dispres,"%8.0f",xxxtime);
		timeTaken->value(dispres);

		sprintf(dispres,"%8.1f",info3D.cumulativeEscape*M_RADIANS_TO_DEGREES);
		cumulEscAng->value(dispres);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void displayResults3D() {
	char counting[100];
	float value, value1;

	sprintf(counting,"Required angle:%6.2f %c",
		(fabs(info3D.initialAngularDifference) - ACCURACYWINANGLE3D)*M_RADIANS_TO_DEGREES,176);
	glTextOutput(0.80, ANGULARDISTANCEYVALUE, counting, twhite);
	if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}
	sprintf(counting, "Time:%6.2f s", info3D.successTime);
	glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.1, counting, twhite);
	if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}
	sprintf(counting, "Speed:%6.2f %c/s",info3D.finalScore*M_RADIANS_TO_DEGREES,176);
	glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.2, counting, tredgreen);
	if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}

	if (info3D.cumulativeAngularTravel > 0.0) { // Display error only if calculation can be done
		value = (fabs(info3D.initialAngularDifference) - ACCURACYWINANGLE3D)/info3D.cumulativeAngularTravel;// Value not yet a percentage
	} else {
		value = 0.0;
	}

	if (info3D.cumulativeEscape > 0.0 ) {
		sprintf(counting, "Escape:%6.1f %c", info3D.cumulativeEscape*M_RADIANS_TO_DEGREES, 176);
		glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.57, counting, twhite);
		if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}
	}

	sprintf(counting, "Accuracy:%5.1f%%", value*100);
	glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.3, counting, tredgreen);
	if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}

	glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.4,"Speed x Accuracy",twhite);
	value1 = value * 100 * info3D.finalScore*M_RADIANS_TO_DEGREES; // Units are degrees per second, mult by accuracy
	sprintf(counting, "Score:%7.1f", value1);
	glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.5, counting, twhite);
	if (state3DGamePlay != haveSuccess3D) {if (pFile) fputs(counting,pFile);}

	if (state3DGamePlay != haveSuccess3D) displayDebugResults3D();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void redraw3DVersion2(float xxtime)
{
	float tempVal;//,templ1,templ2;
	float oscAngle,propFalseStartTarg,propFalseStartFig;
	float tempProportion;
	float tempQuat[4], newTrueStartQuat[4];
	float tempColTop[3],tempColBottom[3],unusedRej[3],tempAxis[3];
	int intersectionsFig, intersectionsTarg, itwasnegative;
	char dispNum[5];
	char txtout[200];
	char *sptr = txtout;
	unsigned char myLineCols[3] = {0,0,0};

	// Tempcol is used to give the colour of the intersecting plane on the lhs
	tempColTop[0] = 0.5;tempColTop[1] = 0.4;tempColTop[2] = 0.3;
	tempColBottom[0] = 0.3;tempColBottom[1] = 0.4;tempColBottom[2] = 0.5;

	mouseCalcs();

	switch (state3DOverview) {
	case threeDDemo:
		oscAngle = angleFromTime3D(xxtime); //AngleFromTime3D also resets the demo rotation axis
		rotateVectors3D_BAA(oscAngle);
		break;
	case threeDGame:
		switch (state3DGamePlay) {
		case waitingForNew3D:
			break;
		case countingDown3D:
			if (xxtime <= COUNTDOWNDURATION ) {
				// We need to calculate a proportion of the false start angle
				tempVal = COUNTDOWNDURATION - xxtime;
				tempProportion = tempVal/COUNTDOWNDURATION;
				propFalseStartTarg = info3DTarg.falseStartAngle*tempProportion;
				createQuatFor3DRotation(info3DTarg.falseStartAxis,propFalseStartTarg,info3DTarg.falseStartQuat);
				// First apply the truestartquat, then the quaternion from the falsestartquat. This gives the required quaternion
				quatMult(info3DTarg.falseStartQuat,info3DTarg.trueStartQuat,tempQuat);
				// Rotate the target
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DTarg.rotatedVerts[0], tempQuat);
				//Now do the same for the figure.
				propFalseStartFig = info3DFig.falseStartAngle*tempProportion;
				createQuatFor3DRotation(info3DFig.falseStartAxis,propFalseStartFig,info3DFig.falseStartQuat);
				quatMult(info3DFig.falseStartQuat,info3DFig.trueStartQuat,tempQuat);
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DFig.rotatedVerts[0], tempQuat);
				info3D.displayNumber = 1 + floor(tempVal);
			} else {
				// Switch to game playing state.
				state3DGamePlay = playing3D;
				countdownOutput3D->color(FL_BACKGROUND_COLOR);
				countdownOutput3D->value("");
				countdownOutput3D->redraw();
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DTarg.rotatedVerts[0], info3DTarg.trueStartQuat);
				rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DTarg.rotatedFaceNormals[0][0], info3DTarg.trueStartQuat);
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DFig.rotatedVerts[0], info3DFig.trueStartQuat);
				rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DFig.rotatedFaceNormals[0][0], info3DFig.trueStartQuat);
				info3D.diffAngle = INACTIVEANGLE;
				info3D.cumulativeAngularTravel = 0.0;
				
				ltinitial.tv_sec = ltend.tv_sec;
				ltinitial.tv_nsec = ltend.tv_nsec;
				//tinitial.QuadPart = tend.QuadPart; // Zero the clock
			}
			break;
		case playing3D:
			// Get the quaternion representing the mouse movement -    mouseMoveQuat
			trackbI.horrible4DFlag = 0;
			mytrackball3D(&trackbI, &stateMouseState);
			if (trackbI.rotangle != trackbI.rotangle) {
				xxtime = 0.0;
				trackbI.rotangle = 1.0/xxtime; // Force a crash if rotangle is an indeterminate number.
			}
			if (trackbI.rotangle != 0.0) {
				// Must do a rotation of the figure
				// TrackbI.axis is the axis of rotation according to the trackball movement
				if (info3D.diffAngle != INACTIVEANGLE) {
					info3D.cumulativeAngularTravel += trackbI.rotangle;
				}
				// The following produces a quaternion that does the following:
				// 1: rotate to the current position (truestart) from the canonical position
				// 2: rotate according to the trackball
				// 3: store the final quat in tempquat
				quatMult(trackbI.myquat,info3DFig.trueStartQuat,tempQuat);
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DFig.rotatedVerts[0], tempQuat);
				rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DFig.rotatedFaceNormals[0][0], tempQuat);
				vcopy4(tempQuat,info3DFig.trueStartQuat);
			} else {
				// Zero rotation in here, so just use the existing trustartquat to rotate the figure
				// angularDiff = differenceBetweenTwoQuats(float *q1, float *q2, float *qDiff, float *qAxis)
				// If angularDiff <= solutionAngle then {Stop the game and display the results}
				// else { display the fig and targ and also the distance from solution graphic.

				// Temporarily use trustartquat.
				rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DFig.rotatedVerts[0], info3DFig.trueStartQuat);
				rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DFig.rotatedFaceNormals[0][0], info3DFig.trueStartQuat);
			}
			// Now calculate the angular difference between the figure and the target.
			// remember that diffangle is a half angle, and needs to be doubled to get the actual angle.
			tempVal = differenceBetweenTwoQuats(info3DFig.trueStartQuat,info3DTarg.trueStartQuat,info3D.diffQuat,info3D.diffAxis);
			info3D.diffAngle = correctAngle(2.0*tempVal);

			// this does the escaping in 3D
			if (info3D.escapeAngle > 0.0) {
				if (info3D.diffAngle != 0.0) {
					// There is a small bug in this logic which sometimes causes the target to 'escape' to a position
					// that is actually closer to the figure.
					itwasnegative = vangle3D(info3D.baseAxisOfDemo,  M_PI_4, unusedRej, tempAxis, 1);
					if (info3D.diffAngle < 0.0) {
						createQuatFor3DRotation(tempAxis, -info3D.escapeAngle, tempQuat);
					} else {
						createQuatFor3DRotation(tempAxis, info3D.escapeAngle, tempQuat);
					}
					quatMult( tempQuat, info3DTarg.trueStartQuat, newTrueStartQuat );
					myNormaliseVector4D(newTrueStartQuat);
					vcopy4(newTrueStartQuat,info3DTarg.trueStartQuat);
					info3D.firstEscape = 0;
					info3D.cumulativeEscape += fabs(info3D.escapeAngle);
				}
			}

			// Rotate the target.
			rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DTarg.rotatedVerts[0], info3DTarg.trueStartQuat);
			rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DTarg.rotatedFaceNormals[0][0], info3DTarg.trueStartQuat);

			if (fabs(info3D.diffAngle) <= ACCURACYWINANGLE3D) {
				// Win!!
				state3DGamePlay = justSucceeded3D;
				info3D.successTime = xxtime;
				info3D.finalScore = (fabs(info3D.initialAngularDifference) - ACCURACYWINANGLE3D )/xxtime;
			}

			displayDebugResults3D();
			break;
		case justSucceeded3D:
		case haveSuccess3D:
			rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DFig.rotatedVerts[0], info3DFig.trueStartQuat);
			rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DFig.rotatedFaceNormals[0][0], info3DFig.trueStartQuat);
			// Rotate the target.
			rotManyVec(info3D.fig->numVerts, info3D.fig->vertex, info3DTarg.rotatedVerts[0], info3DTarg.trueStartQuat);
			rotManyVec(info3D.fig->numFaces, info3D.fig->faceNormal, &info3DTarg.rotatedFaceNormals[0][0], info3DTarg.trueStartQuat);
			state3DGamePlay = haveSuccess3D;
			break;
		default:
			break;
		}
		break;
	default:
		break;
	}

	calcDotProdsOfPointsWithUserNormal3D(&info3DFig);
	calcEdgeLambda3D(&info3DFig);

	calcDotProdsOfPointsWithUserNormal3D(&info3DTarg);
	calcEdgeLambda3D(&info3DTarg);

	//fputs("Fig verts\n",pFile);dumpRotVertsToFile3D(&info3DFig);fputs("Targ verts\n",pFile);dumpRotVertsToFile3D(&info3DTarg);
	//sptr += sprintf(sptr,"Entering CalcIntersectionFace3DFig ");

	intersectionsFig = calcIntersectionFace3D(&info3DFig);
	intersectionsTarg = calcIntersectionFace3D(&info3DTarg);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glViewport(0, 0,	// Specify the lower left corner of the viewport, x and y.
		W, H);			// Specify the width and height of the viewport.
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity(); // sets the projection matrix to the identity
	gluPerspective(45,	// Specifies the field of view angle, in degrees, in the y direction. 
		viewport[2]*1.0/viewport[3], //Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).
		0.1,			//Specifies the distance from the viewer to the near clipping plane (always positive).
		100.0);			//Specifies the distance from the viewer to the near clipping plane (always positive).

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0, 0, -TRANSLATIONOF2DFIGURES);
	glEnable(GL_DEPTH_TEST);
	glDisable(GL_LIGHTING);

	//+++===================================================================================================
	switch (state3DOverview) {
	case threeDDemo:
		switch (state3DDisplayType) {
		case directus3D:
			/////////////////////////////////////////// Draw lhs
			drawFaces3D(&info3DFig,numbers3D->value(),0,0); // 1 makes the routine put face numbers on the faces
			drawEdges3D(&info3DFig);
			drawSurroundCircle3(tempColTop,tempColBottom,1.1,1,info3D.userPlaneDistance,info3D.userPlaneDeclension);
			drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);
			glViewport(W, 0, W, H); /////////////////// Draw RHS
			drawFaces3D(&info3DTarg,numbers3D->value(),0,0);// Zero suppresses the drawing of face numbers
			drawEdges3D(&info3DTarg);
			drawIntersectionPlane3D(&info3DTarg,0,numbers3D->value(),myLineCols); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
			break;
		case dimidium3D:
			/////////////////////////////////////////// Draw lhs
			drawFaces3D(&info3DFig,numbers3D->value(),0,0); // 1 makes the routine put face numbers on the faces
			drawEdges3D(&info3DFig);
			drawSurroundCircle3(tempColTop,tempColBottom,1.1,1,info3D.userPlaneDistance,info3D.userPlaneDeclension);
			glViewport(W, 0, W, H); /////////////////// Draw RHS
			drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
			break;
		case ludus3D:
			drawIntersectionPlane3D(&info3DFig,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
			glViewport(W, 0, W, H); /////////////////// Draw RHS
			drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
			break;
		default:
			break;
		}
		break;

	case threeDGame:
		if (state3DGamePlay == waitingForNew3D) {
			drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);
			//sptr += sprintf(sptr,"Waiting for new in redraw3D\n");
		} else if (state3DGamePlay == countingDown3D) {
			//sptr += sprintf(sptr,"Counting Dn in redraw3D\n");
			drawFaces3D(&info3DFig,0,0,1); // 0 makes the routine remove numbers on the faces
			drawEdges3D(&info3DFig);
			if (info3D.displayNumber != info3D.prevDisplayNumber) {
				sprintf(dispNum,"%2d",info3D.displayNumber);
				countdownOutput3D->value(dispNum);
			}
			info3D.prevDisplayNumber = info3D.displayNumber;
			drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);

			glViewport(W, 0, W, H);
			drawFaces3D(&info3DTarg,0,0,1); // 0 makes the routine remove numbers on the faces
			drawEdges3D(&info3DTarg);
		} else {
			switch (state3DDisplayType) {
			case directus3D:
				switch (state3DGamePlay) {
				case playing3D:
					drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);
					drawFaces3D(&info3DFig,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DFig);
					// Game is still in progress: display the angle and the time.
					drawAccuracy3D(info3D.diffAngle,xxtime,1); // last '1' means on the left
					glViewport(W, 0, W, H);
					drawFaces3D(&info3DTarg,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DTarg);
					// Game is still in progress: display the angle and the time.
					drawAccuracy3D(info3D.diffAngle,xxtime,0); // last zero means on the right
					break;
				case justSucceeded3D:
				case haveSuccess3D:
					drawFaces3D(&info3DFig,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DFig);
					// Draw the accuracy left
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,leftOnly);
					glViewport(W, 0, W, H);
					drawFaces3D(&info3DTarg,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DTarg);
					// Draw the accuracy right
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,rightOnly);
					glViewport(0, 0, W, H);
					displayResults3D();
					break;
				default:
					break;
				}
				break;
			case dimidium3D:
				switch (state3DGamePlay) {
				case playing3D:
					drawFaces3D(&info3DFig,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DFig);
					drawIntersectionPlane3D(&info3DFig,0,numbers3D->value(),myLineCols);
					drawAccuracy3D(info3D.diffAngle,xxtime,1); // last '1' means on the left
					drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);

					glViewport(W, 0, W, H);
					drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					drawAccuracy3D(info3D.diffAngle,xxtime,0); // last zero means on the right
					break;
				case justSucceeded3D:
				case haveSuccess3D:
					drawFaces3D(&info3DFig,numbers3D->value(),(info3D.fig->numVerts == 4),0); // 0 makes the routine remove numbers on the faces
					drawEdges3D(&info3DFig);
					drawIntersectionPlane3D(&info3DFig,0,numbers3D->value(),myLineCols);
					// Draw the accuracy left
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,leftOnly);
					glViewport(W, 0, W, H);
					drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					// Draw the accuracy right
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,rightOnly);
					glViewport(0, 0, W, H);
					displayResults3D();
					break;
				default:
					break;
				}
				break;
			case ludus3D:
				switch (state3DGamePlay) {
				case playing3D:
					drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);
					drawIntersectionPlane3D(&info3DFig,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					drawAccuracy3D(info3D.diffAngle,xxtime,1); // last '1' means on the left
					glViewport(W, 0, W, H); /////////////////// Draw RHS
					drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					drawAccuracy3D(info3D.diffAngle,xxtime,0); // last zero means on the right
					break;
				case justSucceeded3D:
				case haveSuccess3D:
					drawIntersectionPlane3D(&info3DFig,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,leftOnly);
					glViewport(W, 0, W, H); /////////////////// Draw RHS
					drawIntersectionPlane3D(&info3DTarg,1,numbers3D->value(),0); // First param is 'flattened', second is 'numbers', last param points to colour of lines or zero
					drawAccuracy2DNew(fabs(info3D.diffAngle*M_1_PI),0.0,rightOnly);
					glViewport(0, 0, W, H);
					displayResults3D();
					break;
				default:
					break;
				}
				break;
			default:
				break;
			}
		}
		break;
	default:
		sptr += sprintf(sptr,"Default in redraw3D\n");
		break;
	}

	glViewport(W, 0, W, H); /////////////////// Draw RHS
	if (0) glTextOutput(-0.2, -0.95, figNames[currFig3D],twhite); // Dont bother with figure names for now.
	glutSwapBuffers();
	glPopAttrib();

	if (sptr != txtout)
	{if (pFile) fputs(txtout,pFile);}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void newredraw(void)
{
	char * txtPtr;
	char debug[100];

	float xxangle;
	//float diff;
	float fullAngle;
	char counting[32];
	double diff;
	//double tempang  = ACCURACYWINANGLE;
	//double tempang1 = ACCURACYWINANGLE;
	//double tempang2 = ACCURACYWINANGLE;

	txtPtr = debug;
	glPushAttrib(GL_LIGHTING_BIT);

	
	clock_gettime(CLOCK_REALTIME, &ltend);
	//QueryPerformanceCounter(&tend);
	
	
	
	//diff = (float)(tend.QuadPart - tinitial.QuadPart);
	diff = dbl_timespec_diff(&ltinitial,&ltend);
	xxxtime = diff; // This is the time from initial to current time.
	//xxxtime = diff/floattfreq; // This is the time from initial to current time.

/* 	{
		if (pFile) {
			txtPtr += sprintf(txtPtr,"xxxtime %12.8f\n",xxxtime);
			fputs(debug,pFile);
		}
	}
 */	
	
	
	
	if (stateFourot == threeD) {
		switch (state3DOverview) {
		case threeDDemo:
			if (motionStateOfDemo3D != demoIsStopped) {
				savedXXTime3D = xxxtime;
			} else {
				xxxtime = savedXXTime3D;
			}
			break;
		case threeDGame:
			savedXXTime3D = xxxtime;
			break;
		default:
			break;
		}
		redraw3DVersion2(xxxtime);
		return;
	}

	if (stateFourot == fourD) {
		switch (state4DOverview) {
		case fourDDemo:
			if (motionStateOfDemo4D != demoIsStopped) {
				savedXXTime4D = xxxtime;
			} else {
				xxxtime = savedXXTime4D;
			}
			break;
		case fourDGame:
			savedXXTime4D = xxxtime;
			break;
		default:
			break;
		}

		int tempval;
		tempval = stereo4D->value();

		redraw4D(xxxtime,tempval);
		return;
	}

	if (stateFourot == twoD) {
		glDisable(GL_DEPTH_TEST);
		glDisable(GL_LIGHTING);
		intersection2DInfo.sides = currFig2D;
		intersection2DInfo.verts = figVerts2D[currFig2D - MIN_2D_SIDES];
		if (state2DOverview == twoDDemo) {
			if (motionStateOfDemo2D == demoIsMoving) savedXXTime2D = xxxtime; else xxxtime = savedXXTime2D;
			xxangle = angleFromTime2D(xxxtime);
			intersection2DInfo.angle2DMov = xxangle;
			xrotate2DFigure(&intersection2DInfo, movAndTargTogether); // float angle, int sides, float* verts, float *rotatedVerts)
			xxcalc2DIntersections(&intersection2DInfo, movAndTargTogether);
		} else if (state2DOverview == twoDGame) {
			if (state2DGamePlay == countingDown2D) {
				if (xxxtime <= COUNTDOWNDURATION ) {
					intersection2DInfo.angle2DTarg = intersection2DInfo.falseStartTarg +
						(intersection2DInfo.trueStartTarg-intersection2DInfo.falseStartTarg)*xxxtime/COUNTDOWNDURATION;
					intersection2DInfo.angle2DMov = intersection2DInfo.falseStartMov +
						(intersection2DInfo.trueStartMov-intersection2DInfo.falseStartMov)*xxxtime/COUNTDOWNDURATION;
					intersection2DInfo.countdownDispNum = COUNTDOWNDURATION - xxxtime;
					intersection2DInfo.displayNumber = 1 + floor(intersection2DInfo.countdownDispNum);
					xrotate2DFigure(&intersection2DInfo, movAndTargSeparately); // float angle, int sides, float* verts, float *rotatedVerts)
				} else {
					// Switch to game playing state.
					state2DGamePlay = playing2D;
					state2DGameDetail = notMovingMovendum;
					countdownOutput2D->color(FL_BACKGROUND_COLOR);
					countdownOutput2D->value("");
					countdownOutput2D->redraw();
					intersection2DInfo.angle2DMov = correctAngle(intersection2DInfo.trueStartMov);
					intersection2DInfo.angle2DTarg = correctAngle(intersection2DInfo.trueStartTarg);
					intersection2DInfo.angularDistance = correctAngle(intersection2DInfo.angle2DMov - intersection2DInfo.angle2DTarg);
					intersection2DInfo.prevAngularDistance = intersection2DInfo.angularDistance;
					intersection2DInfo.cumulativeAngularMotion = 0.0; // Initialise
					//tinitial.QuadPart = tend.QuadPart; // Initialise
					
					ltinitial.tv_sec = ltend.tv_sec;
					ltinitial.tv_nsec = ltend.tv_sec;
					
				}

				//	txtPtr += sprintf(txtPtr,"xxtime=%4.2f dispnum=%5.2f (%d) angl=%5.2f angr=%5.2f\n",
				//		xxtime,intersection2DInfo.countdownDispNum,state2DGamePlay,intersection2DInfo.angle2DMov,intersection2DInfo.angle2DTarg);
				//	fputs(debug,pFile);
			} else if (state2DGamePlay == playing2D){
				// This is the 2D gameplay state
				if (state2DGameDetail == justStartedMoving) {
					// What we need to do here is:
					intersection2DInfo.angleMovOriginal = intersection2DInfo.angle2DMov;
					intersection2DInfo.mouseAngleStart = intersection2DInfo.mouseAngleNow;
					state2DGameDetail = movingMovendum;

				} else if (state2DGameDetail == movingMovendum || state2DGameDetail == justSucceeded){
					// Calculate current angular distance
					xxangle = intersection2DInfo.angleMovOriginal + 
						(intersection2DInfo.mouseAngleNow - intersection2DInfo.mouseAngleStart);
					intersection2DInfo.angle2DMov = xxangle;
					intersection2DInfo.angularDistance = correctAngle(xxangle - intersection2DInfo.angle2DTarg); // the angular distance between the target and the movendum
					//tempang2 = intersection2DInfo.angularDistance;
					if (state2DGameDetail == movingMovendum) {
						// Here if we are still moving.
						if (fabs(intersection2DInfo.angularDistance) <= ACCURACYWINANGLE) {
						//tempang1 = fabs(tempang2);
						//if (fabs(intersection2DInfo.angularDistance) <= tempang) {
						//if (tempang1 <= tempang) {
							// succeeded. Game over.
							state2DGameDetail = justSucceeded;
						} else if (( intersection2DInfo.angularDistance < 0 && intersection2DInfo.prevAngularDistance > 0) ||
							( intersection2DInfo.angularDistance > 0 && intersection2DInfo.prevAngularDistance < 0)) {
							// If here, the angular distance has just changed signs.
							// If the angular values are small enough, assume that we crossed the solution point, hence award a success
							if (fabs(intersection2DInfo.angularDistance - intersection2DInfo.prevAngularDistance) <= M_PI_2) {
								state2DGameDetail = justSucceeded;
							}
						}
						if (state2DGameDetail == justSucceeded) {
							intersection2DInfo.successTime = xxxtime;
							// Calculate the score: The required angular distance divided by time.
							intersection2DInfo.finalScore = (fabs(correctAngle (
								correctAngle(intersection2DInfo.trueStartMov) -
								correctAngle(intersection2DInfo.trueStartTarg))) -
								ACCURACYWINANGLE)/xxxtime;

						} else {
							// Not yet succeeded, calculate the angular error.
							diff = fabs(intersection2DInfo.angularDistance) - fabs(intersection2DInfo.prevAngularDistance);
							intersection2DInfo.cumulativeAngularMotion += fabs(diff); // accumulate the angular distance travelled.
							intersection2DInfo.prevAngularDistance = intersection2DInfo.angularDistance;
						}
						// The results are displayed later
					} else if (state2DGameDetail == justSucceeded) {
						state2DGameDetail = haveSuccess; // This is so we only write the results once.
					}
				}
			}
			xrotate2DFigure(&intersection2DInfo, movAndTargSeparately); // float angle, int sides, float* verts, float *rotatedVerts)
			xxcalc2DIntersections(&intersection2DInfo, movAndTargSeparately);
		} else if (state2DGamePlay == waitingForNew2D){
		}
	} else {
		diff = 0.0; xxxtime /= diff; //Should never get here, Always 2d game. divide by zero
	}

	// That completes all the calculations of position. Now to do the drawing.

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glViewport(0, 0,	// Specify the lower left corner of the viewport, x and y.
		W, H);			// Specify the width and height of the viewport.

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity(); // sets the projection matrix to the identity

	gluPerspective(45,	// Specifies the field of view angle, in degrees, in the y direction. 
		viewport[2]*1.0/viewport[3], //Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).
		0.1,			//Specifies the distance from the viewer to the near clipping plane (always positive).
		100.0);			//Specifies the distance from the viewer to the near clipping plane (always positive).

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0, 0, -TRANSLATIONOF2DFIGURES);

	float accuracy2D;//, displayScore2D;

	//writeGameState(); // This is for debug only
	// Draw the left hand figure
	if (state2DOverview == twoDDemo) {
		if (state2DDisplay == all2D || state2DDisplay == mov2DTarg1D) {
			drawMovendumPolygon(POLYGONLINEWIDTH,figColp2D[intersection2DInfo.sides - MIN_2D_SIDES]); // 1st param linewidth, 2nd is colours for the figure
		}
		drawIntersectionLineAndPointsMov2D();
		//glTextOutput(-0.25, FIGNAMESYVALUE, figNames2D[currFig2D-MIN_2D_SIDES],twhite);
		drawSurroundCircle(0, 0, 0.0, 0.0, (float *)0);
	} else if (state2DOverview == twoDGame) {
		if (state2DGamePlay == countingDown2D) {
			drawCountdown2D( movOnly);
			//if (0) {
			//	sprintf(counting, "%2d", intersection2DInfo.displayNumber);
			//	//sprintf(counting,"%4.1f",intersection2DInfo.countdownDispNum);
			//	if (intersection2DInfo.displayNumber <=1) {
			//		glTextOutput(1.0-(float)intersection2DInfo.displayNumber*0.05, COUNTDOWNDISPLAYYVALUE, counting, tgreen);
			//	} else {
			//		glTextOutput(1.0-(float)intersection2DInfo.displayNumber*0.05, COUNTDOWNDISPLAYYVALUE, counting, tred);
			//	}
			//}
			if (intersection2DInfo.displayNumber != intersection2DInfo.prevdisplayNumber) {
				sprintf(counting,"%2d",intersection2DInfo.displayNumber);
				countdownOutput2D->value(counting);
			}
			intersection2DInfo.prevdisplayNumber = intersection2DInfo.displayNumber;
		} else if (state2DGamePlay == waitingForNew2D) {
		} else if (state2DGamePlay == playing2D) {

			if (!(state2DGameDetail == justSucceeded || state2DGameDetail == haveSuccess)) {
				// Draw the 2D connector only if mouse is outside circle and button is down
				if (intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS) {
					if (left_mouse) draw2DConnector(&intersection2DInfo, left_mouse);
				}
			}

			if (state2DDisplay == all2D || state2DDisplay == mov2DTarg1D) {
				drawMovendumPolygon(POLYGONLINEWIDTH,figColp2D[intersection2DInfo.sides - MIN_2D_SIDES]);//First param is line width
			}
			if (state2DDisplay != all2D) {
				drawIntersectionLineAndPointsMov2D();
			}

			if (state2DGameDetail == justSucceeded || state2DGameDetail == haveSuccess) {
				// Display the results.

				fullAngle = (fabs(correctAngle (
								correctAngle(intersection2DInfo.trueStartMov) -
								correctAngle(intersection2DInfo.trueStartTarg))) -
								ACCURACYWINANGLE);
//				sprintf(counting,"Required angle:%6.2f %c\n", fullAngle*M_RADIANS_TO_DEGREES,176);
				sprintf(counting,"Required angle:%6.2f %c", fullAngle*M_RADIANS_TO_DEGREES,176);
				glTextOutput(0.80, ANGULARDISTANCEYVALUE, counting, twhite);
				if (state2DGameDetail != haveSuccess) {if (pFile) fputs(counting,pFile);}
//				sprintf(counting, "Time:%6.2f s\n", intersection2DInfo.successTime);
				sprintf(counting, "Time:%6.2f s", intersection2DInfo.successTime);
				glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.1, counting, twhite);
				if (state2DGameDetail != haveSuccess) {if (pFile) fputs(counting,pFile);}
				sprintf(counting, "Speed:%7.2f %c/s",intersection2DInfo.finalScore*M_RADIANS_TO_DEGREES,176);
				glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.2, counting, tredgreen);
				if (state2DGameDetail != haveSuccess) {if (pFile) fputs(counting,pFile);}

				if (fullAngle > intersection2DInfo.cumulativeAngularMotion) fullAngle = intersection2DInfo.cumulativeAngularMotion;
				accuracy2D = 100.0*fullAngle/intersection2DInfo.cumulativeAngularMotion;
				sprintf(counting, "Accuracy:%6.1f%%",accuracy2D);
//					100.0*fullAngle/intersection2DInfo.cumulativeAngularMotion);
				glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.3, counting, tredgreen);
				if (state2DGameDetail != haveSuccess) {if (pFile) fputs(counting,pFile);}

				sprintf(counting,"Speed x Accuracy");
				glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.4, counting, twhite);

				sprintf(counting, "Score:%7.1f",intersection2DInfo.finalScore*M_RADIANS_TO_DEGREES*accuracy2D);
				//sprintf(counting, "Score:%6.0f '/s\n",
				//	intersection2DInfo.finalScore*M_RADIANS_TO_DEGREES*60*fullAngle/intersection2DInfo.cumulativeAngularMotion);

				glTextOutput(0.80, ANGULARDISTANCEYVALUE-0.5, counting, twhite);
				if (state2DGameDetail != haveSuccess) {if (pFile) fputs(counting,pFile);}
			} else {
				// Game is still in progress: display the angle and the time.
				sprintf(counting, "Angle:%5.1f", intersection2DInfo.angularDistance*M_RADIANS_TO_DEGREES);
				glTextOutput(0.81, ANGULARDISTANCEYVALUE, counting, twhite);
				sprintf(counting, "Time:%5.0f", xxxtime);
				glTextOutput(0.81, ANGULARDISTANCEYVALUE-0.1, counting, twhite);
			}

			drawAccuracy2DNew(fabs(intersection2DInfo.angularDistance*M_1_PI),0.0,leftOnly);
		}
		drawSurroundCircle(intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS, 0, 0.0, 0.0, (float *)0);
	}


	//glTextOutput(-0.25, 0.85, figNames2D[currFig2D-MIN_2D_SIDES]);
	/////////////////////////////////////////// Draw rhs
	glViewport(W, 0, W, H);

	if (0) {
		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();
		glTranslatef(0, 0, -TRANSLATIONOF2DFIGURES);
	}
	//writeGameState(); // This is for debug only

	if (state2DOverview == twoDDemo) {
		if (state2DDisplay == all2D) {
			drawTargetPolygon(POLYGONLINEWIDTH,figColp2D[intersection2DInfo.sides - MIN_2D_SIDES]); // 1st param linewidth, 2nd is colours for the figure
		}
		drawIntersectionLineAndPointsTarg2D();
	} else  if (state2DOverview == twoDGame) {
		if (state2DGamePlay == countingDown2D) {
			drawCountdown2D( targOnly);

		} else if (state2DGamePlay == playing2D) {
			if (state2DDisplay == all2D) {
				drawTargetPolygon(POLYGONLINEWIDTH,figColp2D[intersection2DInfo.sides - MIN_2D_SIDES]); // 1st param linewidth, 2nd is colours for the figure
			} else {
				drawIntersectionLineAndPointsTarg2D();
			}
			drawAccuracy2DNew(fabs(intersection2DInfo.angularDistance*M_1_PI),0.0,rightOnly);
		}
	}

	// Writing the names of the polygon is a bit unnecessary
	if(0) glTextOutput(-0.2, -0.95, figNames2D[currFig2D-MIN_2D_SIDES],twhite);

	glutSwapBuffers();
	glPopAttrib();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void keyboard(unsigned char c, int x, int y)
{
	// c is the pressed k, x,y are the coordinates of the mouse at the time of the press.
	char dbgtxt[100];
	char *ptr=dbgtxt;

	switch (c) {
	case 27: // Escape key
		//fclose(pFile);
		exit(0);
		break;
	case 'D':
	case 'd':
		//glutPostRedisplay();
		break;
	case 'V':
	case 'v':
		//info4D.keyVDown = 1;
		break;
	case 'B':
	case 'b':
		//info4D.keyBDown = 1;
		break;
	case 'N':
	case 'n':
		//info4D.keyNDown = 1;
		break;
	default:
		break;
	}
	if (pFile) {
		ptr += sprintf(ptr,"Key <%3d>\n",(int)c);
		fputs(dbgtxt,pFile);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setMouseInsideOutside (float wx, float hy) {
	// This routine used in 2D gameplay
	// From the current position of the mouse, it calculate the radius from the movendum centre
	// and calculates whether it is inside or outside the surrounding circle

	// It also calculates the angle of the mouse in relation to the centre of the figure, giving an angle
	// comparable to the angle of the movendum.
	float mouseCosine;

	intersection2DInfo.mouse3DxInitialPosition = wx * intersection2DInfo.convertFromMouseTo3D;
	intersection2DInfo.mouse3DyInitialPosition = hy * intersection2DInfo.convertFromMouseTo3D;
	intersection2DInfo.mouse3DRadius = sqrt(
		intersection2DInfo.mouse3DxInitialPosition*intersection2DInfo.mouse3DxInitialPosition +
		intersection2DInfo.mouse3DyInitialPosition*intersection2DInfo.mouse3DyInitialPosition);

	if (intersection2DInfo.mouse3DRadius > 0.0) {
		// Can only calculate the mouse angle if it is not directly on the centre
		mouseCosine = intersection2DInfo.mouse3DxInitialPosition/intersection2DInfo.mouse3DRadius;
		if (intersection2DInfo.mouse3DyInitialPosition >= 0.0) { // Same as saying the sine is positive
			intersection2DInfo.mouseAngleNow = acos(mouseCosine);
		} else {
			intersection2DInfo.mouseAngleNow = M_TWO_PI - acos(mouseCosine);
		}
		// The mouse angle is now in the range 0 to 2*PI
	}

	if (intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS) {
		mouse2DInsideOutsideCircle = mouseOutsideCircle;
	} else {
		mouse2DInsideOutsideCircle = mouseInsideCircle;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void checkStateChangeMousePosn(Mouse2DInsideOutsideCircle prevMouse) {
	// This routine used in 2D gameplay
	float x = 0.0;
	if (prevMouse != mouse2DInsideOutsideCircle) {
		// The mouse has just moved inside or outside
		if (state2DGameDetail == movingMovendum) {
			if (mouse2DInsideOutsideCircle == mouseInsideCircle) {// The mouse has just moved inside the circle
				state2DGameDetail = notMovingMovendum;
			} else {// The mouse has just moved outside the circle
				x /= x; // Can't happen - mouse was inside but the state was movingmovendum
			}
		} else {// The Game is in a not moving state
			if (mouse2DInsideOutsideCircle == mouseOutsideCircle) {// the mouse has just moved outside the circle
				if (left_mouse == GL_TRUE) {
					// Only move if the left mouse is down
					if (!(state2DGameDetail == justSucceeded || state2DGameDetail == haveSuccess)){
						state2DGameDetail = justStartedMoving;
					}
				}
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mouse4D(int x, int y)
{
	// mouse coordinate x is in normal direction
	// mouse coordinate y is measured down from the top of the screen.

	//char txt[300];
	//int vp[3];
	//char *ptr = txt;
	float newradius2;
	int tempval;
	tempval = stereo4D->value();


	// W is half the width of the whole screen (set in function 'reshape' )
	// H is the height of the screen
	// So the possible ranges of x and y are [0,2*W] and [0,H]
	// acc is the height of the 'accuracy' viewport at the top of the display area.
	// c is calculated to be H-acc, so is the height of the window that is available for display.
	// The aspect ratio is c/W ie the height/width of the display area.
	//
	//
	// Distance of mouse from bottom of the screen is H - y
	// Distance of mouse from left of screen is x
	//
	//
	// Regardless of the aspect ratio, the centre of the left hand viewport is at w/2, c/2 (in screen coords, not mouse coords)
	// i.e. w/2 from the left and c/2 from the bottom.
	// So the position of the mouse in relation to the centre of the left viewport is x-w/2, H-y - c/2.
	//
	// if the display area is tall and thin i.e. the aspectratio is > 1.0
	// Then the max diameter is W otherwise the display is short and fat and the max diameter is C.
	//
	//
	// To convert to xy coordinates in 3D, the max diameter should be 2.0 (based on radius of 1.0)
	// So with aspectratio > 1.0, divide by w/2,
	// if aspectratio is < 1.0 divide by cht/2
	// Hence the formulae required are:


	if (tempval) {
		if (aspectRatio >= 1.0) {
			trackbI.currMouse4D[0] = (2.0*x - W)/W;       // tall and thin
			//trackbI.currMouse4D[1] = ((H - y) - 3.0*cht/2 - acc)/(cht/2.0); // This is correct but can be shortened to the line below
			trackbI.currMouse4D[1] = 1- 2.0*y/cht;
		} else {
			trackbI.currMouse4D[0] = (2.0*(x - W) + cht)/cht;       // Short and fat
			//trackbI.currMouse4D[1] = ((H - y) - 3.0*cht/2 - acc)/(cht/2.0); // This is correct but can be shortened to the line below
			trackbI.currMouse4D[1] = 1- 2.0*y/cht;
		}
	} else {
		if (aspectRatio >= 1.0) {
			trackbI.currMouse4D[0] = (2.0*x - W)/W;       // tall and thin
			trackbI.currMouse4D[1] = (2.0*(H - y) - cht)/W;
		} else {
			trackbI.currMouse4D[0] = (2.0*(x - W) + cht)/cht;       // Short and fat
			trackbI.currMouse4D[1] = (2.0*(H - y) - cht)/cht;
		}
	}
	newradius2 = trackbI.currMouse4D[0]*trackbI.currMouse4D[0] + trackbI.currMouse4D[1]*trackbI.currMouse4D[1];

	float temp = radiusOfExtended4D*radiusOfExtended4D - newradius2;

	// OUt of the screen towards the viewer is the negative z direction.  // Edit, no it isn't, it's positive!!
	trackbI.currMouse4D[2] = temp >= 0.0 ?  sqrt(radiusOfExtended4D*radiusOfExtended4D - newradius2) : 0.0;

	//ptr += sprintf(ptr,"MSE4D xy:%4d %4d xMouse4Dy %6.2f %6.2f height %7.3f",
	//	x,y, trackbI.xMouse4D, trackbI.yMouse4D, trackbI.heightOfMouse4D);

	//ptr += sprintf(ptr," Aspect %7.3f W,H,cht,acc:%4d %4d %6.1f %6.1f cht/2 %6.1f W/2 %6.1f\n",aspectRatio,
	//	W,H,cht,acc,cht/2.0,W/2.0);
	//fputs(txt,pFile);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void motion(int x, int y)
{ // Motion when left_mouse is true (ie the button is down)
	static char txt[300];
	Mouse2DInsideOutsideCircle prevMouse;
	char *ptr = txt;

	time(&myTime); 
	tnow = localtime(&myTime);
	//ptr += sprintf(ptr,"%02d:%02d:%02d ",tnow->tm_hour,tnow->tm_min,tnow->tm_sec);

	float thiswx;// = (2.0*x - W) / W;
	float thishy;// = (H - 2.0*y) / H;
	float prevwx;// = (2.0*mousex - W) / W;
	float prevhy;// = (H - 2.0*mousey) / H;


	thiswx = (2.0*x - W) / W;
	thishy = (H - 2.0*y) / H;
	prevwx = (2.0*mousex - W) / W;
	prevhy = (H - 2.0*mousey) / H;


	switch (stateFourot) {
	case twoD:
		ptr += sprintf(ptr," In Mot2D ");
		switch (state2DOverview) {
		case twoDGame:
			switch(state2DGamePlay) {
			case playing2D:
				switch (state2DGameDetail) {
				case justSucceeded:
					// If the game is just over, dont worry about the mouse being inside or outside
					break;
				default:
					prevMouse = mouse2DInsideOutsideCircle; // Get current state of mouse posn
					setMouseInsideOutside (thiswx,thishy);
					checkStateChangeMousePosn(prevMouse);
					break;
				}
				break;
			default:
				break;
			}
			break;
		default:
			break;
		}
		break;
	case threeD:
		ptr += sprintf(ptr," In Mot3D ");

		switch (state3DOverview) {
		case threeDGame:
			switch(state3DGamePlay) {
			case playing3D:
				setMouseInsideOutside (thiswx,thishy);
				trackbI.currentxyz[0] = intersection2DInfo.mouse3DxInitialPosition;
				trackbI.currentxyz[1] = intersection2DInfo.mouse3DyInitialPosition;
				if (left_mouse == GL_FALSE) {
					trackbI.prevxyz[0] = trackbI.currentxyz[0];
					trackbI.prevxyz[1] = trackbI.currentxyz[1];
				}
				break;
			default:
				break;
			}
			break;
		default:
			break;
		}
		break;
	case fourD:
		ptr += sprintf(ptr," In Mot4D ");
		switch(state4DOverview) {
		case fourDDemo:
			break;
		case fourDGame:
			switch(state4DGamePlay){
			case playing4D:
				int tempval;
				tempval = stereo4D->value();
				mouse4D(x,y); 
				break;
			default:
				break;
			}
			break;
		default:
			break;
		}
		break;
	default:
		break;
	}


	if (mousex != x || mousey != y) {
		mouseHasMoved = GL_TRUE;
	} else {
		mouseHasMoved = GL_FALSE;
	}

	ptr += sprintf(ptr," Motionxy %d %d\n",x,y);
	mousex = x;
	mousey = y;
	glutPostRedisplay();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mouse(int b, int s, int x, int y)
{
  char txt[50];
  char *ptr;
  ptr = txt;
  mousex = x;
  mousey = y;

  //writeMouseState(b,s);
  if (s == GLUT_DOWN) {
	// Finger has just pressed the mouse button
    switch (b) {
    case GLUT_LEFT_BUTTON:
      left_mouse = GL_TRUE;
	  if (stateFourot == twoD) {
		  if (state2DOverview == twoDGame) {
			  if (state2DGamePlay == playing2D) {
				  if (state2DGameDetail == notMovingMovendum) {
					  if (intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS) {
						  state2DGameDetail = justStartedMoving;
					  }
				  }
			  }
		  }
	  }
	  // Tested: we only arrive here when left mouse is pressed.
      glutPostRedisplay();
      break;
    case GLUT_MIDDLE_BUTTON:
	  // Tested: only here when middle button is pressed.
      middle_mouse = GL_TRUE;
      glutPostRedisplay();
      break;
	case GLUT_RIGHT_BUTTON:
	  // Right button is intercepted by the menu, so never gets here.  See   glutAttachMenu(GLUT_RIGHT_BUTTON);
	  right_mouse = GL_TRUE;
	  break;
    }
  } else {
	// Finger has come off the mouse button
    if (left_mouse) {
      left_mouse = GL_FALSE;
	  if (stateFourot == twoD) {
		  if (state2DOverview == twoDGame) {
			  if (state2DGamePlay == playing2D) {
				  if (state2DGameDetail == movingMovendum) {
					  if (intersection2DInfo.mouse3DRadius > INTERSECTION2DLINERADIUS) {
						  state2DGameDetail = notMovingMovendum;
					  }
				  }
			  }
		  }
	  }
	  //fputs("MouseBtnUp ev\n",pFile);
	  glutPostRedisplay();
    } else if (middle_mouse) {
      middle_mouse = GL_FALSE;
      glutPostRedisplay();
    } else if (right_mouse) {
    	right_mouse = GL_FALSE;
      glutPostRedisplay();
    }
  }
  //ptr += sprintf(ptr,"IN Mouse B S X Y: %d %d %d %d\n", b,s,x,y);
  //fputs(txt,pFile);
  motion(x, y); // Calling this function here causes it to be called when there is no motion in the mous
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void newAnimate(void)
{
	// Pretty sure this function does nothing useful. Only the last line is needed.
	switch(stateFourot) {
	case twoD:
		switch(state2DOverview) {
		case twoDDemo:
			switch(state2DDisplay) {
			case all2D:
				break;
			case mov2DTarg1D:
				break;
			case all1D: 
				break;
			default:
				break;
			}
		case twoDGame:
			switch(state2DGamePlay) {
			case waitingForNew2D:
				break;
			case countingDown2D:
				break;
			case playing2D:
				switch(state2DGameDetail) {
				case movingMovendum:
					break;
				case justStartedMoving:
					break;
				case notMovingMovendum:
					break;
				//case justSucceeded:
				//	break;
				default:
					break;
				}
			case showingResults:
				break;
			default:
				break;
			}
		default:
			break;
		}
		break;
	case threeD:
		break;
	case fourD:
		break;
	default:
		break;
	}
	glutPostRedisplay();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init(void)
{
  int i;
  static float lmodel_ambient[] =  {0.0, 0.0, 0.0, 0.0};
  static float lmodel_twoside[] =  {GL_FALSE};
  static float lmodel_local[] =  {GL_FALSE};

  static float light0_ambient[] =  {0.1, 0.1, 0.1, 1.0};
  //static float light0_ambient[] =  {0.9, 0.9, 0.9, 1.0};
  static float light0_diffuse[] =  {1.0, 1.0, 1.0, 0.0};
  static float light0_position[] =  {0.8660254, 0.5, 1, 0};
  static float light0_specular[] =  {0.0, 0.0, 0.0, 0.0};

  static float light1_ambient[] =  {0.1, 0.1, 0.1, 1.0};
//  static float light0_ambient[] =  {0.9, 0.9, 0.9, 1.0};
  static float light1_diffuse[] =  {1.0, 1.0, 1.0, 0.0};
  static float light1_position[] =  {-0.8660254, 0.5, 1, 0};
  static float light1_specular[] =  {0.0, 0.0, 0.0, 0.0};

  static float light2_ambient[] =  {0.1, 0.1, 0.1, 1.0};
//  static float light0_ambient[] =  {0.9, 0.9, 0.9, 1.0};
  static float light2_diffuse[] =  {1.0, 1.0, 1.0, 0.0};
  static float light2_position[] =  {-1, 0, 0, 0};
  static float light2_specular[] =  {0.1, 0.1, 0.1, 0.0};
  
  static float bevel_mat_ambient[] =  {0.0, 0.0, 0.0, 1.0};
  static float bevel_mat_shininess[] =  {40.0};
  static float bevel_mat_specular[] =  {0.0, 0.0, 0.0, 0.0};
  static float bevel_mat_diffuse[] =  {1.0, 0.0, 0.0, 0.0};

  glEnable(GL_CULL_FACE);
  glCullFace(GL_BACK);
  glEnable(GL_DEPTH_TEST);
  glClearDepth(1.0);

  glClearColor(0.5, 0.5, 0.5, 0.0);
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glLightfv(GL_LIGHT0, GL_AMBIENT, light0_ambient);
  glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_diffuse);
  glLightfv(GL_LIGHT0, GL_SPECULAR, light0_specular);
  glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
  glEnable(GL_LIGHT0);

  glLightfv(GL_LIGHT1, GL_AMBIENT, light1_ambient);
  glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_diffuse);
  glLightfv(GL_LIGHT1, GL_SPECULAR, light1_specular);
  glLightfv(GL_LIGHT1, GL_POSITION, light1_position);
  glEnable(GL_LIGHT1);

  glLightfv(GL_LIGHT2, GL_AMBIENT, light2_ambient);
  glLightfv(GL_LIGHT2, GL_DIFFUSE, light2_diffuse);
  glLightfv(GL_LIGHT2, GL_SPECULAR, light2_specular);
  glLightfv(GL_LIGHT2, GL_POSITION, light2_position);
  glEnable(GL_LIGHT2);

  glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, lmodel_local);
  glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside);
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
  glEnable(GL_LIGHTING);
  //glDisable(GL_LIGHTING);

  glMaterialfv(GL_FRONT, GL_AMBIENT, bevel_mat_ambient);
  glMaterialfv(GL_FRONT, GL_SHININESS, bevel_mat_shininess);
  glMaterialfv(GL_FRONT, GL_SPECULAR, bevel_mat_specular);
  glMaterialfv(GL_FRONT, GL_DIFFUSE, bevel_mat_diffuse);

  glColorMaterial(GL_FRONT_AND_BACK, GL_DIFFUSE);
  glEnable(GL_COLOR_MATERIAL);
  glShadeModel(GL_FLAT);


  populateStartColours();
  setupTrackballInfo();

  srandom(time(NULL));
  currFig2D = MIN_2D_SIDES + rand()%(MAX_2D_SIDES - MIN_2D_SIDES + 1);

  motionStateOfDemo2D = demoIsMoving;
  motionStateOfDemo3D = demoIsMoving;
  motionStateOfDemo4D = demoIsMoving;

  intersection2DInfo.displacementLine2D = 0.0; // Distance from the origin
  intersection2DInfo.normalLine2D = M_PI_2; // Angle of the normal (from the x-axis)
  intersection2DInfo.normalVector2D[0] = 0.0; // Vector of the normal (x)
  intersection2DInfo.normalVector2D[1] = 1.0; // Vector of the normal (y)
  intersection2DInfo.sides = MIN_2D_SIDES; // Initialise with a triangle
  intersection2DInfo.verts = poly2D_3[0]; // Pointer to the unrotated vertices

  // Pre-calculated the circle for the LHS in 2D.
  for (i = 0; i < NUMBEROFLINESINCIRCLE; ++i) {
	  circlePoints[i][0] = INTERSECTION2DLINERADIUS * cos(M_PI_2 + i*M_TWO_PI/NUMBEROFLINESINCIRCLE);  
	  circlePoints[i][1] = INTERSECTION2DLINERADIUS * sin(M_PI_2 + i*M_TWO_PI/NUMBEROFLINESINCIRCLE);
	  circlePoints[i][2] = 0.0;
  }
  // Pre-calculated the circle for the LHS in 2D.
  for (i = 0; i < NUMBEROFLINESINCIRCLE; ++i) {
	  circlePointsGeneric[i][0] = cos(i*M_TWO_PI/NUMBEROFLINESINCIRCLE);  
	  circlePointsGeneric[i][1] = sin(i*M_TWO_PI/NUMBEROFLINESINCIRCLE);
  }


  intersection2DInfo.convertFromMouseTo3D = TRANSLATIONOF2DFIGURES*tan(FOVEALANGLE*(M_PI/180)*0.5);
  ///////////////////////////////////////////////////////////

  currFig3D = rand()%5;

  // for debug purposes:

  info3D.fig = figp[currFig3D];
  info3D.basePositionDemoQuat[0]=1;info3D.basePositionDemoQuat[1]=0;info3D.basePositionDemoQuat[2]=0;info3D.basePositionDemoQuat[3]=0;
  info3D.baseAxisOfDemo[0]=0;info3D.baseAxisOfDemo[1]=1;info3D.baseAxisOfDemo[2]=0;
  cb_reset3DSliders(reset3DSliders, (void *)1); // Sets slider to -1 (yes, it's a hack).
  info3D.escapeAngle = 0.0;
  info3D.firstEscape = 0;
  setUserPlaneNormal3D(); // sets the normal from the declension
  oscillation_period3D = OSCILLATION_3D_PERIOD;
  state3DDisplayType = directus3D;
  state3DOverview = threeDDemo;

  ///////////////////////////////////////////////////////////////////////////////////////////////
  state4DOverview = fourDDemo;
  info4D.autosolve4D = notAutoSolving;
  state4DDisplayType = directus4D;
  oscillation_period4D = OSCILLATION_4D_PERIOD;
  currFig4D = rand()%6 + 5;
  info4D.fig = figp[currFig4D];
  info4D.currentCellInWireframe = 0;
  info4D.projectDist4D3D = exp(DEFAULTSLIDERPROJ4D3D);
  info4D.projectDist3D2D = exp(DEFAULTSLIDERPROJ3D2D);

  // Setup the user space for the 4d game.
  info4D.userSpaceNormal[0]=0;info4D.userSpaceNormal[1]=0;info4D.userSpaceNormal[2]=0;info4D.userSpaceNormal[3]=1.0;
  info4D.userSpaceDistance = DEFAULTUSERSPACEDISTANCE;
  info4D.rightEyeX3D2D = DEFAULTEYE3D2D;


  // Create the starting position
  info4D.basePosn.angle = 0.0;
  info4D.basePosn.biv.e12=1.0;info4D.basePosn.biv.e13=0.0;info4D.basePosn.biv.e14=0.0;
  info4D.basePosn.biv.e23=0.0;info4D.basePosn.biv.e24=0.0;info4D.basePosn.biv.e34=0.0;
  // Set the base position Rotor to zero the bivector part (strictly we don't need baseposn.biv as used above.
  info4D.basePosnRot.b = info4D.basePosn.biv;
  info4D.basePosnRot.b.e12 = 0.0;
  
  info4D.basePosnRot.e1234 = 0.0;
  info4D.basePosnRot.scalar = 1.0;

  info4D.demoRotationPlanes.e12 = 1.0;info4D.demoRotationPlanes.e13 = 0.0;info4D.demoRotationPlanes.e14 = 0.0;
  info4D.demoRotationPlanes.e23 = 0.0;info4D.demoRotationPlanes.e24 = 0.0;info4D.demoRotationPlanes.e34 = 0.0;

  info4D.kbRotation = KBROTSTART;
  info4D.escRotation = ESCAPEROTSTART;
  info4D.autosolve4D = notAutoSolving;

  whichang = 1; prevwhichang = 1; whichdisp=1; prevwhichdisp=2; prevwhichbiv=1;
  escaping = 0; escapeAngle = 0.1;
  info4D.prevDisplayPositionOfSolvBiv1 = 1;
  info4D.prevangle = 0.0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void visibility(int v) // We probably can assume that the window is always visible
{
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setupTrackballInfo()
{
	// Initialize the values for the trackball. These are the constant values.

	float costheta;

	trackbI.trackballsize = TRACKBALLSIZE;
	trackbI.littleballsize = trackbI.trackballsize * 0.4; // multiply it by a 'reasonable'figure
	trackbI.rsquared = trackbI.trackballsize*trackbI.trackballsize;
	trackbI.t = sqrt(trackbI.trackballsize*trackbI.trackballsize + 2*trackbI.trackballsize*trackbI.littleballsize); // by pythagoras
	costheta = trackbI.t/(trackbI.trackballsize + trackbI.littleballsize);
	trackbI.p = trackbI.trackballsize * costheta;
}

#define MAXCOLOUR (255.0)
#define MINPERCENTAGE (0.0) //Applies to an individual colour (percentage of MAXCOLOUR)
#define MAXPERCENTAGE (0.0) //Applies to an individual colour
#define MINPERCENTAGETOTAL (15.0)
#define MINTOTALCOLOUR (MAXCOLOUR*MINPERCENTAGETOTAL*3.0/100.0)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void populateStartColours()
{	// Initialises the colours used in the figures.
	// This is an attempt to use most of the the possible range of colours
	int i,c1,c2,c3,base,j,ic1,ic2,ic3;
	int numColours,coloursFound,extraColours;
	struct ColValue * colV;
	FigInfo *fi;
	float botdifference = MAXCOLOUR*MINPERCENTAGE/100.0;
	float topdifference = MAXCOLOUR*MAXPERCENTAGE/100.0;

	for (i = 0; i < NUMBEROFFIGS; ++i)
	{
		// I selects the figure
		fi = figp[i];
		colV = figColp[i];
		if (fi->numDims == 3) {
			numColours = fi->numFaces;
		} else { // must be 4D
			numColours = fi->numCells;
		}
		if (numColours <= 8) {
			colV[0].rCol = botdifference; colV[0].gCol = botdifference; colV[0].bCol = MAXCOLOUR - topdifference;
			colV[1].rCol = botdifference; colV[1].gCol = MAXCOLOUR - topdifference; colV[1].bCol = botdifference;
			colV[2].rCol = MAXCOLOUR- topdifference; colV[2].gCol = botdifference; colV[2].bCol = botdifference;
			colV[3].rCol = MAXCOLOUR - topdifference; colV[3].gCol = MAXCOLOUR - topdifference; colV[3].bCol = botdifference;
			if (numColours >= 5) { // 5 6 or 8
				colV[4].rCol = MAXCOLOUR - topdifference; colV[4].gCol = botdifference; colV[4].bCol = MAXCOLOUR - topdifference;
				if (numColours >= 6) { // 6 or 8
					colV[5].rCol = botdifference; colV[5].gCol = MAXCOLOUR - topdifference; colV[5].bCol = MAXCOLOUR - topdifference;
					if (numColours == 8) {
						colV[6].rCol = 0.5*MAXCOLOUR; colV[6].gCol = 0.15*MAXCOLOUR; colV[6].bCol = 0.0;
						colV[7].rCol = 0.0; colV[7].gCol = 0.5*MAXCOLOUR; colV[7].bCol = 0.15*MAXCOLOUR;
					}
				}
			}
		} else {
			// If more than EIGHT colours, start doing calculations
			coloursFound = 0;
			extraColours = 0;
			while (coloursFound < numColours){
				base = 2;
				c1 = base; c2 = base; c3 = base;
				ic1 = 0; ic2 = 0; ic3 = 0; 
				while (c1*c2*c3 < numColours + extraColours) {
					if (c1 == base)	{
						++c1;
					} else if (c2 == base) {
						++c2;
					} else if (c3 == base) {
						++c3;
					} else {
						++base;
					}
				}
				j = 0;
				coloursFound = 0;
				while (j < numColours + extraColours) {
					ic1 = j/(c2*c3);
					ic2 = (j - ic1*(c2*c3))/c3;
					ic3 = j - ic1*c2*c3 - ic2*c3;
					colV[coloursFound].rCol = botdifference + ic1 * (MAXCOLOUR - (topdifference+botdifference))/(float)(c1-1);
					colV[coloursFound].gCol = botdifference + ic2 * (MAXCOLOUR - (topdifference+botdifference))/(float)(c2-1);
					colV[coloursFound].bCol = botdifference + ic3 * (MAXCOLOUR - (topdifference+botdifference))/(float)(c3-1);
					if ((colV[coloursFound].rCol + colV[coloursFound].gCol + colV[coloursFound].bCol ) >= MINTOTALCOLOUR) {
						// Colour is bright enough
						++coloursFound;
					}
					++j;
				}
				if (coloursFound < numColours) {
					extraColours = numColours - coloursFound;
				}
			}
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void Reshape(int width, int height)
{
  W = width/2;
  H = height;

  glViewport(0, 0, W, H);

  glGetIntegerv(GL_VIEWPORT, viewport);
//	sprintf(res,"%5d%5d%5d%5d",viewport[0], viewport[1], viewport[2], viewport[3]);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void menu1(int choice)
{ // Keep just in case there is a need for a right click menu in the main opengl window.
   switch(choice) {
   case 1:
      break;
   case 2:
      break;
   case 3:
	  fclose(pFile);
      exit(0);
      break;
   case 4:
	  break;
   case 5:
	  break;
   case 6:
	  break;
   case 7:
	  break;
   case 8:
	  break;
   }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setGLColor(TextOutputColour topc) {
	switch (topc) {
	case twhite:
		glColor3f(1.0f, 1.0f, 1.0f);
		break;
	case tred:
		glColor3f(1.0f, 0.0f, 0.0f);
		break;
	case tblue:
		glColor3f(0.0f, 0.0f, 1.0f);
		break;
	case tgreen:
		glColor3f(0.0f, 1.0f, 0.0f);
		break;
	case tredblue:
		glColor3f(1.0f, 0.0f, 1.0f);
		break;
	case tredgreen:
		glColor3f(1.0f, 1.0f, 0.0f);
		break;
	case tbluegreen:
		glColor3f(0.0f, 1.0f, 1.0f);
		break;
	default: // Grey
		glColor3f(0.5f, 0.5f, 0.5f);
		break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void glTextOutput(float x, float y, char *string, TextOutputColour topc)
{	// Puts text into the opengl part of the screen
	char * p = string;
	setGLColor(topc);

	glMatrixMode( GL_PROJECTION ) ;
	glPushMatrix() ; // save
	glLoadIdentity();// and clear
	glMatrixMode( GL_MODELVIEW ) ;
	glPushMatrix() ;
	glLoadIdentity() ;

	glDisable( GL_DEPTH_TEST ) ; // also disable the depth test so renders on top

	glPushAttrib(GL_LIGHTING_BIT);
	glDisable(GL_LIGHTING);

	glRasterPos2f(x, y);
	//glRasterPos2f( 0,0 ) ; // center of screen. (-1,0) is center left.

	glutBitmapString( GLUT_BITMAP_TIMES_ROMAN_24, (const unsigned char *)string );

	glPopAttrib();

	glEnable( GL_DEPTH_TEST ) ; // Turn depth testing back on
	glMatrixMode( GL_PROJECTION ) ;
	glPopMatrix() ; // revert back to the matrix I had before.
	glMatrixMode( GL_MODELVIEW ) ;
	glPopMatrix() ;
}

void cb_writefile(Fl_Widget *w, void*)
{
	if (((Fl_Check_Button *)w)->value()) {
		openFile();
	} else {
		if (pFile != 0) fclose(pFile);
		pFile = 0;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void set2DFigure() {
	// Only write the figure selection to a file if we are actively playing.
	randColours(currFig2D, randomColorsMov, randomColorsTarg);
	if (state2DOverview == twoDGame &&
		(state2DGamePlay == countingDown2D ||
		(state2DGamePlay == playing2D && 
		!(state2DGameDetail == justSucceeded || state2DGameDetail == haveSuccess)))) {

		time(&myTime);
		tnow = localtime(&myTime);
		sprintf(myStringTime,"Format changed at %02d:%02d:%02d %9s%9s\n",
			tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames2D[currFig2D-MIN_2D_SIDES],
			gameDisplay2D[state2DDisplay]);
		{if (pFile) fputs(myStringTime,pFile);}
	}
	glutPostRedisplay();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_freezer2D(Fl_Widget *w, void*) {
	char dbgtxt[200];
	char *ptr=dbgtxt;
	//struct timespec tempdiff;
	if (motionStateOfDemo2D == demoIsMoving) {
		motionStateOfDemo2D = demoIsStopped;((Fl_Button *)w)->label("Move");
		//tfreezediff2.QuadPart = tend.QuadPart - tinitial.QuadPart; // Save Current time diff
		
		timespec_diff(&ltinitial, &ltend, &ltfreezediff2);
		if (pFile) {
			ptr += sprintf(ptr,"Stop ");
		}		
	} else {
		motionStateOfDemo2D = demoIsMoving;((Fl_Button *)w)->label("Freeze");
		//tinitial.QuadPart = tend.QuadPart - tfreezediff2.QuadPart; // Restore the previous time diff
		//timespec_diff(&ltend, &ltfreezediff2, &ltinitial);
		timespec_diff(&ltfreezediff2, &ltend, &ltinitial);
		if (pFile) {
			ptr += sprintf(ptr,"Strt ");
		}		
	}
		
	if (pFile) {
		ptr += sprintf(ptr,"inisec,nsec %12d %12d endsec,nsec %12d %12d difsec,nsec %12d %12d\n", 
			ltinitial.tv_sec,ltinitial.tv_nsec,ltend.tv_sec,ltend.tv_nsec,ltfreezediff2.tv_sec,ltfreezediff2.tv_nsec);
			fputs(dbgtxt,pFile);
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_speed3D(Fl_Widget *w, void* param) {
	int intParam = (long int)param;
	float newdiff;
	float old_osc_period;
	double temp, temp2;

	if ((StateDemoMotion)intParam == motionStateOfDemo3D) return; // Nothing to do, nothing has changed

	if (motionStateOfDemo3D == demoIsStopped) {
		// If currently stopped, there is no need to save the current state of the oscillation
	} else {
		// SavedK_osc is the proportion of the current oscillation period that has elapsed, This must be maintained
		// across changes in speed	
		//savedK_osc3D = ((float)(tend.QuadPart - tinitial.QuadPart))/oscillation_period3D;
		savedK_osc3D = dbl_timespec_diff(&ltinitial, &ltend)/oscillation_period3D;
	}

	old_osc_period = oscillation_period3D; // preserve this for an update later in the function

	if ((StateDemoMotion)intParam == demoIsStopped) {
		// If requesting a freeze, we don't need to alter the oscillation period
		// It gets adjusted when unfreezing.
	} else {
		oscillation_period3D = OSCILLATION_3D_PERIOD*intParam; // Set the new oscillation period
		info3D.previousReducedTime *= (oscillation_period3D/old_osc_period); // Adjust for calculations elswhere
	}
	newdiff = savedK_osc3D*oscillation_period3D;

	temp = (ltend.tv_sec + ltend.tv_nsec/1000000000.0 - newdiff);
	ltinitial.tv_nsec = 1000000000.0 * modf(temp, &temp2);
	ltinitial.tv_sec = temp2;
	
	//tinitial.QuadPart = tend.QuadPart - (__int64)newdiff;
	motionStateOfDemo3D = (StateDemoMotion)intParam;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_speed4D(Fl_Widget *w, void* param) {
	int intParam = (long int)param;
	float newdiff;
	float old_osc_period;
	double temp, temp2;

	if ((StateDemoMotion)intParam == motionStateOfDemo4D) return; // Nothing to do, nothing has changed

	if (motionStateOfDemo4D == demoIsStopped) {
		// If currently stopped, there is no need to save the current state of the oscillation
	} else {
		// SavedK_osc is the proportion of the current oscillation period that has elapsed, This must be maintained
		// across changes in speed
		//savedK_osc4D = ((float)(tend.QuadPart - tinitial.QuadPart))/oscillation_period4D;
		savedK_osc4D = dbl_timespec_diff(&ltinitial, &ltend)/oscillation_period4D;
	}

	old_osc_period = oscillation_period4D; // preserve this for an update later in the function

	if ((StateDemoMotion)intParam == demoIsStopped) {
		// If requesting a freeze, we don't need to alter the oscillation period
		// It gets adjusted when unfreezing.
	} else {
		oscillation_period4D = OSCILLATION_4D_PERIOD*intParam; // Set the new oscillation period
		info4D.previousReducedTime *= (oscillation_period4D/old_osc_period); // Adjust for calculations elswhere
	}
	newdiff = savedK_osc4D*oscillation_period4D;

	temp = (ltend.tv_sec + ltend.tv_nsec/1000000000.0 - newdiff);
	ltinitial.tv_nsec = 1000000000.0 * modf(temp, &temp2);
	ltinitial.tv_sec = temp2;
	
	//tinitial.QuadPart = tend.QuadPart - (__int64)newdiff;
	motionStateOfDemo4D = (StateDemoMotion)intParam;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_togglefig2D(Fl_Widget* w, void*) {
	// Toggle the current 2D figure and set the radio buttons accordingly
	if (++currFig2D > MAX_2D_SIDES) currFig2D = MIN_2D_SIDES;

	fig2D_3->value(currFig2D == 3);
	fig2D_4->value(currFig2D == 4);
	fig2D_5->value(currFig2D == 5);
	fig2D_6->value(currFig2D == 6);
	fig2D_7->value(currFig2D == 7);
	fig2D_8->value(currFig2D == 8);
	set2DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_setfig2D(Fl_Widget* w, void *param) {
	// Set the current 2D figure
	currFig2D = (long int)param;
	set2DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void set3DFigure() {
	int faces = figp[currFig3D]->numFaces;
	info3D.fig = figp[currFig3D];
	

	// cells = figp[currFig3D]->numCells;
	// Only write the figure selection to a file if we are actively playing.
	randColours(faces, randomColorsMov, randomColorsTarg);
	if (state3DOverview == threeDGame &&
		(state3DGamePlay == countingDown3D ||
		state3DGamePlay == playing3D )) {
		
		//!(state3DGameDetail == justSucceeded || state3DGameDetail == haveSuccess)))) {

		time(&myTime);
		tnow = localtime(&myTime);
		sprintf(myStringTime,"Format changed at %02d:%02d:%02d %9s%9s\n",
			tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames[currFig3D],
			gameDisplay3D[state3DDisplay]);
		{if (pFile) fputs(myStringTime,pFile);}
	}
	glutPostRedisplay();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_togglefig3D(Fl_Widget* w, void*) {
	// Toggle the current 2D figure and set the radio buttons accordingly
	if (++currFig3D > icosa) currFig3D = tetra;

	fig3D_tetra->value(currFig3D == tetra);
	fig3D_cube->value(currFig3D == cube);
	fig3D_octa->value(currFig3D == octa);
	fig3D_dodeca->value(currFig3D == dodeca);
	fig3D_icosa->value(currFig3D == icosa);
	set3DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_setfig3D(Fl_Widget* w, void *param) {
	// Set the current 3D figure
	currFig3D = (long int)param;
	set3DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setToggleCellLabel() {
	int oppositeCellNum;
	if (info4D.currentCellInWireframe >= info4D.fig->numCells) info4D.currentCellInWireframe = 0;
	oppositeCellNum = info4D.fig->cellToOpposite[info4D.currentCellInWireframe];
	if (oppCell4D->active() && oppCell4D->value() && info4D.fig->numCells > 5) {
		sprintf(toggleCellLabel,"Cell %d %d",info4D.currentCellInWireframe,oppositeCellNum);
	} else {
		sprintf(toggleCellLabel,"Cell %d",info4D.currentCellInWireframe);
	}
	toggleCell4D->label(toggleCellLabel);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_oppCell4D(Fl_Widget *w, void *param) {
	if (info4D.fig->numCells >5) // Don't adjust label for the simplex.
		setToggleCellLabel();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_dbg4D(Fl_Widget *w, void *param) {
	if (((Fl_Button *)w)->value()) {
		dbg4Dwindow.show();//	setToggleCellLabel();
	} else {
		dbg4Dwindow.hide();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_stereo(Fl_Widget *w, void *param) {
	//Fl_Radio_Round_Button * fig2D_3;

	if ( ((Fl_Button *)w)->value()) {
		eyexUser3D2D->activate();
		reset4DSlidersE3->activate();
	} else {
		reset4DSlidersE3->deactivate();
		eyexUser3D2D->deactivate();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_auto4D(Fl_Widget *w, void *param) {

	if ( ((Fl_Button *)w)->value()) {
		info4D.autosolve4D = autoSolving;

		tgAutoSolveType->activate();

	} else {
		info4D.autosolve4D = notAutoSolving;
		tgAutoSolveType->deactivate();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void set4DFigure() {
	int cells = figp[currFig4D]->numCells;
	info4D.fig = figp[currFig4D];

	// Only write the figure selection to a file if we are actively playing.
	randColours(cells, randomColorsMov, randomColorsTarg);
	if (state4DOverview == fourDGame &&
		(state4DGamePlay == countingDown4D ||
		state4DGamePlay == playing4D )) {
		

		time(&myTime);
		tnow = localtime(&myTime);
		sprintf(myStringTime,"Format changed at %02d:%02d:%02d %9s%9s\n",
			tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames[currFig4D],
			" Ludus");
		{if (pFile) fputs(myStringTime,pFile);}
	} else {
		// For the pupose of debug.

		//time(&myTime);
		//tnow = localtime(&myTime);
		//sprintf(myStringTime,"Format changed at %02d:%02d:%02d %9s%9s\n",
		//	tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames[currFig4D],
		//	" DBG");
		//fputs(myStringTime,pFile);


	}
	setToggleCellLabel();
	glutPostRedisplay();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_togglefig4D(Fl_Widget* w, void*) {
	// Toggle the current 2D figure and set the radio buttons accordingly
	if (++currFig4D > 10) currFig4D = 5;

	fig4D_5->value(currFig4D == 5);
	fig4D_8->value(currFig4D == 6);
	fig4D_16->value(currFig4D == 7);
	fig4D_24->value(currFig4D == 8);
	fig4D_120->value(currFig4D == 9);
	fig4D_600->value(currFig4D == 10);
	set4DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_setfig4D(Fl_Widget* w, void *param) {
	// Set the current 2D figure
	currFig4D = (long int)param;
	set4DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_toggleCell4D(Fl_Widget *w, void*param) {
	// Toggle the cell in the wireframe display
	if (++info4D.currentCellInWireframe >= info4D.fig->numCells) info4D.currentCellInWireframe = 0;
	setToggleCellLabel();
	//sprintf(toggleCellLabel,"Cell %d",info4D.currentCellInWireframe);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_specialCell4D(Fl_Widget *w, void*param) {
	if (specialCell4D->value()) {
		toggleCell4D->activate();
		oppCell4D->activate();
	} else {
		toggleCell4D->deactivate();
		oppCell4D->deactivate();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_wireFrame4D(Fl_Widget *w, void*param) {
	if (param == 0) { // This is the normal wireframe callback
		if (wireFrame4D->value()) {
			specialCell4D->activate();
			wireFrameOnly4D->activate();
			cb_specialCell4D(w, param);
		} else {
			wireFrameOnly4D->deactivate();
			specialCell4D->deactivate();
			toggleCell4D->deactivate();
			oppCell4D->deactivate();
		}
	} else { // This the wireframe only callback
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_appearance3DDisp(Fl_Widget *w, void *param) {
	State3DDisplayType dis3D;

	dis3D = (State3DDisplayType)((long int)param);
	state3DDisplayType = dis3D;
	switch (dis3D) {
	case directus3D:
		declUser3D->activate();
		break;
	case dimidium3D:
		// If the directus or ludus setting is a -1, reset in order to show the intersecting plane
		if (info3D.userPlaneDistance == -1.0) // Distance from the origin
			cb_reset3DSliders(reset3DSliders, (void *)0); // Sets slider to 0 (yes, it's a hack).
		declUser3D->activate();
		break;
	case ludus3D:
		if (info3D.userPlaneDistance == -1.0 || info3D.userPlaneDistance == -1.0 ) { // Distance from the origin
			cb_reset3DSliders(reset3DSliders, (void *)0); // Sets slider to 0 (central) (yes, it's a hack).
		} else {
			//info3D.userPlaneDeclension = M_PI_2;
			declUser3D->value(0.0);
			info3D.userPlaneDeclension = (1 - declUser3D->value())*M_PI_2;
		}
		setUserPlaneNormal3D(); // sets the normal from the declension
		declUser3D->deactivate();
		break;
	default:
		break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_appearance4DDisp(Fl_Widget *w, void *param) {
	// 4D can't change appearance
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_newGame2D(Fl_Widget *w, void *param) {
	int thisParam = (long int)param;
	state2DGamePlay = countingDown2D;

	if (thisParam == 1) { // To start a new game

		// Set up the countdown graphics values
		intersection2DInfo.trueStartMov = randomAngle(); // Minus Pi to Pi.
		intersection2DInfo.falseStartMov = correctAngle(intersection2DInfo.trueStartMov + randomAng(M_PI_4, 7*M_PI_4)); // add Pi/4 to 7Pi/4
		// Set up the countdown graphics values. Make the targ at least pi/4 away from the mov
		intersection2DInfo.trueStartTarg = correctAngle(intersection2DInfo.trueStartMov + randomAng(M_PI_4, 7*M_PI_4));
		intersection2DInfo.falseStartTarg = correctAngle(intersection2DInfo.trueStartTarg + randomAng(M_PI_4, 7*M_PI_4)); // Pi/4 to 7Pi/4

		randColours(currFig2D, randomColorsMov, randomColorsTarg);
		
		clock_gettime(CLOCK_REALTIME, &ltinitial);
		
		//QueryPerformanceCounter(&tinitial);
		countdownOutput2D->color(FL_YELLOW);

		time(&myTime);
		tnow = localtime(&myTime);
		sprintf(myStringTime,"New 2D game started at %02d:%02d:%02d   Format %9s%9s\n",
			tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames2D[currFig2D-MIN_2D_SIDES],
			gameDisplay2D[state2DDisplay]);
		{if (pFile) fputs(myStringTime,pFile);}
	} 
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_RadioDemoGame2D(Fl_Widget *w, void * param) {
	if ((long int)param == (int)twoDDemo) {
		if (state2DDisplay != all2D) {
			line2DDisp->activate();
			resetSlider->activate();
		}
		freeze2D->activate();
		state2DOverview = twoDDemo;
		startAndStopGame->deactivate();
	} else if ((long int)param == (int)twoDGame) {
		freeze2D->deactivate();

		startAndStopGame->activate();
		state2DOverview = twoDGame;
		state2DGamePlay = waitingForNew2D;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_newGame3D(Fl_Widget *w, void *param) {
	int thisParam = (long int)param;
	float axisFromTrueTargToTrueFig[3];
	float tempQuat[4];
	char txtout[200];
	char *sptr = txtout;
	//char disptype[20];

	state3DGamePlay = countingDown3D;

	// Set up the countdown graphics values
	// First, the start position of the target (I.e. the position at which is starts the game (and remains in the game)
	info3DTarg.trueStartAngle = randomAngle(); // angle -pi to pi.
	randomVec3D(info3DTarg.trueStartAxis); // random Axis
	// Truestartquat gets from the canonical position to the start position of the target.
	createQuatFor3DRotation(info3DTarg.trueStartAxis,info3DTarg.trueStartAngle,info3DTarg.trueStartQuat);

	// Now create the false start position (i.e. the position from which the target approaches the true start during the countdown.)
	// The false start angle is a displacement from the true start angle.
	info3DTarg.falseStartAngle = correctAngle(randomAng(M_PI_4, 7*M_PI_4)); // angle pi/4 to 7pi/4.
	// The false start axis is the axis about which the target rotates from the false start position to the true start position
	randomVec3D(info3DTarg.falseStartAxis); // random Axis
	//createQuatFor3DRotation(info3DTarg.falseStartAxis,info3DTarg.falseStartAngle,info3DTarg.falseStartQuat);

	// Now, in order to count down the target, at any point in time we multiply by true start quat which gets to the true start position,
	// then by a proportion of the false start quat, the proportion getting less as the time counts down
	// Construct the proportion of the false start quat by using the false start axis and an angle of (false start angle)*time/countdownTime.
	// The above calculation gives the first false start quat


	// Now For the figure:

	// First calculate the true start of the figure, we take the true start of the target and rotate a random amount away from it.
	info3D.initialAngularDifference = correctAngle(randomAng(M_PI_4, 7*M_PI_4));//the angle that we need to calculate the score at the end.
	randomVec3D(axisFromTrueTargToTrueFig);
	// Create a quaternion that rotates from the true start of the target to the true start of the figure.
	// Step 1. Tempquat will be used to rotate away from truestarttarg.
	createQuatFor3DRotation(axisFromTrueTargToTrueFig,info3D.initialAngularDifference,tempQuat);
	// Step 2, now create a quat to get to the 
	quatMult(tempQuat,info3DTarg.trueStartQuat,info3DFig.trueStartQuat);
	// Next line is the original error.
	//createQuatFor3DRotation(axisFromTrueTargToTrueFig,info3D.initialAngularDifference,info3DFig.trueStartQuat);


	// Now to find the false start of the figure: rotate a random angle away from its true start.
	info3DFig.falseStartAngle = correctAngle(randomAng(M_PI_4, 7*M_PI_4));
	randomVec3D(info3DFig.falseStartAxis);
	// Create tempquat which rotates from the true start position to the false start position
	//createQuatFor3DRotation(info3DFig.falseStartAxis,info3DFig.falseStartAngle,info3DFig.falseStartQuat);

	// Now, in order to count down the figure, at any point in time we multiply by true start quat which gets to the true start position,
	// then by a proportion of the false start quat, the proportion getting less as the time counts down
	// Construct the proportion of the false start quat by using the false start axis and an angle of (false start angle)*time/countdownTime.
	// The above calculation gives the first false start quat

	// Now set up the pointers to the random colours for counting down
	info3DFig.randomColors = randomColorsMov;
	info3DTarg.randomColors = randomColorsTarg;
	randColours(figp[currFig3D]->numFaces, randomColorsMov, randomColorsTarg);

	// Now calculate, for the figure, how to get from its false start (position 1) to the true start (position 2)
	// The quaternion that does this is q2 * q1(inv).
	// Calculate this and put the answer in tempQuat.
	// quatMultPQInverse(info3DFig.trueStartQuat, info3DFig.falseStartQuat, tempQuat);
	
	clock_gettime(CLOCK_REALTIME, &ltinitial);

	//QueryPerformanceCounter(&tinitial);
	countdownOutput3D->color(FL_YELLOW);

	//speed3D->deactivate();
	info3D.cumulativeEscape = 0.0;
	info3D.firstEscape = 1;
	time(&myTime);
	tnow = localtime(&myTime);
	sprintf(myStringTime,"New 3D game started at %02d:%02d:%02d   Format %9s%9s\n",
		tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames[currFig3D],gameDisplay3D[state3DDisplay]);
	{if (pFile) fputs(myStringTime,pFile);}


	sptr += sprintf(sptr,"Calculated Initial diff deg %7.2f\n",info3D.initialAngularDifference*M_RADIANS_TO_DEGREES);
	{if (pFile) fputs(txtout,pFile);}

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_RadioDemoGame3D(Fl_Widget *w, void * param) {
	if ((long int)param == (int)threeDDemo) {
		if (state3DDisplay != all2D) {
			line2DDisp->activate();
			resetSlider->activate();
		}
		state3DOverview = threeDDemo;
		startGame3D->deactivate();
		speed3D->activate();
		escUser3D->deactivate();
	} else if ((long int)param == (int)threeDGame) {
		startGame3D->activate();
		state3DOverview = threeDGame;
		state3DGamePlay = waitingForNew3D;
		speed3D->deactivate();
		escUser3D->activate();
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_RadioVisuals2D(Fl_Widget *w, void * param) {
	if ((long int)param == (int)all2D) {
		line2DDisp->deactivate();
		line2DDisp->value(0.0);
		intersection2DInfo.displacementLine2D = 0.0;
		resetSlider->deactivate();
	} else {
		line2DDisp->activate();
		resetSlider->activate();
	}
	state2DDisplay = (State2DDisplay)((long int)param);
	set2DFigure();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_Slider2D(Fl_Widget *w, void *param) {
	intersection2DInfo.displacementLine2D = ((Fl_Slider *)w)->value();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_reset_Slider2D(Fl_Widget *w, void *param) {
	line2DDisp->value(0.0);
	intersection2DInfo.displacementLine2D = 0.0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_Sliders3D(Fl_Widget *w, void *param) {
	float temp;
	switch( (long int)param) {
	case 0:
		// This is for distUser3D
		info3D.userPlaneDistance = distUser3D->value();
		break;
	case 1:
		// This is for declUser3D
		info3D.userPlaneDeclension = (1 - declUser3D->value())*M_PI_2;
		setUserPlaneNormal3D(); // sets the normal from the declension
		break;
	case 2:
		// Escuser3D

		temp = ESCAPEROTMIN + (escUser3D->value())*(escUser3D->value())*(ESCAPEROTMAX - ESCAPEROTMIN);
		if (temp != info3D.escapeAngle) { // The escape speed has changed
			info3D.firstEscape = 1;
		}
		info3D.escapeAngle = temp;

		break;

	default:
		break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_Sliders4D(Fl_Widget *w, void *param) {
	//float x;
	float minVal = 1.5;
	float maxVal = 8.0;
	float temp;

	switch((long int)param) {
	case 0:
		// This is for distUser4D. the distance of the user space
		info4D.userSpaceDistance = distUser4D->value();
		break;
	case 1:
		// This is for projection of 4D to 3D
		info4D.projectDist4D3D = exp(projUser4D3D->value()); // x takes value 2.01 to 148.4
		if (info4D.projectDist4D3D > 148) {
			info4D.projectDist4D3D = 1000;
		}
		break;
	case 2:
		// projection of 3d to 2d
		info4D.projectDist3D2D = exp(projUser3D2D->value()); // x takes value 2.01 to 148.4
		if (info4D.projectDist3D2D > 148) {
			info4D.projectDist3D2D = 1000;
		}
		//info4D.projectDist3D2D = 2 + 20*projUser3D2D->value();
		break;
	case 3:
		// Eye angle 4d to 3d
		//info4D.rightEyeX4D3D = eyexUser4D3D->value() - 0.5;
		break;
	case 4:
		// eye angle 3d to 2d
		info4D.rightEyeX3D2D = 0.5 - eyexUser3D2D->value();
		break;
	case 5:
		// eye angle 3d to 2d
		//info4D.foveaAngle3D2D = angleView3D->value();
		break;
	case 6:
		// eye angle 3d to 2d
		//info4D.leftRightShift = leftRightShift->value() - 0.5;
		break;
	case 7: // Key speed
		info4D.kbRotation = KBROTMIN + (keySpeed4D->value())*(keySpeed4D->value())*(KBROTMAX - KBROTMIN);
		break;
	case 8: // Escape speed
		temp = ESCAPEROTMIN + (escapeSpeed4D->value())*(escapeSpeed4D->value())*(ESCAPEROTMAX - ESCAPEROTMIN);
		if (temp != info4D.escRotation) { // The escape speed has changed
				info4D.startEscapeTime = xxxtime;
				info4D.firstEscape = 1;
		}
		info4D.escRotation = temp;
		break;
	case 9:
		keySpeed4D->value(sqrt((KBROTSTART-KBROTMIN)/(KBROTMAX-KBROTMIN)));
		info4D.kbRotation = KBROTMIN + (keySpeed4D->value())*(keySpeed4D->value())*(KBROTMAX - KBROTMIN);
		break;
	case 10:
		escapeSpeed4D->value(sqrt((ESCAPEROTSTART-ESCAPEROTMIN)/(ESCAPEROTMAX-ESCAPEROTMIN)));
		temp = ESCAPEROTMIN + (escapeSpeed4D->value())*(escapeSpeed4D->value())*(ESCAPEROTMAX - ESCAPEROTMIN);
		if (temp != info4D.escRotation) { // The escape speed has changed
				info4D.startEscapeTime = xxxtime;
				info4D.firstEscape = 1;
		}
		info4D.escRotation = temp;
		break;
	default:
		break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_reset3DSliders(Fl_Widget *w, void *param) {
	float newValue;
	switch ((long int)param) {
	case 0:
		newValue = 0.0;
		break;
	case 1:
		newValue = -1.0;
		break;
	case 2:
		newValue = 0.98 * info3D.fig->faceCentreRadius;
		break;
	default:
		break;
	}

	distUser3D->value(newValue); // The Top reset button
	info3D.userPlaneDistance = newValue; // Distance from the origin

	declUser3D->value(0.0);
	info3D.userPlaneDeclension = (1 - declUser3D->value())*M_PI_2;
	setUserPlaneNormal3D(); // sets the normal from the declension
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_reset4DSliders(Fl_Widget *w, void *param) {
	//float newValue;
	switch ((long int)param) {
	case 0:
		distUser4D->value(0.0);
		info4D.userSpaceDistance = 0.0;
		break;
	case 1:
		projUser4D3D->value(DEFAULTSLIDERPROJ4D3D);
		info4D.projectDist4D3D = exp(DEFAULTSLIDERPROJ4D3D);
		break;
	case 2:
		projUser3D2D->value(DEFAULTSLIDERPROJ3D2D);
		info4D.projectDist3D2D = exp(DEFAULTSLIDERPROJ3D2D);
		break;
	case 3:
		break;
	case 4:
		eyexUser3D2D->value(0.5 - DEFAULTEYE3D2D);
		info4D.rightEyeX3D2D = DEFAULTEYE3D2D;
		break;
	case 5:
		break;
	case 6:
		break;
	default:
		break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_RadioDemoGame4D(Fl_Widget *w, void * param) {
	if ((long int)param == (int)fourDDemo) {
		state4DOverview = fourDDemo;
		startGame4D->deactivate();
		speed4D->activate();
		keySpeed4D->deactivate();
		reset4DSliderKey->deactivate();
		escapeSpeed4D->deactivate();
		reset4DSliderEsc->deactivate();

		auto4D->deactivate();
		tgAutoSolveType->deactivate();

	} else if ((long int)param == (int)fourDGame) {
		startGame4D->activate();
		state4DOverview = fourDGame;
		state4DGamePlay = waitingForNew4D;
		speed4D->deactivate();
		keySpeed4D->activate();
		reset4DSliderKey->activate();
		escapeSpeed4D->activate();
		reset4DSliderEsc->activate();
		auto4D->activate();
		if (auto4D->value()) {
			tgAutoSolveType->activate();
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_SolveType(Fl_Widget *w, void * param) {
	info4D.solveType4D = (long int)param;
	// 1 is best, 2 is keys, 3 is rand
}

void startNew4D() {
	float randAngle1, randAngle2;
	char txtout[200];
	char *sptr = txtout;

	struct Bivector4D bvTemp;
	struct Rotor4D tempRotor;

	state4DGamePlay = countingDown4D;

	// The start position of the target is encoded in a rotor created from a random bivector and two random angles.
	randBivector4D(&bvTemp);
	randAngle1 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));
	randAngle2 = correctAngle(randomAng(M_PI_4, 7*M_PI_4)); 
	calcCompRotorFromBivAndTwoAngles (&bvTemp, randAngle1, randAngle2, &info4D.trueStartRotTarg);

	// The false start of the target. This is the position at the start of the countdown which rotates slowly into the
	// true start position. We just need a random bivector and two angles. The false start position is arrived at by
	// firstly getting to the tru start position then applyin a rotor for the false start position. As the countdown
	// proceeds the two angles reduce to zero
	randBivector4D(&info4D.falseStartBivTarg);
	info4D.falseStartTargAngle1 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));
	info4D.falseStartTargAngle2 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));

	// To get the true start of the figure, we need a random rotation applied to the true start of the target
	randBivector4D(&bvTemp);
	randAngle1 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));
	randAngle2 = correctAngle(randomAng(M_PI_4, 7*M_PI_4)); 
	calcCompRotorFromBivAndTwoAngles (&bvTemp, randAngle1, randAngle2, &tempRotor);
	// Get the true start of the figure in truestartrotfig 
	gpOfTwoComplexRotors( &tempRotor, &info4D.trueStartRotTarg, &info4D.trueStartRotFig);
	info4D.initialAngularDifference1 = randAngle1;
	info4D.initialAngularDifference2 = randAngle2;


	// Now we find a false start of the fig by getting a random bivector and two random angles
	randBivector4D(&info4D.falseStartBivFig);
	info4D.falseStartFigAngle1 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));
	info4D.falseStartFigAngle2 = correctAngle(randomAng(M_PI_4, 7*M_PI_4));

	// Now set up the pointers to the random colours for counting down
	info4DFig.randomColors = randomColorsMov;
	info4DTarg.randomColors = randomColorsTarg;
	randColours(figp[currFig4D]->numCells, randomColorsMov, randomColorsTarg);
	clock_gettime(CLOCK_REALTIME, &ltinitial);

	//QueryPerformanceCounter(&tinitial);
	countdownOutput4D->color(FL_YELLOW);

	time(&myTime);
	tnow = localtime(&myTime);
	sprintf(myStringTime,"New 4D game started at %02d:%02d:%02d   Format %9s  Ludus\n",
		tnow->tm_hour,tnow->tm_min,tnow->tm_sec,figNames[currFig4D]);
	{if (pFile) fputs(myStringTime,pFile);}

	info4D.solvangle1 = 0.0;
	info4D.solvangle2 = 0.0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_newGame4D(Fl_Widget *w, void *param) {
	//int thisParam = (int)param;
	//float randAngle1, randAngle2;
	//char txtout[200];
	//char *sptr = txtout;

	//struct Bivector4D bvTemp;
	//struct Rotor4D tempRotor;

	startNew4D();
	return;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_window(Fl_Widget* w, void*) {
  //puts("window callback called");
  ((Fl_Window *)w)->hide();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_info2D(Fl_Widget* w, void*) {
  //puts("window callback called");
  explain2DScoresWindow.show();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_info3D(Fl_Widget* w, void*) {
  //puts("window callback called");
  explain3DScoresWindow.show();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_info4D(Fl_Widget* w, void*) {
  //puts("window callback called");
  explain4DScoresWindow.show();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_infoWelcome(Fl_Widget* w, void*) {
  //puts("window callback called");
  explainWelcomeWindow.show();
}

char * putCurrentTimeAndGameChoice(int newline) {
	// Writes the current time and game state to the debug file
	char *ptr = myStringTime;
	time(&myTime);
	tnow = localtime(&myTime);
	ptr += sprintf(ptr,"%02d:%02d:%02d ",tnow->tm_hour,tnow->tm_min,tnow->tm_sec);
	switch (stateFourot) {
	case twoD:
		ptr += sprintf(ptr," 2D %s",figNames2D[currFig2D-MIN_2D_SIDES]);
		break;
	case threeD:
		ptr += sprintf(ptr," 3D %s",figNames[currFig3D]);
		break;
	case fourD:
		break;
	default:
		break;
	}
	if (newline) ptr += sprintf(ptr,"\n");
	return ptr;
	//fputs(myStringTime,pFile);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cb_tabs(Fl_Widget * w, void * param) {
	// Callback for when the user selects a new tab

	// w points to the widget, which is a fl_tabs object
	// The 'value' property of the object is a pointer to the group which is the currently selected group (i.e. the selected tab)
	// We use the user-data of the group to identify the tab that has been clicked.
	// The user data is set up at the creation of the group (i.e. in the initialisation of the program).
	Fl_Group * www;
	int userData;
	char * tempPtr;

	// The current 'value' property of the object is a pointer to the group which is the currently selected group (i.e. the selected tab)
	www = (Fl_Group *)(((Fl_Tabs*)w)->value());
	userData = (long int)(www->user_data());
	tempPtr = putCurrentTimeAndGameChoice(0); // param of zero means dont put a newline on the end
	switch ((SelectedTabs)userData) {
	case tabWelcome:
		stateFourot = twoD;
		sprintf(tempPtr," \'Welcome\' Tab Selected\n");
		break;
	case tab2D:
		stateFourot = twoD;
		sprintf(tempPtr," \'2D Game\' Tab Selected\n");
		break;
	case tab3D:
		stateFourot = threeD;
		sprintf(tempPtr," \'3D Game\' Tab Selected\n");
		break;
	case tab4D:
		stateFourot = fourD;
		sprintf(tempPtr," \'4D Game\' Tab Selected\n");
		break;
	}
	{if (pFile) fputs(myStringTime,pFile);}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Quit_CB(Fl_Widget *, void *) {
	fclose(pFile);
    exit(0);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void passivemotion(int x, int y)
{
	// The mouse just moves (without any button).
	char res[50];
	char *ptr = res;
	Mouse2DInsideOutsideCircle prevMouse = mouse2DInsideOutsideCircle;


	float thiswx = (2.0*x - W) / W;
	float thishy = (H - 2.0*y) / H;

	switch (stateFourot) {
	case twoD:
		ptr += sprintf(ptr," IN PM2D ");
		if (state2DGameDetail != justSucceeded)	setMouseInsideOutside ( thiswx, thishy);
		if (prevMouse != mouse2DInsideOutsideCircle) {
			// The mouse has just moved inside or outside
			if (state2DOverview == twoDGame) {
				if (state2DGamePlay == playing2D) {
					if (state2DGameDetail == movingMovendum) {
						if (mouse2DInsideOutsideCircle == mouseInsideCircle) {// The mouse has just moved inside the circle
							state2DGameDetail = notMovingMovendum;
						} else {// The mouse has just moved outside the circle
							thiswx = 0.0; thiswx /= thiswx; // Can't happen (can't have been moving 
						}
					} else {// The Game is in a not moving state
						if (mouse2DInsideOutsideCircle == mouseOutsideCircle) {// the mouse has just moved outside the circle
							if (left_mouse == GL_TRUE) {
								state2DGameDetail = justStartedMoving;
							}
						}
					}
				}
			}
		}
		break;
	case threeD:
		ptr += sprintf(ptr," IN PM3D ");
		setMouseInsideOutside (thiswx,thishy);
		trackbI.currentxyz[0] = intersection2DInfo.mouse3DxInitialPosition;
		trackbI.currentxyz[1] = intersection2DInfo.mouse3DyInitialPosition;
		if (left_mouse == GL_FALSE) {
			trackbI.prevxyz[0] = trackbI.currentxyz[0];
			trackbI.prevxyz[1] = trackbI.currentxyz[1];
		}
		break;
	case fourD:
		ptr += sprintf(ptr," IN PM4D ");
		mouse4D(x,y);
		break;
	default:
		break;
	}

	ptr += sprintf(ptr," xy %4d %4d\n",x,y);
	//fputs(res,pFile);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int	main(int argc, char **argv)
{
	// I don't think we need a performance frequency in Linux.
	//QueryPerformanceFrequency(&tfreq);
	//floattfreq = (float)tfreq.QuadPart;
	clock_gettime(CLOCK_REALTIME, &ltinitial);
	
	//QueryPerformanceCounter(&tinitial);

	//////////////////////////////////////////  The Window
	// create FLTK window. This is the outer window that contains everything. The opengl window is declared later.
	Fl_Window window(OUTERWINDOWWIDTH, OUTERWINDOWHEIGHT);
	window.resizable(window);
	window.callback(cb_window);
	window.label("Fourot");


	////////////////////////////////////////// The tabs
#define TABXPOSITION 0
#define TABYPOSITION 0
#define TABHEIGHT (OUTERWINDOWTOPMARGIN - TABYPOSITION)
#define TABWIDTH (OUTERWINDOWWIDTH - TABXPOSITION)

	mtabs = new Fl_Tabs(TABXPOSITION, TABYPOSITION, TABWIDTH, TABHEIGHT);
	mtabs->selection_color(FL_CYAN);
	mtabs->callback(cb_tabs);
	mtabs->begin();

	///////////////////////////////
	Fl_Group *tGroupWelcome = new Fl_Group(TABXPOSITION, TABYPOSITION+25, TABWIDTH, TABHEIGHT-20,"Welcom&e");// Tab 3
	tGroupWelcome->user_data((void *)tabWelcome);
	Fl_Multiline_Output *wmo = new Fl_Multiline_Output(TABXPOSITION+10, TABYPOSITION+40, 450, TABHEIGHT-60);
	wmo->box(FL_FLAT_BOX);
	wmo->color(FL_BACKGROUND_COLOR);
	wmo->textsize(16);
	wmo->value(welcomeInfo);
	wmo->cursor_color(FL_BACKGROUND_COLOR);
	{
		Fl_Button *o = new Fl_Button(TABXPOSITION+1100,TABYPOSITION+55,52,52); // Info button
		o->image(infoPixMap);
		o->callback(cb_infoWelcome);
	}
	{
		Fl_Output *o = new Fl_Output(TABXPOSITION+1080,TABYPOSITION+110,110,25);
		o->value("General Info");
		o->box(FL_FLAT_BOX);
		o->color(FL_BACKGROUND_COLOR);
	}
	{
		Fl_Output *o = new Fl_Output(TABXPOSITION+500,TABYPOSITION+110,110,25);
		o->value(webAddress);
		o->box(FL_FLAT_BOX);
		o->color(FL_BACKGROUND_COLOR);
		o->textcolor(FL_RED);
	}
	{
		Fl_Check_Button *o = new Fl_Check_Button(720,TABYPOSITION+60, 120,25);
		o->value(0);
		o->label("Write Results to File");
		o->tooltip(ttWriteFile);
		o->callback(cb_writefile,(void*)0);
	}

	tGroupWelcome->end();
	Fl_Group::current()->resizable(tGroupWelcome);

	///////////////////////////////
	Fl_Group *tGroup2D = new Fl_Group(TABXPOSITION, TABYPOSITION+25, TABWIDTH, TABHEIGHT-20,"&2D Game");// 2D game tab
	tGroup2D->user_data((void *)tab2D);

	countdownOutput2D = new Fl_Output(TABXPOSITION+10,TABYPOSITION+35,105,100);
	countdownOutput2D->box(FL_FLAT_BOX);
	countdownOutput2D->textsize(100);
	countdownOutput2D->color(FL_BACKGROUND_COLOR);

	// Group to toggle 2D figure
	Fl_Group *tgFigureChoice = new Fl_Group(TABXPOSITION+130, TABYPOSITION+35, 290, TABHEIGHT-60);
	tgFigureChoice->box(FL_THIN_UP_FRAME);
	tgFigureChoice->tooltip(tt2ChooseFigure);
	fig2D_3 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+40, 70, 25, "Triangle");
	fig2D_3->callback(cb_setfig2D,(void*)3);
	fig2D_4 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+70, 70, 25, "Square");
	fig2D_4->callback(cb_setfig2D,(void*)4);
	fig2D_5 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+100, 70, 25, "Pentagon");
	fig2D_5->callback(cb_setfig2D,(void*)5);
	fig2D_6 = new Fl_Radio_Round_Button(TABXPOSITION+210, TABYPOSITION+40, 70, 25, "Hexagon");
	fig2D_6->callback(cb_setfig2D,(void*)6);
	fig2D_7 = new Fl_Radio_Round_Button(TABXPOSITION+210, TABYPOSITION+70, 70, 25, "Heptagon");
	fig2D_7->callback(cb_setfig2D,(void*)7);
	fig2D_8 = new Fl_Radio_Round_Button(TABXPOSITION+210, TABYPOSITION+100, 70, 25, "Octagon");
	fig2D_8->callback(cb_setfig2D,(void*)8);
	tgFigureChoice->end();
	toggleFig2D = new Fl_Button(TABXPOSITION+310, TABYPOSITION+65, 100, 30,"Toggle Figure");
	toggleFig2D->tooltip(tt2ChooseFigure);
	toggleFig2D->callback(cb_togglefig2D,(void*)0);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Group to select visuals
	Fl_Group *tgRadioVisuals = new Fl_Group(TABXPOSITION+550, TABYPOSITION+35, 85, TABHEIGHT-60);
	tgRadioVisuals->tooltip(ttDirectus);
	tgRadioVisuals->box(FL_THIN_UP_FRAME);
	ros = new Fl_Radio_Round_Button(TABXPOSITION+550, TABYPOSITION+40, 80, 25, "Directus");
	ros->value(1);
	ros->callback(cb_RadioVisuals2D,(void *)all2D);

	rop = new Fl_Radio_Round_Button(TABXPOSITION+550, TABYPOSITION+70, 80, 25, "Dimidium");
	rop->callback(cb_RadioVisuals2D,(void *)mov2DTarg1D); 

	Fl_Radio_Round_Button * rol = new Fl_Radio_Round_Button(TABXPOSITION+550, TABYPOSITION+100, 70, 25, "Ludus");
	rol->callback(cb_RadioVisuals2D,(void *)all1D); 

	tgRadioVisuals->end();

	line2DDisp = new Fl_Slider(TABXPOSITION+640, TABYPOSITION+35, 30, 90, "     Distance"); // The slider on 2D game.
	line2DDisp->callback(cb_Slider2D);
	line2DDisp->minimum(INTERSECTION2DLINERADIUS*0.96);
	line2DDisp->maximum(-INTERSECTION2DLINERADIUS*0.96);
	line2DDisp->value(0.0);
	line2DDisp->tooltip(tt2Intersect);
	line2DDisp->deactivate();

	resetSlider = new Fl_Button(TABXPOSITION+675, TABYPOSITION+65, 65, 30, "<- Reset");
	resetSlider->deactivate();
	resetSlider->tooltip(tt2Reset);
	resetSlider->callback(cb_reset_Slider2D);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Group to select demo or game type
	Fl_Group *tgRadioDemGame = new Fl_Group(TABXPOSITION+850, TABYPOSITION+35, 75, TABHEIGHT-85);
	tgRadioDemGame->box(FL_THIN_UP_FRAME);
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+850, TABYPOSITION+40, 70, 25, "Demo");
		o->callback(cb_RadioDemoGame2D,(void *)twoDDemo);
		o->value(1);
		o->tooltip(tt2Demo);
	}
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+850, TABYPOSITION+70, 70, 25, "Game");
		o->callback(cb_RadioDemoGame2D,(void *)twoDGame);
		o->tooltip(tt2Game);
	}
	tgRadioDemGame->end();

	startAndStopGame = new Fl_Button(TABXPOSITION + 850, TABYPOSITION+100, 75, 45, "Start New\nGame");
	startAndStopGame->deactivate();
	startAndStopGame->callback(cb_newGame2D, (void *)1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

	freeze2D = new Fl_Button(TABXPOSITION+975, TABYPOSITION+70, 70, 25, "Freeze");
	freeze2D->callback(cb_freezer2D,(void *)0);
	freeze2D->tooltip(tt2Freeze);

	info2D = new Fl_Button(TABXPOSITION+1100,TABYPOSITION+55,52,52); // Info button
	Fl_Pixmap *pxm = new Fl_Pixmap(infoImage);
	info2D->image(infoPixMap);
	info2D->callback(cb_info2D);
	Fl_Output *infolabel = new Fl_Output(TABXPOSITION+1080,TABYPOSITION+110,110,25);
	infolabel->value("2D Game Info");
	infolabel->box(FL_FLAT_BOX);
	infolabel->color(FL_BACKGROUND_COLOR);

	tGroup2D->end();
	Fl_Group::current()->resizable(tGroup2D);

	///////////////////////////////

	Fl_Group *tGroup3D = new Fl_Group(0, TABYPOSITION+25, TABWIDTH, TABHEIGHT-20,"&3D Game");//
	tGroup3D->user_data((void *)tab3D);

	countdownOutput3D = new Fl_Output(10,TABYPOSITION+35,105,100);
	countdownOutput3D->box(FL_FLAT_BOX);
	countdownOutput3D->textsize(100);
	countdownOutput3D->color(FL_BACKGROUND_COLOR);

	// Group to toggle 3D figure
	Fl_Group *tgFigureChoice3D = new Fl_Group(130, TABYPOSITION+35, 240, TABHEIGHT-45);
	tgFigureChoice3D->tooltip(tt3ChooseFigure);
	tgFigureChoice3D->box(FL_THIN_UP_FRAME);
	fig3D_tetra = new Fl_Radio_Round_Button(130, TABYPOSITION+40, 110, 25, "Tetrahedron");
	fig3D_tetra->callback(cb_setfig3D,(void*)tetra);
	fig3D_cube = new Fl_Radio_Round_Button(130, TABYPOSITION+70, 110, 25, "Cube");
	fig3D_cube->callback(cb_setfig3D,(void*)cube);
	fig3D_octa = new Fl_Radio_Round_Button(130, TABYPOSITION+100, 110, 25, "Octahedron");
	fig3D_octa->callback(cb_setfig3D,(void*)octa);
	fig3D_dodeca = new Fl_Radio_Round_Button(240, TABYPOSITION+40, 110, 25, "Dodecahedron");
	fig3D_dodeca->callback(cb_setfig3D,(void*)dodeca);
	fig3D_icosa = new Fl_Radio_Round_Button(240, TABYPOSITION+70, 110, 25, "Icosahedron");
	fig3D_icosa->callback(cb_setfig3D,(void*)icosa);
	tgFigureChoice3D->end();

	toggleFig3D = new Fl_Button(TABXPOSITION+240, TABYPOSITION+100, 100, 30,"Toggle Figure");
	toggleFig3D->tooltip(tt3ChooseFigure);
	toggleFig3D->callback(cb_togglefig3D,(void*)0);

	////////////////////////////////////////////
	Fl_Group *appearance3DDisp = new Fl_Group(400, TABYPOSITION+35,90,TABHEIGHT-45);
	appearance3DDisp->box(FL_THIN_UP_FRAME);
	appearance3DDisp->tooltip(ttDirectus);
	appearance3DDirectus = new Fl_Radio_Round_Button(400, TABYPOSITION+40, 87, 25, "Directus");
	appearance3DDirectus->callback(cb_appearance3DDisp,(void *)directus3D);
	appearance3DDimidium = new Fl_Radio_Round_Button(400, TABYPOSITION+70, 87, 25, "Dimidium");
	appearance3DDimidium->callback(cb_appearance3DDisp,(void *)dimidium3D);
	appearance3DLudus = new Fl_Radio_Round_Button(400, TABYPOSITION+100, 87, 25, "Ludus");
	appearance3DLudus->callback(cb_appearance3DDisp,(void *)ludus3D);
	appearance3DDirectus->value(1);
	appearance3DDisp->end();
	///////////////////////////////////////

	distUser3D = new Fl_Slider(510, TABYPOSITION+35, 30, 90, "  Distance"); // The slider on 2D game.
	distUser3D->tooltip(tt3Intersect);
	distUser3D->callback(cb_Sliders3D,(void *)0);
	distUser3D->minimum(1.0); // The top of the slider
	distUser3D->maximum(-1.0); // -1 at the bottom, 1 at the top (of the slider)
	distUser3D->value(-1.0);

	declUser3D = new Fl_Slider(565, TABYPOSITION+35, 30, 90, "  Angle"); // The slider on 2D game.
	declUser3D->tooltip(tt3Angle);
	declUser3D->callback(cb_Sliders3D, (void *)1);
	declUser3D->minimum(1.0);
	declUser3D->maximum(0.0); // Zero at the bottom, 1 at the top (of the slider)
	declUser3D->value(0.0);

	reset3DSliders = new Fl_Button(600, TABYPOSITION+95, 65, 30, "<- Reset");
	reset3DSliders->tooltip(tt3BaseReset);
	reset3DSliders->callback(cb_reset3DSliders, (void *)1);
	reset3DSliders = new Fl_Button(600, TABYPOSITION+65, 65, 30, "<- Reset");
	reset3DSliders->tooltip(tt3MidReset);
	reset3DSliders->callback(cb_reset3DSliders, (void *)0);
	reset3DSliders = new Fl_Button(600, TABYPOSITION+35, 110, 30, "Dimidium Reset");
	reset3DSliders->tooltip(tt3DimReset);
	reset3DSliders->callback(cb_reset3DSliders, (void *)2);

	numbers3D = new Fl_Check_Button(690,TABYPOSITION+75, 75,30,"Numbers");
	numbers3D->tooltip(tt3Numbers);
	numbers3D->value(0);

	dbg3DButton = new Fl_Check_Button(690,TABYPOSITION+100, 70,25,"Debug");
	dbg3DButton->tooltip(ttDbgWindow);
	dbg3DButton->callback(cb_dbg4D,(void *)0);

	escUser3D = new Fl_Slider(790, TABYPOSITION+35, 30, 90, "Esc Speed");
	escUser3D->tooltip(tt3EscSpeed);
	escUser3D->callback(cb_Sliders3D, (void *)2);
	escUser3D->minimum(1.0);
	escUser3D->maximum(0.0); // Zero at the bottom, 1 at the top (of the slider)
	escUser3D->value(0.0);
	escUser3D->deactivate();

	///////////////////////////////
	speed3D = new Fl_Group(970, TABYPOSITION+35,90,TABHEIGHT-45);
	speed3D->box(FL_THIN_UP_FRAME);
	speed3D->tooltip(tt3Speed);
	speed3DNormal = new Fl_Radio_Round_Button(970, TABYPOSITION+30, 80, 25, "Normal");
	speed3DNormal->callback(cb_speed3D,(void *)demoIsMoving);
	speed3DSlow = new Fl_Radio_Round_Button(970, TABYPOSITION+52, 80, 25, "Slow");
	speed3DSlow->callback(cb_speed3D,(void *)demoIsSlow);
	speed3DSlower = new Fl_Radio_Round_Button(970, TABYPOSITION+74, 80, 25, "Slower");
	speed3DSlower->callback(cb_speed3D,(void *)demoIsSlower);
	freeze3D = new Fl_Radio_Round_Button(970, TABYPOSITION+96, 80, 25, "Freeze");
	freeze3D->callback(cb_speed3D,(void *)demoIsStopped);
	speed3DNormal->value(1);
	Fl_Output *infoSpeed3D = new Fl_Output(970,TABYPOSITION+117,80,22);
	infoSpeed3D->value("Speed");
	infoSpeed3D->box(FL_FLAT_BOX);
	infoSpeed3D->color(FL_BACKGROUND_COLOR);
	infoSpeed3D->textcolor(FL_BLUE);//FL_DARK_BLUE
	speed3D->end();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Group to select demo or game type in 3D
	Fl_Group *tgRadioDemGame3D = new Fl_Group(TABXPOSITION+850, TABYPOSITION+35, 75, TABHEIGHT-85);
	tgRadioDemGame3D->box(FL_THIN_UP_FRAME);
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+850, TABYPOSITION+40, 70, 25, "Demo");
		o->tooltip(tt3Demo);
		o->callback(cb_RadioDemoGame3D,(void *)threeDDemo);
		o->value(1);
	}
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+850, TABYPOSITION+70, 70, 25, "Game");
		o->callback(cb_RadioDemoGame3D,(void *)threeDGame);
		o->tooltip(tt3Game);
	}
	tgRadioDemGame3D->end();

	startGame3D = new Fl_Button(TABXPOSITION + 850, TABYPOSITION+100, 75, 45, "Start New\nGame");
	startGame3D->deactivate();
	startGame3D->callback(cb_newGame3D, (void *)1);
	///////////////////////////////////////////////


	info3DBtn = new Fl_Button(TABXPOSITION+1100,TABYPOSITION+55,52,52); // Info button
	info3DBtn->image(infoPixMap);
	info3DBtn->callback(cb_info3D);
	Fl_Output *info3Dlabel = new Fl_Output(TABXPOSITION+1080,TABYPOSITION+110,110,25);
	info3Dlabel->value("3D Game Info");
	info3Dlabel->box(FL_FLAT_BOX);
	info3Dlabel->color(FL_BACKGROUND_COLOR);

	tGroup3D->end();
	Fl_Group::current()->resizable(tGroup3D);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	Fl_Group *tGroup4D = new Fl_Group(TABXPOSITION, TABYPOSITION+25, TABWIDTH, TABHEIGHT-20,"&4D Game");// 2D game tab
	tGroup4D->user_data((void *)tab4D);
	Fl_Group::current()->resizable(tGroup4D);

	countdownOutput4D = new Fl_Output(10,TABYPOSITION+35,105,100);
	countdownOutput4D->box(FL_FLAT_BOX);
	countdownOutput4D->textsize(100);
	countdownOutput4D->color(FL_BACKGROUND_COLOR);

	// Group to toggle 4D figure
	Fl_Group *tgFigureChoice4D = new Fl_Group(TABXPOSITION+130, TABYPOSITION+35, 270, TABHEIGHT-60);
	tgFigureChoice4D->tooltip(tt4ChooseFigure);
	tgFigureChoice4D->box(FL_THIN_UP_FRAME);
	fig4D_5 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+40, 70, 25, "5 Cell");
	fig4D_5->callback(cb_setfig4D,(void*)5);
	fig4D_8 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+70, 70, 25, "8 Cell");
	fig4D_8->callback(cb_setfig4D,(void*)6);
	fig4D_16 = new Fl_Radio_Round_Button(TABXPOSITION+130, TABYPOSITION+100, 70, 25, "16 Cell");
	fig4D_16->callback(cb_setfig4D,(void*)7);
	fig4D_24 = new Fl_Radio_Round_Button(TABXPOSITION+200, TABYPOSITION+40, 70, 25, "24 Cell");
	fig4D_24->callback(cb_setfig4D,(void*)8);
	fig4D_120 = new Fl_Radio_Round_Button(TABXPOSITION+200, TABYPOSITION+70, 70, 25, "120 Cell");
	fig4D_120->callback(cb_setfig4D,(void*)9);
	fig4D_600 = new Fl_Radio_Round_Button(TABXPOSITION+200, TABYPOSITION+100, 70, 25, "600 Cell");
	fig4D_600->callback(cb_setfig4D,(void*)10);
	tgFigureChoice4D->end();
	toggleFig4D = new Fl_Button(TABXPOSITION+290, TABYPOSITION+65, 100, 30,"Toggle Figure");
	toggleFig4D->callback(cb_togglefig4D,(void*)0);
	toggleFig4D->tooltip(tt4ChooseFigure);



	////////////////////////////////////////////
	Fl_Group *appearance4DDisp = new Fl_Group(410, TABYPOSITION+35,90,TABHEIGHT-60);
	appearance4DDisp->tooltip(tt4Display);
	appearance4DDisp->box(FL_THIN_UP_FRAME);
	appearance4DDirectus = new Fl_Radio_Round_Button(410, TABYPOSITION+40, 87, 25, "Directus");
	appearance4DDirectus->callback(cb_appearance4DDisp,(void *)directus4D);
	appearance4DDirectus->deactivate();

	appearance4DDimidium = new Fl_Radio_Round_Button(410, TABYPOSITION+70, 87, 25, "Dimidium");
	appearance4DDimidium->callback(cb_appearance4DDisp,(void *)dimidium4D);
	appearance4DDimidium->deactivate();

	appearance4DLudus = new Fl_Radio_Round_Button(410, TABYPOSITION+100, 87, 25, "Ludus");
	appearance4DLudus->callback(cb_appearance4DDisp,(void *)ludus4D);
	appearance4DLudus->value(1);
	appearance4DDisp->end();


	distUser4D = new Fl_Slider(510, TABYPOSITION+35, 22, 90,"I4"); // Distance of the user space from the origin.
	distUser4D->tooltip(tt4Intersect);
	distUser4D->callback(cb_Sliders4D,(void *)0);
	distUser4D->minimum(1.0); // The top of the slider
	distUser4D->maximum(-1.0); // -1 at the bottom, 1 at the top (of the slider)
	distUser4D->value(0.0);
	reset4DSliders = new Fl_Button(510, TABYPOSITION+125, 22, 18,"I4");
	reset4DSliders->tooltip(tt4IntersectReset);
	reset4DSliders->callback(cb_reset4DSliders, (void *)0);

	projUser4D3D = new Fl_Slider(532, TABYPOSITION+35, 22, 90, "P4"); // Projection of 4D to 3D.
	projUser4D3D->tooltip(tt4Perspective4);
	projUser4D3D->callback(cb_Sliders4D, (void *)1);
	projUser4D3D->minimum(5.0);
	projUser4D3D->maximum(0.2); // MIN at the bottom, MAX at the top (of the slider)
	projUser4D3D->value(DEFAULTSLIDERPROJ4D3D);
	reset4DSliders = new Fl_Button(532, TABYPOSITION+125, 22, 18, "P4");
	reset4DSliders->tooltip(tt4Perspective4Reset);
	reset4DSliders->callback(cb_reset4DSliders, (void *)1);

	projUser3D2D = new Fl_Slider(554, TABYPOSITION+35, 22, 90, "P3"); // Projection of 3D to 2D.
	projUser3D2D->tooltip(tt4Perspective3);
	projUser3D2D->callback(cb_Sliders4D, (void *)2);
	projUser3D2D->minimum(5.0);
	projUser3D2D->maximum(0.7); // Zero at the bottom, 1 at the top (of the slider)
	projUser3D2D->value(DEFAULTSLIDERPROJ3D2D);
	reset4DSliders = new Fl_Button(554, TABYPOSITION+125, 22, 18, "P3");
	reset4DSliders->tooltip(tt4Perspective3Reset);
	reset4DSliders->callback(cb_reset4DSliders, (void *)2);

	eyexUser3D2D = new Fl_Slider(576, TABYPOSITION+35, 22, 90, "E3"); // The position of the eye when projecting 4D to 3D.
	eyexUser3D2D->tooltip(tt4eyes3);
	eyexUser3D2D->callback(cb_Sliders4D, (void *)4);
	eyexUser3D2D->minimum(1.0);
	eyexUser3D2D->maximum(0.0); // Zero at the bottom, 1 at the top (of the slider)
	eyexUser3D2D->value(0.5 - DEFAULTEYE3D2D);
	info4D.rightEyeX3D2D = DEFAULTEYE3D2D;
	eyexUser3D2D->deactivate();
	reset4DSlidersE3 = new Fl_Button(576, TABYPOSITION+125, 22, 18, "E3");
	reset4DSlidersE3->tooltip(tt4IntersectReset);
	reset4DSlidersE3->callback(cb_reset4DSliders, (void *)4);
	reset4DSlidersE3->tooltip(tt4eyes3Reset);
	reset4DSlidersE3->deactivate();


	numbers4D = new Fl_Check_Button(620,TABYPOSITION+30, 90,25,"Numbers");
	numbers4D->value(0);
	numbers4D->tooltip(tt4Numbers);
	stereo4D = new Fl_Check_Button(720,TABYPOSITION+30, 70,25,"Stereo");
	stereo4D->value(0);
	stereo4D->tooltip(tt4Stereo);
	stereo4D->callback(cb_stereo,(void*)0);
	auto4D = new Fl_Check_Button(720,TABYPOSITION+52, 80,25,"AutoSolve");
	auto4D->value(0);
	auto4D->callback(cb_auto4D,(void*)0);
	auto4D->tooltip(tt4AutoSolve);
	auto4D->deactivate();
	wireFrame4D = new Fl_Check_Button(620,TABYPOSITION+52, 50,25,"Wire");
	wireFrame4D->value(0);
	wireFrame4D->tooltip(tt4Wire);
	wireFrame4D->callback(cb_wireFrame4D,(void *)0);
	wireFrameOnly4D = new Fl_Check_Button(670,TABYPOSITION+52, 50,25,"Only");
	wireFrameOnly4D->value(0);
	wireFrameOnly4D->tooltip(tt4Only);
	wireFrameOnly4D->callback(cb_wireFrame4D,(void *)1);
	specialCell4D = new Fl_Check_Button(620,TABYPOSITION+74, 90,25,"Special Cell");
	specialCell4D->value(0);
	specialCell4D->tooltip(tt4SpecialCell);
	specialCell4D->callback(cb_specialCell4D,(void *)0);
	toggleCell4D = new Fl_Button(620,TABYPOSITION+96, 90,25,"Change Cell");
	toggleCell4D->callback(cb_toggleCell4D, (void *)1);
	toggleCell4D->tooltip(tt4CellNo);
	oppCell4D = new Fl_Check_Button(620,TABYPOSITION+118, 90,25,"Opp. Cell");
	oppCell4D->value(0);
	oppCell4D->tooltip(tt4CellOpp);
	oppCell4D->callback(cb_oppCell4D, (void *)0);

	dbg4DButton = new Fl_Check_Button(720,TABYPOSITION+118, 70,25,"Debug");
	dbg4DButton->callback(cb_dbg4D,(void *)0);
	dbg4DButton->tooltip(ttDbgWindow);


	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Group to select method of autosolving in 4D
	tgAutoSolveType = new Fl_Group(720, TABYPOSITION+72, 75, TABHEIGHT-100);
	tgAutoSolveType->box(FL_THIN_UP_FRAME);
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(720, TABYPOSITION+72, 70, 20, "Best");
		o->callback(cb_SolveType,(void *)1);
		o->value(1);
		o->tooltip(tt4AutoBest);
		info4D.solveType4D = 1;
	}
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(720, TABYPOSITION+86, 70, 20, "Keys");
		o->callback(cb_SolveType,(void *)2);
		o->tooltip(tt4AutoKey);
	}
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(720, TABYPOSITION+100, 70, 20, "Rand");
		o->callback(cb_SolveType,(void *)3);
		o->tooltip(tt4AutoRand);
	}
	tgAutoSolveType->end();
	tgAutoSolveType->deactivate();

	wireFrameOnly4D->deactivate();
	specialCell4D->deactivate();
	toggleCell4D->deactivate();
	oppCell4D->deactivate();

	keySpeed4D = new Fl_Slider(810, TABYPOSITION+35, 22, 90, "Ky"); // The position of the eye when projecting 4D to 3D.
	keySpeed4D->callback(cb_Sliders4D, (void *)7); //
	keySpeed4D->minimum(1.0);
	keySpeed4D->maximum(0.0); // Zero at the bottom, 1 at the top (of the slider)
	keySpeed4D->value(sqrt((KBROTSTART-KBROTMIN)/(KBROTMAX-KBROTMIN)));
	keySpeed4D->deactivate();
	keySpeed4D->tooltip(tt4KeySlider);
	reset4DSliderKey = new Fl_Button(808, TABYPOSITION+125, 30, 18, "Key");
	reset4DSliderKey->deactivate();
	reset4DSliderKey->tooltip(tt4KeySliderReset);
	reset4DSliderKey->callback(cb_Sliders4D, (void *)9);

	escapeSpeed4D = new Fl_Slider(840, TABYPOSITION+35, 22, 90, "Es"); // The position of the eye when projecting 4D to 3D.
	escapeSpeed4D->callback(cb_Sliders4D, (void *)8); //
	escapeSpeed4D->minimum(1.0);
	escapeSpeed4D->maximum(0.0); // Zero at the bottom, 1 at the top (of the slider)
	escapeSpeed4D->value(sqrt((ESCAPEROTSTART-ESCAPEROTMIN)/(ESCAPEROTMAX-ESCAPEROTMIN)));
	escapeSpeed4D->deactivate();
	escapeSpeed4D->tooltip(tt4EscapeSpeed);
	reset4DSliderEsc = new Fl_Button(838, TABYPOSITION+125, 30, 18, "Esc");
	reset4DSliderEsc->deactivate();
	reset4DSliderEsc->tooltip(tt4EscapeReset);
	reset4DSliderEsc->callback(cb_Sliders4D, (void *)10);



	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Group to select demo or game type in 4D
	Fl_Group *tgRadioDemGame4D = new Fl_Group(TABXPOSITION+880, TABYPOSITION+35, 75, TABHEIGHT-85);
	tgRadioDemGame4D->box(FL_THIN_UP_FRAME);
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+880, TABYPOSITION+40, 70, 25, "Demo");
		o->callback(cb_RadioDemoGame4D,(void *)fourDDemo);
		o->tooltip(tt4Demo);
		o->value(1);
	}
	{
		Fl_Radio_Round_Button * o = new Fl_Radio_Round_Button(TABXPOSITION+880, TABYPOSITION+70, 70, 25, "Game");
		o->callback(cb_RadioDemoGame4D,(void *)fourDGame);
		o->tooltip(tt4Game);
	}
	tgRadioDemGame4D->end();

	startGame4D = new Fl_Button(TABXPOSITION + 880, TABYPOSITION+100, 75, 45, "Start New\nGame");
	startGame4D->deactivate();
	startGame4D->callback(cb_newGame4D, (void *)1);
	///////////////////////////////////////////////

	///////////////////////////////
	speed4D = new Fl_Group(970, TABYPOSITION+35,90,TABHEIGHT-45);
	speed4D->tooltip(tt4Speed);
	speed4D->box(FL_THIN_UP_FRAME);
	speed4DNormal = new Fl_Radio_Round_Button(970, TABYPOSITION+30, 80, 25, "Normal");
	speed4DNormal->callback(cb_speed4D,(void *)demoIsMoving);
	speed4DSlow = new Fl_Radio_Round_Button(970, TABYPOSITION+52, 80, 25, "Slow");
	speed4DSlow->callback(cb_speed4D,(void *)demoIsSlow);
	speed4DSlower = new Fl_Radio_Round_Button(970, TABYPOSITION+74, 80, 25, "Slower");
	speed4DSlower->callback(cb_speed4D,(void *)demoIsSlower);
	freeze4D = new Fl_Radio_Round_Button(970, TABYPOSITION+96, 80, 25, "Freeze");
	freeze4D->callback(cb_speed4D,(void *)demoIsStopped);
	speed4DNormal->value(1);

	Fl_Output *infoSpeed4D = new Fl_Output(970,TABYPOSITION+117,80,22);
	infoSpeed4D->value("Speed");
	infoSpeed4D->box(FL_FLAT_BOX);
	infoSpeed4D->color(FL_BACKGROUND_COLOR);
	infoSpeed4D->textcolor(FL_BLUE);//FL_DARK_BLUE
	speed4D->end();
	///////////////////////////////////////


	info4DBtn = new Fl_Button(TABXPOSITION+1100,TABYPOSITION+55,52,52); // Info button
	info4DBtn->image(infoPixMap);
	info4DBtn->callback(cb_info4D);
	Fl_Output *info4Dlabel = new Fl_Output(TABXPOSITION+1080,TABYPOSITION+110,110,25);
	info4Dlabel->value("4D Game Info");
	info4Dlabel->box(FL_FLAT_BOX);
	info4Dlabel->color(FL_BACKGROUND_COLOR);

	mtabs->end();

	////////////////////////////////////////////////// End of buttons
	////////////////////////////////////////////////// End of buttons
	////////////////////////////////////////////////// End of buttons

	stateFourot = twoD;
	state3DOverview = threeDDemo;
	state2DOverview = twoDDemo;
	state4DOverview = fourDDemo;

	window.show(argc,argv); // glut will die unless parent window visible
	window.begin(); // this will cause Glut window to be a child ?????
	glutInitWindowSize(OGLWINDOWWIDTH, OGLWINDOWHEIGHT);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_RGB | GLUT_DOUBLE | GLUT_MULTISAMPLE);
	glutInitWindowPosition(0,OUTERWINDOWTOPMARGIN);
	glutCreateWindow("glpuzzle");
	window.end();
	window.resizable(glut_window);
	init();

	// Nb Togglefig will increase the value of currfig2d and currfig3d
	cb_togglefig2D((Fl_Widget *)0,(void *)0); // This sets the 2D fig in the radio buttons.
	cb_togglefig3D((Fl_Widget *)0,(void *)0);
	cb_togglefig4D((Fl_Widget *)0,(void *)0);


	explainWelcomeWindow.resizable(explainWelcomeWindow);
	explainWelcomeWindow.label("General Information");
	explainWelcomeWindow.begin();
	txtbufGen = new Fl_Text_Buffer();
	txtbufGen->text(generalInfo);
	explnGen = new Fl_Text_Display(10,10,480,780);
	explnGen->buffer(txtbufGen);
	explnGen->textsize(16);
	explnGen->wrap_mode(4,0);
	explainWelcomeWindow.hide();
	explainWelcomeWindow.end();

	explain2DScoresWindow.resizable(explain2DScoresWindow);
	explain2DScoresWindow.label("Scores in 2D Fourot");
	explain2DScoresWindow.begin();
	txtbuf2D = new Fl_Text_Buffer();
	txtbuf2D->text(scoresFor2DInfo);
	expln2DT = new Fl_Text_Display(10,10,480,780);
	expln2DT->buffer(txtbuf2D);
	expln2DT->textsize(16);
	expln2DT->wrap_mode(4,0);
	explain2DScoresWindow.hide();
	explain2DScoresWindow.end();

	explain3DScoresWindow.resizable(explain3DScoresWindow);
	explain3DScoresWindow.label("Scores in 3D Fourot");
	explain3DScoresWindow.begin();
	txtbuf3D = new Fl_Text_Buffer();
	txtbuf3D->text(scoresFor3DInfo);
	expln3DT = new Fl_Text_Display(10,10,480,780);
	expln3DT->buffer(txtbuf3D);
	expln3DT->textsize(16);
	expln3DT->wrap_mode(4,0);
	explain3DScoresWindow.hide();
	explain3DScoresWindow.end();


	explain4DScoresWindow.resizable(explain4DScoresWindow);
	explain4DScoresWindow.label("Scores in 4D Fourot");
	explain4DScoresWindow.begin();
	txtbuf4D = new Fl_Text_Buffer();
	txtbuf4D->text(scoresFor4DInfo);
	expln4DT = new Fl_Text_Display(10,10,480,780);
	expln4DT->buffer(txtbuf4D);
	expln4DT->textsize(16);
	expln4DT->wrap_mode(4,0);
	explain4DScoresWindow.hide();
	explain4DScoresWindow.end();


	//dbg4Dwindow.resizable(mainWindow);
	dbg4Dwindow.resizable(dbg4Dwindow);
	dbg4Dwindow.label("Debug Information");
	dbg4Dwindow.begin();

	mousePosnLabel = new Fl_Output(40,10,100,25); // Subtract 40 from y position
	mousePosnLabel->value("Mouse Position");
	mousePosnLabel->color(FL_BACKGROUND_COLOR);
	mousePosnLabel->cursor_color(FL_BACKGROUND_COLOR);
	mousePosnLabel->box(FL_NO_BOX);

	mousePosnVector[0] = new Fl_Output(50,40,75,25,"e1");
	mousePosnVector[1] = new Fl_Output(50,70,75,25,"e2");
	mousePosnVector[2] = new Fl_Output(50,100,75,25,"e3");

	escapeRotLabel = new Fl_Output(40,160,100,25); // Subtract 40 from y position
	escapeRotLabel->value("Escape Angle");
	escapeRotLabel->color(FL_BACKGROUND_COLOR);
	escapeRotLabel->textcolor(FL_RED);
	escapeRotLabel->box(FL_NO_BOX);
	escAngleOut = new Fl_Output(50,190,75,25,"");

	figPositionLabel = new Fl_Output(170,10,140,25);
	figPositionLabel->value("Figure Position");
	figPositionLabel->color(FL_BACKGROUND_COLOR);
	figPositionLabel->box(FL_NO_BOX);

	figPosition[0] = new Fl_Output(190,40,75,25,"Scalar");
	figPosition[1] = new Fl_Output(190,70,75,25,"e12");
	figPosition[2] = new Fl_Output(190,100,75,25,"e13");
	figPosition[3] = new Fl_Output(190,130,75,25,"e14");
	figPosition[4] = new Fl_Output(190,160,75,25,"e23");
	figPosition[5] = new Fl_Output(190,190,75,25,"e24");
	figPosition[6] = new Fl_Output(190,220,75,25,"e34");
	figPosition[7] = new Fl_Output(190,250,75,25,"e1234");

	targPositionLabel = new Fl_Output(305,10,140,25);
	targPositionLabel->value("Target Position");
	targPositionLabel->color(FL_BACKGROUND_COLOR);
	targPositionLabel->box(FL_NO_BOX);

	targPosition[0] = new Fl_Output(330,40,75,25,"Scalar");
	targPosition[1] = new Fl_Output(330,70,75,25,"e12");
	targPosition[2] = new Fl_Output(330,100,75,25,"e13");
	targPosition[3] = new Fl_Output(330,130,75,25,"e14");
	targPosition[4] = new Fl_Output(330,160,75,25,"e23");
	targPosition[5] = new Fl_Output(330,190,75,25,"e24");
	targPosition[6] = new Fl_Output(330,220,75,25,"e34");
	targPosition[7] = new Fl_Output(330,250,75,25,"e1234");

	mouseKBMoveLabel = new Fl_Output(10,290,140,25);
	mouseKBMoveLabel->value("Figure Movement");
	mouseKBMoveLabel->color(FL_BACKGROUND_COLOR);
	mouseKBMoveLabel->box(FL_NO_BOX);

	mouseKBMove[0] = new Fl_Output(50,320,75,25,"Angle");
	mouseKBMove[1] = new Fl_Output(50,350,75,25,"e12");
	mouseKBMove[2] = new Fl_Output(50,380,75,25,"e13");
	mouseKBMove[3] = new Fl_Output(50,410,75,25,"e14");
	mouseKBMove[4] = new Fl_Output(50,440,75,25,"e23");
	mouseKBMove[5] = new Fl_Output(50,470,75,25,"e24");
	mouseKBMove[6] = new Fl_Output(50,500,75,25,"e34");

	soln1PlaneLabel = new Fl_Output(160,290,140,25);
	soln1PlaneLabel->value("Solution Plane 1");
	soln1PlaneLabel->color(FL_BACKGROUND_COLOR);
	soln1PlaneLabel->box(FL_NO_BOX);

	soln1Plane[0] = new Fl_Output(190,320,75,25,"Angle");
	soln1Plane[1] = new Fl_Output(190,350,75,25,"e12");
	soln1Plane[2] = new Fl_Output(190,380,75,25,"e13");
	soln1Plane[3] = new Fl_Output(190,410,75,25,"e14");
	soln1Plane[4] = new Fl_Output(190,440,75,25,"e23");
	soln1Plane[5] = new Fl_Output(190,470,75,25,"e24");
	soln1Plane[6] = new Fl_Output(190,500,75,25,"e34");

	soln2PlaneLabel = new Fl_Output(300,290,140,25);
	soln2PlaneLabel->value("Solution Plane 2");
	soln2PlaneLabel->color(FL_BACKGROUND_COLOR);
	soln2PlaneLabel->box(FL_NO_BOX);

	soln2Plane[0] = new Fl_Output(330,320,75,25,"Angle");
	soln2Plane[1] = new Fl_Output(330,350,75,25,"e12");
	soln2Plane[2] = new Fl_Output(330,380,75,25,"e13");
	soln2Plane[3] = new Fl_Output(330,410,75,25,"e14");
	soln2Plane[4] = new Fl_Output(330,440,75,25,"e23");
	soln2Plane[5] = new Fl_Output(330,470,75,25,"e24");
	soln2Plane[6] = new Fl_Output(330,500,75,25,"e34");

	resultsLabel= new Fl_Output(  50, 535, 140, 25);
	resultsLabel->value("RESULTS");
	resultsLabel->color(FL_BACKGROUND_COLOR);
	resultsLabel->box(FL_NO_BOX);

	solnAngle1 = new   Fl_Output(150,570,75,25,"Initial solution angle 1:");
	solnAngle2 = new   Fl_Output(250,570,75,25,"2:"); 

	cumulEscAng = new Fl_Output(200,605,75,25,"Target escape travelled");
	cumulEscAng->labelcolor(FL_RED);
	solnAngleSum = new Fl_Output(320,605,75,25,"Sum:");

	allowedError = new Fl_Output(130,640,75,25,"Allowed Error");
	reqdForSoln = new Fl_Output(350,640,75,25,"Reqd For Solution");

	timeTaken = new Fl_Output(100,675,75,25,"Time Taken");
	angSpeed = new  Fl_Output(350,675,75,25,"Speed (degrees/second)");
	angSpeed->textsize(18);
	angDistTrav = new  Fl_Output(180,710,75,25,"Angular distance travelled");
	accurac = new  Fl_Output(350,710,75,25,"Accuracy");
	accurac->textsize(18);
	finalScore = new Fl_Output(230,745,100,25,"Final score (speed x accuracy)");
	finalScore->textsize(18);

	dbg4Dwindow.hide();
	dbg4Dwindow.end();


	glGetIntegerv(GL_VIEWPORT, viewport); // This returns the viewport into viewport

	glutReshapeFunc(Reshape);
	glutDisplayFunc(newredraw);
	glutKeyboardFunc(keyboard);
	glutMotionFunc(motion);
	glutPassiveMotionFunc(passivemotion);
	glutMouseFunc(mouse);
	glutVisibilityFunc(visibility);
	glutIdleFunc(newAnimate);

	////////////////////////////////////////////// The right click menu
	// menu Not used but kept for reference in case it's needed
	// The code below will correctly produce a right click menu in the opengl screen, but it isn't used.
	//glutCreateMenu(menu1);
	//glutAddMenuEntry((char *)"Solve", 1);
	//glutAddMenuEntry((char *)"Reset", 2);
	//glutAddMenuEntry((char *)"Quit", 3);
	//glutAddMenuEntry((char *)"Tetrahedron", 4);
	//glutAddMenuEntry((char *)"Cube", 5);
	//glutAddMenuEntry((char *)"Octahedron", 6);
	//glutAddMenuEntry((char *)"Dodecahedron", 7);
	//glutAddMenuEntry((char *)"Icosahedron", 8);
	//glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMainLoop();
	return 0;             /* ANSI C requires main to return int. */
}

//#endif // added for fltk's distribution

//
// End of "$Id: glpuzzle.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $".

// End of fourot.
